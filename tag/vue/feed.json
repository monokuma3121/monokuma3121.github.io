{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucli • All posts by \"vue\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2022/10/16/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "url": "https://eucli.top/2022/10/16/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "title": "尚品汇前台项目实战",
            "date_published": "2022-10-16T11:59:45.000Z",
            "content_html": "<h1 id=\"vue-cli-脚手架初始化项目-vue-create-app\"><a class=\"markdownIt-Anchor\" href=\"#vue-cli-脚手架初始化项目-vue-create-app\">#</a> vue-cli 脚手架初始化项目 vue create app</h1>\n<h1 id=\"npm-常用的安装命令\"><a class=\"markdownIt-Anchor\" href=\"#npm-常用的安装命令\">#</a> npm 常用的安装命令</h1>\n<ul>\n<li>npm i 就是 npm install 简写</li>\n<li>npm i xxx -D 就是 npm i xxx --save-dev</li>\n<li>npm i xxx -S 就是 npm i xxx --save</li>\n<li>npm i xxx -g 就是 全局安装</li>\n<li>npm i xxx 就是 npm i xxx --save</li>\n</ul>\n<h1 id=\"初始项目中文件夹的作用\"><a class=\"markdownIt-Anchor\" href=\"#初始项目中文件夹的作用\">#</a> 初始项目中文件夹的作用</h1>\n<ul>\n<li>\n<p>node_modules 项目依赖文件夹</p>\n</li>\n<li>\n<p>public 一般放置一些静态资源 (图片)，需要注意放在 public 文件夹中的资源 webpack 打包的时候会原封不动打包到 dist 文件夹中</p>\n</li>\n<li>\n<p>src (程序员源代码文件夹):</p>\n<ul>\n<li>\n<p>assets 文件夹：一般也是放置一些静态资源 (一般放置多个组件共用的静态资源)，需要注意，放置在 assets 文件夹里的静态资源在 webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</p>\n</li>\n<li>\n<p>components 文件夹：一般放置的是非路由组件或者一些常用的全局组件</p>\n</li>\n<li>\n<p>pages|views 文件夹：放置路由组件</p>\n</li>\n<li>\n<p>router 文件夹：配置路由的地方</p>\n</li>\n<li>\n<p>APP.vue: 整个项目中唯一的根组件</p>\n</li>\n<li>\n<p>main.js: 程序入口文件，也是整个程序当中最先执行的文件</p>\n</li>\n</ul>\n</li>\n<li>\n<p>babel.config.js: 配置文件 (babel 相关)</p>\n</li>\n<li>\n<p>package.json: 记录项目的信息</p>\n</li>\n<li>\n<p>package-lock.json: 缓存性文件</p>\n</li>\n</ul>\n<h1 id=\"一些问题\"><a class=\"markdownIt-Anchor\" href=\"#一些问题\">#</a> 一些问题</h1>\n<ul>\n<li>\n<p>vue 创建项目，报错 No Babel config file detected for…<br>\n 解决办法：在 package.json 文件中增加 “requireConfigureFile”: false</p>\n</li>\n<li>\n<p>【vue 报错】The template root requires exactly one element<br>\n 解决：因为 vue2 的模版中只有能一个根节点，所以在 template 中插入第二个元素就会报错</p>\n</li>\n</ul>\n<h1 id=\"一些配置\"><a class=\"markdownIt-Anchor\" href=\"#一些配置\">#</a> 一些配置：</h1>\n<ol>\n<li>\n<p>项目运行起来的时候，让浏览器可以自动打开<br>\n办法：在 package.json 中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;serve&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-service serve --open&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>eslint 校验功能关闭<br>\n在 vue.config.js 中写 <code>lintOnSave: false</code></p>\n</li>\n<li>\n<p>src 文件夹简写方式，配置别名 @代表 src 文件夹<br>\n jscpnfig.json 文件中：(省略)</p>\n</li>\n</ol>\n<h1 id=\"项目的路由分析-vue-router\"><a class=\"markdownIt-Anchor\" href=\"#项目的路由分析-vue-router\">#</a> 项目的路由分析 vue-router</h1>\n<ul>\n<li>\n<p>前端所谓路由：KV 键值对</p>\n<ul>\n<li>key:URL (浏览器地址栏中的路径 path)</li>\n<li>value: 相应的路由组件 (component，注意后面没有 s)</li>\n<li>注意：项目的上中下结构</li>\n</ul>\n</li>\n<li>\n<p>路由组件：</p>\n<ul>\n<li>Home 首页路由组件、Search 路由组件、login 登录路由组件、Refister 注册路由组件</li>\n</ul>\n</li>\n<li>\n<p>非路由组件：Header、Footer (在首页，搜索页)，但是在 登录 | 注册 页没有</p>\n</li>\n</ul>\n<h1 id=\"在开发项目的时候\"><a class=\"markdownIt-Anchor\" href=\"#在开发项目的时候\">#</a> 在开发项目的时候：</h1>\n<ol>\n<li>书写静态页面 (HTML+CSS)</li>\n<li>拆分组件</li>\n<li>获取服务器的数据动态展示</li>\n<li>完成相应的动态业务逻辑</li>\n</ol>\n<ul>\n<li>注意：\n<ol>\n<li>创建组件的时候，组件结构 + 组件的样式 + 图片资源</li>\n<li>咱们的项目采用 less 样式，但浏览器不识别 less 样式，需要通过 less、less-loader 进行处理<br>\n <code>npm i less less-loader@7</code>  安装 5 版本会报错<br>\n别忘了 style 标签中写 <code>&lt;style scoped lang=&quot;less&quot;&gt;</code></li>\n<li>header 样式太高记得把 App.vue 里面的样式清除</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"使用组件的步骤非路由组件\"><a class=\"markdownIt-Anchor\" href=\"#使用组件的步骤非路由组件\">#</a> 使用组件的步骤 (非路由组件)</h1>\n<ol>\n<li>创建或定义组件</li>\n<li>引入：import 组件名 from ‘组件地址’ 在需要使用这个组件的地方引入</li>\n<li>注册 (vue3 使用 setup 语法糖不用注册)：components 中注册引入的组件名 (简写形式，KV 一致省略 V)</li>\n<li>使用：以标签形式在 APP.vue 中使用</li>\n</ol>\n<h1 id=\"引入的-css-错乱记得引入默认的样式\"><a class=\"markdownIt-Anchor\" href=\"#引入的-css-错乱记得引入默认的样式\">#</a> 引入的 css 错乱，记得引入默认的样式</h1>\n<p>public 文件夹中，创建一个清除默认样式的 css 文件，再在 public 下的 index.html 中引入这个 css 用 link</p>\n<h1 id=\"路由的搭建-vue-router\"><a class=\"markdownIt-Anchor\" href=\"#路由的搭建-vue-router\">#</a> 路由的搭建 vue-router</h1>\n<p>(ps. 创建项目的时候直接把路由选上就不用搭建了 doge)</p>\n<p>安装：  <code>npm i vue-router@3</code>  因为 vue2 不用 3 版本会报错</p>\n<p>在上面的分析中，路由组件应该有四个： Home、Search、Login、Refister<br>\ncomponents 文件夹：经常放非路由组件或共用全局组件<br>\n pages|views 文件夹：经常放置路由组件</p>\n<h1 id=\"配置路由\"><a class=\"markdownIt-Anchor\" href=\"#配置路由\">#</a> 配置路由</h1>\n<p>项目当中配置的路由一般都放在 router 文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//配置路由的地方</span><br><span class=\"line\">import Vue from &quot;vue&quot;;</span><br><span class=\"line\">import VueRouter from &quot;vue-router&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用插件</span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\">//引入路由组件</span><br><span class=\"line\">import Home from &#x27;@/pages/Home&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//配置路由</span><br><span class=\"line\">export default new VueRouter(&#123;</span><br><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    path:&quot;/&quot;,            //默认展示只写 /</span><br><span class=\"line\">    component:Home       //注意是 component 一定不要加 s</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>除此之外，还需要在 main.js 中引入路由</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>引入路由</span><br><span class=\"line\">import router from <span class=\"string\">&#x27;@/router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>注册路由</span><br><span class=\"line\">router</span><br><span class=\"line\">&#125;).<span class=\"variable\">$mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>还有一件事，路由组件还需要出口 在需要展示路由组件的地方写  <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n<p>ps. 配置路由的时候，可以给路由添加路由元信息 meta，路由需要配置对象，它的 key 不能瞎写</p>\n<h1 id=\"路由组件与非路由组件的异同\"><a class=\"markdownIt-Anchor\" href=\"#路由组件与非路由组件的异同\">#</a> 路由组件与非路由组件的异同：</h1>\n<ol>\n<li>路由组件一般放置在 pages|views 文件夹中，非路由组件一般放置在 components 文件夹中</li>\n<li>路由组件一般需要在 router 文件夹注册 (使用即为组件的名字，非路由组件在使用的时候还要占位)，非路由组件一般都是以标签的形式使用</li>\n<li>注册完路由，不管是路由组件还是非路由组件身上都有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</li>\n</ol>\n<h1 id=\"route和router-属性\"><a class=\"markdownIt-Anchor\" href=\"#route和router-属性\">#</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</h1>\n<ul>\n<li><code>$route</code> ：一般获取路由信息 (路径、query、params 等等)</li>\n<li><code>$router</code> ：一般进行编程式导航进行路由跳转 (push|replace)</li>\n</ul>\n<h1 id=\"路由的跳转\"><a class=\"markdownIt-Anchor\" href=\"#路由的跳转\">#</a> 路由的跳转</h1>\n<p>路由的跳转有两种形式：</p>\n<ul>\n<li>声明式导航 router-link 注意要有 to 属性</li>\n<li>编程式导航 push|replace：声明式导航能做的，编程式导航都能做。而且编程式导航除了可以进行路由跳转，还可以做一些其他的业务逻辑</li>\n</ul>\n<h1 id=\"footer-组件的显示与隐藏\"><a class=\"markdownIt-Anchor\" href=\"#footer-组件的显示与隐藏\">#</a> Footer 组件的显示与隐藏</h1>\n<p>Footer 组件：在 Home、Search 显示，在 Login、Register 时隐藏</p>\n<h1 id=\"路由传参\"><a class=\"markdownIt-Anchor\" href=\"#路由传参\">#</a> 路由传参</h1>\n<ol>\n<li>路由的跳转有几种方式？<br>\n比如：A-&gt;B</li>\n</ol>\n<ul>\n<li>声明式导航：route-link, 务必要有 to 属性</li>\n<li>编程式导航：利用的是组件实例的 $router.push|replace 方法 可以写自己的业务</li>\n</ul>\n<ol start=\"2\">\n<li>路由传参，参数有几种写法？</li>\n</ol>\n<ul>\n<li>params 参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位</li>\n<li>query 参数：不属于路径当中的一部分，类似于 ajax 中的 queryString/home?k=v&amp;kv=, 不需要占位</li>\n<li>三种方式：</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种：字符串形式</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(<span class=\"string\">&quot;/search/&quot;</span> + <span class=\"keyword\">this</span>.keyword + <span class=\"string\">&quot;?k=&quot;</span> + <span class=\"keyword\">this</span>.keyword.toUpperCase());</span><br><span class=\"line\"><span class=\"comment\">//第二种：模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(`/search/$&#123;<span class=\"keyword\">this</span>.keyword&#125;?k=$&#123;<span class=\"keyword\">this</span>.keyword.toUpperCase()&#125;`);</span><br><span class=\"line\"><span class=\"comment\">//第三种：对象写法   这种写法需要给路由起名字name   ☆最常用</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">name:<span class=\"string\">&quot;search&quot;</span>,</span><br><span class=\"line\">params:&#123;keyword:<span class=\"keyword\">this</span>.keyword&#125;,</span><br><span class=\"line\">query:&#123;k:<span class=\"keyword\">this</span>.keyword.toUpperCase()&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"路由传参相关面试题\"><a class=\"markdownIt-Anchor\" href=\"#路由传参相关面试题\">#</a> 路由传参相关面试题</h1>\n<ol>\n<li>\n<p>路由传递参数 (对象写法) path 是否可以结合 params 参数一起使用？<br>\n不可以。<br>\n路由跳转传参的时候，对象写法可以是 name，path 形式，但 path 写法不能与 params 使用</p>\n</li>\n<li>\n<p>如何指定 params 参数可传可不传？<br>\n比如：配置路由的时候，params 参数占位了，但是路由跳转的时候没有传递 params，那么路径会出现问题  <code>http://localhost:8080/#/?k=1123</code>  没有 search<br>\n 解决：params 参数后面加？ <code>path:&quot;/search/:keyword?&quot;</code></p>\n</li>\n<li>\n<p>params 参数可以传递也可以不传递，但如果传递的是空串如何解决？<br>\n// 答：用 undefined 解决  <code>params:&#123;keyword:''||undefined&#125;</code></p>\n</li>\n<li>\n<p>路由组件能不能传递 props 数据？<br>\n可以，有三种方式 (但是实际开发中并不怎么用)</p>\n</li>\n</ol>\n<ul>\n<li>方式一：布尔值写法，只能传递 params 参数<br>\n <code>props:true</code></li>\n<li>方式二：对象写法 额外给路由组件传递一些 props<br>\n <code>props:&#123;a:1,b:2&#125;</code></li>\n<li>方式三 (最常用)：函数写法，可以把 params、query 参数，通过 props 传递给路由组件</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:(<span class=\"variable\">$route</span>) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    keyword: <span class=\"variable\">$route</span><span class=\"selector-class\">.params</span><span class=\"selector-class\">.keyword</span>,</span><br><span class=\"line\">    k: <span class=\"variable\">$route</span><span class=\"selector-class\">.query</span>,k</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>编程式导航跳转到当前路由 (参数不变)，多次执行会抛出错误警告？</li>\n</ol>\n<ul>\n<li>声明式导航没有这类问题，因为 vue-router 底层已经处理好了</li>\n<li>怎么解决：通过给 push 方法传递相应的成功、失败的回调，可以捕获到当前的错误，可以解决，只是治标不治本，将来在别的组件组件中使用 push|replace 还会有类似错误</li>\n</ul>\n<p>this：当前组件实例 (search)<br>\n this.$router 属性：属性值 vueRouter 类的一个实例<br>\n push：vueRouter 类的一个实例</p>\n<h1 id=\"call-与-apply-区别\"><a class=\"markdownIt-Anchor\" href=\"#call-与-apply-区别\">#</a> call 与 apply 区别</h1>\n<ul>\n<li>相同点：都可以调用函数一次，都可以修改函数的上下文一次</li>\n<li>不同点：call 传递参数用逗号隔开，apply 方法执行传递数组</li>\n</ul>\n<h1 id=\"home-模块的组件拆分\"><a class=\"markdownIt-Anchor\" href=\"#home-模块的组件拆分\">#</a> Home 模块的组件拆分</h1>\n<ol>\n<li>先把静态页面完成</li>\n<li>拆分出静态组件</li>\n<li>获取服务器的数据展示</li>\n<li>动态业务</li>\n</ol>\n<h1 id=\"三级联动组件完成\"><a class=\"markdownIt-Anchor\" href=\"#三级联动组件完成\">#</a> 三级联动组件完成</h1>\n<p>由于三级联动组件在 Home、Search、Detail 模块中都使用了，所有注册为一个全局组件 (在 main.js 注册):<br>\n// 先引入。三级联动的组件–全局组件<br>\n <code>import TypeNav from '@/pages/Home/TypeNav'</code> <br>\n// 再注册。第一个参数：全局组件的名字 第二个参数：哪一个组件<br>\n <code>Vue.component(TypeNav.name,TypeNav)</code></p>\n<ul>\n<li>好处：只需要注册一次，就可以在项目任意的地方使用，且使用的时候不需要引入</li>\n</ul>\n<h1 id=\"完成其余静态组件\"><a class=\"markdownIt-Anchor\" href=\"#完成其余静态组件\">#</a> 完成其余静态组件</h1>\n<p>HTML + CSS + 图片资源</p>\n<h1 id=\"postman-测试接口\"><a class=\"markdownIt-Anchor\" href=\"#postman-测试接口\">#</a> POSTMAN 测试接口</h1>\n<ul>\n<li>刚刚经过 postman 工具测试，接口是没有问题的</li>\n<li>如果服务器返回的数据 code 字段为 200，代表服务器返回数据成功</li>\n<li>整个项目，接口前缀都有 /api 字样</li>\n</ul>\n<h1 id=\"axios-二次封装\"><a class=\"markdownIt-Anchor\" href=\"#axios-二次封装\">#</a> axios 二次封装</h1>\n<p>(发请求的几种方式：XMLHttpRequest、fetch、JQ、axios)</p>\n<ol>\n<li>为什么需要进行二次封装 axios<br>\n 为了使用请求拦截器、响应拦截器：</li>\n</ol>\n<ul>\n<li>请求拦截器：可以在发请求之前可以处理一些业务</li>\n<li>响应拦截器：当服务器数据返回以后，可以处理一些事情</li>\n</ul>\n<ol start=\"2\">\n<li>在项目中创建 api 文件夹关于 axios (在 src 文件夹目录下建立)</li>\n</ol>\n<ul>\n<li>接口当中：路径都带有 /api</li>\n<li>baseURL:&quot;/api&quot; 基础路径，发请求的时候，路径当中会出现 api，不用自己手写了</li>\n</ul>\n<ol start=\"3\">\n<li>如果 axios 基础不好，可以参考 <a href=\"https://www.axios-http.cn/docs/intro\">axios 中文文档</a></li>\n</ol>\n<h1 id=\"接口统一管理\"><a class=\"markdownIt-Anchor\" href=\"#接口统一管理\">#</a> 接口统一管理</h1>\n<ul>\n<li>\n<p>项目很小：完全可以在组件的生命周期函数中发请求</p>\n</li>\n<li>\n<p>项目大：axios.get (‘xxx’)</p>\n<ol>\n<li>跨域问题<br>\n什么是跨域：协议、域名、端口号不同请求，称之为跨域<br>\n<a href=\"http://localhost:8080/#/home\"> http://localhost:8080/#/home</a> 前端项目本地服务器<br>\n<a href=\"http://gmall-h5-api.atguigu.cn\"> http://gmall-h5-api.atguigu.cn</a> 后台服务器</li>\n</ol>\n<ul>\n<li>\n<p>解决跨域的几个方法：<br>\nJSONP、CROS、代理</p>\n</li>\n<li>\n<p>webpack 代理配置</p>\n</li>\n</ul>\n<figure class=\"highlight nestedtext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">devServer</span><span class=\"punctuation\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"attribute\">proxy</span><span class=\"punctuation\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attribute\">&#x27;/api&#x27;</span><span class=\"punctuation\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">      <span class=\"attribute\">target</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;http://gmall-h5-api.atguigu.cn&#x27;,</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"nprogress-进度条的使用\"><a class=\"markdownIt-Anchor\" href=\"#nprogress-进度条的使用\">#</a> nprogress 进度条的使用</h1>\n<p>可以在 reques.js 文件中使用</p>\n<ol>\n<li>\n<p>先引入：<br>\n// 引入进度条<br>\n <code>import nprogress from &quot;nprogress&quot;;</code> <br>\n// 引入进度条样式<br>\n <code>import &quot;nprogress/nprogress.css&quot;</code></p>\n</li>\n<li>\n<p>start：进度条开始 done：进度条结束<br>\n在请求拦截器中用 <code>1nprogress.start()</code> ，在响应拦截器中用 <code>nprogress.done()</code></p>\n</li>\n</ol>\n<h1 id=\"vuex-状态管理库\"><a class=\"markdownIt-Anchor\" href=\"#vuex-状态管理库\">#</a> vuex 状态管理库</h1>\n<ol>\n<li>vuex 是什么？<br>\n官方提供的一个插件，是一个状态管理库，集中式管理项目中组件共用的数据。</li>\n</ol>\n<ul>\n<li>\n<p>state：仓库存储数据的地方</p>\n</li>\n<li>\n<p>mutations：修改 state 的唯一手段</p>\n</li>\n<li>\n<p>actions：处理 action，可以书写自己的业务逻辑，也可以处理异步。不能修改 state<br>\n <code>actions是服务员，mutations是厨师，只有mutations能做菜(修改state)</code></p>\n<p>getters：理解为计算属性，用于简化仓库数据，让组件获取仓库的数据更加方便<br>\n modules</p>\n<p>vue2 要安装 vuex@3</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>vuex 基本使用<br>\n因为 vuex 是 Vue 框架中的一个插件，要使用插件需要引入 vue 与 vuex 并 <code>Vue.use()</code>  一下，<br>\n然后暴露出去一个  <code>export default new Vuex.Store(&#123;&#125;)</code> <br>\n 别忘了在 main.js 入口文件里引入、注册一下仓库</p>\n</li>\n<li>\n<p>vuex 模块式开发</p>\n</li>\n</ol>\n<ul>\n<li>如果项目过大，组件过多，接口也很多，数据也很多，可以让 vuex 实现模块式开发</li>\n<li>每个模块都有自己的一个小仓库，到时候引入到 store 的入口文件中，然后在 export default 中用 modules 对小仓库进行管理</li>\n</ul>\n<h1 id=\"vue-模块开发总结\"><a class=\"markdownIt-Anchor\" href=\"#vue-模块开发总结\">#</a> vue 模块开发总结！！！！！！！</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>写请求。【api 文件夹的 <code>index.js</code>  中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】<br>\n(Actions,Mutations,State) 参考 vuex 工作流程图</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取仓库数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"一-写静态页面-静态组件拆分\"><a class=\"markdownIt-Anchor\" href=\"#一-写静态页面-静态组件拆分\">#</a> 一、写静态页面 + 静态组件拆分</h2>\n<h2 id=\"二-写请求\"><a class=\"markdownIt-Anchor\" href=\"#二-写请求\">#</a> 二、写请求。</h2>\n<p>在 api 文件夹的 <code>index.js</code>  中</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> const reqGetSearchInfo = <span class=\"function\"><span class=\"params\">(params)</span> =&gt;</span> requests(&#123;</span><br><span class=\"line\">  url:<span class=\"string\">&#x27;/list&#x27;</span>,</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  data:params</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-发请求api\"><a class=\"markdownIt-Anchor\" href=\"#三-发请求api\">#</a> 三、发请求 (API)</h2>\n<p>在组件的 <code>mounted()</code>  中发请求。即组件挂载完毕，通知 Vuex 向服务器发请求。</p>\n<ul>\n<li>dispatch：dispatch 是分发的意思，是 store 身上的一个 API，它包含两个参数，第一个是动作也可以说是一个操作，你通过这个操作调用 actions 里面的一个函数。第二个就是你要传递的参数 (也可以不传。但如果传递，到时候至少要传一个空对象，不然会报错)</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中</span></span><br><span class=\"line\">this.<span class=\"variable\">$store</span><span class=\"selector-class\">.dispatch</span>(<span class=\"string\">&#x27;getGoodInfo&#x27;</span>,this.<span class=\"variable\">$route</span><span class=\"selector-class\">.params</span><span class=\"selector-class\">.skuid</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>要发请求，需要在对应的小仓库中先引入之前封装好的 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<h2 id=\"四-vuex三连环\"><a class=\"markdownIt-Anchor\" href=\"#四-vuex三连环\">#</a> 四、vuex (三连环)</h2>\n<ol>\n<li>第一环：Actions。<br>\n因为你使用了 dispatch，而其中的 <code>getGoodInfo</code>  未定义，因此要在 store 仓库中对应小仓库的 actions 中定义 getGoodInfo。通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据。<br>\n即 actions 中必须要有一个 getGoodInfo 方法来与之对应。其中参数 <code>&#123;commit&#125;</code>  是对 commit 的解构。commit 也是一个函数，有两个操作，第一个也是一个动作，第二个就是参数，通过 commit 将这次请求交给 mutations。<br>\n这第二个参数是在用户派发 actions 的时候，第二个参数传递过来的，至少要传一个空对象</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const actions = &#123;</span><br><span class=\"line\">async <span class=\"built_in\">getGoodInfo</span>(&#123;commit&#125;,skuId)&#123;</span><br><span class=\"line\">let result =await <span class=\"built_in\">reqGoodsInfo</span>(skuId)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(result.code==<span class=\"number\">200</span>)</span></span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">commit</span><span class=\"params\">(<span class=\"string\">&#x27;GetGOODINFO&#x27;</span>,result.data)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第二环：Mutations</li>\n</ol>\n<ul>\n<li>修改处理数据的唯一地方</li>\n<li>在 mutations 中真正的处理数据并且渲染数据</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">GetGOODINFO(<span class=\"keyword\">state</span>, categoryList) &#123;</span><br><span class=\"line\"><span class=\"keyword\">state</span>.categoryList = categoryList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>getters:<br>\n 就是相当于计算属性，对 state 中的数据进行简化操作，就比如当你的数据很复杂时你需要简单的拿到数据。举个例子你的数据是：AAA.BBB.CCC.DDD.data, 那么你就可以使用计算属性将其变为 data.</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skuInfo(<span class=\"keyword\">state</span>) &#123;</span><br><span class=\"line\">  return <span class=\"keyword\">state</span>.goodInfo.skuInfo || &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 getters，在组件中获取仓库数据时用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code>  不用 <code>&#123; mapState &#125;</code>  了</li>\n</ul>\n<ol start=\"3\">\n<li>第三环：State<br>\nstate 中数据默认初始值别瞎写，服务器返回对象，起始值是对象；服务器返回数组，起始值是数组。根据接口的返回值去初始化</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span> = &#123;</span><br><span class=\"line\">  categoryList: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"五-组件获取仓库数据\"><a class=\"markdownIt-Anchor\" href=\"#五-组件获取仓库数据\">#</a> 五、组件获取仓库数据</h2>\n<p>回到实例 (组件) 中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br>\n 并把数据映射为组件实例身上的一个属性：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">...mapState(&#123;</span><br><span class=\"line\">categoryList: (<span class=\"keyword\">state</span>) =&gt; categoryList</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果用了 getters，辅助函数要用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//mapGetters里面的写法：传递的数组，因为getters计算没有划分模块</span></span><br><span class=\"line\">..<span class=\"selector-class\">.mapGetters</span>(<span class=\"selector-attr\">[<span class=\"string\">&#x27;skuInfo&#x27;</span>]</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"六-动态展示数据\"><a class=\"markdownIt-Anchor\" href=\"#六-动态展示数据\">#</a> 六、动态展示数据</h2>\n<p>根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成</p>\n<p>————————————————————————————————————————————————</p>\n<p>栗子：</p>\n<h1 id=\"完成-typenav-三级联动展示数据业务\"><a class=\"markdownIt-Anchor\" href=\"#完成-typenav-三级联动展示数据业务\">#</a> 完成 TypeNav 三级联动展示数据业务</h1>\n<p>把全局组件放到 components 文件夹中<br>\n axios 二次封装、vuex 准备工作。。。</p>\n<ol>\n<li>在三级联动组件中写 <code>mounted()</code> ，组件挂载完毕，通知 Vuex 向服务器发请求：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;categoryList&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>因为 &quot;categoryList&quot; 未定义，去 store 仓库中的 home 模块的小仓库中，在 actions 中定义 categoryList。<br>\n通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据<br>\n要发请求，需要引入之前封装 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//通过API里面的接口函数调用，向服务器发请求，获取服务器的数据</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">categoryList</span>(<span class=\"params\">&#123; commit &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//解构commit，提交mutations</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">reqCategoryList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//第一个参数是起名，第二个参数是提交的数据</span></span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;GETCATEGORYLIST&quot;</span>, result.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>请求成功，commit 提交给 mutations 修改 state。在此之前 state 需要写一个初始值。</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span> = &#123;</span><br><span class=\"line\">categoryList: [],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">CATEGORYLIST(<span class=\"keyword\">state</span>, categoryList) &#123;</span><br><span class=\"line\"><span class=\"keyword\">state</span>.categoryList = categoryList;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Home 组件中已经有了相应的数组，需要在三级联动 TypeNav 组件中拿到相应的数据进行展示<br>\n回到 TypeNav 组件中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br>\n 并把数据映射为组件实例身上的一个属性：</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">...mapState(&#123;</span><br><span class=\"line\">categoryList: (<span class=\"keyword\">state</span>) =&gt; <span class=\"keyword\">state</span>.home.categoryList,</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>展示数据。<br>\n先看数据的结构，发现一层套一层有三层，是一个三级菜单<br>\n在 template 把多余的结构去掉，只留一个，用 v-for 生成： <code>v-for=&quot;(c1, index) in categoryList&quot; :key=&quot;c1.categoryId&quot;</code> <br>\n 并把之前写死的数据替换： <code>c1.categoryName</code></li>\n</ol>\n<h1 id=\"完成一级分类动态添加背景颜色\"><a class=\"markdownIt-Anchor\" href=\"#完成一级分类动态添加背景颜色\">#</a> 完成一级分类动态添加背景颜色</h1>\n<ul>\n<li>方法一：采用样式完成 (可以的)</li>\n<li>方法二：通过 JS 完成</li>\n</ul>\n<h1 id=\"通过-js-控制二三级商品分类的显示与隐藏\"><a class=\"markdownIt-Anchor\" href=\"#通过-js-控制二三级商品分类的显示与隐藏\">#</a> 通过 JS 控制二三级商品分类的显示与隐藏</h1>\n<p>最开始的时候，是通过 CSS 样式的 display：block|none 显示与隐藏二三级商品分类</p>\n<h1 id=\"函数的防抖与节流\"><a class=\"markdownIt-Anchor\" href=\"#函数的防抖与节流\">#</a> 函数的防抖与节流</h1>\n<p>演示卡顿现象：事件触发非常频繁，而且每一次触发，回调函数都要去执行，如果事件很短，而且回调函数有计算，那么很可能出现浏览器卡顿</p>\n<ul>\n<li>\n<p>节流：在规定的间隔时间范围内不会重复触发回调，只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</p>\n</li>\n<li>\n<p>防抖：前面的所有的触发都被取消，最后一次执行在规定的时间后才会触发，也就是说如果连续快速的触发，只会执行一次</p>\n</li>\n</ul>\n<h1 id=\"完成三级联动节流操作\"><a class=\"markdownIt-Anchor\" href=\"#完成三级联动节流操作\">#</a> 完成三级联动节流操作</h1>\n<p>node_modules 里面已经有 lodash 了</p>\n<ol>\n<li>引入 lodash： <code>import * from 'lodash' </code></li>\n<li>使用节流函数：</li>\n</ol>\n<figure class=\"highlight wren\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">changeIndex</span>: \\<span class=\"variable\">_</span>.<span class=\"property\">throttle</span>(<span class=\"title function_\">function</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//index:鼠标移上某一个一级分类的索引值</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> <span class=\"operator\">=</span> index</span><br><span class=\"line\">&#125;,<span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"三级联动组件的路由跳转与传递参数\"><a class=\"markdownIt-Anchor\" href=\"#三级联动组件的路由跳转与传递参数\">#</a> 三级联动组件的路由跳转与传递参数</h1>\n<p>三级联动用户可以点击的：一级分类、二级分类、三级分类，当你点击的时候 Home 模块跳转到 Search 模块，一级会把用户选中的产品 (产品的名字、产品的 ID) 在路由跳转的时候，进行传递</p>\n<ul>\n<li>注意：如果使用声明式导航 router-link，可以实现路由的跳转与传递参数。但是会出现卡顿现象</li>\n<li>原因：router-link 会创建很多组件，很耗内存。</li>\n</ul>\n<p>因此我们选择编程式导航，但是为了优化性能，不建议在每一个 a 标签上写，最好给它们的父节点上写声明式导航，然后利用事件的委派</p>\n<ul>\n<li>\n<p>利用事件的委派存在一些问题：</p>\n<ol>\n<li>\n<p>事件委派父节点下的子节点有很多，怎么知道一定是 a 标签<br>\n解决：给 a 标签添加自定义属性，以自定义属性为条件判断其是不是 a 标签</p>\n</li>\n<li>\n<p>如何获取参数<br>\n解决：仍然给 a 标签添加自定义属性</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"search-模块中的-typenav-商品分类菜单\"><a class=\"markdownIt-Anchor\" href=\"#search-模块中的-typenav-商品分类菜单\">#</a> Search 模块中的 TypeNav 商品分类菜单</h1>\n<p>显示与隐藏</p>\n<p>过渡动画效果：前提 组件 | 元素 必须有 <code>v-if|v-show</code>  指令才可以进行过渡动画<br>\n要用 transition 标签把需要添加过渡的元素包裹起来 可以加 name，不加 name 的话就是 <code> v-enter，v-leave</code></p>\n<h1 id=\"优化商品分类三级列表\"><a class=\"markdownIt-Anchor\" href=\"#优化商品分类三级列表\">#</a> 优化商品分类三级列表</h1>\n<p>把  <code>this.$store.dispatch(&quot;categoryList&quot;)</code>  从 TypeNav 组件放到 App 组件中<br>\n在 App 根组件中发请求，因为根组件 mounted 只会执行一次</p>\n<h1 id=\"合并-params-与-query-参数\"><a class=\"markdownIt-Anchor\" href=\"#合并-params-与-query-参数\">#</a> 合并 params 与 query 参数</h1>\n<h1 id=\"开发-home-首页当中的-listcontainer-组件与-floor-组件\"><a class=\"markdownIt-Anchor\" href=\"#开发-home-首页当中的-listcontainer-组件与-floor-组件\">#</a> 开发 Home 首页当中的 ListContainer 组件与 Floor 组件</h1>\n<ul>\n<li>\n<p>注意：服务器返回的数据 (接口) 只有商品分类菜单分类数据，对于 ListContainer 组件与 Floor 组件数据服务器没有提供<br>\n解决方法：mock 数据 (模拟)：如果你想 mock 数据，需要用到插件 mockjs<br>\n 前端 mock 的数据不会和服务器进行任何通信</p>\n</li>\n<li>\n<p>mockjs 使用步骤：</p>\n<ol>\n<li>在项目当中 src 文件夹中创建 mock 文件夹，并创建相应的 JSON 文件</li>\n<li>准备 JSON 数据 (一定要格式化一下，不能留有空格，不然跑不起来)</li>\n<li>把 mock 数据需要的图片放置到 public 文件夹中【public 文件夹在打包的时候原封不动打包到 dist 文件夹中】</li>\n<li>开始 mock 虚拟数据，通过 mockjs 实现：在 mock 文件夹下创建 mockServe.js 文件</li>\n<li>mockServe.js 文件下：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先引入 mockjs 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Mock <span class=\"keyword\">from</span> <span class=\"string\">&quot;mockjs&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//把 JSON 数据格式引入进来(JSON 数据格式没有对外暴露，但是可以引入)</span></span><br><span class=\"line\"><span class=\"comment\">//webpack 默认对外暴露的：图片、JSON 数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> banner <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./banner.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> floor <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./floor.json&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//mock 数据：第一个参数请求地址 第二个参数请求数据</span></span><br><span class=\"line\">Mock.mock(<span class=\"string\">&quot;/mock/banner&quot;</span>,&#123;<span class=\"keyword\">code</span>:<span class=\"number\">200</span>,data:banner&#125;)</span><br><span class=\"line\">Mock.mock(<span class=\"string\">&quot;/mock/floor&quot;</span>,&#123;<span class=\"keyword\">code</span>:<span class=\"number\">200</span>,data:floor&#125;) <span class=\"number\">6.</span>把 mockServe.js 文件在 main.js 中引入一下</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"swiper-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#swiper-基本使用\">#</a> swiper 基本使用</h1>\n<p>swiper 主要用来做轮播图<br>\n在 new Swiper 实例之前，页面的结构必须得先有</p>\n<ul>\n<li>第一步：引包 (相应 js|css)</li>\n<li>第二步：页面中结构务必要有</li>\n<li>第三步：new Swiper 实例【轮播图添加动态效果】</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> mySwiper = <span class=\"keyword\">new</span> <span class=\"title class_\">Swiper</span> (<span class=\"string\">&#x27;.swiper&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">loop</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 循环模式选项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果需要分页器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">pagination</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;.swiper-pagination&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">clickable</span>:<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果需要前进后退按钮</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">navigation</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">nextEl</span>: <span class=\"string\">&#x27;.swiper-button-next&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">prevEl</span>: <span class=\"string\">&#x27;.swiper-button-prev&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"listcontainer-组件开发重点\"><a class=\"markdownIt-Anchor\" href=\"#listcontainer-组件开发重点\">#</a> ListContainer 组件开发重点</h1>\n<ol>\n<li>安装 Swiper 插件：安装 5 版本  <code>npm i swiper@5 </code></li>\n<li>引包： <code>import Swiper from 'swiper</code></li>\n<li>写轮播图：</li>\n</ol>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;swiper-wrapper&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;swiper-slide&quot;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(carousel,index) in bannerList&quot;</span> :key=<span class=\"string\">&quot;carousel.id&quot;</span>&gt;</span><br><span class=\"line\">&lt;img :src=<span class=\"string\">&quot;carousel.imgUrl&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 main.js 中引入样式，因为网站有好几个地方都使用了轮播图，这样引入一遍就可以了。<br>\n引入样式直接 import 引入就行，不用对外暴露，不用写 from： <code>import &quot;swiper/css/swiper.css&quot;</code></li>\n<li>new Swiper 实例，注意不要在 mounted 中，因为 dispatch 涉及异步语句，导致 v-for 遍历的时候结构还没有完全，因此不行</li>\n</ol>\n<ul>\n<li>\n<p>watch 数据监听：监听已有数据的变化 (watch 有两种写法，一种是对象写法，一种是函数写法)</p>\n</li>\n<li>\n<p>最完美的解决方案： watch + nextTick</p>\n</li>\n</ul>\n<p>nextTick：在下次 DOM 更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   watch: &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>监听bannerList数据的变化：因为这条数据发生过变化，由空数组变为数组中有四个元素</span><br><span class=\"line\">  <span class=\"regexp\">//</span>handler:可以监听到新的值和旧的值</span><br><span class=\"line\">  bannerList: &#123;</span><br><span class=\"line\">    handler(newValue, oldValue) &#123;</span><br><span class=\"line\">      <span class=\"regexp\">//</span>如果执行handler方法，代表组件实例身上这个属性的数据已经有了。但只能保证有数据，不知道v-<span class=\"keyword\">for</span>有没有执行完</span><br><span class=\"line\">      <span class=\"regexp\">//</span>nextTick：在下次DOM更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM</span><br><span class=\"line\">      this.<span class=\"variable\">$nextTick</span>(() =&gt; &#123;</span><br><span class=\"line\">        <span class=\"regexp\">//</span>当执行这个回调的时候，保证服务器数据回来了，v-<span class=\"keyword\">for</span>执行完毕</span><br><span class=\"line\">        var mySwiper = new Swiper(this.<span class=\"variable\">$refs</span>.mySwiper, &#123;</span><br><span class=\"line\">          loop: true, <span class=\"regexp\">//</span> 循环模式选项</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"regexp\">//</span> 如果需要分页器</span><br><span class=\"line\">          pagination: &#123;</span><br><span class=\"line\">            el: <span class=\"string\">&quot;.swiper-pagination&quot;</span>,</span><br><span class=\"line\">            clickable: true,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"regexp\">//</span> 如果需要前进后退按钮</span><br><span class=\"line\">          navigation: &#123;</span><br><span class=\"line\">            nextEl: <span class=\"string\">&quot;.swiper-button-next&quot;</span>,</span><br><span class=\"line\">            prevEl: <span class=\"string\">&quot;.swiper-button-prev&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"开发-floor-组件\"><a class=\"markdownIt-Anchor\" href=\"#开发-floor-组件\">#</a> 开发 floor 组件</h1>\n<ol>\n<li>写 API<br>\n 在 api 文件夹下的 index.js 中写：  <code>export const reqFloorList = () =&gt; mockRequests.get('/floor') </code></li>\n<li>写 vuex 三连环 在 store 文件夹下写</li>\n</ol>\n<ul>\n<li>引入请求： <code>import &#123; reqFloorList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  async getFloorList(&#123; commit &#125;) &#123;</span><br><span class=\"line\">  //获取发送请求的结果</span><br><span class=\"line\">  let result = await reqGetBannerList();</span><br><span class=\"line\">  if (result.code == 200) &#123;</span><br><span class=\"line\">  //提交 mutation</span><br><span class=\"line\">  commit(&quot;GETFLOORLIST&quot;, result.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ```</span><br><span class=\"line\"></span><br><span class=\"line\">```mutations中：</span><br><span class=\"line\">  GETFLOORLIST(state, floorList) &#123;</span><br><span class=\"line\">  state.floorList = floorList;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">floorList: []</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意： <code>getFloorList</code>  这个 action 在哪里触发？需要在 Home 路由组件中发。如果在 floor 组件内部触发没有办法 v-for 出来两个 floor。因为用了两个 floor</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>组件获取数据</p>\n<ul>\n<li>让组件拿到相应数据，使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code></li>\n<li>并把数据映射为组件实例身上的一个属性：<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    floorList: (<span class=\"keyword\">state</span>) =&gt; <span class=\"keyword\">state</span>.home.floorList</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>展示数据<br>\n根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成。(v-for 也可以在自定义标签中使用)</p>\n<ul>\n<li>\n<p>因为 Floor 的数据在 Home 那里，而 Home 组件与 Floor 组件是父子关系，所以涉及到了父子间的组件通信</p>\n</li>\n<li>\n<p>组件通信的方式有哪些？(面试频率极高)</p>\n<ul>\n<li>props：用于父子间组件通信</li>\n<li>自定义事件 (@on @emit)：可以实现子给父通信</li>\n<li>全局事件总线 ($bus)：全能</li>\n<li>插槽</li>\n<li>vuex</li>\n</ul>\n</li>\n</ul>\n<p>父传：<br>\n <code>&lt;Floor v-for=&quot;(floor, index) in floorList&quot; :key=&quot;floor.id&quot; :list=&quot;floor&quot;/&gt;</code></p>\n<p>子收：<br>\n <code> props: ['list']</code></p>\n<ul>\n<li>动态展示数据<br>\n根据数据的格式和内容，将之前写的死数据替换成动态数据，把复用的删掉，该遍历的遍历<br>\n <code>&#123;&#123;list.name&#125;&#125;,list.navList,&#123;&#123;nav.text&#125;&#125;</code>  等</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"search-模块开发\"><a class=\"markdownIt-Anchor\" href=\"#search-模块开发\">#</a> search 模块开发</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"写请求-在-api-文件夹下的indexjs中\"><a class=\"markdownIt-Anchor\" href=\"#写请求-在-api-文件夹下的indexjs中\">#</a> 写请求 在 api 文件夹下的 <code>index.js</code>  中</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当前这个接口，给服务器传递一个默认的参数params，至少是一个空对象，不然会报错</span></span><br><span class=\"line\">export <span class=\"keyword\">const</span> <span class=\"variable constant_\">reqGetSearchInfo</span> = (params) =&gt; <span class=\"title function_ invoke__\">requests</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">&#x27;/list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">method</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>:params</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"search-模块根据不同的参数获取数据展示\"><a class=\"markdownIt-Anchor\" href=\"#search-模块根据不同的参数获取数据展示\">#</a> Search 模块根据不同的参数获取数据展示</h2>\n<p>因为 mounted 只会调用一次，所以将 <code>this.$store.dispatch(&quot;getSearchList&quot;, &#123;&#125;)</code>  封装成一个函数，写在 methods 中，需要的时候调用即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    searchParams: &#123;</span><br><span class=\"line\">      <span class=\"regexp\">//</span>一级分类的id</span><br><span class=\"line\">      category1Id: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>二级分类的id</span><br><span class=\"line\">      category2Id: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>三级分类的id</span><br><span class=\"line\">      category3Id: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>分类的名字</span><br><span class=\"line\">      categoryName: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>关键字</span><br><span class=\"line\">      keyword: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>排序</span><br><span class=\"line\">      order: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>分页器</span><br><span class=\"line\">      pageNo: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>代表每一页展示数据的个数</span><br><span class=\"line\">      pageSize: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>平台售卖属性操作带的参数</span><br><span class=\"line\">      props: [],</span><br><span class=\"line\">      <span class=\"regexp\">//</span>品牌</span><br><span class=\"line\">      trademark: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">beforeMount() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>使用Object.assign:ES6 新增的语法，合并对象 整理参数</span><br><span class=\"line\">  Object.assign(this.searchParams, this.<span class=\"variable\">$route</span>.query, this.<span class=\"variable\">$route</span>.params);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>在发请求之前带给服务器参数【searchParams参数发生变化有数值带给服务器】</span><br><span class=\"line\">  this.getData();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>向服务器发请求获取search数据(根据参数不同返回不同的数据进行展示)</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$store</span>.dispatch(<span class=\"string\">&quot;getSearchList&quot;</span>, this.searchParams);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"监听路由的变化再次发请求获取数据\"><a class=\"markdownIt-Anchor\" href=\"#监听路由的变化再次发请求获取数据\">#</a> 监听路由的变化再次发请求获取数据</h2>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  $route(newValue,oldValue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//再次发请求之前还需要整理带给服务器的参数</span></span><br><span class=\"line\">    Object.assign(<span class=\"keyword\">this</span>.searchParams, <span class=\"keyword\">this</span>.$route.query, <span class=\"keyword\">this</span>.$route.params);</span><br><span class=\"line\">    <span class=\"comment\">//再次发起ajax请求</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getData()</span><br><span class=\"line\">    <span class=\"comment\">//每次一请求完毕，应该把相应的一二三级分类的id置空，让他接收下一次的相应的id</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.searchParams.category1Id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.searchParams.category2Id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.searchParams.category3Id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"面包屑分类处理\"><a class=\"markdownIt-Anchor\" href=\"#面包屑分类处理\">#</a> 面包屑分类处理</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl sui-tag&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;with-x&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;searchParams.categoryName&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;searchParams.categoryName&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;removeCategoryName&quot;</span>&gt;</span>x<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除分类的名字</span><br><span class=\"line\">removeCategoryName() &#123;</span><br><span class=\"line\">  //一点击“x”，就把categoryName置空(恢复默认页面)，还需要向服务器发请求</span><br><span class=\"line\">  //也可以不置空，而是写成undefined，这样这个字段就不会带给服务器，提高性能</span><br><span class=\"line\">  this.searchParams.categoryName = undefined</span><br><span class=\"line\">  this.searchParams.category1Id = undefined</span><br><span class=\"line\">  this.searchParams.category2Id = undefined</span><br><span class=\"line\">  this.searchParams.category3Id = undefined</span><br><span class=\"line\">  this.getData()</span><br><span class=\"line\">  //地址栏也需要修改：进行路由的修改,自己跳自己</span><br><span class=\"line\">  //严谨：本意是删除query，如果路径中出现params不应该删除，路由跳转的时候应该带着</span><br><span class=\"line\">  if(this.$route.params) &#123;</span><br><span class=\"line\">    this.$router.push(&#123;</span><br><span class=\"line\">      name:&quot;search&quot;,</span><br><span class=\"line\">      params:this.$route.params</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"平台售卖属性操作\"><a class=\"markdownIt-Anchor\" href=\"#平台售卖属性操作\">#</a> 平台售卖属性操作</h2>\n<ul>\n<li>给售卖属性绑定点击事件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;type-wrap&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(attr,index) in attrList&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;attr.attrId&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--平台售卖属性：比如说颜色--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl key&quot;</span>&gt;</span>&#123;&#123;attr.attrName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl value&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;type-list&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--平台相应的属性值：粉色，蓝色，黑色。。。--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(attrValue,index) in attr.attrValueList&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;attrValue&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;attrInfo&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>&#123;&#123;attrValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//平台售卖属性值的点击事件</span><br><span class=\"line\">attrInfo(attr,attrVal) &#123;</span><br><span class=\"line\">//[&quot;属性ID：属性值：属性名&quot;]</span><br><span class=\"line\">  this.$emit(&quot;attrInfo&quot;,attr,attrValue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attrInfo(attr,attrValue) &#123;</span><br><span class=\"line\">  //[&quot;属性ID：属性值：属性名&quot;]</span><br><span class=\"line\">  //参数格式整理好</span><br><span class=\"line\">  let props = `$&#123;attr.attrID&#125;:$&#123;attrValue&#125;:$&#123;attr.attrName&#125;`</span><br><span class=\"line\">  this.searchParams.props(props)</span><br><span class=\"line\">  //再次发请求</span><br><span class=\"line\">  this.getData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h2>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(this.array.x.indexOf(x)</span></span>==-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  this<span class=\"selector-class\">.array</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.push</span>(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"排序操作\"><a class=\"markdownIt-Anchor\" href=\"#排序操作\">#</a> 排序操作</h2>\n<p>api 接口给出的 order 排序参数：<br>\n1：综合<br>\n 2：价格<br>\n asc：升序<br>\n desc：降序<br>\n一共有四种情况</p>\n<ol>\n<li>判断 active 动态类名在谁身上？</li>\n</ol>\n<ul>\n<li>通过 order 属性值中包含 1 (综合)| 包含 2 (价格)</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sui-nav&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-variable\">&#123;active:searchParams.order.indexOf(&#x27;1&#x27;!=-1)&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>综合<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-variable\">&#123;active:searchParams.order.indexOf(&#x27;2&#x27;!=-1)&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>价格<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>判断箭头</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//太长了可以写在计算属性里</span><br><span class=\"line\">&lt;li <span class=\"symbol\">:class=<span class=\"string\">&quot;&#123;active:isOne&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">  &lt;a&gt;综合&lt;span v-show=<span class=\"string\">&quot;isOne&quot;</span> class=<span class=\"string\">&quot;iconfont&quot;</span> <span class=\"symbol\">:class=<span class=\"string\">&quot;&#123;&#x27;icon-UP&#x27;:isAsc,&#x27;icon-DOWN&#x27;:isDesc&#125;&quot;</span>&gt;&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>点击事件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeOrder(flag) &#123;</span><br><span class=\"line\">  //flag形参：它是一个标记，代表用户点击的是综合(1)还是价格(2)  用户点击的时候传递进来的</span><br><span class=\"line\">  let originOrder = this.searchParams.order</span><br><span class=\"line\">  //这里获取到的是最开始的状态</span><br><span class=\"line\">  let originFlag = this.searchParams.order.split(&quot;:&quot;)[0]</span><br><span class=\"line\">  let originSort = this.searchParams.order.split(&quot;:&quot;)[1]</span><br><span class=\"line\">  //准备一个新的order的属性值</span><br><span class=\"line\">  let newOrder = &#x27;&#x27;</span><br><span class=\"line\">  //确定点击的一定是“综合”</span><br><span class=\"line\">  if(flag == originFlag) &#123;</span><br><span class=\"line\">    newOrder = `$&#123;originFlag&#125;:$&#123;originSort==&quot;desc&quot;?&quot;asc&quot;:&quot;desc&quot;&#125;`</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">  //确定点击的一定是“价格”</span><br><span class=\"line\">  newOrder = `$&#123;flag&#125;:$&#123;&quot;desc&quot;&#125;`</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //将newOrder赋予searchParams</span><br><span class=\"line\">  this.searchParams.order = newOrder</span><br><span class=\"line\">  //再次发请求</span><br><span class=\"line\">  this.getData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分页器\"><a class=\"markdownIt-Anchor\" href=\"#分页器\">#</a> 分页器</h1>\n<ul>\n<li>为什么很多项目采用分页功能，因为有的平台同时展示的数据有很多</li>\n<li>对于分页器而言，自定义数据需要知道四个前提条件\n<ol>\n<li>pageNo：当前第几页</li>\n<li>pageSize：代表每一页展示多少条数据</li>\n<li>total：代表整个分页一共要展示多少条数据</li>\n<li>continues：代表分页连续页码个数</li>\n</ol>\n</li>\n<li>自定义分页器，在开发的时候先自己传递假的数据进行测试，调试成功后在用服务器数据</li>\n<li>对于分页器而言，很重要的一个地方即为【算出：连续页面起始数字和结束数字】</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;Pagination&quot;</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;pageNo&quot;</span>, <span class=\"string\">&quot;pageSize&quot;</span>, <span class=\"string\">&quot;total&quot;</span>, <span class=\"string\">&quot;continues&quot;</span>],</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//总共多少页</span></span><br><span class=\"line\">    <span class=\"built_in\">totalPage</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">//向上取整</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Math.<span class=\"built_in\">ceil</span>(<span class=\"keyword\">this</span>.total / <span class=\"keyword\">this</span>.pageSize);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//计算出连续页码的起始数字与结束数字[连续的页码数字，至少是5]</span></span><br><span class=\"line\">    <span class=\"built_in\">startNumAndEndNum</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">//解构</span></span><br><span class=\"line\">      <span class=\"type\">const</span> &#123; continues, pageNo, totalPage &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"comment\">//先定义两个变量存储起始数字与结束数字</span></span><br><span class=\"line\">      let start = <span class=\"number\">0</span>,</span><br><span class=\"line\">        end = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">//连续页码数字5【就是至少5页】，如果出现不正常现象(就是不够五页)</span></span><br><span class=\"line\">      <span class=\"comment\">//不正常现象：总页数没有连续页码多</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (continues &gt; totalPage) &#123;</span><br><span class=\"line\">        start = <span class=\"number\">1</span>;</span><br><span class=\"line\">        end = totalPage;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//正常现象</span></span><br><span class=\"line\">        <span class=\"comment\">//起始数字</span></span><br><span class=\"line\">        start = pageNo - <span class=\"built_in\">parseInt</span>(continues / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//结束数字</span></span><br><span class=\"line\">        end = pageNo + <span class=\"built_in\">parseInt</span>(continues / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把出现的不正常现象(start数字出现0或负数)纠正</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          start = <span class=\"number\">1</span>;</span><br><span class=\"line\">          end = continues;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把出现的不正常现象(end数字大于总页码)纠正</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end &gt; totalPage) &#123;</span><br><span class=\"line\">          end = totalPage;</span><br><span class=\"line\">          start = totalPage - continues + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; start, end &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分页器动态展示\"><a class=\"markdownIt-Anchor\" href=\"#分页器动态展示\">#</a> 分页器动态展示</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>——————————Search 模块结束，再开发 “详情” 模块</p>\n<h1 id=\"开发某一个商品的详情页面\"><a class=\"markdownIt-Anchor\" href=\"#开发某一个商品的详情页面\">#</a> 开发某一个商品的详情页面</h1>\n<ol>\n<li>搭静态组件\n<ul>\n<li>详情页的组件还没有注册路由组件 (router 文件夹中)：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Detail <span class=\"keyword\">from</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/pages/Detail&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">routes: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    //点击商品跳到其详情页，需要进行路由跳转并带参(产品的id给详情页面)，所以还要占位/:skuid</span><br><span class=\"line\">      <span class=\"type\">path</span>:&quot;/detail/:skuid&quot;,</span><br><span class=\"line\">      component:Detail,</span><br><span class=\"line\">      meta: &#123;<span class=\"keyword\">show</span>:<span class=\"keyword\">true</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同时还要让商品图片可点击（跳转详情页）【search 模块中】</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\">//在路由跳转的时候别忘记带id（params）参数</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/detail/$</span></span></span><span class=\"template-variable\">&#123;good.id&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">`&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;good.defaultImg&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在跳转后还需要让滚轮回到顶上。vuerouter 滚动行为【router 文件夹中】</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>:[...],</span><br><span class=\"line\">  <span class=\"title function_\">scrollBehavior</span>(<span class=\"params\">to,savedPosition</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//return 期望滚动到哪个的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">y</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>发请求【api 文件夹中】</li>\n</ol>\n<ul>\n<li>获取商品详情数据<br>\n // 获取商品详细信息的接口 URL：/api/item/{skuId} 请求方式：get<br>\nexport const reqGoodsInfo = (skuId) =&gt;<br>\nrequests({<br>\nurl:  <code>/item/$&#123;skuId&#125;</code> ,<br>\nmethod: “get”,<br>\n});</li>\n</ul>\n<ol start=\"3\">\n<li>vuex— 获取商品详情信息</li>\n</ol>\n<ul>\n<li>vuex 中（store 文件夹中）还需要新增一个模块 detail.</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span>= &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">state</span>,</span><br><span class=\"line\">   actions,</span><br><span class=\"line\">   mutations,</span><br><span class=\"line\">   getters</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>搞完之后还需要回到大仓库中进行合并【store 文件夹中 index.js 中】</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> detail <span class=\"keyword\">from</span> <span class=\"string\">&quot;./detail&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//对外暴露Store类的一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//实现Vuex仓库模块式开发存储数据</span></span><br><span class=\"line\">  <span class=\"attr\">modules</span>:&#123;</span><br><span class=\"line\">    detail</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>派发 action，发请求捞数据【detail 模块 index.vue 中】</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>动态展示组件</li>\n</ol>\n<h1 id=\"面试分页器封装原理\"><a class=\"markdownIt-Anchor\" href=\"#面试分页器封装原理\">#</a> 面试：分页器封装原理</h1>\n<p>封装一个分页器组件 pagination</p>\n<ol>\n<li>知道当前是第几页：pageNo</li>\n<li>知道分页器一共需要展示多少条数据：total</li>\n<li>知道每一页需要展示数据的个数：pageSize，根据 2,3 能算出一共有多少页：totalPage</li>\n<li>知道连续的页码数：continues</li>\n</ol>\n<h1 id=\"zoom-放大镜展示数据\"><a class=\"markdownIt-Anchor\" href=\"#zoom-放大镜展示数据\">#</a> zoom 放大镜展示数据</h1>\n<ul>\n<li>\n<p>遮罩层随鼠标移动<br>\n let left = event.offsetX-mask.offsetWidth/2<br>\nlet top = event.offsetY-mask.offsetHeight/2</p>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HWT%5D5JAIEXRTU@0%25%7D9C()19.png\" alt=\"\"></p>\n</li>\n</ul>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5ZHB%7D4YUP1GE%F4YJ8BLR$4.png\" alt=\"\"></p>\n<h1 id=\"商品售卖属性-排他操作点击高亮\"><a class=\"markdownIt-Anchor\" href=\"#商品售卖属性-排他操作点击高亮\">#</a> 商品售卖属性 排他操作，点击高亮</h1>\n<h1 id=\"购买产品个数的操作\"><a class=\"markdownIt-Anchor\" href=\"#购买产品个数的操作\">#</a> 购买产品个数的操作</h1>\n<h1 id=\"加入购物车重要\"><a class=\"markdownIt-Anchor\" href=\"#加入购物车重要\">#</a> 加入购物车（重要）</h1>\n<ul>\n<li>\n<p>以前的路由跳转，就是从 A 路由跳到 B 路由，这里加入购物车、路由跳转之前，还要发请求。把你购买的产品的信息通过请求的形式通知服务器，服务器进行相应的存储</p>\n</li>\n<li>\n<p>加入购物车（发请求）以后，前台将参数带给服务器，服务器写入数据成功，并没有返回其他的数据，只返回了 code=200，代表这次操作成功。所以不用 vue 三连环存仓库了</p>\n</li>\n<li>\n<p>派发 action 操作实际上就是调用仓库中的 addOrUpdateShopCart，它是 async 函数，返回的结果是 Promise，只有成功和失败两种情况，为了判断购物车是否成功加入，store 仓库的 detail.js 中的 addOrUpdateShopCart 函数要进行判断，如果 code=200 则返回成功的回调，否则返回失败的回调。<br>\n写 try catch<br>\n![]( <a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/ZFP\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/ZFP</a>}3KBYS7(OJ(2D{$(_M~D.png)</p>\n<ul>\n<li>浏览器存储功能：HTML5 中新增的，本地存储和会话存储。一般存储的是字符串，不能存对象。要先把对象转化为字符串才能进行存储，JSON.stringify ()。捞到之后再转化回对象：JSON.parse ()</li>\n</ul>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3%7D\" alt=\"\">%ZR}ERURV(R3V$]Z9MP8.png)</p>\n<h1 id=\"购物车模块\"><a class=\"markdownIt-Anchor\" href=\"#购物车模块\">#</a> 购物车模块</h1>\n<ol>\n<li>购物车静态组件</li>\n<li>向服务器发起 ajax 请求，获取服务车数据，操作 vuex 三连环、组件获取数据展示数据</li>\n</ol>\n<ul>\n<li>问题：发请求的时候，获取不到你购物车里面的数据，因为服务器不知道你是谁</li>\n</ul>\n<ol start=\"3\">\n<li>UUID 临时游客身份</li>\n</ol>\n<ul>\n<li>生成 uuid，localStorage 存储</li>\n</ul>\n<p>detail.js 中</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span> = &#123;</span><br><span class=\"line\">//游客的临时身份</span><br><span class=\"line\">uuid_token: getUUID()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>新建一个 utils 文件夹放 uuid_token.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; v4 <span class=\"keyword\">as</span> uuidv4 &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;uuid&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//要随机生成一个字符串，且每次执行不能发生变化，游客身份持久存储</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getUUID</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">//先从本地存储获取uuid（看本地存储是否有）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uuid_token = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;UUIDTOKEN&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//如果没有我则生成</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!uuid_token) &#123;</span><br><span class=\"line\">  uuid_token = <span class=\"title function_\">uuidv4</span>()</span><br><span class=\"line\">  <span class=\"comment\">//本地存储一次</span></span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;UUIDTOKEN&#x27;</span>,uuid_token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">//切记有返回值，没有返回值undefined</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> uuid_token</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>api 文件夹中 request.js</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在当前模块中引入store</span><br><span class=\"line\">import store <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">//请求拦截器</span><br><span class=\"line\">requests.interceptors.request.use((config) =&gt; &#123;</span><br><span class=\"line\">  if(store.<span class=\"keyword\">state</span>.detail.uuid_token) &#123;</span><br><span class=\"line\">  //给请求头添加一个字段(<span class=\"keyword\">user</span>TempId)：和后台老师商量好</span><br><span class=\"line\">  config.headers.<span class=\"keyword\">user</span>TempId = store.<span class=\"keyword\">state</span>.detail.uuid_token</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>})</p>\n<ol start=\"4\">\n<li>动态展示购物车</li>\n</ol>\n<ul>\n<li>\n<p>数据格式有点不完美</p>\n</li>\n<li>\n<p>全选效果：用数组的 every 方法</p>\n</li>\n<li>\n<p>处理购物车数量（+，-，输入的数值）<br>\n三个地方触发一个回调<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HTZ8$@2$UO%60LRH5%5DY%7DJ%60RI8.png\" alt=\"\"></p>\n</li>\n<li>\n<p>购物车删除操作<br>\n用户删除的太快，可能会出现负的情况（即使已经做了限制） 解决：节流</p>\n</li>\n<li>\n<p>删除选中的所有商品操作<br>\n没有一次删除很多产品的接口，但是有通过 ID 删除产品的接口（一次删一个）<br>\n传入参数 context 再调用 deleteCartListBySkuId</p>\n</li>\n</ul>\n<p>Promise.all () 只有所有的 promise 都成功才能调用<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/4MTF\" alt=\"\"> 9W3%6Z8AK9) 840DLOD.png)<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/SUG9N68IQZ%25X(0GHK2%5BM3CB.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/SUG9N68IQZ%X(0GHK2[M3CB.png)</a></p>\n<p>删完之后 await,async, 再次调用 getData<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/V%7D3%7DR17~XO0CS42CS02EL~8.png\" alt=\"\"></p>\n<h1 id=\"登录与注册非常重要\"><a class=\"markdownIt-Anchor\" href=\"#登录与注册非常重要\">#</a> 登录与注册（非常重要）</h1>\n<ol>\n<li>登录与注册的静态组件</li>\n</ol>\n<ul>\n<li>assets 文件夹：放置全部组件共用静态资源， webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</li>\n<li>在 css 中写相对路径也可以用 @（@表示 src），但在 css 中要在 @前加个～。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">~@/assets/images/icons.png</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>注册业务</li>\n</ol>\n<ul>\n<li>获取验证码的接口</li>\n</ul>\n<ol start=\"3\">\n<li>登录业务</li>\n</ol>\n<ul>\n<li>\n<p>注册：通过数据库存储用户信息（账号，密码）</p>\n</li>\n<li>\n<p>登录：登录成功的时候，后台为了区分你这个用户是谁，服务器下方 token【令牌：唯一标识符】</p>\n</li>\n<li>\n<p>将来经常通过带 token 找服务器要用户信息进行展示</p>\n</li>\n<li>\n<p>注意：vuex 仓库存储数据 —— 不是持久化</p>\n</li>\n<li>\n<p>当用户注册完成，用户登录【用户名 + 密码】向服务器发请求（组件派发 action：userLogin），登陆成功获取 token，存储于仓库当中（非持久化的）。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//登录业务</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">userLogin</span>(<span class=\"params\">&#123;commit&#125;,data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">reqUserLogin</span>(data)</span><br><span class=\"line\">    <span class=\"comment\">//服务器下发token，用户唯一标识符</span></span><br><span class=\"line\">    <span class=\"comment\">//将来经常通过带token找服务器要用用户信息进行展示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;USERLOGIN&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;faile&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后路由跳转到 home 首页，因此在首页当中（mounted）派发 action（getUserInfo）获取用户信息，以及动态展示 header 组件的内容。<br>\n问题：一刷新 home 首页，会获取不到用户信息（token：vuex 非持久化存储）</p>\n<ul>\n<li>持久化存储</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  <span class=\"attr\">token</span>: <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;TOKEN&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//登录业务</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">userLogin</span>(<span class=\"params\">&#123;commit&#125;,data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">reqUserLogin</span>(data)</span><br><span class=\"line\">    <span class=\"comment\">//服务器下发token，用户唯一标识符</span></span><br><span class=\"line\">    <span class=\"comment\">//将来经常通过带token找服务器要用用户信息进行展示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;USERLOGIN&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>)</span><br><span class=\"line\">      <span class=\"comment\">//持久化存储token</span></span><br><span class=\"line\">      <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;TOKEN&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;faile&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"存在的问题\"><a class=\"markdownIt-Anchor\" href=\"#存在的问题\">#</a> 存在的问题</h2>\n<ol>\n<li>多个组件展示用户信息需要在每一个组件的 mounted 中触发 <code>this.$store.dispatch('getUserInfo')</code></li>\n<li>用户已经登陆了，就不应该再回登录页</li>\n</ol>\n<ul>\n<li></li>\n</ul>\n<ol>\n<li>有接口，现在 api 里 export 接口，写明接口地址和请求方式</li>\n<li>然后在 store 里引入请求，写 vue 三连环，</li>\n<li>在相应的位置派发 action</li>\n</ol>\n<ul>\n<li>\n<p>路由跳转不是你想跳就能跳的</p>\n</li>\n<li>\n<p>tips：空对象隐式转换为布尔值为真，所以空对象作为条件一定为真</p>\n</li>\n</ul>\n<h2 id=\"导航守卫\"><a class=\"markdownIt-Anchor\" href=\"#导航守卫\">#</a> 导航守卫</h2>\n<p>导航：表示进行路由跳转<br>\n守卫：看门的，</p>\n<ul>\n<li>\n<p>全局守卫：全部都要排查。<br>\neg. 皇宫（皇帝，妃子，大臣）大门守卫，全部排查</p>\n</li>\n<li>\n<p>路由独享守卫：是相应的（皇帝，妃子，大臣）毕竟之路上的守卫</p>\n</li>\n<li>\n<p>组件内守卫：已经进去了，但还是要接受排查</p>\n</li>\n</ul>\n<h3 id=\"全局前置守卫routerbeforeeach在路由跳转之前进行判断\"><a class=\"markdownIt-Anchor\" href=\"#全局前置守卫routerbeforeeach在路由跳转之前进行判断\">#</a> 全局前置守卫：router.beforeEach（在路由跳转之前进行判断）</h3>\n<p>在 router 中进行全局前置守卫配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置守卫</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//to:可以获取到你要跳转到的那个路由的信息（去哪里）</span></span><br><span class=\"line\">  <span class=\"comment\">//from:可以获取到你从哪个路由而来的信息（从哪来）</span></span><br><span class=\"line\">  <span class=\"comment\">//next:放行函数，  next()全部放行 next(path)放行到指定路径  nextfalse)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户登录了才会有token，未登录一定不会有token</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">token</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用户信息</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">userInfo</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户已经登陆了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(token) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用户已经登陆了还想去login：不能去，停留在首页</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.<span class=\"property\">path</span>==<span class=\"string\">&#x27;/login&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;/home&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//登录，去得不是login：home/search/detail/shopcart</span></span><br><span class=\"line\">      <span class=\"comment\">//如果用户名已有</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>()</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有用户信息，派发action让仓库存储用户信息再跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//获取用户信息成功</span></span><br><span class=\"line\">          <span class=\"keyword\">await</span> store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;getUserInfo&#x27;</span>)</span><br><span class=\"line\">          <span class=\"comment\">//放行</span></span><br><span class=\"line\">          <span class=\"title function_\">next</span>()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//token失效了</span></span><br><span class=\"line\">          <span class=\"comment\">//清除token</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//没有用户信息</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"trade交易页面组件\"><a class=\"markdownIt-Anchor\" href=\"#trade交易页面组件\">#</a> trade（交易）页面组件</h1>\n<ul>\n<li>\n<p>排他：被选中的那个展示样式<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/WPKZDCBG%25HS8L%25WC7NEH$BG.png\" alt=\"\"></p>\n</li>\n<li>\n<p>import *as 命名 from URL 地址 统一引入<br>\n不需要一个个引入了，所有请求的接口统一接收，并且挂载到 vue.prototype 原型对象身上。到时候组件直接用就行，不用一个个引了</p>\n</li>\n</ul>\n<p>在 main.js 中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统一接口api文件夹里面全部请求函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"variable constant_\">API</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/api&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">  <span class=\"comment\">//全局事件总线</span></span><br><span class=\"line\">  <span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$API</span> = <span class=\"variable constant_\">API</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不用 vuex 怎么获取支付信息？</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//订单号</span></span><br><span class=\"line\">      <span class=\"attr\">order</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//提交订单</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">submitOrder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//交易编码</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123; tradeNo &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">orderInfo</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$API</span>.<span class=\"title function_\">reqSubmitOrder</span>(tradeNo);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//提交订单成功</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">orderId</span> = result.<span class=\"property\">data</span>;</span><br><span class=\"line\">        <span class=\"comment\">//路由跳转+路由传参</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;/pay?orderId=&quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">orderId</span>);</span><br><span class=\"line\">        <span class=\"comment\">//提交订单失败</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(result.<span class=\"property\">data</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：不要在生命周期函数中使用 async</li>\n</ul>\n<h1 id=\"elementui-使用按需引入\"><a class=\"markdownIt-Anchor\" href=\"#elementui-使用按需引入\">#</a> elementUI 使用 + 按需引入</h1>\n<ul>\n<li>已经学习过的组件库<br>\n react:antd [PC]、antd-mobile [移动端]<br>\n Vue:ElementUIp [PC]、vant [移动端]</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择一个你喜欢的包管理器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># NPM</span></span><br><span class=\"line\">$ npm install <span class=\"keyword\">element</span>-plus <span class=\"comment\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Yarn</span></span><br><span class=\"line\">$ yarn <span class=\"built_in\">add</span> <span class=\"keyword\">element</span>-plus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">$ pnpm install <span class=\"keyword\">element</span>-plus</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 elementUI</li>\n</ol>\n<ul>\n<li>完全引入</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ElementPlus</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title class_\">ElementPlus</span>)</span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按需导入</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动导入，首先安装unplugin-vue-components 和 unplugin-<span class=\"built_in\">auto</span>-<span class=\"keyword\">import</span>这两款插件</span><br><span class=\"line\">npm install -D unplugin-vue-components unplugin-<span class=\"built_in\">auto</span>-<span class=\"keyword\">import</span></span><br></pre></td></tr></table></figure>\n<p>然后把下列代码插入到你的 Vite 或 Webpack 的配置文件中</p>\n<p>Webpack：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AutoImport</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-auto-import/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-config-provider</span> <span class=\"attr\">:size</span>=<span class=\"string\">&quot;size&quot;</span> <span class=\"attr\">:z-index</span>=<span class=\"string\">&quot;zIndex&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-config-provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElConfigProvider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">ElConfigProvider</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">zIndex</span>: <span class=\"number\">3000</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">size</span>: <span class=\"string\">&quot;small&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>ElementUI 注册组件的时候，还有一种写法，挂在原型上。</li>\n</ul>\n<h1 id=\"支付\"><a class=\"markdownIt-Anchor\" href=\"#支付\">#</a> 支付</h1>\n<ul>\n<li>生成二维码</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> qrcode <span class=\"attr\">--save</span></span><br></pre></td></tr></table></figure>\n<p>注意：${url} 和 / 之间要有一个空格，不然图片不显示<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/DG%5DS224H69@C0NQ%5DI%5B%7BMQBD.png\" alt=\"\"></p>\n<ul>\n<li>弹出二维码后，需要知道支付成功 | 失败<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3QAX\" alt=\"\"> 5 [NXJTG9`ES@6~MA] 4.png)</li>\n</ul>\n<h1 id=\"二级路由\"><a class=\"markdownIt-Anchor\" href=\"#二级路由\">#</a> 二级路由</h1>\n<ol>\n<li>拆分<br>\n将不变的内容留下，将会根据点击发生页面变化的内容拆分到子组件中</li>\n</ol>\n<ul>\n<li>注意拆分后路径会有不对的地方，记得改</li>\n<li>样式，把父组件中样式的 scoped 去掉</li>\n</ul>\n<ol start=\"2\">\n<li>在 router.js 中引入二级路由</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入二级路由组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyOrder</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/views/Center/myOrder&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">GroupOrder</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/views/Center/groupOrder&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置路由</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/center&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Center</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">isShow</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//二级路由组件</span></span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;myOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">MyOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;groupOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">GroupOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>\n<p>把点击会发生路由变化的地方换成 <code>&lt;router-linl to=&quot;/center/myorder&quot;&gt;我的订单&lt;/router-linl&gt;</code>  包裹，并设置二级路由组件的出口位置，让组件显示： <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n</li>\n<li>\n<p>重定向。设置默认显示的路由（不能让用户一切换过来看一个半边空白的页面，还得点击才能显示）<br>\nrouter.js 中：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/center&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Center</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">isShow</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//二级路由组件</span></span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;myOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">MyOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;groupOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">GroupOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//重定向</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;/center&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/center/myorder&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>面试的时候问是否封装过组件：分页器，日历</p>\n</li>\n<li>\n<p>完善路由守卫</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置守卫</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//to:可以获取到你要跳转到的那个路由的信息（去哪里）</span></span><br><span class=\"line\">  <span class=\"comment\">//from:可以获取到你从哪个路由而来的信息（从哪来）</span></span><br><span class=\"line\">  <span class=\"comment\">//next:放行函数，  next()全部放行 next(path)放行到指定路径  nextfalse)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户登录了才会有token，未登录一定不会有token</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">token</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用户信息</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">userInfo</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户已经登陆了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(token) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用户已经登陆了还想去login：不能去，停留在首页</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.<span class=\"property\">path</span>==<span class=\"string\">&#x27;/login&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;/home&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//登录，去得不是login：home/search/detail/shopcart</span></span><br><span class=\"line\">      <span class=\"comment\">//如果用户名已有</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>()</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有用户信息，派发action让仓库存储用户信息再跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//获取用户信息成功</span></span><br><span class=\"line\">          <span class=\"keyword\">await</span> store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;getUserInfo&#x27;</span>)</span><br><span class=\"line\">          <span class=\"comment\">//放行</span></span><br><span class=\"line\">          <span class=\"title function_\">next</span>()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//token失效了</span></span><br><span class=\"line\">          <span class=\"comment\">//清除token</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//未登录：不能去交易相关、不能去支付相关【pay、paysuccess】、不能去个人中心</span></span><br><span class=\"line\">    <span class=\"comment\">//未登录想去上面这些路由---跳转到登录页</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> toPath = to.<span class=\"property\">path</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(toPath.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/trade&#x27;</span>)!=-<span class=\"number\">1</span>||toPath.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/pay&#x27;</span>)!=-<span class=\"number\">1</span>||toPath.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/center&#x27;</span>)!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//把未登录的时候想去而没有去成的信息，存储于地址栏中【路由】</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;/login?redirect=&#x27;</span>+toPath)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//去的不是上面这些路由（home、search、shopCard）---放行</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>登录后不是回首页，而是到你之前点击却被提示登录的那个页面<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0FT%7DO~%7BM41H%7D%250OJXEEEOU1.png\" alt=\"\"></p>\n</li>\n<li>\n<p>路由独享守卫<br>\n！[](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/(J56%251@ADO%25VVBJR$W%60O%7BUE.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/(J56%1@ADO%VVBJR$W`O{UE.png)</a></p>\n</li>\n<li>\n<p>组件内守卫</p>\n</li>\n</ul>\n<h1 id=\"图片懒加载-vue-lazyload\"><a class=\"markdownIt-Anchor\" href=\"#图片懒加载-vue-lazyload\">#</a> 图片懒加载 vue-lazyload</h1>\n<ul>\n<li>\n<p>使用插件 <code>Vue.use(VueLazyload)</code> ,vuex，vuerouter 也是插件</p>\n</li>\n<li>\n<p>图片、json 可以直接引用，它们是默认对外暴露的</p>\n</li>\n</ul>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JY%60$$@\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JY`$$@</a>](M45T3}YVVE9{VN6.png)</p>\n<h1 id=\"封装自定义插件\"><a class=\"markdownIt-Anchor\" href=\"#封装自定义插件\">#</a> 封装自定义插件</h1>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/YXTW(Z69%5B_8SN5PE3M8TZDN.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/YXTW(Z69[_8SN5PE3M8TZDN.png)</a></p>\n<h1 id=\"vee-validate-表单验证-了解\"><a class=\"markdownIt-Anchor\" href=\"#vee-validate-表单验证-了解\">#</a> vee-validate 表单验证 （了解）</h1>\n<ol>\n<li>安装</li>\n<li>引入</li>\n<li>使用</li>\n</ol>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</a>[_`IH(QLVOZKL0HD33}2ZU7.png)</p>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</a>]98(9U9F(9L_8)E[{IO~~J6.png)</p>\n<h1 id=\"路由懒加载\"><a class=\"markdownIt-Anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h1>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p>\n<h1 id=\"打包上线\"><a class=\"markdownIt-Anchor\" href=\"#打包上线\">#</a> 打包上线</h1>\n<ol>\n<li>打包 <code>npm run build</code></li>\n</ol>\n<ul>\n<li>map<br>\n 项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。<br>\n有了 map 就可以像未加密的代码一样，准确输出是哪一行有错。<br>\n没有，该文件如果项目不需要是可以去掉的<br>\n vue.config.js 配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>购买服务器</p>\n</li>\n<li>\n<p>设置安全组</p>\n</li>\n<li>\n<p>利用 Xshell 工具登录服务器</p>\n</li>\n<li>\n<p>利用 Xftp 把本地文件上传到云服务器</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>问题 1：刚刚在服务器上：/root/www/shangpinhui/dist<br>\n 如何保证一访问 ip 地址就展示 dist 内容而不是展示其他文件夹内容？<br>\n解决：配置一些东西</p>\n</li>\n<li>\n<p>问题 2：项目数据来自于本地服务器，如何让用户在访问买的 ip 地址时捞到本地服务器的数据？<br>\n解决：nginx 反向代理</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>nginx 反向代理<br>\n配置：</p>\n</li>\n<li>\n<p>Xshell 进入  <code>/</code>  根目录下有一个 <code>etc</code>  目录，其下又有一个 <code>nginx</code>  目录。安装 nginx， <code>yum install nginx</code></p>\n</li>\n<li>\n<p>安装完 nginx 服务器以后，nginx 目录下会多一个 ngxinx.conf 文件，在这个文件中进行配置。<br>\n通过 <code>vim nginx.conf</code>  指令进行编辑，主要添加如下两项：<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0~2J0\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0~2J0</a> <code>BXN%A6($%G2O8AS]8.png) 按 INSERT 编辑，编辑完 ESC 退出编辑，输入</code> :wq` 保存</p>\n</li>\n<li>\n<p><code>serve nginx start</code></p>\n</li>\n</ol>\n<ul>\n<li>Linux<br>\n <code>/</code>  是 linux 系统的根目录</li>\n</ul>\n<p>常见 linux 命令</p>\n<ul>\n<li><code>ls</code> ：列出你想要的目录的内容（默认情况下为当前目录）</li>\n<li><code>alias</code> ：允许你在 shell 会话中定义临时别名</li>\n<li><code>unalias</code> ：从已定义的别名中删除 alias</li>\n<li><code>pwd</code> ：输出你所在目录的绝对路径</li>\n<li><code>cd</code> ：更改目录<br>\n <code>cd</code> ： 进入 home 文件夹<br>\n <code>cd ..</code> ：向上移动一个级别<br>\n <code>cd -</code> ：返回上一个目录</li>\n<li><code>cp</code> ：复制文件和文件夹。要使用 cp 命令，只需将其与源文件和目标文件一起键入即可： <code>cp file_to_copy.txt new_file.txt</code></li>\n<li><code>rm</code> ：删除文件和目录</li>\n<li><code>mv</code> ：在文件系统中移动（或重命名）文件和目录</li>\n<li><code>mkdir</code> ：在 shell 中创建文件夹</li>\n<li><code>man</code> ：显示任何其他命令的手册页面（只要有）。</li>\n<li><code>chmod</code> ：快速更改文件的模式（权限)，文件的基本权限包括：r (只读)、w (写入)、x (执行)</li>\n<li><code>sudo</code> ：此命令代表 “超级用户 do”，它允许您在运行特定命令时充当超级用户或根用户。这就是 Linux 如何保护自己，防止用户意外修改机器的文件系统或安装不合适的软件包。</li>\n<li><code>vim</code> ：编辑文件</li>\n</ul>\n",
            "tags": [
                "Vue"
            ]
        }
    ]
}