{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucli • All posts by \"nginx\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/05/31/Nginx/",
            "url": "https://eucli.top/2023/05/31/Nginx/",
            "title": "Nginx学习",
            "date_published": "2023-05-31T02:16:34.000Z",
            "content_html": "<h1 id=\"nginx\"><a class=\"markdownIt-Anchor\" href=\"#nginx\">#</a> Nginx</h1>\n<h2 id=\"介绍-nginx\"><a class=\"markdownIt-Anchor\" href=\"#介绍-nginx\">#</a> 介绍 Nginx</h2>\n<p>Nginx (engine x) 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。<br>\nNginx 是一个安装非常的简单、配置文件非常简洁（还能够支持 perl 语法）、Bug 非常少的服务。Nginx 启动特别容易，并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动。你还能够不间断服务的情况下进行软件版本的升级。<br>\nNginx 代码完全用 C 语言从头写成。官方数据测试表明能够支持高达 50,000 个并发连接数的响应。</p>\n<ul>\n<li>高并发，大流量：需要面对高并发用户，大流量访问。举个例子，去往迪拜的飞机有 200 张票，但是有 100w 人都挤进系统买票，如何让这 100w 人能够看到票务的实时更新，以及顺利的买到一张票，都是一个网站架构师应该考虑的问题。这也许对于淘宝的 “双十一” 1000w 的一分钟独立访问用户量来说，是个微不足道的数字，但是对于用户的体验以及网站的口碑来说，都是一项不小的挑战</li>\n</ul>\n<ol>\n<li>正向代理 反向代理</li>\n</ol>\n<ul>\n<li>\n<p>正向代理<br>\n nginx 不仅可以做反向代理，还能用作正向代理来进行上网等功能。如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理（也就是大家常说的，通过正向代理进行上网功能）<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0c67609bbc754e92af95cfab0c1299ee.png\" alt=\"\"><br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/kuangstudy46bdad36-d3e0-43b0-a223-43360b7e8fc7.png\" alt=\"\"></p>\n</li>\n<li>\n<p>反向代理<br>\n反向代理实际运行方式是代理服务器接受网络上的连接请求。它将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给网络上请求连接的客户端，此时代理服务器对外就表现为一个服务器。<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/783284cf6b014109a6464b533c15ff00.png\" alt=\"\"><br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/kuangstudy62a15097-6e2a-4dbe-bcf5-f0d7cab81089.png\" alt=\"\"></p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>负载均衡（upstream）</li>\n</ol>\n<ul>\n<li>轮询<br>\n轮询方式是 Nginx 负载默认的方式，顾名思义，所有请求都按照时间顺序分配到不同的服务上，如果服务 Down 掉，可以自动剔除</li>\n<li>权重<br>\n指定每个服务的权重比例，weight 和访问比率成正比，通常用于后端服务机器性能不统一，将性能好的分配权重高来发挥服务器最大性能</li>\n</ul>\n<ol start=\"3\">\n<li>动静分离<br>\n在 Web 开发中，通常来说，动态资源其实就是指那些后台资源，而静态资源就是指 HTML，JavaScript，CSS，img 等文件。</li>\n</ol>\n<p>一般来说，都需要将动态资源和静态资源分开，将静态资源部署在 Nginx 上，当一个请求来的时候，如果是静态资源的请求，就直接到 nginx 配置的静态资源目录下面获取资源，如果是动态资源的请求，nginx 利用反向代理的原理，把请求转发给后台应用去处理，从而实现动静分离。</p>\n<p>在使用前后端分离之后，可以很大程度的提升静态资源的访问速度，同时在开过程中也可以让前后端开发并行可以有效的提高开发时间，也可以有些的减少联调时间 。</p>\n<h2 id=\"linux-安装-nginx\"><a class=\"markdownIt-Anchor\" href=\"#linux-安装-nginx\">#</a> Linux 安装 Nginx</h2>\n<p><a href=\"https://xiaoman.blog.csdn.net/article/details/123965492\">https://xiaoman.blog.csdn.net/article/details/123965492</a></p>\n<h2 id=\"nginx-常用命令\"><a class=\"markdownIt-Anchor\" href=\"#nginx-常用命令\">#</a> Nginx 常用命令</h2>\n<ol>\n<li>配置 nginx 环境变量<br>\n <code>whereis nginx</code>  找到 nginx 安装目录<br>\n前往根目录 找到 etc 文件夹<br>\n <code>vim profile</code>  打开配置文件<br>\n添加环境变量（前半段 node 忽略）  <code>export PATH=$PATH:/node-v14.19.1-linux-x64/bin:/usr/local/nginx/sbin</code></li>\n<li>Nginx 常用命令介绍</li>\n</ol>\n<ul>\n<li><code>nginx -v</code>  查看 nginx 版本号</li>\n<li><code>nginx</code>  启动 nginx</li>\n<li><code>nginx -s stop</code>  停止 nginx,Stop 是立即停止</li>\n<li><code>nginx -s quit</code>  Quit 是一个优雅的关闭方式，Nginx 在退出前完成已经接受的请求处理</li>\n<li><code>nginx -s reload</code>  重载 nginx 配置文件</li>\n<li><code>ps -ef | grep nginx</code>  查看 nginx 进程<br>\n ps -ef 输出标准格式的 linux 进程命令<br>\n grep 命令 是查找， 是一种强大的文本搜索工具 我们这儿是查找 nginx</li>\n</ul>\n<h2 id=\"nginx-配置文件\"><a class=\"markdownIt-Anchor\" href=\"#nginx-配置文件\">#</a> Nginx 配置文件</h2>\n<ol>\n<li>如何查找 nginx 配置文件（ <code>nginx -t</code>  检查配置文件是否有语法错误）</li>\n<li>打开配置文件  <code>vim nginx.conf</code> <br>\nNginx 的主配置文件是 nginx.conf，这个配置文件一共由三部分组成，分别为 [全局块]、[events 块] 和 [http 块]。<br>\n在 http 块中，又包含 http 全局块、多个 server 块。<br>\n每个 server 块中，可以包含 server 全局块和多个 location 块。在同一配置块中嵌套的配置块，各个之间不存在次序关系</li>\n</ol>\n<h3 id=\"全局快\"><a class=\"markdownIt-Anchor\" href=\"#全局快\">#</a> 全局快</h3>\n<p>全局块是默认配置文件从开始到 events 块之间的一部分内容，主要设置一些影响 Nginx 服务器整体运行的配置指令，因此，这些指令的作用域是 Nginx 服务器全局。</p>\n<ul>\n<li><code>user [user] [group]</code>  指定可以运行 nginx 服务的用户和用户组，只能在全局块配置 user 指令在 Windows 上不生效，如果你制定具体用户和用户组会报警告</li>\n<li><code>worker_processes</code>  nginx 进程数量 worker_processes 比如设置为 2 nginx 将会开启一个 master 进程和 2 两个 worker 进程</li>\n<li><code>pid</code>  logs/nginx.pid 存放 pid 文件</li>\n<li><code>error_log</code>  logs/error.log; 全局错误日志类型 debug info warn error 存放地址</li>\n</ul>\n<h3 id=\"events-块\"><a class=\"markdownIt-Anchor\" href=\"#events-块\">#</a> events 块</h3>\n<p>events 块涉及的指令主要影响 Nginx 服务器与用户的网络连接。常用到的设置包括是否开启对多 worker process 下的网络连接进行序列化，是否允许同时接收多个网络连接，选取哪种事件驱动模型处理连接请求，每个 worker process 可以同时支持的最大连接数等</p>\n<ul>\n<li>\n<p><code>accept_mutex</code>  默认开启 - 开启之后 nginx 的多个 worker 将会以串行的方式来处理，只会有一个 worker 将会被唤起，其他的 worker 继续睡眠，如果不开启将会造成惊群效应多个 worker 全部唤起不过只有一个 Worker 能获取新连接，其它的 Worker 会重新进入休眠状态</p>\n</li>\n<li>\n<p><code>worker_connections</code>  单个进程最大连接数（最大连接数 = 连接数 + 进程数）</p>\n</li>\n</ul>\n<h3 id=\"http-块\"><a class=\"markdownIt-Anchor\" href=\"#http-块\">#</a> http 块</h3>\n<p>http 块是 Nginx 服务器配置中的重要部分，代理、缓存和日志定义等绝大多数的功能和第三方模块的配置都可以放在这个模块中。</p>\n<ul>\n<li><code>include指令</code> ，用于引入其他的配置文件</li>\n<li><code>default_type</code>  如果 Web 程序没设置，Nginx 也没对应文件的扩展名，就用 Nginx 里默认的 default_type 定义的处理方式。default_type application/octet-stream; #nginx 默认文件类型</li>\n<li><code>log_format指令</code> ，用于定义日志格式，此指令只能在 http 块中进行配置</li>\n<li><code>sendfile</code>  简单来说就是启用 sendfile () 系统调用来替换 read () 和 write () 调用，减少系统上下文切换从而提高性能，当 nginx 是静态文件服务器时，能极大提高 nginx 的性能表现</li>\n<li><code>keepalive_timeout</code>  HTTP 有一个 KeepAlive 模式，它告诉 webserver 在处理完一个请求后保持这个 TCP 连接的打开状态。若接收到来自客户端的其它请求，服务端会利用这个未被关闭的连接，而不需要再建立一个连接。</li>\n<li><code>gzip</code>  开启 Gzip 压缩功能， 可以使网站的 css、js 、xml、html 文件在传输时进行压缩，提高访问速度，进而优化 Nginx 性能</li>\n</ul>\n<h4 id=\"server-块\"><a class=\"markdownIt-Anchor\" href=\"#server-块\">#</a> server 块</h4>\n<p>每一个 http 块都可以包含多个 server 块，而 <code>每个server块就相当于一台虚拟主机</code> ，它内部可有多台主机联合提供服务，一起对外提供在逻辑上关系密切的一组服务</p>\n<ul>\n<li><code>listen</code>  指令的配置非常灵活，可以单独制定 ip，单独指定端口或者同时指定 ip 和端口</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen 127.0.0.1:8000;  <span class=\"comment\">#只监听来自127.0.0.1这个IP，请求8000端口的请求</span></span><br><span class=\"line\">listen 127.0.0.1; <span class=\"comment\">#只监听来自127.0.0.1这个IP，请求80端口的请求（不指定端口，默认80）</span></span><br><span class=\"line\">listen 9999; <span class=\"comment\">#监听来自所有IP，请求9999端口的请求</span></span><br><span class=\"line\">listen *:9999; <span class=\"comment\">#和上面效果一样</span></span><br><span class=\"line\">listen localhost:8000; <span class=\"comment\">#和第一种效果一致</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>server_name</code>  nginx 允许一个虚拟主机有一个或多个名字，也可以使用通配符 &quot;*&quot; 来设置虚拟主机的名字 支持 ip 域名 通配符 正则等</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_name  localhost;</span><br></pre></td></tr></table></figure>\n<h5 id=\"location-块\"><a class=\"markdownIt-Anchor\" href=\"#location-块\">#</a> location 块</h5>\n<p>每个 server 块中可以包含多个 location 块。在整个 Nginx 配置文档中起着重要的作用，而且 Nginx 服务器在许多功能上的灵活性往往在 location 指令的配置中体现出来<br>\n location 指令可以分为以下 3 类：</p>\n<ul>\n<li>前缀字符串匹配</li>\n<li>正则表达式匹配</li>\n<li>用于内部跳转的命名 location<br>\n 前缀字符串匹配</li>\n<li>精确匹配 =</li>\n<li>前缀匹配 ^~（立刻停止后续的正则搜索）</li>\n<li>按文件中顺序的正则匹配 <sub>或</sub> *</li>\n<li>匹配不带任何修饰的前缀匹配。<br>\nlocation root<br>\nroot 指定目录的上级目录，并且该上级目录要含有 locatoin 指定名称的同名目录。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /img/ &#123;</span><br><span class=\"line\">\troot /<span class=\"keyword\">var</span>/www/image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若按照这种配置的话，则访问 /img/ 目录下的文件时，nginx 会去 /var/www/image/img/ 目录下找文件</p>\n<h2 id=\"nginx-反向代理\"><a class=\"markdownIt-Anchor\" href=\"#nginx-反向代理\">#</a> Nginx 反向代理</h2>\n<p>反向代理中的常用指令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxy_pass</span><br><span class=\"line\">proxy_set_header</span><br></pre></td></tr></table></figure>\n<h4 id=\"proxy_pass\"><a class=\"markdownIt-Anchor\" href=\"#proxy_pass\">#</a>  <code>proxy_pass</code></h4>\n<p>该指令用来设置被代理服务器地址，可以是主机名称、IP 地址加端口号形式。</p>\n<ul>\n<li>案例 1 代理到哔哩哔哩</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">   root   html;</span><br><span class=\"line\">   index  index.<span class=\"property\">html</span> index.<span class=\"property\">htm</span>;</span><br><span class=\"line\">   proxy_pass <span class=\"attr\">http</span>:<span class=\"comment\">//bilibili.com;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>案例 2 nginx 反向代理解决跨域<br>\n前端代码</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.<span class=\"property\">onclick</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> xhr = <span class=\"keyword\">new</span> <span class=\"title class_\">XMLHttpRequest</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.<span class=\"title function_\">open</span>(<span class=\"string\">&quot;GET&quot;</span>, <span class=\"string\">&quot;/api/portal/list&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.<span class=\"property\">onreadystatechange</span> = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (xhr.<span class=\"property\">readyState</span> == <span class=\"number\">4</span> &amp;&amp; xhr.<span class=\"property\">status</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xhr.<span class=\"property\">responseText</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  xhr.<span class=\"title function_\">send</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>express 服务端代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/portal/list&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;搞咩啊&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">9000</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>nginx 配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /api/ &#123;</span><br><span class=\"line\">    proxy_pass <span class=\"attr\">http</span>:<span class=\"comment\">//localhost:9000/;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>截取到 /api/ 将会转发到 <a href=\"http://localhost:9000/\">http://localhost:9000/</a></p>\n<h4 id=\"proxy_set_header\"><a class=\"markdownIt-Anchor\" href=\"#proxy_set_header\">#</a>  <code>proxy_set_header</code></h4>\n<p>该指令可以更改 Nginx 服务器接收到的客户端请求的请求头信息，然后将新的请求头发送给代理的服务器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// proxy_set_header X-Real-IP $remote_addr;</span></span><br><span class=\"line\"><span class=\"comment\">// proxy_set_header X-Real-Port $remote_port;</span></span><br><span class=\"line\"><span class=\"comment\">// proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span><br><span class=\"line\"><span class=\"comment\">// 三个 header 分别表示：</span></span><br><span class=\"line\"><span class=\"comment\">// X-Real-IP 客户端或上一级代理 ip</span></span><br><span class=\"line\"><span class=\"comment\">// X-Real-Port 客户端或上一级端口</span></span><br><span class=\"line\"><span class=\"comment\">// X-Forwarded-For 包含了客户端和各级代理 ip 的完整 ip 链路</span></span><br><span class=\"line\"><span class=\"comment\">// 其中 X-Real-IP 是必需的，后两项选填。当只存在一级 nginx 代理的时候 X-Real-IP 和 X-Forwarded-For 是一致的，而当存在多级代理的时候，X-Forwarded-For 就变成了如下形式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// $remote_addr 是前一节点的 IP，并不一定是用户的真实 IP。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx-vue-history-404-问题\"><a class=\"markdownIt-Anchor\" href=\"#nginx-vue-history-404-问题\">#</a> Nginx-Vue-History-404 问题</h2>\n<p>Vue histroy 模式 跳转路由 404 问题<br>\n问题原因：我们的服务器是根据页面路由，去按路径寻找资源的。我们打包好的 web 站点只有一个 html 页面，不存在其他资源目录下的 html，服务器找不到对应页面所以才报 404。<br>\n解决方案:  <code>try_files $uri $uri/ /index.html;</code></p>\n<p>如果给出的 file 都没有匹配到，则重新请求最后一个参数给定的 uri，就是新的 location 匹配<br>\n常见的变量：</p>\n<ul>\n<li>$uri 当前请求的 URI，但不含 “？” 后的参数</li>\n<li>$args 当前请求的参数，即 “？” 后的宇符串</li>\n<li>$arg_xxx 当前请求里的某个参数，“arg” 后是参数的名字</li>\n<li>$http_xxx 当前请求里的 xxx 头部对应的值</li>\n<li>$sent_http_xxx 返回给客户端的响应头部对应的值</li>\n<li>$remote_addr 客户端 IP 地址。</li>\n<li>$http_cookie 获取 cookie 值</li>\n<li>$cookie_xxx 当前请求的 cookie xxx 对应的值</li>\n<li>$request_uri 浏览器发起的不作任何修改的请求的 url 中的 path <a href=\"http://xn--www-lp6en1i.baidu.com/p1/file?d=111\">如在 www.baidu.com/p1/file?d=111</a>, 其值为 /p1/file?d=111</li>\n<li>$uri 指当前的请求 URI，不包括任何参数，反映任何内部重定向或 index 模块所做的修改</li>\n<li>$request_method 请求方法</li>\n</ul>\n<h2 id=\"nginx-go-access-日志分析器\"><a class=\"markdownIt-Anchor\" href=\"#nginx-go-access-日志分析器\">#</a> Nginx-Go-Access - 日志分析器</h2>\n<p><a href=\"https://xiaoman.blog.csdn.net/article/details/124546293\">https://xiaoman.blog.csdn.net/article/details/124546293</a></p>\n<h2 id=\"nginx-负载均衡-upstream\"><a class=\"markdownIt-Anchor\" href=\"#nginx-负载均衡-upstream\">#</a> Nginx - 负载均衡 upstream</h2>\n<p>upstream 的基本语法如下，一个 upstream 需要设置一个名称，这个名称可以在 server 里面当作 proxy 主机使用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream  node &#123;</span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9001</span>;</span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9002</span>;</span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9003</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    proxy_pass <span class=\"attr\">http</span>:<span class=\"comment\">//node;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>默认状态是按照轮询的方式去做负载的<br>\n使用 express 启动三个服务 分别是 9001 9002 9003</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/list&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;Nginx 负载均衡9001&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Nginx 负载均衡9001&quot;</span>, num);</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//------------------------------9001</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">9001</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;9001 success&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//-----------------------------------</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/list&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;Nginx 负载均衡9002&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Nginx 负载均衡9002&quot;</span>, num);</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//------------------------------9002</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">9002</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;9002 success&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//--------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;express&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">express</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/list&quot;</span>, <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  res.<span class=\"title function_\">json</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">code</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">message</span>: <span class=\"string\">&quot;Nginx 负载均衡9003&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Nginx 负载均衡9003&quot;</span>, num);</span><br><span class=\"line\">  num++;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//------------------------------9003</span></span><br><span class=\"line\">app.<span class=\"title function_\">listen</span>(<span class=\"number\">9003</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;9003 success&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>权重 weight</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream  node &#123;</span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9001</span> weight=<span class=\"number\">3</span>;</span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9002</span> weight=<span class=\"number\">2</span>;</span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9003</span> weight=<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>fail_timeout backup<br>\nail_timeout 是故障等待超时时间</li>\n</ol>\n<p>backup 是备用服务器参数，可以为一个 upstream 设置一个 backup 的 server，在生产 server 全部都出问题之后，可以自动切换到备用 server 上，为回复服务争取时间</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream  node &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9001</span> fail_timeout=<span class=\"number\">60</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9002</span> fail_timeout=<span class=\"number\">20</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    server <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">9003</span> backup;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Nginx"
            ]
        },
        {
            "id": "https://eucli.top/2023/05/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF/",
            "url": "https://eucli.top/2023/05/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF/",
            "title": "服务端",
            "date_published": "2023-05-29T10:20:34.000Z",
            "content_html": "<h1 id=\"学习-pm2\"><a class=\"markdownIt-Anchor\" href=\"#学习-pm2\">#</a> 学习 pm2</h1>\n<h2 id=\"pm2-node-应用进程管理器\"><a class=\"markdownIt-Anchor\" href=\"#pm2-node-应用进程管理器\">#</a> PM2 Node 应用进程管理器</h2>\n<p>pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务。</p>\n<h2 id=\"pm2-的主要特性\"><a class=\"markdownIt-Anchor\" href=\"#pm2-的主要特性\">#</a> PM2 的主要特性</h2>\n<ul>\n<li>内建负载均衡（使用 Node cluster 集群模块）</li>\n<li>后台运行</li>\n<li>0 秒停机重载</li>\n<li>具有 Ubuntu 和 CentOS 的启动脚本</li>\n<li>停止不稳定的进程（避免无限循环）</li>\n<li>控制台检测</li>\n<li>提供 HTTP API</li>\n<li>远程控制和实时的接口 API (Nodejs 模块，允许和 PM2 进程管理器交互)</li>\n</ul>\n<ol>\n<li>安装 &amp; 目录<br>\n运行以下命令进行全局安装：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g pm2</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>常用命令</li>\n</ol>\n<ul>\n<li>启动命令</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 start app.js</span><br></pre></td></tr></table></figure>\n<ul>\n<li>命令行参数<br>\n我们可以在最基本的启动命令后面，添加一些参数选项，去满足我们的需求，常用的参数选项如下所示：<br>\n–watch：监听应用目录的变化，一旦发生变化，自动重启。<br>\n-i or --instance：启用多少个实例，可用于负载均衡，如果 -i 0 或者 -i max，则根据当前机器核数确定实例数目。<br>\n–ignore-watch：排除监听的目录或文件，可以是特定的文件名，也可以是正则。</li>\n</ul>\n<p>我们在启动命令后面加入以上的一些参数，完整的启动命令如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start app.js --watch -i max -n xiaoman</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>重启命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 restart app.js</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>停止命令<br>\n停止特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令停止相应的应用；</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 stop app_name | app_id</span><br></pre></td></tr></table></figure>\n<p>如果需要停止全部的应用，则使用以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 stop all</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>删除命令<br>\n删除特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令删除相应的应用；</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 delete app_name | app_id</span><br></pre></td></tr></table></figure>\n<p>如果需要删除全部的应用，则使用以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 delete all</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>查看有哪些进程</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 list</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a class=\"markdownIt-Anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>如果我们使用命令行参数定义一些选项，那么每次启动进程时，都需要敲上一大堆的命令，非常繁琐；所以我们可以使用配置文件来将命令行参数进行配置，配置文件里的配置项跟命令行参数是基本一致的；如下所示 pm2 的配置文件 pm2.json ，然后在 package.json 文件中配置启动命令 “pm2”: “pm2 start pm2.json” ，这样我们只需要运行 npm run pm2 就可以使用 pm2 启动我们的 express 项目，并且相关运行参数直接在 pm2.json 中配置好了。相关配置项表示的意义在下面文件中都已经注释说明</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;apps&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;express_project&quot;</span>,       <span class=\"comment\">// 项目名</span></span><br><span class=\"line\">        <span class=\"string\">&quot;script&quot;</span>: <span class=\"string\">&quot;app.js&quot;</span>,              <span class=\"comment\">// 执行文件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;cwd&quot;</span>: <span class=\"string\">&quot;./&quot;</span>,                     <span class=\"comment\">// 根目录</span></span><br><span class=\"line\">        <span class=\"string\">&quot;args&quot;</span>: <span class=\"string\">&quot;&quot;</span>,                      <span class=\"comment\">// 传递给脚本的参数</span></span><br><span class=\"line\">        <span class=\"string\">&quot;interpreter&quot;</span>: <span class=\"string\">&quot;&quot;</span>,               <span class=\"comment\">// 指定的脚本解释器</span></span><br><span class=\"line\">        <span class=\"string\">&quot;interpreter_args&quot;</span>: <span class=\"string\">&quot;&quot;</span>,          <span class=\"comment\">// 传递给解释器的参数</span></span><br><span class=\"line\">        <span class=\"string\">&quot;watch&quot;</span>: <span class=\"literal\">true</span>,                   <span class=\"comment\">// 是否监听文件变动然后重启</span></span><br><span class=\"line\">        <span class=\"string\">&quot;ignore_watch&quot;</span>: [                <span class=\"comment\">// 不用监听的文件</span></span><br><span class=\"line\">            <span class=\"string\">&quot;node_modules&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;public&quot;</span></span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"string\">&quot;exec_mode&quot;</span>: <span class=\"string\">&quot;cluster_mode&quot;</span>,     <span class=\"comment\">// 应用启动模式，支持 fork 和 cluster 模式</span></span><br><span class=\"line\">        <span class=\"string\">&quot;instances&quot;</span>: <span class=\"string\">&quot;max&quot;</span>,              <span class=\"comment\">// 应用启动实例个数，仅在 cluster 模式有效 默认为 fork</span></span><br><span class=\"line\">        <span class=\"string\">&quot;error_file&quot;</span>: <span class=\"string\">&quot;./logs/app-err.log&quot;</span>,         <span class=\"comment\">// 错误日志文件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;out_file&quot;</span>: <span class=\"string\">&quot;./logs/app-out.log&quot;</span>,           <span class=\"comment\">// 正常日志文件</span></span><br><span class=\"line\">        <span class=\"string\">&quot;merge_logs&quot;</span>: <span class=\"literal\">true</span>,                         <span class=\"comment\">// 设置追加日志而不是新建日志</span></span><br><span class=\"line\">        <span class=\"string\">&quot;log_date_format&quot;</span>: <span class=\"string\">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>,   <span class=\"comment\">// 指定日志文件的时间格式</span></span><br><span class=\"line\">        <span class=\"string\">&quot;min_uptime&quot;</span>: <span class=\"string\">&quot;60s&quot;</span>,                        <span class=\"comment\">// 应用运行少于时间被认为是异常启动</span></span><br><span class=\"line\">        <span class=\"string\">&quot;max_restarts&quot;</span>: <span class=\"number\">30</span>,                         <span class=\"comment\">// 最大异常重启次数</span></span><br><span class=\"line\">        <span class=\"string\">&quot;autorestart&quot;</span>: <span class=\"literal\">true</span>,                        <span class=\"comment\">// 默认为 true, 发生异常的情况下自动重启</span></span><br><span class=\"line\">        <span class=\"string\">&quot;restart_delay&quot;</span>: <span class=\"string\">&quot;60&quot;</span>                       <span class=\"comment\">// 异常重启情况下，延时重启时间</span></span><br><span class=\"line\">        <span class=\"string\">&quot;env&quot;</span>: &#123;</span><br><span class=\"line\">           <span class=\"string\">&quot;NODE_ENV&quot;</span>: <span class=\"string\">&quot;production&quot;</span>,                <span class=\"comment\">// 环境参数，当前指定为生产环境</span></span><br><span class=\"line\">           <span class=\"string\">&quot;REMOTE_ADDR&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;env_dev&quot;</span>: &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;NODE_ENV&quot;</span>: <span class=\"string\">&quot;development&quot;</span>,              <span class=\"comment\">// 环境参数，当前指定为开发环境</span></span><br><span class=\"line\">            <span class=\"string\">&quot;REMOTE_ADDR&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"string\">&quot;env_test&quot;</span>: &#123;                               <span class=\"comment\">// 环境参数，当前指定为测试环境</span></span><br><span class=\"line\">            <span class=\"string\">&quot;NODE_ENV&quot;</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;REMOTE_ADDR&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"高阶应用\"><a class=\"markdownIt-Anchor\" href=\"#高阶应用\">#</a> 高阶应用</h2>\n<ol>\n<li>负载均衡<br>\n可以使用 -i 参数配置集群数，实现负载均衡，相关命令如下</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 start app.js -i 3 // 开启三个进程</span><br><span class=\"line\">$ pm2 start app.js -i max // 根据机器CPU核数，开启对应数目的进程</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>日志查看<br>\n我们可以通过打开日志文件查看日志外，还可以通过 pm2 logs 来查看实时日志，这点有对于线上问题排查；日志查看命令如下：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 logs</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>监控<br>\n我们可以使用以下命令，查看当前通过 pm2 运行的进程的状态；</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ pm2 monit</span><br></pre></td></tr></table></figure>\n<h1 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h1>\n<h2 id=\"认识-linux\"><a class=\"markdownIt-Anchor\" href=\"#认识-linux\">#</a> 认识 Linux</h2>\n<p>是一个基于 POSIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<ol>\n<li>\n<p>使用 SSH 连接服务器<br>\n window 安装 SSH（安装地址） <a href=\"http://www.mls-software.com/opensshd.html\">mls-software.com</a><br>\nMacbook 免安装自带</p>\n</li>\n<li>\n<p>使用方式<br>\n打开终端，输入：<br>\n <code>ssh  账号默认root@服务器地址</code> <br>\n例子：  <code>ssh root@123.456.789</code>  然后选择 Y ，然后输入密码即可</p>\n</li>\n<li>\n<p>基本命令</p>\n</li>\n</ol>\n<ul>\n<li><code>ls</code>  : 用来查看当前的目录的文件</li>\n<li><code>cd</code>  : 用来切换目录</li>\n<li><code>wget</code>  : 用来下载一些东西<br>\n下载 nodejs:  <code>wget https://cdn.npmmirror.com/binaries/node/v14.19.1/node-v14.19.1-linux-x64.tar.xz</code> <br>\n 下载完成后解压，使用 <code>tar</code>  命令：</li>\n<li>-c: 压缩</li>\n<li>-x：解压</li>\n<li>-t：查看内容</li>\n<li>-r：向压缩归档文件末尾追加文件</li>\n<li>-u：更新原压缩包中的文件<br>\n这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的:</li>\n<li>-z：有 gzip 属性的</li>\n<li>-j：有 bz2 属性的</li>\n<li>-Z：有 compress 属性的</li>\n<li>-v：显示所有过程</li>\n<li>-O：将文件解开到标准输出<br>\n下面的参数 - f 是必须的:-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</li>\n</ul>\n<p><code>tar -xf all.tar</code> : 这条命令是解出 all.tar 包中所有文件，-x 是解开的意思<br>\n <code>tar -cf all.tar *.jpg</code>  这条命令是将所有.jpg 的文件打成一个名为 all.tar 的包。-c 是表示产生新的包，-f 指定包的文件名。</p>\n<ol start=\"4\">\n<li>配置环境变量<br>\n <code>pwd</code>  用于显示工作目录<br>\n使用 pwd 命令获取 node bin 的位置<br>\n前往根目录下面的 etc/profile 此文件涉及系统的环境，即环境变量相关。这里修改会对所有用户起作用<br>\n使用 vi 命令编辑该文件 vi profile<br>\n 然后按一下 I 键 进入编辑模式<br>\n在最后一行添加： <code>export PATH=$PATH:你的目录/node-v14.19.1-linux-x64/bin</code> <br>\n 然后执行 source profile 或者重启 linux<br>\n 配置淘宝代理 npm config set registry <a href=\"https://registry.npm.taobao.org\">https://registry.npm.taobao.org</a></li>\n</ol>\n<h2 id=\"linux-文件属性\"><a class=\"markdownIt-Anchor\" href=\"#linux-文件属性\">#</a> Linux 文件属性</h2>\n<h3 id=\"ls-l-查看文件属性信息可简写为ll\"><a class=\"markdownIt-Anchor\" href=\"#ls-l-查看文件属性信息可简写为ll\">#</a>  <code>ls -l</code>  查看文件属性信息 (可简写为 <code>ll</code> )</h3>\n<ul>\n<li>\n<p>首字母作用<br>\n文件的开头对应是 -<br>\n 目录开头对应的是 d<br>\n 快捷方式对应的是 l<br>\nU 盘对应的是 b<br>\n 鼠标键盘等硬件对应的 c</p>\n</li>\n<li>\n<p><code>rwx</code> : 读 | 写 | 可执行，每三个一组（该文件创建者，该文件所在的用户组，其他用户权限）<br>\n <code>-</code>  为缺少权限，如缺少 “可执行” 权限，则为 <code>rw-</code></p>\n</li>\n</ul>\n<h2 id=\"linux-权限\"><a class=\"markdownIt-Anchor\" href=\"#linux-权限\">#</a> Linux 权限</h2>\n<p>RWX 分别是可读 可写 可执行权限，这个权限我们可以修改使用 chmod 777 文件名<br>\n我们先学习一组规律：</p>\n<ul>\n<li>\n<p>读 ------R 对应数字 4</p>\n</li>\n<li>\n<p>写 ------W 对应数字 2</p>\n</li>\n<li>\n<p>可执行 -----X 对应数字 1</p>\n</li>\n</ul>\n<p>所以 7 就是可读可写可执行权限</p>\n",
            "tags": [
                "Nginx",
                "Linux"
            ]
        }
    ]
}