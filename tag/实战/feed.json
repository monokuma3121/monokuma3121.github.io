{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucliの小窝 • All posts by \"实战\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/11/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%EF%BC%9AVite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "url": "https://eucli.top/2023/11/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%EF%BC%9AVite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "title": "快速搭建：Vite + Vue3 + Typescript + Pinia + Vueuse项目",
            "date_published": "2023-11-06T13:45:48.000Z",
            "content_html": "<h1 id=\"vite-vue3-typescript-pinia-vueuse\"><a class=\"anchor\" href=\"#vite-vue3-typescript-pinia-vueuse\">#</a> Vite + Vue3 + Typescript + Pinia + Vueuse</h1>\n<blockquote>\n<h2 id=\"一个大厂企业级前端项目\"><a class=\"anchor\" href=\"#一个大厂企业级前端项目\">#</a> 一个大厂企业级前端项目</h2>\n</blockquote>\n<h1 id=\"通过这篇文章你可以学到\"><a class=\"anchor\" href=\"#通过这篇文章你可以学到\">#</a> 通过这篇文章你可以学到</h1>\n<ul>\n<li>如何使用使用 Vite 搭建项目</li>\n<li>如何在 Vite 中集成  <code>typescript</code></li>\n<li>如何在 Vite 中集成  <code>vue-router4</code>  和  <code>pinia</code></li>\n<li>如何使用 vue3 的伴侣  <code>vueuse</code></li>\n<li>如何在项目中集成  <code>eslint</code>  和  <code>prettier</code>  保证代码质量</li>\n<li>如何规范化  <code>git</code>  提交信息</li>\n<li>如何为团队开发 <code>专属的项目模板</code></li>\n</ul>\n<h1 id=\"环境依赖版本\"><a class=\"anchor\" href=\"#环境依赖版本\">#</a> 环境依赖版本</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2Rl\">node</span>：v14.15.4</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRl\">vite</span>：^2.8.0</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZQ==\">vue</span>：^3.2.25</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0\">typescript</span>：^4.5.4</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Bpbmlh\">pinia</span>：^2.0.12</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JvdXRlcg==\">vue-router</span>：^4.0.14</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZXVzZS92dWV1c2U=\">vueuse</span>：^8.2.0</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQ=\">eslint</span>：^8.12.0</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL3ByZXR0aWVy\">prettier</span>：^2.6.1</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbW1pdGl6ZW4vY3otY2xp\">commitizen</span>：^4.2.4</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGljb2RlL2h1c2t5\">husky</span>：^7.0.4</li>\n</ul>\n<p><strong>长话短说，直接开干～</strong></p>\n<h1 id=\"1-初始化项目\"><a class=\"anchor\" href=\"#1-初始化项目\">#</a> 1. 初始化项目</h1>\n<h2 id=\"按步骤提示初始化\"><a class=\"anchor\" href=\"#按步骤提示初始化\">#</a> 按步骤提示初始化：</h2>\n<ol>\n<li>使用 vite-cli 命令</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># pnpm</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> create vite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># yarn</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">yarn</span> create vite</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># npm</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">npm</span> init vite@latest</pre></td></tr></table></figure><ol start=\"2\">\n<li>输入项目名：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>? Project name:  vite-vue3-ts-pinia</pre></td></tr></table></figure><ol start=\"3\">\n<li>选择一个框架（vue）</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>? Select a framework: » - Use arrow-keys. Return to submit.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     vanilla // 原生js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">></span>   vue     // 默认就是 vue3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     react   // react</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     preact  // 轻量化react框架</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     lit     // 轻量级web组件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     svelte  // svelte框架</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 typescript</li>\n</ol>\n<pre><code>? Select a variant: › - Use arrow-keys. Return to submit.\n     vue\n ❯   vue-ts\n</code></pre>\n<ol start=\"5\">\n<li>启动项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> vite-vue3-ts-pinia <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> run dev</pre></td></tr></table></figure><h2 id=\"快速初始化建议使用\"><a class=\"anchor\" href=\"#快速初始化建议使用\">#</a> 快速初始化（建议使用）：</h2>\n<pre><code># pnpm\npnpm create vite project-name -- --template vue-ts\n\n# yarn\nyarn create vite project-name --template vue-ts\n\n# npm 6.x\nnpm init vite@latest project-name --template vue-ts\n \n# npm 7+, 需要额外的双横线：\nnpm init vite@latest project-name -- --template vue-ts\n</code></pre>\n<h2 id=\"集成配置\"><a class=\"anchor\" href=\"#集成配置\">#</a> 集成配置</h2>\n<ol>\n<li>为保证 node 的使用</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i @types/node --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>修改  <code>tsconfig.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token string\">\"node_modules/@types\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string\">\"src/types\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"useDefineForClassFields\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">\"@\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.vue\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// https://vitejs.dev/config/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置别名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token string-property property\">\"@\"</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  server<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 启动端口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    hmr<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      host<span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      port<span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 设置 https 代理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token string-property property\">\"/api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        target<span class=\"token operator\">:</span> <span class=\"token string\">\"your https address\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function-variable function\">rewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\/api</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"2-代码质量风格的统一\"><a class=\"anchor\" href=\"#2-代码质量风格的统一\">#</a> 2. 代码质量风格的统一</h1>\n<h2 id=\"集成-eslint\"><a class=\"anchor\" href=\"#集成-eslint\">#</a> 集成  <code>eslint</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i eslint eslint-plugin-vue --save-dev</pre></td></tr></table></figure><p>由于 ESLint 默认使用  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc3ByZWU=\">Espree</span>  进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装  <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\"> <code>@typescript-eslint/parser</code> </a> 替代掉默认的解析器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> @typescript-eslint/parser --save-dev</pre></td></tr></table></figure><p>安装对应的插件  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGVzY3JpcHQtZXNsaW50L3R5cGVzY3JpcHQtZXNsaW50L3RyZWUvbWFzdGVyL3BhY2thZ2VzL2VzbGludC1wbHVnaW4=\">@typescript-eslint/eslint-plugin</span>  它作为 eslint 默认规则的补充，提供了一些额外的适用于 ts 语法的规则。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> @typescript-eslint/eslint-plugin --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建配置文件：  <code>.eslintrc.js</code>   或   <code>.eslintrc.json</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-eslint-parser\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">ecmaFeatures</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">jsx</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:vue/vue3-recommended\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// override/add rules settings here, such as:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建忽略文件： <code>.eslintignore</code></li>\n</ol>\n<pre><code>node_modules/\ndist/\nindex.html\n</code></pre>\n<ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"eslint:comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"使用 ESLint 检查并自动修复 src 目录下所有扩展名为 .js 和 .vue 的文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .js,.vue --ignore-path .gitignore --fix src\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"集成-prettier\"><a class=\"anchor\" href=\"#集成-prettier\">#</a> 集成  <code>prettier</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i prettier eslint-config-prettier eslint-plugin-prettier --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建配置文件：  <code>prettier.config.js</code>  或  <code>.prettierrc.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 一行最多 80 字符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">printWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 使用 4 个空格缩进</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">tabWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 不使用 tab 缩进，而使用空格</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">useTabs</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 行尾需要有分号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">semi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 使用单引号代替双引号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">singleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 对象的 key 仅在必要时用引号</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token literal-property property\">quoteProps</span><span class=\"token operator\">:</span> <span class=\"token string\">\"as-needed\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//jsx 不使用单引号，而使用双引号</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token literal-property property\">jsxSingleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 末尾使用逗号</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token literal-property property\">trailingComma</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 大括号内的首尾需要空格 &#123;foo: bar&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token literal-property property\">bracketSpacing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//jsx 标签的反尖括号需要换行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token literal-property property\">jsxBracketSameLine</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 箭头函数，只有一个参数的时候，也需要括号</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token literal-property property\">arrowParens</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 每个文件格式化的范围是文件的全部内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token literal-property property\">rangeStart</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token literal-property property\">rangeEnd</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 不需要写文件开头的 @prettier</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token literal-property property\">requirePragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 不需要自动在文件开头插入 @prettier</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token literal-property property\">insertPragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 使用默认的折行标准</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token literal-property property\">proseWrap</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 根据显示样式决定 html 要不要折行</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token literal-property property\">htmlWhitespaceSensitivity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// 换行符使用 lf</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token literal-property property\">endOfLine</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改  <code>.eslintrc.js</code>  配置</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">'plugin:vue/vue3-recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">'prettier'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">'plugin:prettier/recommended'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"prettier:comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"自动格式化当前目录下的所有文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"3-集成-pinia\"><a class=\"anchor\" href=\"#3-集成-pinia\">#</a> 3. 集成  <code>pinia</code></h1>\n<p><code>Pinia</code>  读音：['piːnə]，是 Vue 官方团队推荐代替 <code>Vuex</code>  的一款轻量级状态管理库。</p>\n<p><strong>Pinia 有如下特点：</strong></p>\n<ul>\n<li>完整的 typescript 的支持；</li>\n<li>足够轻量，压缩后的体积只有 1.6kb;</li>\n<li>去除 mutations，只有 state，getters，actions（这是我最喜欢的一个特点）；</li>\n<li>actions 支持同步和异步；</li>\n<li>没有模块嵌套，只有 store 的概念，store 之间可以自由使用，更好的代码分割；</li>\n<li>无需手动添加 store，store 一旦创建便会自动添加；</li>\n</ul>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<pre><code> pnpm i pinia --save\n</code></pre>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<ol>\n<li>新建 src/store 目录并在其下面创建 index.ts，导出 store</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"./store\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 vue 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 挂载 pinia</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 挂载实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>定义 State：</strong> 在 src/store 下面创建一个 user.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  id<span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//id 必填，且需要唯一</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>获取 State：</strong> 在 src/components/usePinia.vue 中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span> setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useUserStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/user'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">const</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>修改 State：</strong></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 直接修改 state （不建议）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> userStore<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'李四'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 2. 通过 actions 去修改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span> setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useUserStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/user'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">const</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> userStore<span class=\"token punctuation\">.</span><span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><blockquote>\n<p>更详细上手指南：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDQ5MTk2OTY3NzcwOTgwMzg5\">链接</span> 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS52dWVqcy5vcmcvaW50cm9kdWN0aW9uLmh0bWw=\">链接</span></p>\n</blockquote>\n<h1 id=\"4-集成-vue-router4\"><a class=\"anchor\" href=\"#4-集成-vue-router4\">#</a> 4. 集成  <code>vue-router4</code></h1>\n<h2 id=\"安装-2\"><a class=\"anchor\" href=\"#安装-2\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i vue-router <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><h2 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用</h2>\n<ol>\n<li>新建 src/router 目录并在其下面创建 index.ts，导出 router</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHistory<span class=\"token punctuation\">,</span> RouteRecordRaw <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      requireAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/pages/login.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      requireAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/pages/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 vue 实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 挂载实例</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改 App.vue</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">&lt;</span>RouterView <span class=\"token operator\">/</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"5-集成-vueuse\"><a class=\"anchor\" href=\"#5-集成-vueuse\">#</a> 5. 集成  <code>vueuse</code></h1>\n<p><code>VueUse</code>  是一个基于   <code>Composition API</code>  的实用函数集合。</p>\n<h2 id=\"安装-3\"><a class=\"anchor\" href=\"#安装-3\">#</a> 安装</h2>\n<pre><code> pnpm i @vueuse/core\n</code></pre>\n<h2 id=\"使用-3\"><a class=\"anchor\" href=\"#使用-3\">#</a> 使用</h2>\n<ol>\n<li>创建一个新的 src/page/vueUse.vue 页面来做一个简单的 demo</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span> 测试 vueUse 的鼠标坐标 <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Mouse<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span> x <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useMouse <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vueuse/core'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         name<span class=\"token operator\">:</span> <span class=\"token string\">'VueUse'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             x<span class=\"token punctuation\">,</span> y</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>useMouse 只是 vueuse 的一个最基本的函数库，还有许多，总会有一个适合你；</p>\n<p>更多函数官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV1c2Uub3JnLw==\">链接</span></p>\n<h1 id=\"6-css-的集成\"><a class=\"anchor\" href=\"#6-css-的集成\">#</a> 6. CSS 的集成</h1>\n<h2 id=\"方案一原生-css-variable-新特性\"><a class=\"anchor\" href=\"#方案一原生-css-variable-新特性\">#</a> 方案一：原生 css variable 新特性：</h2>\n<p>原生支持，不需要第三方插件，具体使用文档可 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL3Zhcg==\">查看</span></p>\n<ol>\n<li>新建文件 src/styles/index.css</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">:root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   --main-bg-color<span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token selector\">​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   background-color<span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-bg-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注：还可以增加 PostCSS 配置，(任何受  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvcG9zdGNzcy1sb2FkLWNvbmZpZw==\">postcss-load-config</span> 支持的格式，例如   <code>postcss.config.js</code>  )，它将会自动应用于所有已导入的 CSS。</p>\n<h2 id=\"方案二scss-或-less\"><a class=\"anchor\" href=\"#方案二scss-或-less\">#</a> 方案二：scss 或 less：</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># .scss and .sass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> sass</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\"># .less</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> <span class=\"token function\">less</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用在 .vue 文件模板中</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// .scss</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>欢迎使用 scss<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">&lt;</span>style lang<span class=\"token operator\">=</span><span class=\"token string\">\"scss\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">.</span>root <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// .less</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>欢迎使用 less<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token operator\">&lt;</span>style lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">.</span>root <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"7-集成-axios\"><a class=\"anchor\" href=\"#7-集成-axios\">#</a> 7. 集成  <code>axios</code></h1>\n<p><code>axios</code>  是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>\n<h2 id=\"安装-4\"><a class=\"anchor\" href=\"#安装-4\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i axios</pre></td></tr></table></figure><h2 id=\"使用-4\"><a class=\"anchor\" href=\"#使用-4\">#</a> 使用：</h2>\n<ol>\n<li>新建 src/utils/axios.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> AxiosResponse<span class=\"token punctuation\">,</span> AxiosRequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Request interceptors</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>service<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Response interceptors</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>service<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> AxiosResponse<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> service<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在页面中使用即可</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/axios'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestRes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    url<span class=\"token operator\">:</span> <span class=\"token string\">'/api/xxx'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"封装请求参数和响应数据的所有-api-可选项\"><a class=\"anchor\" href=\"#封装请求参数和响应数据的所有-api-可选项\">#</a> 封装请求参数和响应数据的所有 api (可选项)</h2>\n<ol>\n<li>新建  <code>src/api/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> login <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module/login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> index <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module/index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>新建  <code>src/api/module/login.ts</code>  和  <code>src/api/module/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 登录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IResponseType<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  code<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  status<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILogin</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  expires<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IResponseType<span class=\"token operator\">&lt;</span>ILogin<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/api/auth/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      password<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>由于使用了 typescript，所以需新增  <code>src/types/shims-axios.d.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> AxiosRequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 自定义扩展 axios 模块</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Maybe</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"axios\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AxiosInstance</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">head</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">put</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">patch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在  <code>src/pages/request.vue</code>  页面中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token constant\">API</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/api'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestRes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"8-css-的-ui-样式库\"><a class=\"anchor\" href=\"#8-css-的-ui-样式库\">#</a> 8. css 的 UI 样式库</h1>\n<blockquote>\n<p>可选很多，根据自己项目的需求去进行选择即可</p>\n</blockquote>\n<p><strong>注意：UI 库一般需要按需引入（下面以  <code>element-plus</code>  为例）</strong></p>\n<ol>\n<li>安装  <code>vite-plugin-style-import</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i vite-plugin-style-import --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> styleImport <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-style-import'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">styleImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            libs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    libraryName<span class=\"token operator\">:</span> <span class=\"token string\">'element-plus'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    esModule<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token function-variable function\">resolveStyle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">element-plus/lib/theme-chalk/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.css</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    ensureStyleFile<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 忽略文件是否存在，导入不存在的 CSS 文件时防止错误。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"9-使用-commitizen-规范-git-提交\"><a class=\"anchor\" href=\"#9-使用-commitizen-规范-git-提交\">#</a> 9. 使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbW1pdGl6ZW4vY3otY2xp\">commitizen</span> 规范 git 提交</h1>\n<p>为了使团队多人协作更加的规范，所以需要每次在 git 提交的时候，做一次硬性规范提交，规范 git 的提交信息</p>\n<h2 id=\"安装-commitizen-交互式提交-自定义提示文案-commit-规范\"><a class=\"anchor\" href=\"#安装-commitizen-交互式提交-自定义提示文案-commit-规范\">#</a> 安装  <code>commitizen</code>  (交互式提交 + 自定义提示文案 + Commit 规范)</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> commitizen cz-conventional-changelog @commitlint/config-conventional @commitlint/cli commitlint-config-cz cz-customizable</pre></td></tr></table></figure><ol start=\"2\">\n<li>配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"commit:comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"引导设置规范化的提交信息\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"commit\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"git-cz\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"commitizen\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node_modules/cz-customizable\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>新增配置  <code>commitlint.config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@commitlint/config-conventional\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cz\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string-property property\">\"type-enum\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"feature\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 新功能（feature）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"bug\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 此项特别针对 bug 号，用于向测试反馈 bug 列表的 bug 修改情况</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 修补 bug</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 更新 ui</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"docs\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文档（documentation）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 格式（不影响代码运行的变动）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"perf\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 性能优化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"release\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 发布</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 部署</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"refactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 重构（即不是新增功能，也不是修改 bug 的代码变动）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 增加测试</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"chore\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 构建过程或辅助工具的变动</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"revert\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//feat (pencil): add ‘graphiteWidth’ option (撤销之前的 commit)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"merge\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 合并分支， 例如： merge（前端页面）： feature-xxxx 修改线程地址</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打包</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// &lt;type> 格式 小写</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token string-property property\">\"type-case\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lower-case\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// &lt;type> 不能为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token string-property property\">\"type-empty\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// &lt;scope> 范围不能为空</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token string-property property\">\"scope-empty\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// &lt;scope> 范围格式</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string-property property\">\"scope-case\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// &lt;subject> 主要 message 不能为空</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string-property property\">\"subject-empty\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// &lt;subject> 以什么为结束标志，禁用</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string-property property\">\"subject-full-stop\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// &lt;subject> 格式，禁用</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string-property property\">\"subject-case\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// &lt;body> 以空行开头</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string-property property\">\"body-leading-blank\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token string-property property\">\"header-max-length\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>自定义提示则添加  <code>.cz-config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">types</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"feature\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"feature:  增加新功能\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bug\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bug:      测试反馈bug列表中的bug号\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fix:      修复bug\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ui:       更新UI\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docs\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docs:     文档变更\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"style:    代码格式(不影响代码运行的变动)\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"perf\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"perf:     性能优化\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"refactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"refactor: 重构(既不是增加feature，也不是修复bug)\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"release\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"release:  发布\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"deploy:   部署\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test:     增加测试\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chore\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chore:    构建过程或辅助工具的变动(更改配置文件)\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"revert\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"revert:   回退\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build:    打包\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// override the messages, defaults are as follows</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token literal-property property\">messages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请选择提交类型:\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token literal-property property\">customScope</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请输入您修改的范围(可选):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">subject</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请简要描述提交 message (必填):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请输入详细描述(可选，待优化去除，跳过即可):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token literal-property property\">footer</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请输入要关闭的issue(待优化去除，跳过即可):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token literal-property property\">confirmCommit</span><span class=\"token operator\">:</span> <span class=\"token string\">\"确认使用以上信息提交？(y/n/e/h)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token literal-property property\">allowCustomScopes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token literal-property property\">skipQuestions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"footer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token literal-property property\">subjectLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>交互界面测试</li>\n</ol>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2be96b13d3c427e919b11e5bc5404e4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"carbon.png\" /></p>\n<ul>\n<li>到目前只是规范了 git 的提交信息，我们对提交前代码的检查还没有做到位，例如 ESLint、Prettier，毕竟谁都会有疏忽的时候，</li>\n<li>那么现在我们的 husky 就闪亮登场了</li>\n</ul>\n<h2 id=\"安装-husky\"><a class=\"anchor\" href=\"#安装-husky\">#</a> 安装 husky</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 安装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> i husky lint-staged <span class=\"token parameter variable\">-D</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 生成 .husky 的文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>npx husky <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 添加 hooks，会在 .husky 目录下生成一个 pre-commit 脚本文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>npx husky <span class=\"token function\">add</span> .husky/pre-commit <span class=\"token string\">\"npx --no-install lint-staged\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 4. 添加 commit-msg</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>npx husky <span class=\"token function\">add</span> .husky/commit-msg <span class=\"token string\">'npx --no-install commitlint --edit \"$1\"'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 5. 使用 `git commit -m\"message\"` 就会看到 hook 生效了。</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>添加配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token property\">\"*.&#123;js,ts&#125;\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token string\">\"npm run eslint\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token string\">\"npm run prettier\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"提交日志可选\"><a class=\"anchor\" href=\"#提交日志可选\">#</a> 提交日志（可选）</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==\">standard-version</span> 或者 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvY29udmVudGlvbmFsLWNoYW5nZWxvZw==\">conventional-changelog</span></li>\n</ul>\n",
            "tags": [
                "实战",
                "快速搭建"
            ]
        },
        {
            "id": "https://eucli.top/2023/10/12/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/",
            "url": "https://eucli.top/2023/10/12/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/",
            "title": "项目上线流程",
            "date_published": "2023-10-12T13:45:48.000Z",
            "content_html": "<h1 id=\"项目上线\"><a class=\"anchor\" href=\"#项目上线\">#</a> 项目上线</h1>\n<h4 id=\"1-环境替换\"><a class=\"anchor\" href=\"#1-环境替换\">#</a> 1、 环境替换</h4>\n<h4 id=\"2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\"><a class=\"anchor\" href=\"#2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\">#</a> 2、 打包（工作中一般前端就做到这，把打包后的 dist 文件夹交上去就行了）</h4>\n<h4 id=\"3-把-dist-上传到服务器-配置-nginx-代理\"><a class=\"anchor\" href=\"#3-把-dist-上传到服务器-配置-nginx-代理\">#</a> 3、 把 dist 上传到服务器 - 配置 nginx 代理</h4>\n<blockquote>\n<p>如果后端服务和前端代码（dist）放在一个域下面就不存在跨域，不用配置 nginx 的跨域部分</p>\n</blockquote>\n<ol>\n<li>连接服务器， <code>cd etc</code>  后安装 nginx： <code>yum install nginx</code></li>\n<li><code>cd nginx</code>  后进行配置 <code>vim nginx.conf</code> :</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>location <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  root <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  index index<span class=\"token punctuation\">.</span>html index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改后重启： <code>systemctl restart nginx.service</code> , 随后项目便上线了</li>\n</ol>\n<h2 id=\"代码上传仓库\"><a class=\"anchor\" href=\"#代码上传仓库\">#</a> 代码上传仓库</h2>\n<blockquote>\n<p>需要安装 git 并使用 git 初始化项目才行</p>\n</blockquote>\n<ol>\n<li>点击 vscode 侧边栏的 git 图标，初始化仓库</li>\n<li>创建 <code>.gitignore</code> , 忽略 <code>node_modules</code>  和图片<br />\n.gitignore 文件：</li>\n</ol>\n<pre><code>node_modules\n/public/upload\n</code></pre>\n<ol start=\"3\">\n<li>点击提交。（此时本地仓库已经建立好了）</li>\n<li>建立远程仓库，复制地址</li>\n<li>点击 vscodegit 图标，点击右上角的 <code>···</code> , 远程 - 添加远程存储库。（会要求你输入账号密码）</li>\n<li>同步仓库：点击 <code>发布Branch</code></li>\n</ol>\n<h2 id=\"云服务器\"><a class=\"anchor\" href=\"#云服务器\">#</a> 云服务器</h2>\n<ol>\n<li>连接服务器，安装 nodejs 等环境</li>\n<li>云服务器根目录下创建 <code>www</code>  文件夹（非绝对），随后 <code>git clone</code>  克隆项目</li>\n<li>安装项目依赖（ <code>npm i</code>  之类的），安装 nodemon，启动项目</li>\n</ol>\n<h2 id=\"域名\"><a class=\"anchor\" href=\"#域名\">#</a> 域名</h2>\n<p>域名解析：域名和 ip 地址作对应<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/Y@O2LLG\" alt=\"\" /> %522WUKJWZH$} 8N.png)</p>\n<h2 id=\"配置-https-证书\"><a class=\"anchor\" href=\"#配置-https-证书\">#</a> 配置 HTTPS 证书</h2>\n<p>https 本意是 &lt;span style=&quot;color:red&quot;&gt;http + SSL (Secure Sockets Layer 安全套接层)&lt;/span&gt;<br />\nhttps 可以 &lt;span style=&quot;color:red&quot;&gt; 加密 HTTP 报文 &lt;/span&gt;，所以大家可以理解为是安全的 HTTP<br />\n 工具官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZXJ0Ym90LmVmZi5vcmcv\">https://certbot.eff.org/</span><br />\n 操作流程 (必须在服务器端进行)：</p>\n<ol>\n<li>下载工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbC5lZmYub3Jn\">https://dl.eff.org</span></li>\n<li>安装工具</li>\n<li>管理员运行命令  <code>certbot certonly --standalone</code> , 输入邮箱和域名即可获得证书</li>\n<li>代码配置</li>\n<li>证书更新 证书有效期为三个月，可以通过下面命令更新</li>\n</ol>\n<pre><code>## 一般更新\ncertbot renew\n## 强制更新\ncertbot --force-renew\n</code></pre>\n",
            "tags": [
                "实战"
            ]
        },
        {
            "id": "https://eucli.top/2023/10/11/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "url": "https://eucli.top/2023/10/11/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "title": "硅谷甄选项目笔记",
            "date_published": "2023-10-11T13:45:48.000Z",
            "content_html": "<h3 id=\"tips-vue3-组件通信方式\"><a class=\"anchor\" href=\"#tips-vue3-组件通信方式\">#</a> tips： vue3 组件通信方式</h3>\n<p><strong>通信仓库地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vamNoMTAxMS92dWUzX2NvbW11bmljYXRpb24uZ2l0\">https://gitee.com/jch1011/vue3_communication.git</span></strong></p>\n<p>不管是 vue2 还是 vue3, 组件通信方式很重要，不管是项目还是面试都是经常用到的知识点。</p>\n<p><strong>比如:vue2 组件通信方式</strong></p>\n<p>**props:** 可以实现父子组件、子父组件、甚至兄弟组件通信</p>\n<p><strong>自定义事件</strong>：可以实现子父组件通信</p>\n<p><strong>全局事件总线 $bus</strong>: 可以实现任意组件通信</p>\n<p>**pubsub:** 发布订阅模式实现任意组件通信</p>\n<p><strong>vuex</strong>: 集中式状态管理容器，实现任意组件通信</p>\n<p><strong>ref</strong>: 父组件获取子组件实例 VC, 获取子组件的响应式数据以及方法</p>\n<p>**slot:** 插槽 (默认插槽、具名插槽、作用域插槽) 实现父子组件通信........</p>\n<h1 id=\"硅谷甄选运营平台\"><a class=\"anchor\" href=\"#硅谷甄选运营平台\">#</a> 硅谷甄选运营平台</h1>\n<p>此次教学课程为硅谷甄选运营平台项目，包含运营平台项目模板从 0 到 1 开发，以及数据大屏幕、权限等业务。</p>\n<p>此次教学课程涉及到技术栈包含 **<em>:vue3+TypeScript+vue-router+pinia+element-plus+axios+echarts</em>** 等技术栈。</p>\n<h2 id=\"一-搭建后台管理系统模板\"><a class=\"anchor\" href=\"#一-搭建后台管理系统模板\">#</a> 一、搭建后台管理系统模板</h2>\n<h3 id=\"11-项目初始化-适用于团队开发场景自己的项目不用配置的那么麻烦\"><a class=\"anchor\" href=\"#11-项目初始化-适用于团队开发场景自己的项目不用配置的那么麻烦\">#</a> 1.1 项目初始化 (适用于团队开发场景，自己的项目不用配置的那么麻烦)</h3>\n<p>今天来带大家从 0 开始搭建一个 vue3 版本的后台管理系统。一个项目要有统一的规范，需要使用 eslint+stylelint+prettier 来对我们的代码质量做检测和修复，需要使用 husky 来做 commit 拦截，需要使用 commitlint 来统一提交规范，需要使用 preinstall 来统一包管理工具。</p>\n<p>下面我们就用这一套规范来初始化我们的项目，集成一个规范的模版。</p>\n<blockquote>\n<p><strong>环境准备</strong></p>\n<ul>\n<li>node v16.14.2</li>\n<li>pnpm 8.0.0</li>\n</ul>\n</blockquote>\n<p>本项目使用 vite 进行构建，vite 官方中文文档参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52aXRlanMuZGV2L2d1aWRlLw==\">cn.vitejs.dev/guide/</span></p>\n<p><strong>pnpm:performant npm ，意味 “高性能的 npm”。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1wbnBtJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\">pnpm</span> 由 npm/yarn 衍生而来，解决了 npm/yarn 内部潜在的 bug，极大的优化了性能，扩展了使用场景。被誉为 “最先进的包管理工具”</strong></p>\n<ol>\n<li>安装 pnpm</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> <span class=\"token function\">pnpm</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用 pnpm 命令，vite 脚手架初始化项目:</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> create vite</pre></td></tr></table></figure><ol start=\"3\">\n<li>启动项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 项目地址 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> i <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> run dev</pre></td></tr></table></figure><h3 id=\"12-项目配置\"><a class=\"anchor\" href=\"#12-项目配置\">#</a> 1.2 项目配置</h3>\n<h4 id=\"121-eslint-配置\"><a class=\"anchor\" href=\"#121-eslint-配置\">#</a> 1.2.1 eslint 配置</h4>\n<p><strong>eslint 中文官网:<span class=\"exturl\" data-url=\"aHR0cDovL2VzbGludC5jbi8=\">http://eslint.cn/</span></strong></p>\n<p>ESLint 最初是由<span class=\"exturl\" data-url=\"aHR0cDovL25jem9ubGluZS5uZXQv\"> Nicholas C. Zakas</span> 于 2013 年 6 月创建的开源项目。它的目标是提供一个插件化的<strong> javascript 代码检测工具</strong></p>\n<ol>\n<li>首先安装 eslint</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i eslint <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>生成配置文件:.eslint.cjs</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx eslint <span class=\"token parameter variable\">--init</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在 <code>.eslint.cjs</code>  中进行配置：</li>\n</ol>\n<pre><code class=\"language-cjs\">module.exports = &#123;\n  //运行环境\n  env: &#123;\n    browser: true, //浏览器端\n    es2021: true, //es2021\n  &#125;,\n  //规则继承\n  extends: [\n    //全部规则默认是关闭的,这个配置项开启推荐规则,推荐规则参照文档\n    //比如:函数不能重名、对象不能出现重复key\n    &quot;eslint:recommended&quot;,\n    //vue3语法规则\n    &quot;plugin:vue/vue3-essential&quot;,\n    //ts语法规则\n    &quot;plugin:@typescript-eslint/recommended&quot;,\n  ],\n  //要为特定类型的文件指定处理器\n  overrides: [],\n  //指定解析器:解析器\n  //Esprima 默认解析器\n  //Babel-ESLint babel解析器\n  //@typescript-eslint/parser ts解析器\n  parser: &quot;@typescript-eslint/parser&quot;,\n  //指定解析器选项\n  parserOptions: &#123;\n    ecmaVersion: &quot;latest&quot;, //校验ECMA最新版本\n    sourceType: &quot;module&quot;, //设置为&quot;script&quot;（默认），或者&quot;module&quot;代码在ECMAScript模块中\n  &#125;,\n  //ESLint支持使用第三方插件。在使用插件之前，您必须使用npm安装它\n  //该eslint-plugin-前缀可以从插件名称被省略\n  plugins: [&quot;vue&quot;, &quot;@typescript-eslint&quot;],\n  //eslint规则\n  rules: &#123;&#125;,\n&#125;;\n</code></pre>\n<h5 id=\"1211-vue3-环境代码校验插件\"><a class=\"anchor\" href=\"#1211-vue3-环境代码校验插件\">#</a> 1.2.1.1 vue3 环境代码校验插件</h5>\n<pre><code># 让所有与prettier规则存在冲突的Eslint rules失效，并使用prettier进行代码检查\n&quot;eslint-config-prettier&quot;: &quot;^8.6.0&quot;,\n&quot;eslint-plugin-import&quot;: &quot;^2.27.5&quot;,\n&quot;eslint-plugin-node&quot;: &quot;^11.1.0&quot;,\n# 运行更漂亮的Eslint，使prettier规则优先级更高，Eslint优先级低\n&quot;eslint-plugin-prettier&quot;: &quot;^4.2.1&quot;,\n# vue.js的Eslint插件（查找vue语法错误，发现错误指令，查找违规风格指南\n&quot;eslint-plugin-vue&quot;: &quot;^9.9.0&quot;,\n# 该解析器允许使用Eslint校验所有babel code\n&quot;@babel/eslint-parser&quot;: &quot;^7.19.1&quot;,\n</code></pre>\n<p>安装指令</p>\n<pre><code>pnpm install -D eslint-plugin-import eslint-plugin-vue eslint-plugin-node eslint-plugin-prettier eslint-config-prettier eslint-plugin-node @babel/eslint-parser\n</code></pre>\n<h5 id=\"12-修改eslintrccjs-配置文件\"><a class=\"anchor\" href=\"#12-修改eslintrccjs-配置文件\">#</a> 1.2 修改.eslintrc.cjs 配置文件</h5>\n<pre><code>// @see https://eslint.bootcss.com/docs/rules/\n\nmodule.exports = &#123;\n  env: &#123;\n    browser: true,\n    es2021: true,\n    node: true,\n    jest: true,\n  &#125;,\n  /* 指定如何解析语法 */\n  parser: 'vue-eslint-parser',\n  /** 优先级低于 parse 的语法解析配置 */\n  parserOptions: &#123;\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    parser: '@typescript-eslint/parser',\n    jsxPragma: 'React',\n    ecmaFeatures: &#123;\n      jsx: true,\n    &#125;,\n  &#125;,\n  /* 继承已有的规则 */\n  extends: [\n    'eslint:recommended',\n    'plugin:vue/vue3-essential',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:prettier/recommended',\n  ],\n  plugins: ['vue', '@typescript-eslint'],\n  /*\n   * &quot;off&quot; 或 0    ==&gt;  关闭规则\n   * &quot;warn&quot; 或 1   ==&gt;  打开的规则作为警告（不影响代码执行）\n   * &quot;error&quot; 或 2  ==&gt;  规则作为一个错误（代码不能执行，界面报错）\n   */\n  rules: &#123;\n    // eslint（https://eslint.bootcss.com/docs/rules/）\n    'no-var': 'error', // 要求使用 let 或 const 而不是 var\n    'no-multiple-empty-lines': ['warn', &#123; max: 1 &#125;], // 不允许多个空行\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-unexpected-multiline': 'error', // 禁止空余的多行\n    'no-useless-escape': 'off', // 禁止不必要的转义字符\n\n    // typeScript (https://typescript-eslint.io/rules)\n    '@typescript-eslint/no-unused-vars': 'error', // 禁止定义未使用的变量\n    '@typescript-eslint/prefer-ts-expect-error': 'error', // 禁止使用 @ts-ignore\n    '@typescript-eslint/no-explicit-any': 'off', // 禁止使用 any 类型\n    '@typescript-eslint/no-non-null-assertion': 'off',\n    '@typescript-eslint/no-namespace': 'off', // 禁止使用自定义 TypeScript 模块和命名空间。\n    '@typescript-eslint/semi': 'off',\n\n    // eslint-plugin-vue (https://eslint.vuejs.org/rules/)\n    'vue/multi-word-component-names': 'off', // 要求组件名称始终为 “-” 链接的单词\n    'vue/script-setup-uses-vars': 'error', // 防止&lt;script setup&gt;使用的变量&lt;template&gt;被标记为未使用\n    'vue/no-mutating-props': 'off', // 不允许组件 prop的改变\n    'vue/attribute-hyphenation': 'off', // 对模板中的自定义组件强制执行属性命名样式\n  &#125;,\n&#125;\n\n</code></pre>\n<h5 id=\"13eslintignore-忽略文件\"><a class=\"anchor\" href=\"#13eslintignore-忽略文件\">#</a> 1.3.eslintignore 忽略文件</h5>\n<pre><code>dist\nnode_modules\n</code></pre>\n<h5 id=\"14-运行脚本\"><a class=\"anchor\" href=\"#14-运行脚本\">#</a> 1.4 运行脚本</h5>\n<p>package.json 新增两个运行脚本</p>\n<pre><code>&quot;scripts&quot;: &#123;\n    &quot;lint&quot;: &quot;eslint src&quot;,\n    &quot;fix&quot;: &quot;eslint src --fix&quot;,\n&#125;\n</code></pre>\n<h4 id=\"二-配置prettier-vscode-好像有-pretter-插件\"><a class=\"anchor\" href=\"#二-配置prettier-vscode-好像有-pretter-插件\">#</a> 二、配置<strong> prettier</strong> (vscode 好像有 pretter 插件)</h4>\n<p>有了 eslint，为什么还要有 prettier？eslint 针对的是 javascript，他是一个检测工具，包含 js 语法以及少部分格式问题，在 eslint 看来，语法对了就能保证代码正常运行，格式问题属于其次；</p>\n<p>而 prettier 属于格式化工具，它看不惯格式不统一，所以它就把 eslint 没干好的事接着干，另外，prettier 支持</p>\n<p>包含 js 在内的多种语言。</p>\n<p>总结起来，<strong>eslint 和 prettier 这俩兄弟一个保证 js 代码质量，一个保证代码美观。</strong></p>\n<h5 id=\"21-安装依赖包\"><a class=\"anchor\" href=\"#21-安装依赖包\">#</a> 2.1 安装依赖包</h5>\n<pre><code>pnpm install -D eslint-plugin-prettier prettier eslint-config-prettier\n</code></pre>\n<h5 id=\"22prettierrcjson-添加规则\"><a class=\"anchor\" href=\"#22prettierrcjson-添加规则\">#</a> 2.2.prettierrc.json 添加规则</h5>\n<pre><code>&#123;\n  &quot;singleQuote&quot;: true,\n  &quot;semi&quot;: false,\n  &quot;bracketSpacing&quot;: true,\n  &quot;htmlWhitespaceSensitivity&quot;: &quot;ignore&quot;,\n  &quot;endOfLine&quot;: &quot;auto&quot;,\n  &quot;trailingComma&quot;: &quot;all&quot;,\n  &quot;tabWidth&quot;: 2\n&#125;\n</code></pre>\n<h5 id=\"23prettierignore-忽略文件\"><a class=\"anchor\" href=\"#23prettierignore-忽略文件\">#</a> 2.3.prettierignore 忽略文件</h5>\n<pre><code>/dist/*\n/html/*\n.local\n/node_modules/**\n**/*.svg\n**/*.sh\n/public/*\n</code></pre>\n<p><strong>通过 pnpm run lint 去检测语法，如果出现不规范格式，通过 pnpm run fix 修改</strong></p>\n<h4 id=\"三-配置-stylelint-感觉没必要\"><a class=\"anchor\" href=\"#三-配置-stylelint-感觉没必要\">#</a> 三、配置 stylelint (感觉没必要)</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHlsZWxpbnQuaW8v\">stylelint</span> 为 css 的 lint 工具。可格式化 css 代码，检查 css 语法错误与不合理的写法，指定 css 书写顺序等。</p>\n<p>我们的项目中使用 scss 作为预处理器，安装以下依赖：</p>\n<pre><code>pnpm add sass sass-loader stylelint postcss postcss-scss postcss-html stylelint-config-prettier stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-standard stylelint-config-standard-vue stylelint-scss stylelint-order stylelint-config-standard-scss -D\n</code></pre>\n<h5 id=\"31stylelintrccjs配置文件\"><a class=\"anchor\" href=\"#31stylelintrccjs配置文件\">#</a> 3.1 <code>.stylelintrc.cjs</code> <strong> 配置文件</strong></h5>\n<p><strong>官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHlsZWxpbnQuYm9vdGNzcy5jb20v\">https://stylelint.bootcss.com/</span></strong></p>\n<pre><code>// @see https://stylelint.bootcss.com/\n\nmodule.exports = &#123;\n  extends: [\n    'stylelint-config-standard', // 配置stylelint拓展插件\n    'stylelint-config-html/vue', // 配置 vue 中 template 样式格式化\n    'stylelint-config-standard-scss', // 配置stylelint scss插件\n    'stylelint-config-recommended-vue/scss', // 配置 vue 中 scss 样式格式化\n    'stylelint-config-recess-order', // 配置stylelint css属性书写顺序插件,\n    'stylelint-config-prettier', // 配置stylelint和prettier兼容\n  ],\n  overrides: [\n    &#123;\n      files: ['**/*.(scss|css|vue|html)'],\n      customSyntax: 'postcss-scss',\n    &#125;,\n    &#123;\n      files: ['**/*.(html|vue)'],\n      customSyntax: 'postcss-html',\n    &#125;,\n  ],\n  ignoreFiles: [\n    '**/*.js',\n    '**/*.jsx',\n    '**/*.tsx',\n    '**/*.ts',\n    '**/*.json',\n    '**/*.md',\n    '**/*.yaml',\n  ],\n  /**\n   * null  =&gt; 关闭该规则\n   * always =&gt; 必须\n   */\n  rules: &#123;\n    'value-keyword-case': null, // 在 css 中使用 v-bind，不报错\n    'no-descending-specificity': null, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器\n    'function-url-quotes': 'always', // 要求或禁止 URL 的引号 &quot;always(必须加上引号)&quot;|&quot;never(没有引号)&quot;\n    'no-empty-source': null, // 关闭禁止空源码\n    'selector-class-pattern': null, // 关闭强制选择器类名的格式\n    'property-no-unknown': null, // 禁止未知的属性(true 为不允许)\n    'block-opening-brace-space-before': 'always', //大括号之前必须有一个空格或不能有空白符\n    'value-no-vendor-prefix': null, // 关闭 属性值前缀 --webkit-box\n    'property-no-vendor-prefix': null, // 关闭 属性前缀 -webkit-mask\n    'selector-pseudo-class-no-unknown': [\n      // 不允许未知的选择器\n      true,\n      &#123;\n        ignorePseudoClasses: ['global', 'v-deep', 'deep'], // 忽略属性，修改element默认样式的时候能使用到\n      &#125;,\n    ],\n  &#125;,\n&#125;\n</code></pre>\n<h5 id=\"32stylelintignore-忽略文件\"><a class=\"anchor\" href=\"#32stylelintignore-忽略文件\">#</a> 3.2.stylelintignore 忽略文件</h5>\n<pre><code>/node_modules/*\n/dist/*\n/html/*\n/public/*\n</code></pre>\n<h5 id=\"33-运行脚本\"><a class=\"anchor\" href=\"#33-运行脚本\">#</a> 3.3 运行脚本</h5>\n<pre><code>&quot;scripts&quot;: &#123;\n\t&quot;lint:style&quot;: &quot;stylelint src/**/*.&#123;css,scss,vue&#125; --cache --fix&quot;\n&#125;\n</code></pre>\n<p>最后配置统一的 prettier 来格式化我们的 js 和 css，html 代码</p>\n<pre><code> &quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;vite --open&quot;,\n    &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,\n    &quot;preview&quot;: &quot;vite preview&quot;,\n    &quot;lint&quot;: &quot;eslint src&quot;,\n    &quot;fix&quot;: &quot;eslint src --fix&quot;,\n    &quot;format&quot;: &quot;prettier --write \\&quot;./**/*.&#123;html,vue,ts,js,json,md&#125;\\&quot;&quot;,\n    &quot;lint:eslint&quot;: &quot;eslint src/**/*.&#123;ts,vue&#125; --cache --fix&quot;,\n    &quot;lint:style&quot;: &quot;stylelint src/**/*.&#123;css,scss,vue&#125; --cache --fix&quot;\n  &#125;,\n</code></pre>\n<p><strong>当我们运行 <code>pnpm run format</code>  的时候，会把代码直接格式化</strong></p>\n<h4 id=\"四-配置-husky\"><a class=\"anchor\" href=\"#四-配置-husky\">#</a> 四、配置 husky</h4>\n<blockquote>\n<p>这个插件需要 git。要先 <code>git init</code>  初始化后才能用</p>\n</blockquote>\n<p>在上面我们已经集成好了我们代码校验工具，但是需要每次手动的去执行命令才会格式化我们的代码。如果有人没有格式化就提交了远程仓库中，那这个规范就没什么用。所以我们需要强制让开发人员按照代码规范来提交。</p>\n<p>要做到这件事情，就需要利用 husky 在代码提交之前触发 git hook (git 在客户端的钩子)，然后执行 <code>pnpm run format</code>  来自动的格式化我们的代码。</p>\n<p>安装 <code>husky</code></p>\n<pre><code>pnpm install -D husky\n</code></pre>\n<p>执行</p>\n<pre><code>npx husky-init\n</code></pre>\n<p>会在根目录下生成个一个.husky 目录，在这个目录下面会有一个 pre-commit 文件，这个文件里面的命令在我们执行 commit 的时候就会执行</p>\n<p>在 <code>.husky/pre-commit</code>  文件添加如下命令：</p>\n<pre><code>#!/usr/bin/env sh\n. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;\npnpm run format\n</code></pre>\n<p>当我们对代码进行 commit 操作的时候，就会执行命令，对代码进行格式化，然后再提交。</p>\n<h4 id=\"五-配置-commitlint\"><a class=\"anchor\" href=\"#五-配置-commitlint\">#</a> 五、配置 commitlint</h4>\n<p>对于我们的 commit 信息，也是有统一规范的，不能随便写，要让每个人都按照统一的标准来执行，我们可以利用<strong> commitlint</strong> 来实现。</p>\n<p>安装包</p>\n<pre><code>pnpm add @commitlint/config-conventional @commitlint/cli -D\n</code></pre>\n<p>添加配置文件，新建 <code>commitlint.config.cjs</code>  (注意是 cjs)，然后添加下面的代码：</p>\n<pre><code>module.exports = &#123;\n  extends: ['@commitlint/config-conventional'],\n  // 校验规则\n  rules: &#123;\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat',\n        'fix',\n        'docs',\n        'style',\n        'refactor',\n        'perf',\n        'test',\n        'chore',\n        'revert',\n        'build',\n      ],\n    ],\n    'type-case': [0],\n    'type-empty': [0],\n    'scope-empty': [0],\n    'scope-case': [0],\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n    'header-max-length': [0, 'always', 72],\n  &#125;,\n&#125;\n</code></pre>\n<p>在 <code>package.json</code>  中配置 scripts 命令</p>\n<pre><code># 在scrips中添加下面的代码\n&#123;\n&quot;scripts&quot;: &#123;\n    &quot;commitlint&quot;: &quot;commitlint --config commitlint.config.cjs -e -V&quot;\n  &#125;,\n&#125;\n</code></pre>\n<p>配置结束，现在当我们填写 <code>commit</code>  信息的时候，前面就需要带着下面的 <code>subject</code></p>\n<pre><code>'feat',//新特性、新功能\n'fix',//修改bug\n'docs',//文档修改\n'style',//代码格式修改, 注意不是 css 修改\n'refactor',//代码重构\n'perf',//优化相关，比如提升性能、体验\n'test',//测试用例修改\n'chore',//其他修改, 比如改变构建流程、或者增加依赖库、工具等\n'revert',//回滚到上一个版本\n'build',//编译相关的修改，例如发布版本、对项目构建或者依赖的改动\n</code></pre>\n<p>配置 husky</p>\n<pre><code>npx husky add .husky/commit-msg\n</code></pre>\n<p>在生成的 commit-msg 文件中添加下面的命令</p>\n<pre><code>#!/usr/bin/env sh\n. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;\npnpm commitlint\n</code></pre>\n<p>当我们 commit 提交信息时，就不能再随意写了，必须是 git commit -m 'fix: xxx' 符合类型的才可以，<strong>需要注意的是类型的后面需要用英文的 :，并且冒号后面是需要空一格的，这个是不能省略的</strong></p>\n<h4 id=\"六-强制使用-pnpm-包管理器工具\"><a class=\"anchor\" href=\"#六-强制使用-pnpm-包管理器工具\">#</a> 六、强制使用 pnpm 包管理器工具</h4>\n<p>团队开发项目的时候，需要统一包管理器工具，因为不同包管理器工具下载同一个依赖，可能版本不一样，</p>\n<p>导致项目出现 bug 问题，因此包管理器工具需要统一管理！！！</p>\n<p>在根目录创建 <code>scripts/preinstall.js</code>  文件，添加下面的内容</p>\n<pre><code>if (!/pnpm/.test(process.env.npm_execpath || '')) &#123;\n  console.warn(\n    `\\u001b[33mThis repository must using pnpm as the package manager ` +\n    ` for scripts to work properly.\\u001b[39m\\n`,\n  )\n  process.exit(1)\n&#125;\n</code></pre>\n<p>配置命令</p>\n<pre><code>&quot;scripts&quot;: &#123;\n\t&quot;preinstall&quot;: &quot;node ./scripts/preinstall.js&quot;\n&#125;\n</code></pre>\n<p><strong>当我们使用 npm 或者 yarn 来安装包的时候，就会报错了。原理就是在 install 的时候会触发 preinstall（npm 提供的生命周期钩子）这个文件里面的代码。</strong></p>\n<h2 id=\"二-项目集成\"><a class=\"anchor\" href=\"#二-项目集成\">#</a> 二、项目集成</h2>\n<h3 id=\"21-集成-element-plus\"><a class=\"anchor\" href=\"#21-集成-element-plus\">#</a> 2.1 集成 element-plus</h3>\n<p>硅谷甄选运营平台，UI 组件库采用的 element-plus，因此需要集成 element-plus 插件！！！</p>\n<p>官网地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZW50LXBsdXMuZ2l0ZWUuaW8vemgtQ04v\">https://element-plus.gitee.io/zh-CN/</span></p>\n<pre><code>pnpm install element-plus @element-plus/icons-vue\n</code></pre>\n<p><strong>入口文件 main.ts 全局安装 element-plus,element-plus 默认支持语言英语设置为中文</strong></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"element-plus/dist/index.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//@ts-ignore 忽略当前文件 ts 类型的检测否则有红色提示 (打包会失败)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> zhCn <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus/dist/locale/zh-cn.mjs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementPlus<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  locale<span class=\"token operator\">:</span> zhCn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>Element Plus 全局组件类型声明</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// tsconfig.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"element-plus/global\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置完毕可以测试 element-plus 组件与图标的使用.</p>\n<h3 id=\"22-src-别名的配置\"><a class=\"anchor\" href=\"#22-src-别名的配置\">#</a> 2.2 src 别名的配置</h3>\n<p>在开发项目的时候文件与文件关系可能很复杂，因此我们需要给 src 文件夹配置一个别名！！！</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// vite.config.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string-property property\">\"@\"</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 相对路径别名配置，使用 @ 代替 src</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>TypeScript 编译配置</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// tsconfig.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 解析非相对模块的基地址，默认是当前目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 路径映射，相对于 baseUrl</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"23-环境变量的配置\"><a class=\"anchor\" href=\"#23-环境变量的配置\">#</a> 2.3 环境变量的配置</h3>\n<p><strong>项目开发过程中，至少会经历开发环境、测试环境和生产环境 (即正式环境) 三个阶段。不同阶段请求的状态 (如接口地址等) 不尽相同，若手动切换接口地址是相当繁琐且易出错的。于是环境变量配置的需求就应运而生，我们只需做简单的配置，把环境状态切换的工作交给代码。</strong></p>\n<p>开发环境（development）<br />\n顾名思义，开发使用的环境，每位开发人员在自己的 dev 分支上干活，开发到一定程度，同事会合并代码，进行联调。</p>\n<p>测试环境（testing）<br />\n测试同事干活的环境啦，一般会由测试同事自己来部署，然后在此环境进行测试</p>\n<p>生产环境（production）<br />\n生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。(正式提供给客户使用的环境。)</p>\n<p>注意：一般情况下，一个环境对应一台服务器，也有的公司开发与测试环境是一台服务器！！！</p>\n<p>项目根目录分别添加 开发、生产和测试环境的文件！</p>\n<pre><code>.env.development\n.env.production\n.env.test\n</code></pre>\n<p>文件内容</p>\n<pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取\nNODE_ENV = 'development'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/dev-api'\n</code></pre>\n<pre><code>NODE_ENV = 'production'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/prod-api'\n</code></pre>\n<pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取\nNODE_ENV = 'test'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/test-api'\n</code></pre>\n<p>配置运行命令：package.json</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite --open\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"build:test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-tsc &amp;&amp; vite build --mode test\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"build:pro\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-tsc &amp;&amp; vite build --mode production\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"preview\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite preview\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>通过 import.meta.env 获取环境变量</p>\n<h3 id=\"24-svg-图标配置\"><a class=\"anchor\" href=\"#24-svg-图标配置\">#</a> 2.4 SVG 图标配置</h3>\n<p>在开发项目的时候经常会用到 svg 矢量图，而且我们使用 SVG 以后，页面上加载的不再是图片资源，</p>\n<p>这对页面性能来说是个很大的提升，而且我们 SVG 文件比 img 要小的很多，放在项目中几乎不占用资源。</p>\n<p><strong>安装 SVG 依赖插件</strong></p>\n<pre><code>pnpm install vite-plugin-svg-icons -D\n</code></pre>\n<p><strong>在 <code>vite.config.ts</code>  中配置插件</strong></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createSvgIconsPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-svg-icons\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">createSvgIconsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// Specify the icon folder to be cached</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        iconDirs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/assets/icons\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// Specify symbolId format</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        symbolId<span class=\"token operator\">:</span> <span class=\"token string\">\"icon-[dir]-[name]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>入口文件导入</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"virtual:svg-icons-register\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"241-svg-封装为全局组件\"><a class=\"anchor\" href=\"#241-svg-封装为全局组件\">#</a> 2.4.1 svg 封装为全局组件</h4>\n<p>因为项目很多模块需要使用图标，因此把它封装为全局组件！！！(这样就不用 import 引入了)</p>\n<p><strong>在 src/components 目录下创建一个 SvgIcon 组件：代表如下</strong></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;svg :style=&quot;&#123; width: width, height: height &#125;&quot;&gt;\n      &lt;use :xlink:href=&quot;prefix + name&quot; :fill=&quot;color&quot;&gt;&lt;/use&gt;\n    &lt;/svg&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\ndefineProps(&#123;\n  //xlink:href属性值的前缀\n  prefix: &#123;\n    type: String,\n    default: &quot;#icon-&quot;,\n  &#125;,\n  //svg矢量图的名字\n  name: String,\n  //svg图标的颜色\n  color: &#123;\n    type: String,\n    default: &quot;&quot;,\n  &#125;,\n  //svg宽度\n  width: &#123;\n    type: String,\n    default: &quot;16px&quot;,\n  &#125;,\n  //svg高度\n  height: &#123;\n    type: String,\n    default: &quot;16px&quot;,\n  &#125;,\n&#125;);\n&lt;/script&gt;\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>\n<p>在 components 文件夹目录下创建一个 <code>index.ts</code>  文件：用于注册 components 文件夹内部全部全局组件！！！</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> SvgIcon <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/SvgIcon/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> App<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> SvgIcon <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> App<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在入口文件 <code>main.ts</code>  中引入 <code>components/index.ts</code>  文件，通过 app.use 方法安装自定义插件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gloablComponent <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>gloablComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>以上是注册多个全局组件的场景，如果只有一两个组件需要注册全局组件，那么不用创建 <code>src/index.ts</code>  文件，直接在入口文件 <code>main.ts</code>  配置如下代码：</p>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> SvgIcon <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/SvgIcon/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SvgIcon\"</span><span class=\"token punctuation\">,</span> SvgIcon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"25-集成-sass\"><a class=\"anchor\" href=\"#25-集成-sass\">#</a> 2.5 集成 sass</h3>\n<p>我们目前在组件内部已经可以使用 scss 样式，因为在配置 styleLint 工具的时候，项目当中已经安装过 sass sass-loader, 因此我们再组件内可以使用 scss 语法！！！需要加上 lang=&quot;scss&quot;</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;style scoped lang=<span class=\"token string\">\"scss\"</span>>&lt;/style></pre></td></tr></table></figure><p>接下来我们为项目添加一些全局的样式</p>\n<p>在 <code>src/styles</code>  目录下创建一个 <code>index.scss</code>  文件，当然项目中需要用到清除默认样式，因此在 index.scss 引入 <code>reset.scss</code></p>\n<figure class=\"highlight scss\"><figcaption data-lang=\"Sass (Scss)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">@import</span> <span class=\"token string\">\"./reset.scss\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在入口文件 <code>main.ts</code>  引入</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"@/styles/index.scss\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是你会发现在 src/styles/index.scss 全局样式文件中没有办法使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>变量</mtext><mi mathvariant=\"normal\">.</mi><mtext>因此需要给项目中引入全局变量</mtext></mrow><annotation encoding=\"application/x-tex\">变量.因此需要给项目中引入全局变量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord\">.</span><span class=\"mord cjk_fallback\">因</span><span class=\"mord cjk_fallback\">此</span><span class=\"mord cjk_fallback\">需</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord cjk_fallback\">项</span><span class=\"mord cjk_fallback\">目</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">引</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">全</span><span class=\"mord cjk_fallback\">局</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span></span></span></span>.</p>\n<p>在 styles 文件夹下创建一个 variable.scss 文件！</p>\n<p>在 vite.config.ts 文件配置如下:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcss<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      preprocessorOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        scss<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          javascriptEnabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          additionalData<span class=\"token operator\">:</span> <span class=\"token string\">'@import \"./src/styles/variable.scss\";'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>@import &quot;./src/styles/variable.less&quot;;</code>  后面的 <code>;</code>  不要忘记，不然会报错</strong>！</p>\n<p>配置完毕你会发现 scss 提供这些全局变量可以在组件样式中使用了！！！</p>\n<h3 id=\"26-mock-数据\"><a class=\"anchor\" href=\"#26-mock-数据\">#</a> 2.6 mock 数据</h3>\n<p>安装依赖:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvdml0ZS1wbHVnaW4tbW9jaw==\">https://www.npmjs.com/package/vite-plugin-mock</span></p>\n<pre><code>pnpm install -D vite-plugin-mock@2.9.8 mockjs\n</code></pre>\n<blockquote>\n<p>注意：这里要用 2.9.6 版本<br />\n在  <code>vite.config.js</code>  配置文件启用插件。</p>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> UserConfigExport<span class=\"token punctuation\">,</span> ConfigEnv <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> viteMockServe <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-mock\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> command <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">viteMockServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//localEnabled: command === 'serve',</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        enable<span class=\"token operator\">:</span> command <span class=\"token operator\">===</span> <span class=\"token string\">\"serve\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 保证开发阶段可以使用 mock 接口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在根目录创建 mock 文件夹：去创建我们需要 mock 数据与接口！！！</p>\n<p>在 mock 文件夹内部创建一个 user.ts 文件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用户信息数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      userId<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      avatar<span class=\"token operator\">:</span> <span class=\"token string\">\"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      username<span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">\"111111\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      desc<span class=\"token operator\">:</span> <span class=\"token string\">\"平台管理员\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"平台管理员\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      buttons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cuser.detail\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      token<span class=\"token operator\">:</span> <span class=\"token string\">\"Admin Token\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      userId<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      avatar<span class=\"token operator\">:</span> <span class=\"token string\">\"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      username<span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">\"111111\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      desc<span class=\"token operator\">:</span> <span class=\"token string\">\"系统管理员\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"系统管理员\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      buttons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cuser.detail\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cuser.user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      token<span class=\"token operator\">:</span> <span class=\"token string\">\"System Token\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 用户登录接口</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/api/user/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求地址</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求方式</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function-variable function\">response</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> body <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// 获取请求体携带过来的用户名与密码</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 调用获取用户信息函数，用于判断是否有此用户</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">const</span> checkUser <span class=\"token operator\">=</span> <span class=\"token function\">createUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// 没有用户返回失败信息</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>checkUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"账号或者密码不正确\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 如果有返回成功信息</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> token <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> checkUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> token <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/api/user/info\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function-variable function\">response</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token comment\">// 获取请求头携带 token</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token comment\">// 查看用户信息是否包含有次 token 用户</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token keyword\">const</span> checkUser <span class=\"token operator\">=</span> <span class=\"token function\">createUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>token <span class=\"token operator\">===</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token comment\">// 没有返回失败的信息</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>checkUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"获取用户信息失败\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token comment\">// 如果有返回成功信息</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> checkUser <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>安装 axios</strong></p>\n<pre><code>pnpm install axios\n</code></pre>\n<p>最后通过 axios 测试接口！！！</p>\n<h3 id=\"27-axios-二次封装\"><a class=\"anchor\" href=\"#27-axios-二次封装\">#</a> 2.7 axios 二次封装</h3>\n<p>在开发项目的时候避免不了与后端进行交互，因此我们需要使用 axios 插件实现发送网络请求。在开发项目的时候</p>\n<p>我们经常会把 axios 进行二次封装。</p>\n<p>目的:</p>\n<p>1: 使用请求拦截器，可以在请求拦截器中处理一些业务 (开始进度条、请求头携带公共参数)</p>\n<p>2: 使用响应拦截器，可以在响应拦截器中处理一些业务 (进度条结束、简化服务器返回的数据、处理 http 网络错误)</p>\n<p>在 src 目录下下创建 <code>utils/request.ts</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElMessage <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 axios 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_APP_BASE_API</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 请求拦截器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>request<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 响应拦截器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>request<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 处理网络错误</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">401</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"token过期\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">403</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"无权访问\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">404</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"请求地址错误\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">500</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"服务器出现问题\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"无网络\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">ElMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      message<span class=\"token operator\">:</span> msg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> request<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"28-api-接口统一管理\"><a class=\"anchor\" href=\"#28-api-接口统一管理\">#</a> 2.8 API 接口统一管理</h3>\n<p>在开发项目的时候，接口可能很多需要统一管理。在 src 目录下去创建 <code>api文件夹</code> 去统一管理项目的接口；</p>\n<p>比如：下面方式</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统一管理咱们项目用户相关的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> loginFormData<span class=\"token punctuation\">,</span> loginResponseData<span class=\"token punctuation\">,</span> userInfoReponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 项目用户相关的请求地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token constant\">LOGIN_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token constant\">USERINFO_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/info\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token constant\">LOGOUT_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/logout\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 登录接口</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> loginFormData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> loginResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> userInfoReponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USERINFO_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGOUT_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>如果接口太多可以根据接口的功能分模块在 api 文件夹下新建子文件夹，如：user、product、acl。<br />\n接口的 ts 类型可以像本项目一样在 api 文件夹下的每个接口文件夹中分别定义 ts 类型，也可以在 src 目录下新建一个 modules 文件夹专门放接口的 ts 类型：参考 招生提报系统</p>\n</blockquote>\n<h3 id=\"29-模板的路由配置\"><a class=\"anchor\" href=\"#29-模板的路由配置\">#</a> 2.9 模板的路由配置</h3>\n<p>首先分析一下项目都需要有哪些路由：<br />\n一级路由（4 个）：登录 login、登录成功后的首页面板展示 home、404 路由、重定向路由</p>\n<ol>\n<li>pnpm 安装 vue-router：</li>\n</ol>\n<pre><code>pnpm i vue-router\n</code></pre>\n<ol start=\"2\">\n<li>在 src 文件夹下创建 <code>views</code>  或 <code>pages</code>  文件夹，存放路由。\n<blockquote>\n<p>注意：views 文件夹中存放路由页面（组件），router 文件夹中放路由表</p>\n</blockquote>\n</li>\n</ol>\n<p>根据需求，分别创建一级路由：home，login，404</p>\n<ol start=\"3\">\n<li>在 src 目录下创建 <code>router</code>  文件夹，存放路由表，配置路由。<br />\n搭建出路由基本模板：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 vue-router 插件实现模板路由的配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHashHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建路由器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 路由模式 hash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命名路由。加名字方便后面控制菜单权限，根据用户信息匹配路由</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/login/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 省略其他路由……</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然，通常我们实际写项目的时候都会把 routes 单独摘出来：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 vue-router 插件实现模板路由的配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHashHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命名路由。加名字方便后面控制菜单权限，根据用户信息匹配路由</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/login/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/home/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/404\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/404\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/404/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/:pathMatch(.*)*\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"any\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    redirect<span class=\"token operator\">:</span> <span class=\"token string\">\"/404\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 也可重定向到首页 home</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 创建路由器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 路由模式 hash</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在入口文件 main.ts 中注册一下路由：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>之后便可以在 <code>App.vue</code>  中使用：</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre>\n<h3 id=\"210-pinia-仓库\"><a class=\"anchor\" href=\"#210-pinia-仓库\">#</a> 2.10 pinia 仓库</h3>\n<ol>\n<li>pnpm i pinia</li>\n<li>src/store/index.ts</li>\n<li>创建大仓库：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建大仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对外暴露：入口文件需要安装仓库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> pinia<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>入口文件 main.ts 引入</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pinia <span class=\"token keyword\">from</span> <span class=\"token string\">\"./store\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 安装仓库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>创建用户相关的小仓库：src/modules/user.ts</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建小仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 处理异步 | 逻辑的地方</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useUserStore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"211-login-路由页面\"><a class=\"anchor\" href=\"#211-login-路由页面\">#</a> 2.11 login 路由页面</h3>\n<ol>\n<li>写 html、css 样式，把骨架搭建起来，收集输入框的账号、密码表单数据</li>\n<li>登录按钮，点击后仓库发送登录请求</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//login.vue 的 script 部分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> useUserStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/store/modules/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> useStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 点击登录后干什么？</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 通知仓库发登录请求</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 请求成功 - 首页 home</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 请求失败 - 弹出登录失败信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  useStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span>loginForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把表单收集到的账号密码传递过去</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在小仓库 user.ts 中写 <code>userLogin()</code>  方法</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引入接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reqLogin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 引入数据类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> loginForm <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user/type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建小仓库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      token<span class=\"token operator\">:</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用户唯一标识 token</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 处理异步 | 逻辑的地方</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 用户登录的方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> loginForm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 登录请求</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">reqLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 登录请求成功 200->token</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 登录请求失败 201-> 登录失败错误信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//pinia 仓库存储一下 token</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 由于 pinia|vuex 存储数据其实是利用 js 对象</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">==</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 本地存储持久化存储一份</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 也可以用 pinia-plugin-persistedstate 插件持久化存储</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useUserStore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>登录成功与失败后干什么<br />\n登录页面 login/index.vue,script 部分</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElNotification <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取路由器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> $router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 点击登录后干什么？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 通知仓库发登录请求</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 请求成功 - 首页 home</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 请求失败 - 弹出登录失败信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 保证登录成功</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">await</span> useStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span>loginForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 编程式导航跳转到 home 首页</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    $router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 登陆成功的提示信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">ElNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      message<span class=\"token operator\">:</span> <span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">ElNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      message<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">as</span> Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>\n<p>完善小仓库 user.ts 的 ts 类型<br />\n类型断言等等</p>\n</li>\n<li>\n<p>封装本地存储数据与读取数据方法，用的时候 import 引入就可以直接用</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SET_TOKEN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GET_TOKEN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>登录时间判断与封装</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 封装一个函数：获取一个结果：早上 | 上午 | 下午 | 晚上</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTime</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 通过内置的构造函数 data 获取时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"早上\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"上午\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"下午\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"晚上\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后在 login/index.vue 中使用</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入获取时间的函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>getTime<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/time'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 登陆成功的提示信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ElNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  type<span class=\"token operator\">:</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  message<span class=\"token operator\">:</span><span class=\"token string\">'欢迎回来'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  title<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">好</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>登录模块表单校验<br />\n（用户名必须大于等于 4 位，密码必须大于等于 6 位）<br />\n这里使用 element-plus 中 Form 组件自带的表单验证功能： <code>rules</code>  属性<br />\n要保证所有的表单项校验通过再发请求  <code>validate</code></li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-form class=&quot;login_form&quot; :model=&quot;loginForm&quot; :rules=&quot;rules&quot; ref=&quot;loginForms&quot;&gt;\n    &lt;h1&gt;请登录&lt;/h1&gt;\n    &lt;el-form-item prop=&quot;username&quot;&gt;\n      &lt;el-input :prefix-icon=&quot;User&quot; v-model=&quot;loginForm.username&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item prop=&quot;password&quot;&gt;\n      &lt;el-input type=&quot;password&quot; :prefix-icon=&quot;Lock&quot; show-password=&quot;true&quot; v-model=&quot;loginForm.password&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n  &lt;/el-form&gt;\n&lt;/template&gt;\n&lt;script setup lang=&quot;ts&quot;&gt;\n//收集账号与密码的数据\nlet loginForm = reactive(&#123;\n  username: &quot;admin&quot;,\n  password: &quot;111111&quot;,\n&#125;);\n//获取el-form组件\nlet loginForms = ref();\n\nconst login = async () =&gt; &#123;\n  //保证所有的表单项校验通过再发请求\n  await loginForms.value.validate();\n  //点击登录后干什么？\n  //通知仓库发登录请求\n  //请求成功-首页home\n  //请求失败-弹出登录失败信息\n  try &#123;\n    //保证登录成功\n    await useStore.userLogin(loginForm);\n    //编程式导航跳转到home首页\n    $router.push(&quot;/&quot;);\n    //登陆成功的提示信息\n    ElNotification(&#123;\n      type: &quot;success&quot;,\n      message: &quot;欢迎回来&quot;,\n      title: `Hi,$&#123;getTime()&#125;好`,\n    &#125;);\n  &#125; catch (error) &#123;\n    ElNotification(&#123;\n      type: &quot;error&quot;,\n      message: (error as Error).message,\n    &#125;);\n  &#125;\n&#125;;\n\n//定义表单校验需要的配置对象\nconst rules = &#123;\n  username: [\n    &#123;\n      required: true,\n      min: 4,\n      max: 10,\n      message: &quot;账号长度至少4位&quot;,\n      trigger: &quot;change&quot;,\n    &#125;,\n  ],\n  password: [\n    &#123;\n      required: true,\n      min: 6,\n      max: 12,\n      message: &quot;密码长度至少6位&quot;,\n      trigger: &quot;change&quot;,\n    &#125;,\n  ],\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"212-layout或-home路由首页\"><a class=\"anchor\" href=\"#212-layout或-home路由首页\">#</a> 2.12 layout (或 home) 路由首页</h3>\n<p>包含：左侧导航菜单，顶部导航，中间内容展示区 (包含许多二级路由)</p>\n<ol>\n<li>搭建骨架，<br />\nviews/layout/index.vue</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;layout_container&quot;&gt;\n    &lt;!-- 左侧菜单 --&gt;\n    &lt;div class=&quot;layout_slider&quot;&gt;123&lt;/div&gt;\n    &lt;!-- 顶部导航 --&gt;\n    &lt;div class=&quot;layout_tabbar&quot;&gt;456&lt;/div&gt;\n    &lt;!-- 中间内容展示区域 --&gt;\n    &lt;div class=&quot;layout_main&quot;&gt;789&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.layout_container &#123;\n  width: 100%;\n  height: 100vh;\n  background: white;\n\n  .layout_slider &#123;\n    width: $base-menu-width;\n    height: 100vh;\n    background: #39c5bb;\n  &#125;\n\n  .layout_tabbar &#123;\n    position: fixed;\n    width: calc(100% - $base-menu-width);\n    height: $base-tabbar-height;\n    background: pink;\n    top: 0px;\n    left: $base-menu-width;\n  &#125;\n\n  .layout_main &#123;\n    position: absolute;\n    width: calc(100% - $base-menu-width);\n    height: calc(100vh - $base-tabbar-height);\n    top: $base-tabbar-height;\n    left: $base-menu-width;\n    padding: 20px;\n    overflow: auto;\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"2\">\n<li>logo 组件封装<br />\n layout/logo/index.vue:</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;logo&quot;&gt;\n    &lt;img src=&quot;../../../../public/logo.png&quot; alt=&quot;&quot; /&gt;\n    &lt;p&gt;K.K后台管理系统&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.logo &#123;\n  width: 100%;\n  height: $base-menu-logo-height;\n  display: flex;\n  align-items: center;\n  padding: 20px;\n  img &#123;\n    width: 40px;\n    height: 40px;\n  &#125;\n  p &#123;\n    font-size: $base-logo-title-fontSize;\n    margin-left: 10px;\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"3\">\n<li>左侧菜单展示相应的菜单\n<blockquote>\n<p>左侧的菜单其实就是一些可点击的导航链接，点击后中间的内容展示区域会切换相应的路由<br />\n我们使用 elementplus 的 menu 组件，但是不能写死，因为到时候要根据用户的路由去形成菜单<br />\n我们选择将左侧菜单单独封装成一个组件，根据项目的路由去展示菜单项</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>user 仓库引入路由（常量路由） 动态路由是登录后比对用户信息后获取的：<br />\nstore/modules/user.ts:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入路由（常量路由） 动态路由是登录后比对用户信息后获取的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> constantRoute <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/router/routes'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>state<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserState <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    menuRoutes<span class=\"token operator\">:</span> constantRoute<span class=\"token punctuation\">,</span><span class=\"token comment\">// 仓库存储生成左侧菜单需要的数组 (由)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><ul>\n<li>新建封装 menu 子组件，把路由数据传给 menu 组件<br />\n layout/index.vue:</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;Menu :menuList=&quot;userStore.menuRoutes&quot;&gt;&lt;/Menu&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入左侧菜单组件\nimport Menu from &quot;./menu/index.vue&quot;;\n\n//获取用户相关的小仓库\nimport useUserStore from &quot;@/store/modules/user&quot;;\nlet userStore = useUserStore();\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>接下来是 menu 子组件根据路由动态生成菜单：<br />\nlayout/menu/index.vue:</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;template v-for=&quot;(item, index) in menuList&quot; :key=&quot;item.path&quot;&gt;\n    &lt;!-- 没有子路由 --&gt;\n    &lt;el-menu-item v-if=&quot;!item.children&quot; :index=&quot;item.path&quot;&gt;\n      &lt;!-- &lt;template #title&gt;：菜单的名字 --&gt;\n      &lt;template #title&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n      &lt;/template&gt;\n    &lt;/el-menu-item&gt;\n    &lt;!-- 有子路由但是只有一个子路由 --&gt;\n    &lt;el-menu-item v-if=&quot;item.children &amp;&amp; item.children.length == 1&quot; :index=&quot;item.children[0].path&quot;&gt;\n      &lt;template #title&gt;\n        &lt;span&gt;&#123;&#123; item.children[0].meta.title &#125;&#125;&lt;/span&gt;\n      &lt;/template&gt;\n    &lt;/el-menu-item&gt;\n    &lt;!-- 有子路由，且个数大于一个 --&gt;\n    &lt;el-sub-menu v-if=&quot;item.children &amp;&amp; item.children.length &gt; 1&quot; :index=&quot;item.path&quot;&gt;\n      &lt;template #title&gt;\n        &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n      &lt;/template&gt;\n      &lt;!-- 递归组件：递归一级路由的子路由，展示在这里 --&gt;\n      &lt;Menu :menuList=&quot;item.children&quot;&gt;&lt;/Menu&gt;\n    &lt;/el-sub-menu&gt;\n  &lt;/template&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//获取父组件传递过来的全部路由数组\ndefineProps([&quot;menuList&quot;]);\n&lt;/script&gt;\n&lt;script lang=&quot;ts&quot;&gt;\n//为了使用递归组件不报错，起个名字\nexport default &#123;\n  name: &quot;Menu&quot;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>并不是所有的路由都要在左侧菜单中展示（比如登录路由，你都进来了自然不需要再登录）。因此我们需要告诉组件哪些需要展示哪些不需要展示\n<blockquote>\n<p>在路由表 router/routes.ts 中路由的路由元信息 <code>meta</code>  中添加 <code>hidden</code>  属性，需要隐藏的就设为 true</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 菜单标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 代表路由标题在菜单中是否隐藏  true: 隐藏 false: 不隐藏</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><ul>\n<li>那么接下来怎么判断显示 / 隐藏？\n<blockquote>\n<p>再嵌套一层 &lt;template&gt;，把判断是否多层路由放在这里，然后把判断显示隐藏放在里层<br />\n layout/menu/index.vue:</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;template v-for=&quot;(item, index) in menuList&quot; :key=&quot;item.path&quot;&gt;\n    &lt;!-- 没有子路由 --&gt;\n    &lt;template v-if=&quot;!item.children&quot;&gt;\n      &lt;el-menu-item :index=&quot;item.path&quot; v-if=&quot;!item.meta.hidden&quot;&gt;\n        &lt;!-- &lt;template #title&gt;：菜单的名字 --&gt;\n        &lt;template #title&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n        &lt;/template&gt;\n      &lt;/el-menu-item&gt;\n    &lt;/template&gt;\n    &lt;!-- 有子路由但是只有一个子路由 --&gt;\n    &lt;template v-if=&quot;item.children &amp;&amp; item.children.length == 1&quot;&gt;\n      &lt;el-menu-item :index=&quot;item.children[0].path&quot; v-if=&quot;!item.meta.hidden&quot;&gt;\n        &lt;template #title&gt;\n          &lt;span&gt;&#123;&#123; item.children[0].meta.title &#125;&#125;&lt;/span&gt;\n        &lt;/template&gt;\n      &lt;/el-menu-item&gt;\n    &lt;/template&gt;\n    &lt;!-- 有子路由，且个数大于一个 --&gt;\n    &lt;template v-if=&quot;item.children &amp;&amp; item.children.length &gt; 1&quot;&gt;\n      &lt;el-sub-menu :index=&quot;item.path&quot; v-if=&quot;!item.meta.hidden&quot;&gt;\n        &lt;template #title&gt;\n          &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n        &lt;/template&gt;\n        &lt;!-- 递归组件：递归一级路由的子路由，展示在这里 --&gt;\n        &lt;Menu :menuList=&quot;item.children&quot;&gt;&lt;/Menu&gt;\n      &lt;/el-sub-menu&gt;\n    &lt;/template&gt;\n  &lt;/template&gt;\n&lt;/template&gt;\n</code></pre>\n<ol start=\"4\">\n<li>菜单图标</li>\n</ol>\n<blockquote>\n<ol>\n<li>把 elementplus 所有图标注册为全局组件<br />\n components/index.ts:</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 element-plus 提供的全部图标组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ElementPlusIconsVue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@element-plus/icons-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对外暴露插件对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> App<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将 element-plus 提供图标注册为全局组件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>ElementPlusIconsVue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>因为菜单是动态生成，所有图标也不能写死，所有图标信息也要写在路由元信息 <code>meta</code>  中</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   title<span class=\"token operator\">:</span> <span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 菜单标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 代表路由标题在菜单中是否隐藏  true: 隐藏 false: 不隐藏</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   icon<span class=\"token operator\">:</span> <span class=\"token string\">\"Promotion\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 菜单文字左侧的图标，支持 element-plus 全部图标</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>在 menu 路由中应用 (这里简略写)：<br />\nlayout/menu/index.vue</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!-- 没有子路由 --&gt;\n&lt;template #title&gt;\n  &lt;!-- 添加图标 --&gt;\n  &lt;el-icon&gt;\n    &lt;component :is=&quot;item.meta.icon&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n  &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n&lt;/template&gt;\n\n&lt;!-- 有子路由但是只有一个子路由 --&gt;\n&lt;template #title&gt;\n  &lt;el-icon&gt;\n    &lt;component :is=&quot;item.children[0].meta.icon&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n  &lt;span&gt;&#123;&#123; item.children[0].meta.title &#125;&#125;&lt;/span&gt;\n&lt;/template&gt;\n</code></pre>\n<ol start=\"5\">\n<li>\n<p>项目其他路由配置<br />\n数据大屏 (一级路由)、权限管理（展示二级路由）、商品管理（展示二级路由）</p>\n</li>\n<li>\n<p>点击菜单时进行路由跳转<br />\n注册点击事件，进行路由跳转<br />\n menu 子组件（自己封装的）：</p>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; useRouter &#125; from &quot;vue-router&quot;;\n//获取父组件传递过来的全部路由数组\ndefineProps([&quot;menuList&quot;]);\n\n//获取路由器对象\nlet $router = useRouter();\n//点击菜单的回调,vc：传入的参数为组件实例\nconst goRoute = (vc: any) =&gt; &#123;\n  $router.push(vc.index);\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"7\">\n<li>menu 菜单刷新时不重叠回去<br />\n使用 el-menu 自带的 api <code>default-active</code></li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-menu</span> <span class=\"token attr-name\">:default-active</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$route.path<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-menu</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"213-中间内容展示区域\"><a class=\"anchor\" href=\"#213-中间内容展示区域\">#</a> 2.13 中间内容展示区域</h3>\n<ol>\n<li>封装 main 子组件为中间内容展示区域（不封装也行，这里封装是为了做过渡动画）\n<blockquote>\n<ul>\n<li>layout/index.vue:</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 部分省略 --&gt;\n  &lt;!-- ……………… --&gt;\n  &lt;!-- 中间内容展示区域 --&gt;\n  &lt;div class=&quot;layout_main&quot;&gt;\n    &lt;Main&gt;&lt;/Main&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入中间内容展示区域子组件（自己封装的）\nimport Main from &quot;./main/index.vue&quot;;\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<ul>\n<li>layout/main/index.vue:</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 路由组件出口的位置 --&gt;\n  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;\n    &lt;transition name=&quot;fade&quot;&gt;\n      &lt;!-- 渲染layout一级路由组件的子路由 --&gt;\n      &lt;component :is=&quot;Component&quot; /&gt;\n    &lt;/transition&gt;\n  &lt;/router-view&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.fade-enter-from &#123;\n  opacity: 0;\n  transform: scale(0);\n&#125;\n.fade-enter-active &#123;\n  transition: all 0.3s;\n&#125;\n.fade-enter-to &#123;\n  opacity: 1;\n  transform: scale(1);\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"214-顶部-tabbar-导航区域\"><a class=\"anchor\" href=\"#214-顶部-tabbar-导航区域\">#</a> 2.14 顶部 tabbar 导航区域</h3>\n<blockquote>\n<p>先分析一下，大体来看顶部导航区域一共分为两个部分：左边和右边<br />\n左边：折叠按钮、面包屑；右边：刷新按钮、全屏按钮、用户按钮</p>\n</blockquote>\n<ol>\n<li>整体是一个盒子，一左一右，可以用 flex 布局</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;tabbar&quot;&gt;\n    &lt;div class=&quot;tabbar_left&quot;&gt;123&lt;/div&gt;\n    &lt;div class=&quot;tabbar_right&quot;&gt;456&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.tabbar &#123;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"2\">\n<li>基本样式骨架</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;tabbar&quot;&gt;\n    &lt;!-- 左侧 --&gt;\n    &lt;div class=&quot;tabbar_left&quot;&gt;\n      &lt;!-- 折叠按钮 --&gt;\n      &lt;el-icon style=&quot;margin-right: 10px&quot;&gt;&lt;Expand /&gt;&lt;/el-icon&gt;\n      &lt;!-- 面包屑组件 --&gt;\n      &lt;el-breadcrumb separator-icon=&quot;ArrowRight&quot;&gt;\n        &lt;el-breadcrumb-item&gt;权限管理&lt;/el-breadcrumb-item&gt;\n        &lt;el-breadcrumb-item&gt;用户管理&lt;/el-breadcrumb-item&gt;\n      &lt;/el-breadcrumb&gt;\n    &lt;/div&gt;\n    &lt;!-- 右侧 --&gt;\n    &lt;div class=&quot;tabbar_right&quot;&gt;\n      &lt;el-button size=&quot;small&quot; icon=&quot;Refresh&quot; circle&gt;&lt;/el-button&gt;\n      &lt;el-button size=&quot;small&quot; icon=&quot;FullScreen&quot; circle&gt;&lt;/el-button&gt;\n      &lt;el-button size=&quot;small&quot; icon=&quot;Setting&quot; circle&gt;&lt;/el-button&gt;\n      &lt;img src=&quot;&quot; style=&quot;width: 24px; height: 24px; margin: 0 10px&quot; /&gt;\n      &lt;!-- 下拉菜单 --&gt;\n      &lt;el-dropdown&gt;\n        &lt;span class=&quot;el-dropdown-link&quot;&gt;\n          admin\n          &lt;el-icon class=&quot;el-icon--right&quot;&gt;\n            &lt;arrow-down /&gt;\n          &lt;/el-icon&gt;\n        &lt;/span&gt;\n        &lt;template #dropdown&gt;\n          &lt;el-dropdown-menu&gt;\n            &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;\n          &lt;/el-dropdown-menu&gt;\n        &lt;/template&gt;\n      &lt;/el-dropdown&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.tabbar &#123;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n\n  .tabbar_left &#123;\n    display: flex;\n    align-items: center; //垂直居中\n    margin-left: 20px;\n  &#125;\n  .tabbar_right &#123;\n    display: flex;\n    align-items: center; //垂直居中\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"3\">\n<li>菜单折叠效果实现\n<blockquote>\n<ul>\n<li>点击按钮图标切换：要定义一个响应式数据控制图标切换，绑定方法</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 折叠按钮 --&gt;\n  &lt;el-icon style=&quot;margin-right: 10px&quot; @click=&quot;changeIcon&quot;&gt;\n    &lt;component :is=&quot;fold ? 'Fold' : 'Expand'&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref &#125; from &quot;vue&quot;;\n//定义一个响应式数据控制图标切换\nlet fold = ref(false);\n//点击图标的方法\nconst changeIcon = () =&gt; &#123;\n  fold.value = !fold.value;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<ul>\n<li>因为顶部导航 tabbar 的按钮想要控制左侧菜单 slider 的折叠与展开（控制其宽度），所以需要用的组件间通信<br />\n store/modules/setting.ts 新建小仓库，将数据挂载到仓库上</li>\n</ul>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小仓库：layout 组件相关配置仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 引入数据类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> loginForm<span class=\"token punctuation\">,</span> loginResponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user/type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建小仓库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> useLayoutSettingStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SettingStore\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      fold<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用于控制左侧菜单折叠 / 展开</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 处理异步 | 逻辑的地方</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useLayoutSettingStore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之前 tabbar/index.vue 的代码也要发生改变</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 折叠按钮 --&gt;\n  &lt;el-icon style=&quot;margin-right: 10px&quot; @click=&quot;changeIcon&quot;&gt;\n    &lt;component :is=&quot;LayoutSettingStore.fold ? 'Fold' : 'Expand'&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport useLayoutSettingStore from &quot;@/store/modules/setting&quot;;\n//获取仓库\nlet LayoutSettingStore = useLayoutSettingStore();\n\n//点击图标的方法\nconst changeIcon = () =&gt; &#123;\n  LayoutSettingStore.fold = !LayoutSettingStore.fold;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<p>接下来回到 “爷爷组件” layout/index.vue 组件中实现折叠效果（动态控制宽度）:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;layout_container&quot;&gt;\n    &lt;!-- 左侧菜单 --&gt;\n    &lt;div class=&quot;layout_slider&quot; :class=&quot;&#123; fold: LayoutSettingStore.fold ? true : false &#125;&quot;&gt;\n      &lt;Logo&gt;&lt;/Logo&gt;\n      &lt;!-- 展示菜单 --&gt;\n      &lt;!-- elementplus的菜单组件 --&gt;\n      &lt;el-menu :collapse=&quot;LayoutSettingStore.fold ? true : false&quot; :default-active=&quot;$route.path&quot; background-color=&quot;#39c5bb&quot; text-color=&quot;white&quot;&gt;\n        &lt;!-- 根据路由动态生成菜单 --&gt;\n        &lt;Menu :menuList=&quot;userStore.menuRoutes&quot;&gt;&lt;/Menu&gt;\n      &lt;/el-menu&gt;\n    &lt;/div&gt;\n    &lt;!-- 顶部导航 --&gt;\n    &lt;div class=&quot;layout_tabbar&quot; :class=&quot;&#123; fold: LayoutSettingStore.fold ? true : false &#125;&quot;&gt;\n      &lt;Tabbar&gt;&lt;/Tabbar&gt;\n    &lt;/div&gt;\n    &lt;!-- 中间内容展示区域 --&gt;\n    &lt;div class=&quot;layout_main&quot; :class=&quot;&#123; fold: LayoutSettingStore.fold ? true : false &#125;&quot;&gt;\n      &lt;Main&gt;&lt;/Main&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//获取layout配置小仓库\nimport useLayoutSettingStore from &quot;@/store/modules/setting&quot;;\nlet LayoutSettingStore = useLayoutSettingStore();\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.layout_container &#123;\n  width: 100%;\n  height: 100vh;\n\n  .layout_slider &#123;\n    color: white;\n    width: $base-menu-width;\n    height: 100vh;\n    background: $base-menu-background;\n    transition: all 0.3s;\n    .el-menu &#123;\n      border-right: none;\n    &#125;\n    &amp;.fold &#123;\n      width: $base-menu-min-width;\n    &#125;\n  &#125;\n\n  .layout_tabbar &#123;\n    position: fixed;\n    width: calc(100% - $base-menu-width);\n    height: $base-tabbar-height;\n    top: 0px;\n    left: $base-menu-width;\n    border-bottom: 1px solid;\n    transition: all 0.3s;\n\n    &amp;.fold &#123;\n      width: calc(100vw - $base-menu-min-width);\n      left: $base-menu-min-width;\n    &#125;\n  &#125;\n\n  .layout_main &#123;\n    position: absolute;\n    width: calc(100% - $base-menu-width);\n    height: calc(100vh - $base-tabbar-height);\n    top: $base-tabbar-height;\n    left: $base-menu-width;\n    padding: 20px;\n    overflow: auto;\n    transition: all 0.3s;\n\n    &amp;.fold &#123;\n      width: calc(100vw - $base-menu-min-width);\n      left: $base-menu-min-width;\n    &#125;\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"4\">\n<li>顶部面包屑动态展示</li>\n</ol>\n<ul>\n<li>\n<p>面包屑需要动态展示路由的名字与标题：通过路由对象 $route.matched 属性，根据匹配到的路由动态生成<br />\n <code>matched</code>  属性可以获取当前匹配到的路由</p>\n</li>\n<li>\n<p>点击面包屑可跳转对应路由<br />\n借助 elementplus 面包屑 breadcrumb 组件自带的 to 属性</p>\n</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 面包屑组件 --&gt;\n  &lt;el-breadcrumb separator-icon=&quot;ArrowRight&quot;&gt;\n    &lt;!-- 面包屑需要动态展示路由的名字与标题：通过路由对象$route.matched属性，根据匹配到的路由动态生成 --&gt;\n    &lt;el-breadcrumb-item v-for=&quot;(item, index) in $route.matched&quot; :key=&quot;index&quot; v-show=&quot;item.meta.title&quot; :to=&quot;item.path&quot;&gt;\n      &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n    &lt;/el-breadcrumb-item&gt;\n  &lt;/el-breadcrumb&gt;\n&lt;/template&gt;\n</code></pre>\n<ol start=\"5\">\n<li>刷新功能实现<br />\n涉及到组件间的通信<br />\n在 layout 相关小仓库中的 state 中新声明一个变量，用于保存刷新按钮的状态，一旦点击刷新按钮，状态就会发生变化，而 main 路由组件一旦监听（watch）到其发生变化，就会进行路由组件销毁<br />\n store/modules/setting.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      refresh<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用于控制刷新效果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>layout/tabbar/index.vue:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 刷新按钮 --&gt;\n  &lt;el-button size=&quot;small&quot; icon=&quot;Refresh&quot; circle @click=&quot;updateRefsh&quot;&gt;&lt;/el-button&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//刷新按钮点击的回调\nconst updateRefsh = () =&gt; &#123;\n  LayoutSettingStore.refresh = !LayoutSettingStore.refresh;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<p>layout/mian/index.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 路由组件出口的位置 --&gt;\n  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;\n    &lt;transition name=&quot;fade&quot;&gt;\n      &lt;!-- 渲染layout一级路由组件的子路由 --&gt;\n      &lt;component :is=&quot;Component&quot; v-if=&quot;flag&quot; /&gt;\n    &lt;/transition&gt;\n  &lt;/router-view&gt;\n&lt;/template&gt;\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; watch, ref, nextTick &#125; from &quot;vue&quot;;\nimport useLayoutSettingStore from &quot;@/store/modules/setting&quot;;\n\n//获取仓库\nlet LayoutSettingStore = useLayoutSettingStore();\n\n//控制当前路由组件是否销毁重建\nlet flag = ref(true);\n\n//监听仓库内部的数据是否发生变化，如果发生变化，说明用户点击过刷新按钮\nwatch(\n  () =&gt; LayoutSettingStore.refresh,\n  () =&gt; &#123;\n    //点击刷新按钮：路由组件销毁\n    flag.value = false;\n    //销毁完毕之后再创建\n    nextTick(() =&gt; &#123;\n      flag.value = true;\n    &#125;);\n  &#125;\n);\n&lt;/script&gt;\n</code></pre>\n<ol start=\"6\">\n<li>全屏切换功能实现</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全屏按钮点击的回调</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fullScreen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//DOM 对象的一个属性：可以用来当前是否为全屏模式 [全屏：ture，不是全屏：false]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> full <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>fullscreenElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>full<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 文档根节点的 requestFullscreen 方法实现全屏</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span><span class=\"token function\">requestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 退出全屏模式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">exitFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>\n<p>获取用户信息与 token</p>\n<blockquote>\n<p>前台 ——&gt; 后台 ——&gt; 数据库 ——&gt; 后台 ——&gt; 前台<br />\n JWT:JsonWebToken<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/I%5DI9A7BV1JB%7BNI7Y733\" alt=\"\" />2AQ.png)</p>\n<ol>\n<li>通过请求拦截器的请求头，给服务器携带公共参数<br />\n utils/request.ts：</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入用户相关的仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> useUserStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/store/modules/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用请求拦截器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>request<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//config 配置对象具有 headers 请求头属性，经常给服务器端携带公共参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取用户相关的小仓库：获取仓库内部的 token，登陆成功后携带给服务 器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userStore<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> userStore<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 返回配置对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>登录成功后用户信息存储于仓库当中，方便调用<br />\n store/modules/user.ts:</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reqUserInfo <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>state<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserState <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    token<span class=\"token operator\">:</span> <span class=\"token constant\">GET_TOKEN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用户唯一标识 token</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    menuRoutes<span class=\"token operator\">:</span> constantRoute<span class=\"token punctuation\">,</span><span class=\"token comment\">// 仓库存储生成左侧菜单需要的数组 (路 由)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    username<span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    avatar<span class=\"token operator\">:</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 获取用户信息方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">userInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取用户的信息 [头像、名字] 存储仓库当中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span> <span class=\"token function\">reqUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>checkUser<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>checkUser<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>首页加载完毕后获取用户信息<br />\n layout/home/index.vue</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;h1&gt;我是home首页&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; onMounted &#125; from &quot;vue&quot;;\n//获取仓库\nimport useUserStore from &quot;@/store/modules/user&quot;;\nlet userStore = useUserStore();\n//首页挂载完毕获取用户信息\nonMounted(() =&gt; &#123;\n  userStore.userInfo();\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<ol start=\"4\">\n<li>tabbar 组件获取用户信息，动态展示头像和名字</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>退出登录业务功能<br />\n退出登录时需要做的事情：发退出登录请求，清除 token，跳转登录页面</p>\n</li>\n</ol>\n<ul>\n<li>layout/tabbar/index.vue:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 第一件事：需要向服务器发请求（目前没有退出登录接口）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 第二件事：仓库当中关于用户相关的数据要清除掉</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  userStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 第三件事：跳转到登录页面</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  $router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>store/modules/user.ts:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">userLogout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">// 目前没有 mock 接口：退出登录接口（通知服务器本次用户的唯一标识失效）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 清除 store 仓库中存储的用户相关信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 本地存储中的 token 也需要清除掉</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token constant\">REMOVE_TOKEN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"215-路由守卫路由鉴权\"><a class=\"anchor\" href=\"#215-路由守卫路由鉴权\">#</a> 2.15 路由守卫 | 路由鉴权</h3>\n<ol>\n<li>路由鉴权之进度条业务<br />\n利用路由守卫</li>\n</ol>\n<ul>\n<li>1.1 新建 <code>permission.ts</code>  鉴权文件进行路由守卫的设置<br />\n src/router/permission.ts:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 路由鉴权 鉴权：项目中的路由能不能被访问的权限的设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 全局守卫：项目中任一路由的切换都会触发的钩子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 全局后置守卫</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>1.2 入口文件 main.ts 当中引入 permission.ts</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入鉴权文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"./router/permission\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>1.3 安装进度条插件</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pnpm i nprogress</pre></td></tr></table></figure><ul>\n<li>1.4 引入进度条并使用</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 路由鉴权 鉴权：项目中的路由能不能被访问的权限的设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入进度条</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> nprogress <span class=\"token keyword\">from</span> <span class=\"token string\">\"nprogress\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"nprogress/nprogress.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 全局守卫：项目中任一路由的切换都会触发的钩子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 访问某一个路由之前的守卫</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 全局后置守卫</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>路由鉴权\n<blockquote>\n<p>全部的路由组件：登录 | 404 | 任意路由 | 首页（二级）| 数据大屏 | 权限管理（三个子路由）| 商品管理（四个子路由）</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>用户未登录可以访问的路由：login，其余的不能访问（指向 login）</p>\n</blockquote>\n<blockquote>\n<p>用户登录后可以访问的路由：不可以访问 login（指向首页），其他都可以访问</p>\n</blockquote>\n<ul>\n<li>可以根据仓库当中的 token 去判断用户是否登录:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 路由鉴权：鉴权，项目当中路由能不能被的权限的设置 (某一个路由什么条件下可以访问、什么条件下不可以访问)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//@ts-ignore</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> nprogress <span class=\"token keyword\">from</span> <span class=\"token string\">\"nprogress\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 引入进度条样式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"nprogress/nprogress.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 取消加载小圆圈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> showSpinner<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 获取用户相关的小仓库内部 token 数据，去判断用户是否登录成功</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> useUserStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/store/modules/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> pinia <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store/index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 全局守卫：项目当中任意路由切换都会触发的钩子</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>to<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> from<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">K.K后台 - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">//to: 你将要访问那个路由</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">//from: 你从来个路由而来</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">//next: 路由的放行函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 获取 token, 去判断用户登录、还是未登录</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> userStore<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 获取用户名字</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> userStore<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 用户登录判断</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 登录成功，访问 login, 不能访问，指向首页</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// 登录成功访问其余六个路由 (登录排除)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 有用户信息</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 如果没有用户信息，在守卫这里发请求获取到了用户信息再放行</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token keyword\">await</span> userStore<span class=\"token punctuation\">.</span><span class=\"token function\">userInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token comment\">// 万一：刷新的时候是异步路由，有可能获取到用户信息、异步路由还没有加载完毕，出现空白的效果</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>to <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          <span class=\"token comment\">//token 过期：获取不到用户信息了</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token comment\">// 用户手动修改本地存储 token</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token comment\">// 退出登录 -> 用户相关的数据清空</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          <span class=\"token keyword\">await</span> userStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> redirect<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>path <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 用户未登录判断</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> redirect<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>path <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 全局后置守卫</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> from<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 第一个问题：任意路由切换实现进度条业务 ---nprogress</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// 第二个问题：路由鉴权 (路由组件访问权限的设置)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">// 全部路由组件：登录 | 404 | 任意路由 | 首页 | 数据大屏 | 权限管理 (三个子路由)| 商品管理 (四个子路由)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 用户未登录：可以访问 login, 其余六个路由不能访问 (指向 login)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">// 用户登录成功：不可以访问 login [指向首页], 其余的路由可以访问</span></pre></td></tr></table></figure><blockquote>\n<p>报错：&quot;getActivePinia ()&quot; was called but there was no active Pinia.<br />\n 解决：看上面代码</p>\n</blockquote>\n<h3 id=\"216-接口\"><a class=\"anchor\" href=\"#216-接口\">#</a> 2.16 接口</h3>\n<p>使用真实接口代替 mock 接口</p>\n<ol>\n<li>解决跨域问题<br />\n vite.config.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> loadEnv <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> command<span class=\"token punctuation\">,</span> mode <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 获取各种环境下对应的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> env <span class=\"token operator\">=</span> <span class=\"token function\">loadEnv</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//………………</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 代理跨域</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    server<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">[</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_APP_BASE_API</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          target<span class=\"token operator\">:</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_SERVE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 获取数据的服务器地址设置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 代理跨域</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token function-variable function\">rewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\/api</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 路径重写，把 `/api` 替换为 ''</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>替换 api<br />\napi/user/index.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统一管理项目用户相关的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 项目用户相关的请求地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token constant\">LOGIN_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token constant\">USERINFO_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"admin/acl/index/info\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">LOGOUT_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"admin/acl/index/logout\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 登录接口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USERINFO_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGOUT_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>store/modules/user.ts 相应更改<br />\n layout/tabbar/index.vue 的退出登录加 async、await</p>\n<ol start=\"3\">\n<li>接口 ts 类型定义</li>\n</ol>\n<h3 id=\"217-商品管理-品牌管理\"><a class=\"anchor\" href=\"#217-商品管理-品牌管理\">#</a> 2.17 商品管理 - 品牌管理</h3>\n<h4 id=\"1-静态模块搭建与模块数据展示\"><a class=\"anchor\" href=\"#1-静态模块搭建与模块数据展示\">#</a> 1. 静态模块搭建与模块数据展示</h4>\n<p>views/product/trademark:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-card class=&quot;box-card&quot;&gt;\n      &lt;!-- 卡片顶部添加品牌按钮 --&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; icon=&quot;Plus&quot; @click=&quot;&quot;&gt;添加品牌&lt;/el-button&gt;\n      &lt;!-- 表格组件：用于展示已有的品牌的数据--&gt;\n      &lt;el-table style=&quot;margin: 10px 0&quot; border&gt;\n        &lt;el-table-column label=&quot;序号&quot; width=&quot;80px&quot; align=&quot;center&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌名称&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌LOGO&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌操作&quot;&gt; &lt;/el-table-column&gt;\n      &lt;/el-table&gt;\n      &lt;!-- 分页器组件 --&gt;\n      &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;limit&quot; :page-sizes=&quot;[3, 5, 7, 9]&quot; :background=&quot;true&quot; layout=&quot; prev, pager, next, jumper, -&gt;,sizes,total&quot; :total=&quot;400&quot; /&gt;\n    &lt;/el-card&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入组合式API函数ref\nimport &#123; ref &#125; from &quot;vue&quot;;\n//当前页码\nlet pageNo = ref&lt;number&gt;(1);\n//每一页展示多少条数据\nlet limit = ref&lt;number&gt;(3);\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<h4 id=\"2-ts-类型定义\"><a class=\"anchor\" href=\"#2-ts-类型定义\">#</a> 2. ts 类型定义</h4>\n<ol>\n<li>发请求获取商品数据<br />\n api/product/trademark/index.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 书写品牌管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 品牌管理模块接口地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 获取已有品牌接口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 获取已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 需要携带两个参数：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//page: 获取第几页的数据，默认第一页</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//limit: 获取几个已有品牌的数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqHasTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在商品管理组件内调用 api 接口，发请求获取数据并在页面上动态展示：</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-card class=&quot;box-card&quot;&gt;\n      &lt;!-- 卡片顶部添加品牌按钮 --&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; icon=&quot;Plus&quot; @click=&quot;&quot;&gt;添加品牌&lt;/el-button&gt;\n      &lt;!-- 表格组件：用于展示已有的品牌的数据--&gt;\n      &lt;el-table style=&quot;margin: 10px 0&quot; border :data=&quot;trademarkArr&quot;&gt;\n        &lt;el-table-column label=&quot;序号&quot; width=&quot;80px&quot; align=&quot;center&quot; type=&quot;index&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌名称&quot; prop=&quot;tmName&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌LOGO&quot;&gt;\n          &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n            &lt;img :src=&quot;row.logoUrl&quot; style=&quot;width: 100px; height: 100px&quot; /&gt;\n          &lt;/template&gt;\n        &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌操作&quot;&gt;\n          &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n            &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot;&gt;&lt;/el-button&gt;\n            &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot;&gt;&lt;/el-button&gt;\n          &lt;/template&gt;\n        &lt;/el-table-column&gt;\n      &lt;/el-table&gt;\n      &lt;!-- 分页器组件 --&gt;\n      &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;limit&quot; :page-sizes=&quot;[3, 5, 7, 9]&quot; :background=&quot;true&quot; layout=&quot; prev, pager, next, jumper, -&gt;,sizes,total&quot; :total=&quot;total&quot; /&gt;\n    &lt;/el-card&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入组合式API函数ref\nimport &#123; ref, onMounted &#125; from &quot;vue&quot;;\nimport &#123; reqHasTrademark &#125; from &quot;@/api/product/trademark&quot;;\n//当前页码\nlet pageNo = ref&lt;number&gt;(1);\n//每一页展示多少条数据\nlet limit = ref&lt;number&gt;(3);\n//存储已有品牌数据的总数\nlet total = ref&lt;number&gt;(0);\n//存储已有品牌的数据\nlet trademarkArr = ref&lt;any&gt;([]);\n//获取已有品牌的接口封装为一个函数：这样做就可以在想获取数据的情况下调用函数即可\nconst getHsaTrademark = async () =&gt; &#123;\n  let result = await reqHasTrademark(pageNo.value, limit.value);\n  if (result.code == 200) &#123;\n    //存储已有品牌的总个数\n    total.value = result.data.total;\n    trademarkArr.value = result.data.records;\n  &#125;\n&#125;;\n\n//组件挂在完毕的钩子————发一次请求获取数据\nonMounted(() =&gt; &#123;\n  getHsaTrademark();\n&#125;);\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<ol start=\"3\">\n<li><code>获取商品数据</code> 的 ts 类型：</li>\n</ol>\n<ul>\n<li>定义类型（ api/product/trademark/type.ts）:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 公共的类型：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  code<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ok<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 已有的品牌的 ts 数据类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Trademark</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  tmName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  logoUrl<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 包含全部品牌数据的 ts 类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Records</span> <span class=\"token operator\">=</span> Trademark<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 包含全部品牌的 ts 类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TrademarkResponseData</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    records<span class=\"token operator\">:</span> Records<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    current<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    searchCount<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    pages<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>引入使用类型（ api/product/trademark/index.ts）</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 书写品牌管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> TrademarkResponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 品牌管理模块接口地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取已有品牌接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 获取已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 需要携带两个参数：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//page: 获取第几页的数据，默认第一页</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//limit: 获取几个已有品牌的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqHasTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TrademarkResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>组件内部也要补一下 ts 类型 (views/product/trademark/index.vue):</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;script&gt;\nimport type &#123; Records, TrademarkResponseData &#125; from &quot;@/api/product/trademark/type&quot;;\n\nlet trademarkArr = ref &lt; Records &gt; [];\n// ………………\nlet result: TrademarkResponseData = await reqHasTrademark(pageNo.value, limit.value);\n&lt;/script&gt;\n</code></pre>\n<h4 id=\"3-分页展示数据\"><a class=\"anchor\" href=\"#3-分页展示数据\">#</a> 3. 分页展示数据</h4>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 分页器组件 --&gt;\n  &lt;el-pagination @current-change=&quot;changePageNo&quot; @size-change=&quot;sizeChange&quot; v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;limit&quot; :page-sizes=&quot;[3, 5, 7, 9]&quot; :background=&quot;true&quot; layout=&quot; prev, pager, next, jumper, -&gt;,sizes,total&quot; :total=&quot;total&quot; /&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//分页器当前页码发生变化的时候触发\nconst changePageNo = () =&gt; &#123;\n  //不用传参，因为组件内置的v-model已经传入，双向绑定\n  getHsaTrademark();\n&#125;;\n//下拉菜单发生变化的时候触发\nconst sizeChange = () =&gt; &#123;\n  //当前每页的数据量发生变化时，当前页码归1\n  pageNo.value = 1;\n  getHsaTrademark();\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h4 id=\"4-对话框-dailog-对话框静态搭建-添加与修改品牌业务实现\"><a class=\"anchor\" href=\"#4-对话框-dailog-对话框静态搭建-添加与修改品牌业务实现\">#</a> 4. 对话框 dailog 对话框静态搭建 （添加与修改品牌业务实现）</h4>\n<blockquote>\n<p>elementplus 组件之 dailog 对话框：在保留当前页面状态的情况下，告知用户并承载相关操作</p>\n</blockquote>\n<ol>\n<li>写相应静态</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 对话框组件：在添加品牌与修改已有业务时候使用 --&gt;\n  &lt;!-- v-model属性控制对话框的显示与隐藏（true：显示，false：隐藏） --&gt;\n  &lt;!-- title：设置对话框左上角标题 --&gt;\n  &lt;el-dialog v-model=&quot;dialogFormVisible&quot; title=&quot;添加品牌&quot;&gt;\n    &lt;el-form style=&quot;width: 80%&quot;&gt;\n      &lt;el-form-item label=&quot;品牌名称&quot; label-width=&quot;80px&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入品牌名称&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;品牌logo&quot; label-width=&quot;80px&quot;&gt;\n        &lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;https://run.mocky.io/v3/9d059bf9-4660-45f2-925d-ce80ad6c4d15&quot; :show-file-list=&quot;false&quot; :on-success=&quot;handleAvatarSuccess&quot; :before-upload=&quot;beforeAvatarUpload&quot;&gt;\n          &lt;img v-if=&quot;imageUrl&quot; :src=&quot;imageUrl&quot; class=&quot;avatar&quot; /&gt;\n          &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt;&lt;Plus /&gt;&lt;/el-icon&gt;\n        &lt;/el-upload&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n    &lt;!-- 具名插槽：footer --&gt;\n    &lt;template #footer&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; @click=&quot;cancel&quot;&gt;取消&lt;/el-button&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; @click=&quot;confirm&quot;&gt;确定&lt;/el-button&gt;\n    &lt;/template&gt;\n  &lt;/el-dialog&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n//控制对话框的显示与隐藏\nlet dialogFormVisible = ref &lt; boolean &gt; false;\n\n//&quot;添加品牌&quot;按钮的回调\nconst addTrademark = () =&gt; &#123;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n&#125;;\n//&quot;修改品牌&quot;按钮的回调\nconst updateTrademark = () =&gt; &#123;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n&#125;;\n\n//对话框底部取消按钮\nconst cancel = () =&gt; &#123;\n  //对话框隐藏\n  dialogFormVisible.value = false;\n&#125;;\n//对话框底部确定按钮\nconst confirm = () =&gt; &#123;\n  dialogFormVisible.value = false;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"2\">\n<li>收集新增品牌数据</li>\n</ol>\n<ul>\n<li>2.1 写接口\n<blockquote>\n<p>新增品牌的接口不需要带 id，修改已存在的品牌的接口则需要传入 id. 二者的区别就是需不需要带 id<br />\napi/product/trademark/index.ts:</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 书写品牌管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> TrademarkResponseData<span class=\"token punctuation\">,</span> Trademark <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 品牌管理模块接口地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取已有品牌接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 添加品牌的接口地址 POST 请求</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token constant\">ADDTRADENARJ_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/save\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 修改已有品牌的数据 PUT 请求</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token constant\">UPDATETRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/update\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 需要携带两个参数：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//page: 获取第几页的数据，默认第一页</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//limit: 获取几个已有品牌的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqHasTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TrademarkResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 添加与修改已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqAddOrUpdateTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> Trademark<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 判断参数带不带 id，如果有 id 就是修改已有品牌的数据，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">put</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATETRADEMARK_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 如果没有 id 就是添加品牌；</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADDTRADENARJ_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>2.2 组件发请求</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-form style=&quot;width: 80%&quot;&gt;\n    &lt;el-form-item label=&quot;品牌名称&quot; label-width=&quot;80px&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入品牌名称&quot; v-model=&quot;trademarkParams.tmName&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item label=&quot;品牌logo&quot; label-width=&quot;80px&quot;&gt;\n      &lt;!-- 上传图片是要上传到服务器中，所以是要发请求 action传入后端写的上传文件的接口地址 --&gt;\n      &lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;/api/admin/product/fileUpload&quot; :show-file-list=&quot;false&quot; :on-success=&quot;handleAvatarSuccess&quot; :before-upload=&quot;beforeAvatarUpload&quot;&gt;\n        &lt;img v-if=&quot;trademarkParams.logoUrl&quot; :src=&quot;trademarkParams.logoUrl&quot; class=&quot;avatar&quot; /&gt;\n        &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt;&lt;Plus /&gt;&lt;/el-icon&gt;\n      &lt;/el-upload&gt;\n    &lt;/el-form-item&gt;\n  &lt;/el-form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport &#123; ref, reactive, onMounted &#125; from &quot;vue&quot;;\nimport type &#123; Records, TrademarkResponseData, Trademark &#125; from &quot;@/api/product/trademark/type&quot;;\nimport type &#123; UploadProps &#125; from &quot;element-plus&quot;;\nimport &#123; ElMessage &#125; from &quot;element-plus&quot;;\n//定义收集新增品牌数据\n//这里用reactive是因为对象内的数据也需要响应式，每个数据在表单中都会变化\nlet trademarkParams =\n  reactive &lt;\n  Trademark &gt;\n  &#123;\n    tmName: &quot;&quot;,\n    logoUrl: &quot;&quot;,\n  &#125;;\n\n//上传图片之前触发的钩子函数:作用是可以用来约束上传文件的类型、大小\nconst beforeAvatarUpload: UploadProps[&quot;beforeUpload&quot;] = (rawFile) =&gt; &#123;\n  if (rawFile.type !== &quot;image/jpeg&quot;) &#123;\n    ElMessage.error(&quot;上传的图片必须是jpg格式!&quot;);\n    return false;\n  &#125; else if (rawFile.size / 1024 / 1024 &gt; 4) &#123;\n    ElMessage.error(&quot;上传的图片不能超过4MB!&quot;);\n    return false;\n  &#125;\n  return true;\n&#125;;\n\n//文件上传成功时触发的钩子\nconst handleAvatarSuccess: UploadProps[&quot;onSuccess&quot;] = (response, uploadFile) =&gt; &#123;\n  //response:即为当前这次上传图片post请求服务器返回的数据\n  //存储收集上传的图片的地址，添加一个新的品牌的时候上传给服务器\n  trademarkParams.logoUrl = response.data;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"3\">\n<li>完成添加新的品牌的业务\n<blockquote>\n<p>新增后还需要发请求重新获取一遍所有商品</p>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;script&gt;\nimport &#123; reqHasTrademark, reqAddOrUpdateTrademark &#125; from &quot;@/api/product/trademark&quot;;\n\n//&quot;添加品牌&quot;按钮的回调\nconst addTrademark = () =&gt; &#123;\n  //先清空收集的数据\n  trademarkParams.tmName = &quot;&quot;;\n  trademarkParams.logoUrl = &quot;&quot;;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n&#125;;\n\n//对话框底部确定按钮\nconst confirm = async () =&gt; &#123;\n  let result: any = await reqAddOrUpdateTrademark(trademarkParams);\n  if (result.code == 200) &#123;\n    //弹出添加成功的信息；对话框关闭；重新发一次请求获取全部数据；清空trademarkParams数据（这个在“添加品牌”的按钮业务中做，每一次添加品牌前都清空数据）\n    dialogFormVisible.value = false;\n    ElMessage(&#123;\n      type: &quot;success&quot;,\n      message: &quot;添加品牌成功&quot;,\n    &#125;);\n    getHsaTrademark();\n  &#125; else &#123;\n    dialogFormVisible.value = false;\n    ElMessage(&#123;\n      type: &quot;error&quot;,\n      message: &quot;添加品牌失败&quot;,\n    &#125;);\n  &#125;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"4\">\n<li>完成修改已有品牌的业务</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-table-column label=&quot;品牌操作&quot;&gt;\n    &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot; @click=&quot;updateTrademark(row)&quot;&gt;&lt;/el-button&gt;\n    &lt;/template&gt;\n  &lt;/el-table-column&gt;\n\n  &lt;el-dialog v-model=&quot;dialogFormVisible&quot; :title=&quot;trademarkParams.id ? '修改品牌' : '添加品牌'&quot;&gt;&lt;/el-dialog&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n//&quot;修改品牌&quot;按钮的回调\n//参数row：即为当前已有的品牌\nconst updateTrademark = (row: Trademark) =&gt; &#123;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n  Object.assign(trademarkParams, row);\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"5\">\n<li>品牌管理模块 dialog 表单校验<br />\n利用 el-form 组件提供的表单校验功能<br />\n views/product/trademark/index.vue</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对话框底部确定按钮</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">confirm</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 在发请求之前，对整个表单进行校验</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 调用这个方法进行全部的表单项校验，使用 await 保证只有校验全部通过才能执行后面的内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">await</span> formRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">validator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ……………………</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>品牌管理模块删除业务</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-popconfirm :title=&quot;`确定删除$&#123;row.tmName&#125;?`&quot; width=&quot;250px&quot; icon=&quot;Delete&quot;&gt;\n    &lt;template #reference&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot; @confirm=&quot;removeTrademark(row.id)&quot;&gt;&lt;/el-button&gt;\n    &lt;/template&gt;\n  &lt;/el-popconfirm&gt;\n&lt;/template&gt;\n\n&lt;script&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"218-平台属性管理\"><a class=\"anchor\" href=\"#218-平台属性管理\">#</a> 2.18 平台属性管理</h3>\n<h4 id=\"1-平台属性管理模块静态搭建\"><a class=\"anchor\" href=\"#1-平台属性管理模块静态搭建\">#</a> 1. 平台属性管理模块静态搭建</h4>\n<blockquote>\n<p>（三级联动：一级不需要传参，二级需要带着一级分类的 id，三级需要带着二级分类的 id。等三级分类也确定后再发一次请求，获取属性数据）</p>\n</blockquote>\n<ol>\n<li>因为三级联动组件在 spu 也会用到，所以将其变为全局组件 Category</li>\n</ol>\n<ul>\n<li>components/Category/index.vue</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 三级联动 --&gt;\n  &lt;el-card&gt;\n    &lt;el-form :inline=&quot;true&quot;&gt;\n      &lt;el-form-item label=&quot;一级分类&quot;&gt;\n        &lt;el-select&gt;\n          &lt;el-option label=&quot;北京&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;二级分类&quot;&gt;\n        &lt;el-select&gt;\n          &lt;el-option label=&quot;北京&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;三级分类&quot;&gt;\n        &lt;el-select&gt;\n          &lt;el-option label=&quot;北京&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n</code></pre>\n<ul>\n<li>components/index.ts</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入项目中的全局组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> SvgIcon <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/SvgIcon/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Category <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/Category/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> App<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 引入 element-plus 提供的全部图标组件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ElementPlusIconsVue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@element-plus/icons-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 全局对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> SvgIcon<span class=\"token punctuation\">,</span> Category <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 对外暴露插件对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> App<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 将 element-plus 提供图标注册为全局组件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>ElementPlusIconsVue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其他的可以写在 views/product/attr/index.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 三级联动组件 --&gt;\n  &lt;Category /&gt;\n  &lt;!-- 平台属性 --&gt;\n  &lt;el-card style=&quot;margin: 10px 0&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; icon=&quot;Plus&quot;&gt;添加属性&lt;/el-button&gt;\n    &lt;el-table border stripe&gt;\n      &lt;el-table-column label=&quot;序号&quot; type=&quot;index&quot; align=&quot;center&quot; width=&quot;80px&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;属性名称&quot; width=&quot;120px&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;属性值名称&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;120px&quot;&gt;&lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<h4 id=\"2-属性管理模块一级分类数据收集与展示\"><a class=\"anchor\" href=\"#2-属性管理模块一级分类数据收集与展示\">#</a> 2. 属性管理模块一级分类数据收集与展示</h4>\n<ol>\n<li>写接口 api/product/attr/index.ts:</li>\n</ol>\n<pre><code class=\"language-ts\">\n</code></pre>\n<ol start=\"2\">\n<li>展示数据 components/Category/index.vue：<br />\n// 因为将来别的组件也需要用的三级联动的数据，需要组件通信，所以不应该把数据存储在子组件中，应该存储在 pinia 仓库中</li>\n</ol>\n<pre><code class=\"language-vue\">\n</code></pre>\n<h3 id=\"219-spu-模块\"><a class=\"anchor\" href=\"#219-spu-模块\">#</a> 2.19 SPU 模块</h3>\n<h3 id=\"特喵的这样效率太慢了跳了跳了\"><a class=\"anchor\" href=\"#特喵的这样效率太慢了跳了跳了\">#</a> 特喵的这样效率太慢了，跳了跳了</h3>\n<h3 id=\"权限管理-用户管理\"><a class=\"anchor\" href=\"#权限管理-用户管理\">#</a> 权限管理 - 用户管理</h3>\n<h4 id=\"1-用户管理静态搭建\"><a class=\"anchor\" href=\"#1-用户管理静态搭建\">#</a> 1. 用户管理静态搭建</h4>\n<p>views/acl/user/index.vue:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-card style=&quot;height: 80px&quot;&gt;\n    &lt;el-form :inline=&quot;true&quot; class=&quot;form&quot;&gt;\n      &lt;el-form-item label=&quot;用户名:&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入搜索用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;搜索&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;重置&lt;/el-button&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n  &lt;el-card style=&quot;margin: 10px 0px&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;添加用户&lt;/el-button&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;批量删除&lt;/el-button&gt;\n    &lt;!-- table展示用户信息 --&gt;\n    &lt;el-table style=&quot;margin: 10px 0px&quot; border&gt;\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;#&quot; align=&quot;center&quot; type=&quot;index&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;ID&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名字&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名称&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户角色&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;创建时间&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;更新时间&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;300px&quot; align=&quot;center&quot;&gt; &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n    &lt;!-- 分页器 --&gt;\n    &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;pageSize&quot; :page-sizes=&quot;[5, 7, 9, 11]&quot; :background=&quot;true&quot; layout=&quot;prev, pager, next, jumper,-&gt;,sizes,total&quot; :total=&quot;400&quot; /&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref &#125; from &quot;vue&quot;;\nlet pageNo = ref&lt;number&gt;(1);\n\nlet pageSize = ref&lt;number&gt;(5);\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.form &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h4 id=\"2-用户管理展示已有账号数据\"><a class=\"anchor\" href=\"#2-用户管理展示已有账号数据\">#</a> 2. 用户管理展示已有账号数据</h4>\n<ol>\n<li>定义接口 api/acl/user/index.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用户管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> UserResponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取全部已有用户的账号信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取用户账号信息的接口方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> UserResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>定义接口类型 api/acl/user/type.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 账号信息的 ts 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  code<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ok<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 代表一个账号信息的 ts 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  createTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  updateTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  username<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  password<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  phone<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  roleName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 数组包含全部的用户信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Records</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 获取全部用户信息接口返回的数据 ts 类型</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserResponseData</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    records<span class=\"token operator\">:</span> Records<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    current<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    pages<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 代表一个职位的 ts 类型</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RoleData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  createTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  updateTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  roleName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  remark<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 全部职位的列表</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AllRole</span> <span class=\"token operator\">=</span> RoleData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 获取全部职位的接口返回的数据 ts 类型</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AllRoleResponseData</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    assignRoles<span class=\"token operator\">:</span> AllRole<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    allRolesList<span class=\"token operator\">:</span> AllRole<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 给用户分配职位接口携带参数的 ts 类型</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetRoleData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  roleIdList<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>获取用户数据并展示以及分页器功能 views/acl/user/index.vue:</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-card style=&quot;height: 80px&quot;&gt;\n    &lt;el-form :inline=&quot;true&quot; class=&quot;form&quot;&gt;\n      &lt;el-form-item label=&quot;用户名:&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入搜索用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;搜索&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;重置&lt;/el-button&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n  &lt;el-card style=&quot;margin: 10px 0px&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;添加用户&lt;/el-button&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;批量删除&lt;/el-button&gt;\n    &lt;!-- table展示用户信息 --&gt;\n    &lt;el-table style=&quot;margin: 10px 0px&quot; border :data=&quot;userArr&quot;&gt;\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;#&quot; align=&quot;center&quot; type=&quot;index&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;ID&quot; align=&quot;center&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名字&quot; align=&quot;center&quot; prop=&quot;username&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名称&quot; align=&quot;center&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户角色&quot; align=&quot;center&quot; prop=&quot;roleName&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;创建时间&quot; align=&quot;center&quot; prop=&quot;createtTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;更新时间&quot; align=&quot;center&quot; prop=&quot;updateTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;300px&quot; align=&quot;center&quot;&gt;\n        &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;User&quot;&gt;分配角色&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot;&gt;编辑&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot;&gt;删除&lt;/el-button&gt;\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n    &lt;!-- 分页器 --&gt;\n    &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;pageSize&quot; :page-sizes=&quot;[5, 7, 9, 11]&quot; :background=&quot;true&quot; layout=&quot;prev, pager, next, jumper,-&gt;,sizes,total&quot; :total=&quot;total&quot; @current-change=&quot;getHasUser&quot; @size-change=&quot;handler&quot; /&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref, onMounted &#125; from &quot;vue&quot;;\nimport &#123; reqUserInfo &#125; from &quot;@/api/acl/user&quot;;\nimport type &#123; UserResponseData, Records &#125; from &quot;@/api/acl/user/type&quot;;\n//默认页码\nlet pageNo = ref&lt;number&gt;(1);\n//一页展示几条数据\nlet pageSize = ref&lt;number&gt;(5);\n//用户总数\nlet total = ref&lt;number&gt;(0);\n//存储全部用户的数据\nlet userArr = ref&lt;Records&gt;([]);\n\nonMounted(() =&gt; &#123;\n  getHasUser();\n&#125;);\n\n//获取全部已有的用户信息的方法封装\nconst getHasUser = async (pager = 1) =&gt; &#123;\n  pageNo.value = pager;\n  let result: UserResponseData = await reqUserInfo(pageNo.value, pageSize.value);\n  if (result.code == 200) &#123;\n    total.value = result.data.total;\n    userArr.value = result.data.records;\n  &#125;\n&#125;;\n\n//分页器下拉菜单自定义事件的回调\nconst handler = () =&gt; &#123;\n  getHasUser();\n&#125;;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.form &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h4 id=\"3-添加与编辑修改用户业务实现\"><a class=\"anchor\" href=\"#3-添加与编辑修改用户业务实现\">#</a> 3. “添加” 与 “编辑”（修改）用户业务实现</h4>\n<p>// 点击 “添加” 按钮后从右侧弹出抽屉。“添加” 和 “编辑” 都用这个，区别它们就看是否携带 id</p>\n<ol>\n<li>静态搭建</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-card style=&quot;height: 80px&quot;&gt;\n    &lt;el-form :inline=&quot;true&quot; class=&quot;form&quot;&gt;\n      &lt;el-form-item label=&quot;用户名:&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入搜索用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;搜索&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;重置&lt;/el-button&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n  &lt;el-card style=&quot;margin: 10px 0px&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; @click=&quot;addUser&quot;&gt;添加用户&lt;/el-button&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;批量删除&lt;/el-button&gt;\n    &lt;!-- table展示用户信息 --&gt;\n    &lt;el-table style=&quot;margin: 10px 0px&quot; border :data=&quot;userArr&quot;&gt;\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;#&quot; align=&quot;center&quot; type=&quot;index&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;ID&quot; align=&quot;center&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名字&quot; align=&quot;center&quot; prop=&quot;username&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名称&quot; align=&quot;center&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户角色&quot; align=&quot;center&quot; prop=&quot;roleName&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;创建时间&quot; align=&quot;center&quot; prop=&quot;createtTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;更新时间&quot; align=&quot;center&quot; prop=&quot;updateTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;300px&quot; align=&quot;center&quot;&gt;\n        &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;User&quot;&gt;分配角色&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot; @click=&quot;updateUser(row)&quot;&gt;编辑&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot;&gt;删除&lt;/el-button&gt;\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n    &lt;!-- 分页器 --&gt;\n    &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;pageSize&quot; :page-sizes=&quot;[5, 7, 9, 11]&quot; :background=&quot;true&quot; layout=&quot;prev, pager, next, jumper,-&gt;,sizes,total&quot; :total=&quot;total&quot; @current-change=&quot;getHasUser&quot; @size-change=&quot;handler&quot; /&gt;\n  &lt;/el-card&gt;\n  &lt;!-- 抽屉结构:完成添加新的用户账号|更新已有的账号信息 --&gt;\n  &lt;!-- 通过`v-model=&quot;drawer&quot;`控制抽屉组件显示与隐藏 --&gt;\n  &lt;el-drawer v-model=&quot;drawer&quot;&gt;\n    &lt;!-- 头部标题:将来文字内容应该动态的 --&gt;\n    &lt;template #header&gt;\n      &lt;h4&gt;添加用户&lt;/h4&gt;\n    &lt;/template&gt;\n    &lt;!-- 身体部分 --&gt;\n    &lt;template #default&gt;\n      &lt;el-form ref=&quot;formRef&quot;&gt;\n        &lt;el-form-item label=&quot;用户姓名&quot; prop=&quot;username&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户姓名&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;name&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户昵称&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户密码&quot; prop=&quot;password&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户密码&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n      &lt;/el-form&gt;\n    &lt;/template&gt;\n    &lt;template #footer&gt;\n      &lt;div style=&quot;flex: auto&quot;&gt;\n        &lt;el-button&gt;取消&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot;&gt;确定&lt;/el-button&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/el-drawer&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref, onMounted &#125; from &quot;vue&quot;;\nimport &#123; reqUserInfo &#125; from &quot;@/api/acl/user&quot;;\nimport type &#123; UserResponseData, Records, User &#125; from &quot;@/api/acl/user/type&quot;;\n//默认页码\nlet pageNo = ref&lt;number&gt;(1);\n//一页展示几条数据\nlet pageSize = ref&lt;number&gt;(5);\n//用户总数\nlet total = ref&lt;number&gt;(0);\n//存储全部用户的数据\nlet userArr = ref&lt;Records&gt;([]);\n//定义响应式数据控制抽屉的显示与隐藏\nlet drawer = ref&lt;boolean&gt;(false);\n\nonMounted(() =&gt; &#123;\n  getHasUser();\n&#125;);\n\n//获取全部已有的用户信息的方法封装\nconst getHasUser = async (pager = 1) =&gt; &#123;\n  pageNo.value = pager;\n  let result: UserResponseData = await reqUserInfo(pageNo.value, pageSize.value);\n  if (result.code == 200) &#123;\n    total.value = result.data.total;\n    userArr.value = result.data.records;\n  &#125;\n&#125;;\n\n//分页器下拉菜单自定义事件的回调\nconst handler = () =&gt; &#123;\n  getHasUser();\n&#125;;\n\n//“添加用户”按钮的回调\nconst addUser = () =&gt; &#123;\n  drawer.value = true;\n&#125;;\n//“编辑”按钮的回调\n//row：已有的用户的账号信息\nconst updateUser = (row: User) =&gt; &#123;\n  drawer.value = true;\n&#125;;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.form &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"2\">\n<li>“添加用户” 业务实现<br />\n需要将收集到的数据通过接口传给后端</li>\n</ol>\n<ul>\n<li>2.1 写接口 api/acl/user/index.ts</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用户管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> UserResponseData<span class=\"token punctuation\">,</span> User <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 枚举地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取全部已有用户账号信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 添加一个新的用户账号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token constant\">ADDUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/save\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 更新已有的用户账号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token constant\">UPDATEUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/update\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取用户账号信息的接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> UserResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 添加用户与更新已有用户的接口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqAddOrUpdateUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 携带参数有 ID 更新</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 更新</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">put</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATEUSER_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADDUSER_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>2.2 收集表单数据相关业务</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-drawer v-model=&quot;drawer&quot;&gt;\n    &lt;!-- 头部标题:将来文字内容应该动态的 --&gt;\n    &lt;template #header&gt;\n      &lt;h4&gt;&#123;&#123; userParams.id ? \"更新用户\" : \"添加用户\" &#125;&#125;&lt;/h4&gt;\n    &lt;/template&gt;\n    &lt;!-- 身体部分 --&gt;\n    &lt;template #default&gt;\n      &lt;el-form :model=&quot;userParams&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot;&gt;\n        &lt;el-form-item label=&quot;用户姓名&quot; prop=&quot;username&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户姓名&quot; v-model=&quot;userParams.username&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;name&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户昵称&quot; v-model=&quot;userParams.name&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户密码&quot; prop=&quot;password&quot; v-if=&quot;!userParams.id&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户密码&quot; v-model=&quot;userParams.password&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n      &lt;/el-form&gt;\n    &lt;/template&gt;\n    &lt;template #footer&gt;\n      &lt;div style=&quot;flex: auto&quot;&gt;\n        &lt;el-button @click=&quot;cancel&quot;&gt;取消&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot;&gt;确定&lt;/el-button&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/el-drawer&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref, onMounted, reactive &#125; from &quot;vue&quot;;\nimport &#123; reqUserInfo, reqAddOrUpdateUser &#125; from &quot;@/api/acl/user&quot;;\n\n//收集用户响应式数据\nlet userParams = reactive&lt;User&gt;(&#123;\n  username: &quot;&quot;,\n  name: &quot;&quot;,\n  password: &quot;&quot;,\n&#125;);\n\n//“添加用户”按钮的回调\nconst addUser = () =&gt; &#123;\n  drawer.value = true;\n  //每次清空数据\n  Object.assign(userParams, &#123;\n    username: &quot;&quot;,\n    name: &quot;&quot;,\n    password: &quot;&quot;,\n  &#125;);\n&#125;;\n\n//抽屉组件的“保存”按钮的回调\nconst save = async () =&gt; &#123;\n  //保存按钮：添加新用户或更新已有用户\n  let result: any = await reqAddOrUpdateUser(userParams);\n  if (result.code == 200) &#123;\n    drawer.value = false;\n    ElMessage(&#123;\n      type: &quot;success&quot;,\n      message: userParams.id ? &quot;更新成功&quot; : &quot;添加成功&quot;,\n    &#125;);\n    getHasUser();\n  &#125; else &#123;\n    drawer.value = false;\n    ElMessage(&#123;\n      type: &quot;error&quot;,\n      message: userParams.id ? &quot;更新失败&quot; : &quot;添加失败&quot;,\n    &#125;);\n  &#125;\n&#125;;\n\n//抽屉组件的“取消”按钮的回调\nconst cancel = () =&gt; &#123;\n  drawer.value = false;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>2.3 表单校验功能</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- `:model`、`:rules`、`ref`、`prop` 是用来做表单校验的,其中`ref`是为了获得form组件实例等校验通过后再发请求--&gt;\n  &lt;el-form :model=&quot;userParams&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot;&gt;\n    &lt;el-form-item label=&quot;用户姓名&quot; prop=&quot;username&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入用户姓名&quot; v-model=&quot;userParams.username&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;name&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入用户昵称&quot; v-model=&quot;userParams.name&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item label=&quot;用户密码&quot; prop=&quot;password&quot; v-if=&quot;!userParams.id&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入用户密码&quot; v-model=&quot;userParams.password&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n  &lt;/el-form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n//获取form组件实例\nlet formRef = ref&lt;any&gt;()\n\nconst save = async () =&gt; &#123;\n  //点击保存按钮的时候务必保证表单校验全部通过再发请求\n  await formRef.value.validator()\n  …………………………………………\n&#125;\n//校验用户名字回调函数\nconst validatorUsername = (rule: any, value: any, callBack: any) =&gt; &#123;\n  //用户名字|昵称,长度至少五位\n  if (value.trim().length &gt;= 5) &#123;\n    callBack();\n  &#125; else &#123;\n    callBack(new Error(&quot;用户名字至少五位&quot;));\n  &#125;\n&#125;;\n//校验用户名字回调函数\nconst validatorname = (rule: any, value: any, callBack: any) =&gt; &#123;\n  //用户名字|昵称,长度至少五位\n  if (value.trim().length &gt;= 5) &#123;\n    callBack();\n  &#125; else &#123;\n    callBack(new Error(&quot;用户昵称至少五位&quot;));\n  &#125;\n&#125;;\nconst validatorPassword = (rule: any, value: any, callBack: any) =&gt; &#123;\n  //用户名字|昵称,长度至少五位\n  if (value.trim().length &gt;= 6) &#123;\n    callBack();\n  &#125; else &#123;\n    callBack(new Error(&quot;用户密码至少六位&quot;));\n  &#125;\n&#125;;\n//表单校验\nconst rules = &#123;\n  //用户名字\n  username: [&#123; required: true, trigger: &quot;blur&quot;, validator: validatorUsername &#125;],\n  //用户昵称\n  name: [&#123; required: true, trigger: &quot;blur&quot;, validator: validatorname &#125;],\n  //用户的密码\n  password: [&#123; required: true, trigger: &quot;blur&quot;, validator: validatorPassword &#125;],\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>2.4 更新修改功能的业务实现</li>\n</ul>\n<h4 id=\"4-分配角色业务\"><a class=\"anchor\" href=\"#4-分配角色业务\">#</a> 4. 分配角色业务</h4>\n<ol>\n<li>静态搭建</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 抽屉结构:用户某一个已有的账号进行职位分配 --&gt;\n  &lt;el-drawer v-model=&quot;drawer1&quot;&gt;\n    &lt;template #header&gt;\n      &lt;h4&gt;分配角色(职位)&lt;/h4&gt;\n    &lt;/template&gt;\n    &lt;template #default&gt;\n      &lt;el-form&gt;\n        &lt;el-form-item label=&quot;用户姓名&quot;&gt;\n          &lt;el-input v-model=&quot;userParams.username&quot; :disabled=&quot;true&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;职位列表&quot;&gt;\n          &lt;el-checkbox @change=&quot;handleCheckAllChange&quot; v-model=&quot;checkAll&quot; :indeterminate=&quot;isIndeterminate&quot;&gt;全选&lt;/el-checkbox&gt;\n          &lt;!-- 显示职位的的复选框 --&gt;\n          &lt;el-checkbox-group v-model=&quot;userRole&quot; @change=&quot;handleCheckedCitiesChange&quot;&gt;\n            &lt;el-checkbox v-for=&quot;(role, index) in allRole&quot; :key=&quot;index&quot; :label=&quot;role&quot;&gt;&#123;&#123; role.roleName &#125;&#125;&lt;/el-checkbox&gt;\n          &lt;/el-checkbox-group&gt;\n        &lt;/el-form-item&gt;\n      &lt;/el-form&gt;\n    &lt;/template&gt;\n    &lt;template #footer&gt;\n      &lt;div style=&quot;flex: auto&quot;&gt;\n        &lt;el-button @click=&quot;drawer1 = false&quot;&gt;取消&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; @click=&quot;confirmClick&quot;&gt;确定&lt;/el-button&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/el-drawer&gt;\n&lt;/template&gt;\n\n&lt;script&gt;&lt;/script&gt;\n</code></pre>\n<ol start=\"2\">\n<li>分配角色业务</li>\n</ol>\n<h3 id=\"权限管理-角色管理\"><a class=\"anchor\" href=\"#权限管理-角色管理\">#</a> 权限管理 - 角色管理</h3>\n<h4 id=\"分配权限功能\"><a class=\"anchor\" href=\"#分配权限功能\">#</a> 分配权限功能</h4>\n<p>elementplus 树形控件<br />\n获取全部的菜单与按钮的数据也是通过接口。</p>\n<ul>\n<li>\n<p>某个职位已有的菜单权限也是写在接口里的（seltct 的 true 与 false）。那么页面上如何展现勾与不勾呢？只需要过滤最末尾一级 id 的 select 即可。尾递归<br />\n准备一个数组，用于存储勾选的最末尾的节点 id，递归过滤时的条件是 select 且节点时最末一级</p>\n</li>\n<li>\n<p>为只为分配权限 也是调用接口，传参 roleId (需要分配的那个职位的 id) 和 permissionId (分配给职位的权限的 id)。参数可以调用 element plus 树形控件组件实例上的方法获得</p>\n<blockquote>\n<p>参数是 query 格式的时候写 api 接口还需要加上 <code>?k=v</code>  形式</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>element plus 组件的 ref 属性可以获取该组件的组件实例，调用组件的方法需要 <code>组件实例.方法()</code></p>\n</blockquote>\n<h3 id=\"权限管理-菜单管理\"><a class=\"anchor\" href=\"#权限管理-菜单管理\">#</a> 权限管理 - 菜单管理</h3>\n<h4 id=\"开发菜单权限\"><a class=\"anchor\" href=\"#开发菜单权限\">#</a> 开发菜单权限</h4>\n<ol>\n<li>拆分路由</li>\n</ol>\n<ul>\n<li>静态（常亮）路由：所有用户都可以访问的路由。（登录、首页、数据大屏、404）</li>\n<li>异步路由：不同身份的用户有的有这个路由，有的没有</li>\n<li>任意路由</li>\n</ul>\n<ol start=\"2\">\n<li>菜单权限开发思路<br />\n目前咱们得项目：任何用户访问到的、能操作的菜单与按钮都是一样的</li>\n</ol>\n<p>过滤异步路由，map 递归生成菜单，</p>\n<ul>\n<li>路由器管理的只有常亮路由，用户计算完异步路由、任意路由后要动态追加：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>userAsyncRoute<span class=\"token punctuation\">,</span> anyRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">route</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>导航守卫</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>to <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"数据大屏\"><a class=\"anchor\" href=\"#数据大屏\">#</a> 数据大屏</h3>\n<ul>\n<li>适配问题：vw、vh； transform.scale (结合 js)<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVhoNDExVjdiNS8/cD0xMjkmYW1wO3NwbV9pZF9mcm9tPXBhZ2VEcml2ZXImYW1wO3ZkX3NvdXJjZT1mZjI0Nzc3MmE2MmVlOWMzYjJlZDI3ZmE1ZTRhOTFlMg==\">https://www.bilibili.com/video/BV1Xh411V7b5/?p=129&amp;spm_id_from=pageDriver&amp;vd_source=ff247772a62ee9c3b2ed27fa5e4a91e2</span><br />\np129 22:09</li>\n</ul>\n<h3 id=\"项目上线\"><a class=\"anchor\" href=\"#项目上线\">#</a> 项目上线</h3>\n<h4 id=\"1-环境替换\"><a class=\"anchor\" href=\"#1-环境替换\">#</a> 1、 环境替换</h4>\n<h4 id=\"2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\"><a class=\"anchor\" href=\"#2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\">#</a> 2、 打包（工作中一般前端就做到这，把打包后的 dist 文件夹交上去就行了）、</h4>\n<h4 id=\"3-把-dist-上传到服务器-配置-nginx-代理\"><a class=\"anchor\" href=\"#3-把-dist-上传到服务器-配置-nginx-代理\">#</a> 3、 把 dist 上传到服务器 - 配置 nginx 代理</h4>\n<ol>\n<li>连接服务器， <code>cd etc</code>  后安装 nginx： <code>yum install nginx</code></li>\n<li><code>cd nginx</code>  后进行配置 <code>vim nginx.conf</code> :</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>location <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  root <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  index index<span class=\"token punctuation\">.</span>html index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改后重启： <code>systemctl restart nginx.service</code> , 随后项目便上线了</li>\n</ol>\n",
            "tags": [
                "实战",
                "后台管理系统"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://eucli.top/2023/09/29/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "【案例】泛型封装数据库",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<p>功能：定义一个操作数据库的库，支持 mysql、mongoDB<br />\n 要求：mysql、mongoDB 功能是一样的，都有增删改查（insert delete update select）方法<br />\n注意：约束统一的规范、代码复用<br />\n规范：interface<br />\n 复用：泛型</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 增删改查（insert delete update select）方法 ==> 规范：interface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Db<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sql<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Db<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 类实现接口用 implements，接口实现接口用 extends</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token class-name\">insert</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  userName<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  userPwd<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">let</span> mySql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sql<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>mySql<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  userName<span class=\"token operator\">:</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  userPwd<span class=\"token operator\">:</span><span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "TS",
                "实战"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "url": "https://eucli.top/2023/09/29/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "title": "尚品汇前台项目实战",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h1 id=\"vue-cli-脚手架初始化项目-vue-create-app\"><a class=\"anchor\" href=\"#vue-cli-脚手架初始化项目-vue-create-app\">#</a> vue-cli 脚手架初始化项目 vue create app</h1>\n<h1 id=\"npm-常用的安装命令\"><a class=\"anchor\" href=\"#npm-常用的安装命令\">#</a> npm 常用的安装命令</h1>\n<ul>\n<li>npm i 就是 npm install 简写</li>\n<li>npm i xxx -D 就是 npm i xxx --save-dev</li>\n<li>npm i xxx -S 就是 npm i xxx --save</li>\n<li>npm i xxx -g 就是 全局安装</li>\n<li>npm i xxx 就是 npm i xxx --save</li>\n</ul>\n<h1 id=\"初始项目中文件夹的作用\"><a class=\"anchor\" href=\"#初始项目中文件夹的作用\">#</a> 初始项目中文件夹的作用</h1>\n<ul>\n<li>\n<p>node_modules 项目依赖文件夹</p>\n</li>\n<li>\n<p>public 一般放置一些静态资源 (图片)，需要注意放在 public 文件夹中的资源 webpack 打包的时候会原封不动打包到 dist 文件夹中</p>\n</li>\n<li>\n<p>src (程序员源代码文件夹):</p>\n<ul>\n<li>\n<p>assets 文件夹：一般也是放置一些静态资源 (一般放置多个组件共用的静态资源)，需要注意，放置在 assets 文件夹里的静态资源在 webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</p>\n</li>\n<li>\n<p>components 文件夹：一般放置的是非路由组件或者一些常用的全局组件</p>\n</li>\n<li>\n<p>pages|views 文件夹：放置路由组件</p>\n</li>\n<li>\n<p>router 文件夹：配置路由的地方</p>\n</li>\n<li>\n<p>APP.vue: 整个项目中唯一的根组件</p>\n</li>\n<li>\n<p>main.js: 程序入口文件，也是整个程序当中最先执行的文件</p>\n</li>\n</ul>\n</li>\n<li>\n<p>babel.config.js: 配置文件 (babel 相关)</p>\n</li>\n<li>\n<p>package.json: 记录项目的信息</p>\n</li>\n<li>\n<p>package-lock.json: 缓存性文件</p>\n</li>\n</ul>\n<h1 id=\"一些问题\"><a class=\"anchor\" href=\"#一些问题\">#</a> 一些问题</h1>\n<ul>\n<li>\n<p>vue 创建项目，报错 No Babel config file detected for..<br />\n 解决办法：在 package.json 文件中增加 &quot;requireConfigureFile&quot;: false</p>\n</li>\n<li>\n<p>【vue 报错】The template root requires exactly one element<br />\n 解决：因为 vue2 的模版中只有能一个根节点，所以在 template 中插入第二个元素就会报错</p>\n</li>\n</ul>\n<h1 id=\"一些配置\"><a class=\"anchor\" href=\"#一些配置\">#</a> 一些配置：</h1>\n<ol>\n<li>\n<p>项目运行起来的时候，让浏览器可以自动打开<br />\n办法：在 package.json 中：</p>\n<pre><code>&quot;scripts&quot;: &#123;\n&quot;serve&quot;: &quot;vue-cli-service serve --open&quot;,\n&#125;\n</code></pre>\n</li>\n<li>\n<p>eslint 校验功能关闭<br />\n在 vue.config.js 中写 <code>lintOnSave: false</code></p>\n</li>\n<li>\n<p>src 文件夹简写方式，配置别名 @代表 src 文件夹<br />\n jscpnfig.json 文件中：(省略)</p>\n</li>\n</ol>\n<h1 id=\"项目的路由分析-vue-router\"><a class=\"anchor\" href=\"#项目的路由分析-vue-router\">#</a> 项目的路由分析 vue-router</h1>\n<ul>\n<li>\n<p>前端所谓路由：KV 键值对</p>\n<ul>\n<li>key:URL (浏览器地址栏中的路径 path)</li>\n<li>value: 相应的路由组件 (component，注意后面没有 s)</li>\n<li>注意：项目的上中下结构</li>\n</ul>\n</li>\n<li>\n<p>路由组件：</p>\n<ul>\n<li>Home 首页路由组件、Search 路由组件、login 登录路由组件、Refister 注册路由组件</li>\n</ul>\n</li>\n<li>\n<p>非路由组件：Header、Footer (在首页，搜索页)，但是在 登录 | 注册 页没有</p>\n</li>\n</ul>\n<h1 id=\"在开发项目的时候\"><a class=\"anchor\" href=\"#在开发项目的时候\">#</a> 在开发项目的时候：</h1>\n<ol>\n<li>书写静态页面 (HTML+CSS)</li>\n<li>拆分组件</li>\n<li>获取服务器的数据动态展示</li>\n<li>完成相应的动态业务逻辑</li>\n</ol>\n<ul>\n<li>注意：\n<ol>\n<li>创建组件的时候，组件结构 + 组件的样式 + 图片资源</li>\n<li>咱们的项目采用 less 样式，但浏览器不识别 less 样式，需要通过 less、less-loader 进行处理<br />\n <code>npm i less less-loader@7</code>  安装 5 版本会报错<br />\n别忘了 style 标签中写 <code>&lt;style scoped lang=&quot;less&quot;&gt;</code></li>\n<li>header 样式太高记得把 App.vue 里面的样式清除</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"使用组件的步骤非路由组件\"><a class=\"anchor\" href=\"#使用组件的步骤非路由组件\">#</a> 使用组件的步骤 (非路由组件)</h1>\n<ol>\n<li>创建或定义组件</li>\n<li>引入：import 组件名 from ' 组件地址 ' 在需要使用这个组件的地方引入</li>\n<li>注册 (vue3 使用 setup 语法糖不用注册)：components 中注册引入的组件名 (简写形式，KV 一致省略 V)</li>\n<li>使用：以标签形式在 APP.vue 中使用</li>\n</ol>\n<h1 id=\"引入的-css-错乱记得引入默认的样式\"><a class=\"anchor\" href=\"#引入的-css-错乱记得引入默认的样式\">#</a> 引入的 css 错乱，记得引入默认的样式</h1>\n<p>public 文件夹中，创建一个清除默认样式的 css 文件，再在 public 下的 index.html 中引入这个 css 用 link</p>\n<h1 id=\"路由的搭建-vue-router\"><a class=\"anchor\" href=\"#路由的搭建-vue-router\">#</a> 路由的搭建 vue-router</h1>\n<p>(ps. 创建项目的时候直接把路由选上就不用搭建了 doge)</p>\n<p>安装：  <code>npm i vue-router@3</code>  因为 vue2 不用 3 版本会报错</p>\n<p>在上面的分析中，路由组件应该有四个： Home、Search、Login、Refister<br />\ncomponents 文件夹：经常放非路由组件或共用全局组件<br />\n pages|views 文件夹：经常放置路由组件</p>\n<h1 id=\"配置路由\"><a class=\"anchor\" href=\"#配置路由\">#</a> 配置路由</h1>\n<p>项目当中配置的路由一般都放在 router 文件夹中</p>\n<pre><code class=\"language-配置路由\">  //配置路由的地方\n  import Vue from &quot;vue&quot;;\n  import VueRouter from &quot;vue-router&quot;;\n\n  //使用插件\n  Vue.use(VueRouter)\n\n  //引入路由组件\n  import Home from '@/pages/Home'\n\n  //配置路由\n  export default new VueRouter(&#123;\n  routes: [\n      &#123;\n      path:&quot;/&quot;,            //默认展示只写 /\n      component:Home       //注意是 component 一定不要加 s\n      &#125;\n  ]\n  &#125;)\n</code></pre>\n<p>除此之外，还需要在 main.js 中引入路由</p>\n<pre><code>  //引入路由\n  import router from '@/router'\n\n  new Vue(&#123;\n  //注册路由\n  router\n  &#125;).$mount('#app')\n</code></pre>\n<p>还有一件事，路由组件还需要出口 在需要展示路由组件的地方写  <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n<p>ps. 配置路由的时候，可以给路由添加路由元信息 meta，路由需要配置对象，它的 key 不能瞎写</p>\n<h1 id=\"路由组件与非路由组件的异同\"><a class=\"anchor\" href=\"#路由组件与非路由组件的异同\">#</a> 路由组件与非路由组件的异同：</h1>\n<ol>\n<li>路由组件一般放置在 pages|views 文件夹中，非路由组件一般放置在 components 文件夹中</li>\n<li>路由组件一般需要在 router 文件夹注册 (使用即为组件的名字，非路由组件在使用的时候还要占位)，非路由组件一般都是以标签的形式使用</li>\n<li>注册完路由，不管是路由组件还是非路由组件身上都有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</li>\n</ol>\n<h1 id=\"route和router-属性\"><a class=\"anchor\" href=\"#route和router-属性\">#</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</h1>\n<ul>\n<li><code>$route</code> ：一般获取路由信息 (路径、query、params 等等)</li>\n<li><code>$router</code> ：一般进行编程式导航进行路由跳转 (push|replace)</li>\n</ul>\n<h1 id=\"路由的跳转\"><a class=\"anchor\" href=\"#路由的跳转\">#</a> 路由的跳转</h1>\n<p>路由的跳转有两种形式：</p>\n<ul>\n<li>声明式导航 router-link 注意要有 to 属性</li>\n<li>编程式导航 push|replace：声明式导航能做的，编程式导航都能做。而且编程式导航除了可以进行路由跳转，还可以做一些其他的业务逻辑</li>\n</ul>\n<h1 id=\"footer-组件的显示与隐藏\"><a class=\"anchor\" href=\"#footer-组件的显示与隐藏\">#</a> Footer 组件的显示与隐藏</h1>\n<p>Footer 组件：在 Home、Search 显示，在 Login、Register 时隐藏</p>\n<h1 id=\"路由传参\"><a class=\"anchor\" href=\"#路由传参\">#</a> 路由传参</h1>\n<ol>\n<li>路由的跳转有几种方式？<br />\n比如：A-&gt;B</li>\n</ol>\n<ul>\n<li>声明式导航：route-link, 务必要有 to 属性</li>\n<li>编程式导航：利用的是组件实例的 $router.push|replace 方法 可以写自己的业务</li>\n</ul>\n<ol start=\"2\">\n<li>路由传参，参数有几种写法？</li>\n</ol>\n<ul>\n<li>params 参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位</li>\n<li>query 参数：不属于路径当中的一部分，类似于 ajax 中的 queryString/home?k=v&amp;kv=, 不需要占位</li>\n<li>三种方式：</li>\n</ul>\n<pre><code>  //第一种：字符串形式\n  this.$router.push(&quot;/search/&quot; + this.keyword + &quot;?k=&quot; + this.keyword.toUpperCase());\n  //第二种：模板字符串\n  this.$router.push(`/search/$&#123;this.keyword&#125;?k=$&#123;this.keyword.toUpperCase()&#125;`);\n  //第三种：对象写法   这种写法需要给路由起名字name   ☆最常用\n  this.$router.push(&#123;\n  name:&quot;search&quot;,\n  params:&#123;keyword:this.keyword&#125;,\n  query:&#123;k:this.keyword.toUpperCase()&#125;\n  &#125;)\n</code></pre>\n<h1 id=\"路由传参相关面试题\"><a class=\"anchor\" href=\"#路由传参相关面试题\">#</a> 路由传参相关面试题</h1>\n<ol>\n<li>\n<p>路由传递参数 (对象写法) path 是否可以结合 params 参数一起使用？<br />\n不可以。<br />\n路由跳转传参的时候，对象写法可以是 name，path 形式，但 path 写法不能与 params 使用</p>\n</li>\n<li>\n<p>如何指定 params 参数可传可不传？<br />\n比如：配置路由的时候，params 参数占位了，但是路由跳转的时候没有传递 params，那么路径会出现问题  <code>http://localhost:8080/#/?k=1123</code>  没有 search<br />\n 解决：params 参数后面加？ <code>path:&quot;/search/:keyword?&quot;</code></p>\n</li>\n<li>\n<p>params 参数可以传递也可以不传递，但如果传递的是空串如何解决？<br />\n// 答：用 undefined 解决  <code>params:&#123;keyword:''||undefined&#125;</code></p>\n</li>\n<li>\n<p>路由组件能不能传递 props 数据？<br />\n可以，有三种方式 (但是实际开发中并不怎么用)</p>\n</li>\n</ol>\n<ul>\n<li>方式一：布尔值写法，只能传递 params 参数<br />\n <code>props:true</code></li>\n<li>方式二：对象写法 额外给路由组件传递一些 props<br />\n <code>props:&#123;a:1,b:2&#125;</code></li>\n<li>方式三 (最常用)：函数写法，可以把 params、query 参数，通过 props 传递给路由组件</li>\n</ul>\n<pre><code>  props:($route) =&gt; &#123;\n    return &#123;\n      keyword: $route.params.keyword,\n      k: $route.query,k\n    &#125;\n  &#125;\n</code></pre>\n<ol start=\"5\">\n<li>编程式导航跳转到当前路由 (参数不变)，多次执行会抛出错误警告？</li>\n</ol>\n<ul>\n<li>声明式导航没有这类问题，因为 vue-router 底层已经处理好了</li>\n<li>怎么解决：通过给 push 方法传递相应的成功、失败的回调，可以捕获到当前的错误，可以解决，只是治标不治本，将来在别的组件组件中使用 push|replace 还会有类似错误</li>\n</ul>\n<p>this：当前组件实例 (search)<br />\n this.$router 属性：属性值 vueRouter 类的一个实例<br />\n push：vueRouter 类的一个实例</p>\n<h1 id=\"call-与-apply-区别\"><a class=\"anchor\" href=\"#call-与-apply-区别\">#</a> call 与 apply 区别</h1>\n<ul>\n<li>相同点：都可以调用函数一次，都可以修改函数的上下文一次</li>\n<li>不同点：call 传递参数用逗号隔开，apply 方法执行传递数组</li>\n</ul>\n<h1 id=\"home-模块的组件拆分\"><a class=\"anchor\" href=\"#home-模块的组件拆分\">#</a> Home 模块的组件拆分</h1>\n<ol>\n<li>先把静态页面完成</li>\n<li>拆分出静态组件</li>\n<li>获取服务器的数据展示</li>\n<li>动态业务</li>\n</ol>\n<h1 id=\"三级联动组件完成\"><a class=\"anchor\" href=\"#三级联动组件完成\">#</a> 三级联动组件完成</h1>\n<p>由于三级联动组件在 Home、Search、Detail 模块中都使用了，所有注册为一个全局组件 (在 main.js 注册):<br />\n// 先引入。三级联动的组件 -- 全局组件<br />\n <code>import TypeNav from '@/pages/Home/TypeNav'</code> <br />\n// 再注册。第一个参数：全局组件的名字 第二个参数：哪一个组件<br />\n <code>Vue.component(TypeNav.name,TypeNav)</code></p>\n<ul>\n<li>好处：只需要注册一次，就可以在项目任意的地方使用，且使用的时候不需要引入</li>\n</ul>\n<h1 id=\"完成其余静态组件\"><a class=\"anchor\" href=\"#完成其余静态组件\">#</a> 完成其余静态组件</h1>\n<p>HTML + CSS + 图片资源</p>\n<h1 id=\"postman-测试接口\"><a class=\"anchor\" href=\"#postman-测试接口\">#</a> POSTMAN 测试接口</h1>\n<ul>\n<li>刚刚经过 postman 工具测试，接口是没有问题的</li>\n<li>如果服务器返回的数据 code 字段为 200，代表服务器返回数据成功</li>\n<li>整个项目，接口前缀都有 /api 字样</li>\n</ul>\n<h1 id=\"axios-二次封装\"><a class=\"anchor\" href=\"#axios-二次封装\">#</a> axios 二次封装</h1>\n<p>(发请求的几种方式：XMLHttpRequest、fetch、JQ、axios)</p>\n<ol>\n<li>为什么需要进行二次封装 axios<br />\n 为了使用请求拦截器、响应拦截器：</li>\n</ol>\n<ul>\n<li>请求拦截器：可以在发请求之前可以处理一些业务</li>\n<li>响应拦截器：当服务器数据返回以后，可以处理一些事情</li>\n</ul>\n<ol start=\"2\">\n<li>在项目中创建 api 文件夹关于 axios (在 src 文件夹目录下建立)</li>\n</ol>\n<ul>\n<li>接口当中：路径都带有 /api</li>\n<li>baseURL:&quot;/api&quot; 基础路径，发请求的时候，路径当中会出现 api，不用自己手写了</li>\n</ul>\n<ol start=\"3\">\n<li>如果 axios 基础不好，可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXhpb3MtaHR0cC5jbi9kb2NzL2ludHJv\">axios 中文文档</span></li>\n</ol>\n<h1 id=\"接口统一管理\"><a class=\"anchor\" href=\"#接口统一管理\">#</a> 接口统一管理</h1>\n<ul>\n<li>\n<p>项目很小：完全可以在组件的生命周期函数中发请求</p>\n</li>\n<li>\n<p>项目大：axios.get ('xxx')</p>\n<ol>\n<li>跨域问题<br />\n什么是跨域：协议、域名、端口号不同请求，称之为跨域<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLyMvaG9tZQ==\"> http://localhost:8080/#/home</span> 前端项目本地服务器<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2dtYWxsLWg1LWFwaS5hdGd1aWd1LmNu\"> http://gmall-h5-api.atguigu.cn</span> 后台服务器</li>\n</ol>\n<ul>\n<li>\n<p>解决跨域的几个方法：<br />\nJSONP、CROS、代理</p>\n</li>\n<li>\n<p>webpack 代理配置</p>\n</li>\n</ul>\n<pre><code>  devServer: &#123;\n  proxy: &#123;\n    '/api': &#123;\n      target: 'http://gmall-h5-api.atguigu.cn',\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n<h1 id=\"nprogress-进度条的使用\"><a class=\"anchor\" href=\"#nprogress-进度条的使用\">#</a> nprogress 进度条的使用</h1>\n<p>可以在 reques.js 文件中使用</p>\n<ol>\n<li>\n<p>先引入：<br />\n// 引入进度条<br />\n <code>import nprogress from &quot;nprogress&quot;;</code> <br />\n// 引入进度条样式<br />\n <code>import &quot;nprogress/nprogress.css&quot;</code></p>\n</li>\n<li>\n<p>start：进度条开始 done：进度条结束<br />\n在请求拦截器中用 <code>1nprogress.start()</code> ，在响应拦截器中用 <code>nprogress.done()</code></p>\n</li>\n</ol>\n<h1 id=\"vuex-状态管理库\"><a class=\"anchor\" href=\"#vuex-状态管理库\">#</a> vuex 状态管理库</h1>\n<ol>\n<li>vuex 是什么？<br />\n官方提供的一个插件，是一个状态管理库，集中式管理项目中组件共用的数据。</li>\n</ol>\n<ul>\n<li>\n<p>state：仓库存储数据的地方</p>\n</li>\n<li>\n<p>mutations：修改 state 的唯一手段</p>\n</li>\n<li>\n<p>actions：处理 action，可以书写自己的业务逻辑，也可以处理异步。不能修改 state<br />\n <code>actions是服务员，mutations是厨师，只有mutations能做菜(修改state)</code></p>\n<p>getters：理解为计算属性，用于简化仓库数据，让组件获取仓库的数据更加方便<br />\n modules</p>\n<p>vue2 要安装 vuex@3</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>vuex 基本使用<br />\n因为 vuex 是 Vue 框架中的一个插件，要使用插件需要引入 vue 与 vuex 并 <code>Vue.use()</code>  一下，<br />\n然后暴露出去一个  <code>export default new Vuex.Store(&#123;&#125;)</code> <br />\n 别忘了在 main.js 入口文件里引入、注册一下仓库</p>\n</li>\n<li>\n<p>vuex 模块式开发</p>\n</li>\n</ol>\n<ul>\n<li>如果项目过大，组件过多，接口也很多，数据也很多，可以让 vuex 实现模块式开发</li>\n<li>每个模块都有自己的一个小仓库，到时候引入到 store 的入口文件中，然后在 export default 中用 modules 对小仓库进行管理</li>\n</ul>\n<h1 id=\"vue-模块开发总结\"><a class=\"anchor\" href=\"#vue-模块开发总结\">#</a> vue 模块开发总结！！！！！！！</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>写请求。【api 文件夹的 <code>index.js</code>  中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】<br />\n(Actions,Mutations,State) 参考 vuex 工作流程图</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取仓库数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"一-写静态页面-静态组件拆分\"><a class=\"anchor\" href=\"#一-写静态页面-静态组件拆分\">#</a> 一、写静态页面 + 静态组件拆分</h2>\n<h2 id=\"二-写请求\"><a class=\"anchor\" href=\"#二-写请求\">#</a> 二、写请求。</h2>\n<p>在 api 文件夹的 <code>index.js</code>  中</p>\n<pre><code>export const reqGetSearchInfo = (params) =&gt; requests(&#123;\n  url:'/list',\n  method:'post',\n  data:params\n&#125;)\n</code></pre>\n<h2 id=\"三-发请求api\"><a class=\"anchor\" href=\"#三-发请求api\">#</a> 三、发请求 (API)</h2>\n<p>在组件的 <code>mounted()</code>  中发请求。即组件挂载完毕，通知 Vuex 向服务器发请求。</p>\n<ul>\n<li>dispatch：dispatch 是分发的意思，是 store 身上的一个 API，它包含两个参数，第一个是动作也可以说是一个操作，你通过这个操作调用 actions 里面的一个函数。第二个就是你要传递的参数 (也可以不传。但如果传递，到时候至少要传一个空对象，不然会报错)</li>\n</ul>\n<pre><code>mounted() &#123;\n//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中\nthis.$store.dispatch('getGoodInfo',this.$route.params.skuid\n&#125;\n\n</code></pre>\n<ul>\n<li>要发请求，需要在对应的小仓库中先引入之前封装好的 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<h2 id=\"四-vuex三连环\"><a class=\"anchor\" href=\"#四-vuex三连环\">#</a> 四、vuex (三连环)</h2>\n<ol>\n<li>第一环：Actions。<br />\n因为你使用了 dispatch，而其中的 <code>getGoodInfo</code>  未定义，因此要在 store 仓库中对应小仓库的 actions 中定义 getGoodInfo。通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据。<br />\n即 actions 中必须要有一个 getGoodInfo 方法来与之对应。其中参数 <code>&#123;commit&#125;</code>  是对 commit 的解构。commit 也是一个函数，有两个操作，第一个也是一个动作，第二个就是参数，通过 commit 将这次请求交给 mutations。<br />\n这第二个参数是在用户派发 actions 的时候，第二个参数传递过来的，至少要传一个空对象</li>\n</ol>\n<pre><code>\nconst actions = &#123;\nasync getGoodInfo(&#123;commit&#125;,skuId)&#123;\nlet result =await reqGoodsInfo(skuId)\nif(result.code==200)&#123;\ncommit('GetGOODINFO',result.data)\n&#125;\n&#125;\n&#125;\n\n</code></pre>\n<ol start=\"2\">\n<li>第二环：Mutations</li>\n</ol>\n<ul>\n<li>修改处理数据的唯一地方</li>\n<li>在 mutations 中真正的处理数据并且渲染数据</li>\n</ul>\n<pre><code>\nconst mutations = &#123;\nGetGOODINFO(state, categoryList) &#123;\nstate.categoryList = categoryList;\n&#125;\n\n</code></pre>\n<ul>\n<li>getters:<br />\n 就是相当于计算属性，对 state 中的数据进行简化操作，就比如当你的数据很复杂时你需要简单的拿到数据。举个例子你的数据是：AAA.BBB.CCC.DDD.data, 那么你就可以使用计算属性将其变为 data.</li>\n</ul>\n<pre><code>skuInfo(state) &#123;\n  return state.goodInfo.skuInfo || &#123;&#125;\n&#125;\n\n</code></pre>\n<ul>\n<li>使用 getters，在组件中获取仓库数据时用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code>  不用 <code>&#123; mapState &#125;</code>  了</li>\n</ul>\n<ol start=\"3\">\n<li>第三环：State<br />\nstate 中数据默认初始值别瞎写，服务器返回对象，起始值是对象；服务器返回数组，起始值是数组。根据接口的返回值去初始化</li>\n</ol>\n<pre><code>\nconst state = &#123;\n  categoryList: []\n&#125;\n\n</code></pre>\n<h2 id=\"五-组件获取仓库数据\"><a class=\"anchor\" href=\"#五-组件获取仓库数据\">#</a> 五、组件获取仓库数据</h2>\n<p>回到实例 (组件) 中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br />\n 并把数据映射为组件实例身上的一个属性：</p>\n<pre><code>\ncomputed: &#123;\n...mapState(&#123;\ncategoryList: (state) =&gt; categoryList\n&#125;)\n&#125;\n\n</code></pre>\n<p>如果用了 getters，辅助函数要用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code></p>\n<pre><code>computed: &#123;\n  //mapGetters里面的写法：传递的数组，因为getters计算没有划分模块\n...mapGetters(['skuInfo'])\n&#125;\n\n</code></pre>\n<h2 id=\"六-动态展示数据\"><a class=\"anchor\" href=\"#六-动态展示数据\">#</a> 六、动态展示数据</h2>\n<p>根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成</p>\n<p>————————————————————————————————————————————————</p>\n<p>栗子：</p>\n<h1 id=\"完成-typenav-三级联动展示数据业务\"><a class=\"anchor\" href=\"#完成-typenav-三级联动展示数据业务\">#</a> 完成 TypeNav 三级联动展示数据业务</h1>\n<p>把全局组件放到 components 文件夹中<br />\n axios 二次封装、vuex 准备工作。。。</p>\n<ol>\n<li>在三级联动组件中写 <code>mounted()</code> ，组件挂载完毕，通知 Vuex 向服务器发请求：</li>\n</ol>\n<pre><code>\nmounted() &#123;\n//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中\nthis.$store.dispatch(&quot;categoryList&quot;);\n&#125;\n\n</code></pre>\n<ol start=\"2\">\n<li>因为 &quot;categoryList&quot; 未定义，去 store 仓库中的 home 模块的小仓库中，在 actions 中定义 categoryList。<br />\n通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据<br />\n要发请求，需要引入之前封装 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ol>\n<pre><code>\nconst actions = &#123;\n  //通过API里面的接口函数调用，向服务器发请求，获取服务器的数据\n  async categoryList(&#123; commit &#125;) &#123;\n    //解构commit，提交mutations\n    let result = await reqCategoryList();\n    if (result.code == 200) &#123;\n      //第一个参数是起名，第二个参数是提交的数据\n      commit(&quot;GETCATEGORYLIST&quot;, result.data);\n    &#125;\n  &#125;,\n\n</code></pre>\n<ol start=\"3\">\n<li>请求成功，commit 提交给 mutations 修改 state。在此之前 state 需要写一个初始值。</li>\n</ol>\n<pre><code>\nconst state = &#123;\ncategoryList: [],\n&#125;\nconst mutations = &#123;\nCATEGORYLIST(state, categoryList) &#123;\nstate.categoryList = categoryList;\n&#125;,\n&#125;;\n\n</code></pre>\n<ol start=\"4\">\n<li>Home 组件中已经有了相应的数组，需要在三级联动 TypeNav 组件中拿到相应的数据进行展示<br />\n回到 TypeNav 组件中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br />\n 并把数据映射为组件实例身上的一个属性：</li>\n</ol>\n<pre><code>\ncomputed: &#123;\n...mapState(&#123;\ncategoryList: (state) =&gt; state.home.categoryList,\n&#125;),\n&#125;\n\n</code></pre>\n<ol start=\"5\">\n<li>展示数据。<br />\n先看数据的结构，发现一层套一层有三层，是一个三级菜单<br />\n在 template 把多余的结构去掉，只留一个，用 v-for 生成： <code>v-for=&quot;(c1, index) in categoryList&quot; :key=&quot;c1.categoryId&quot;</code> <br />\n 并把之前写死的数据替换： <code>c1.categoryName</code></li>\n</ol>\n<h1 id=\"完成一级分类动态添加背景颜色\"><a class=\"anchor\" href=\"#完成一级分类动态添加背景颜色\">#</a> 完成一级分类动态添加背景颜色</h1>\n<ul>\n<li>方法一：采用样式完成 (可以的)</li>\n<li>方法二：通过 JS 完成</li>\n</ul>\n<h1 id=\"通过-js-控制二三级商品分类的显示与隐藏\"><a class=\"anchor\" href=\"#通过-js-控制二三级商品分类的显示与隐藏\">#</a> 通过 JS 控制二三级商品分类的显示与隐藏</h1>\n<p>最开始的时候，是通过 CSS 样式的 display：block|none 显示与隐藏二三级商品分类</p>\n<h1 id=\"函数的防抖与节流\"><a class=\"anchor\" href=\"#函数的防抖与节流\">#</a> 函数的防抖与节流</h1>\n<p>演示卡顿现象：事件触发非常频繁，而且每一次触发，回调函数都要去执行，如果事件很短，而且回调函数有计算，那么很可能出现浏览器卡顿</p>\n<ul>\n<li>\n<p>节流：在规定的间隔时间范围内不会重复触发回调，只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</p>\n</li>\n<li>\n<p>防抖：前面的所有的触发都被取消，最后一次执行在规定的时间后才会触发，也就是说如果连续快速的触发，只会执行一次</p>\n</li>\n</ul>\n<h1 id=\"完成三级联动节流操作\"><a class=\"anchor\" href=\"#完成三级联动节流操作\">#</a> 完成三级联动节流操作</h1>\n<p>node_modules 里面已经有 lodash 了</p>\n<ol>\n<li>引入 lodash： <code>import * from 'lodash' </code></li>\n<li>使用节流函数：</li>\n</ol>\n<pre><code>\nchangeIndex: \\_.throttle(function(index) &#123;\n//index:鼠标移上某一个一级分类的索引值\nthis.currentIndex = index\n&#125;,50)\n\n</code></pre>\n<h1 id=\"三级联动组件的路由跳转与传递参数\"><a class=\"anchor\" href=\"#三级联动组件的路由跳转与传递参数\">#</a> 三级联动组件的路由跳转与传递参数</h1>\n<p>三级联动用户可以点击的：一级分类、二级分类、三级分类，当你点击的时候 Home 模块跳转到 Search 模块，一级会把用户选中的产品 (产品的名字、产品的 ID) 在路由跳转的时候，进行传递</p>\n<ul>\n<li>注意：如果使用声明式导航 router-link，可以实现路由的跳转与传递参数。但是会出现卡顿现象</li>\n<li>原因：router-link 会创建很多组件，很耗内存。</li>\n</ul>\n<p>因此我们选择编程式导航，但是为了优化性能，不建议在每一个 a 标签上写，最好给它们的父节点上写声明式导航，然后利用事件的委派</p>\n<ul>\n<li>\n<p>利用事件的委派存在一些问题：</p>\n<ol>\n<li>\n<p>事件委派父节点下的子节点有很多，怎么知道一定是 a 标签<br />\n解决：给 a 标签添加自定义属性，以自定义属性为条件判断其是不是 a 标签</p>\n</li>\n<li>\n<p>如何获取参数<br />\n解决：仍然给 a 标签添加自定义属性</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"search-模块中的-typenav-商品分类菜单\"><a class=\"anchor\" href=\"#search-模块中的-typenav-商品分类菜单\">#</a> Search 模块中的 TypeNav 商品分类菜单</h1>\n<p>显示与隐藏</p>\n<p>过渡动画效果：前提 组件 | 元素 必须有 <code>v-if|v-show</code>  指令才可以进行过渡动画<br />\n要用 transition 标签把需要添加过渡的元素包裹起来 可以加 name，不加 name 的话就是 <code> v-enter，v-leave</code></p>\n<h1 id=\"优化商品分类三级列表\"><a class=\"anchor\" href=\"#优化商品分类三级列表\">#</a> 优化商品分类三级列表</h1>\n<p>把  <code>this.$store.dispatch(&quot;categoryList&quot;)</code>  从 TypeNav 组件放到 App 组件中<br />\n在 App 根组件中发请求，因为根组件 mounted 只会执行一次</p>\n<h1 id=\"合并-params-与-query-参数\"><a class=\"anchor\" href=\"#合并-params-与-query-参数\">#</a> 合并 params 与 query 参数</h1>\n<h1 id=\"开发-home-首页当中的-listcontainer-组件与-floor-组件\"><a class=\"anchor\" href=\"#开发-home-首页当中的-listcontainer-组件与-floor-组件\">#</a> 开发 Home 首页当中的 ListContainer 组件与 Floor 组件</h1>\n<ul>\n<li>\n<p>注意：服务器返回的数据 (接口) 只有商品分类菜单分类数据，对于 ListContainer 组件与 Floor 组件数据服务器没有提供<br />\n解决方法：mock 数据 (模拟)：如果你想 mock 数据，需要用到插件 mockjs<br />\n 前端 mock 的数据不会和服务器进行任何通信</p>\n</li>\n<li>\n<p>mockjs 使用步骤：</p>\n<ol>\n<li>在项目当中 src 文件夹中创建 mock 文件夹，并创建相应的 JSON 文件</li>\n<li>准备 JSON 数据 (一定要格式化一下，不能留有空格，不然跑不起来)</li>\n<li>把 mock 数据需要的图片放置到 public 文件夹中【public 文件夹在打包的时候原封不动打包到 dist 文件夹中】</li>\n<li>开始 mock 虚拟数据，通过 mockjs 实现：在 mock 文件夹下创建 mockServe.js 文件</li>\n<li>mockServe.js 文件下：</li>\n</ol>\n</li>\n</ul>\n<pre><code>\n    //先引入 mockjs 模块\n    import Mock from &quot;mockjs&quot;;\n    //把 JSON 数据格式引入进来(JSON 数据格式没有对外暴露，但是可以引入)\n    //webpack 默认对外暴露的：图片、JSON 数据格式\n    import banner from './banner.json'\n    import floor from './floor.json'\n    //mock 数据：第一个参数请求地址 第二个参数请求数据\n    Mock.mock(&quot;/mock/banner&quot;,&#123;code:200,data:banner&#125;)\n    Mock.mock(&quot;/mock/floor&quot;,&#123;code:200,data:floor&#125;) 6.把 mockServe.js 文件在 main.js 中引入一下\n\n</code></pre>\n<h1 id=\"swiper-基本使用\"><a class=\"anchor\" href=\"#swiper-基本使用\">#</a> swiper 基本使用</h1>\n<p>swiper 主要用来做轮播图<br />\n在 new Swiper 实例之前，页面的结构必须得先有</p>\n<ul>\n<li>第一步：引包 (相应 js|css)</li>\n<li>第二步：页面中结构务必要有</li>\n<li>第三步：new Swiper 实例【轮播图添加动态效果】</li>\n</ul>\n<pre><code>\n  &lt;script&gt;\n  var mySwiper = new Swiper ('.swiper', &#123;\n\n    loop: true, // 循环模式选项\n\n        // 如果需要分页器\n        pagination: &#123;\n          el: '.swiper-pagination',\n          clickable:true\n        &#125;,\n\n        // 如果需要前进后退按钮\n        navigation: &#123;\n          nextEl: '.swiper-button-next',\n          prevEl: '.swiper-button-prev',\n        &#125;,\n      &#125;)\n\n  &lt;/script&gt;\n\n</code></pre>\n<h1 id=\"listcontainer-组件开发重点\"><a class=\"anchor\" href=\"#listcontainer-组件开发重点\">#</a> ListContainer 组件开发重点</h1>\n<ol>\n<li>安装 Swiper 插件：安装 5 版本  <code>npm i swiper@5 </code></li>\n<li>引包： <code>import Swiper from 'swiper</code></li>\n<li>写轮播图：</li>\n</ol>\n<pre><code>\n&lt;div class=&quot;swiper-wrapper&quot;&gt;\n&lt;div class=&quot;swiper-slide&quot; v-for=&quot;(carousel,index) in bannerList&quot; :key=&quot;carousel.id&quot;&gt;\n&lt;img :src=&quot;carousel.imgUrl&quot; /&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ol start=\"3\">\n<li>在 main.js 中引入样式，因为网站有好几个地方都使用了轮播图，这样引入一遍就可以了。<br />\n引入样式直接 import 引入就行，不用对外暴露，不用写 from： <code>import &quot;swiper/css/swiper.css&quot;</code></li>\n<li>new Swiper 实例，注意不要在 mounted 中，因为 dispatch 涉及异步语句，导致 v-for 遍历的时候结构还没有完全，因此不行</li>\n</ol>\n<ul>\n<li>\n<p>watch 数据监听：监听已有数据的变化 (watch 有两种写法，一种是对象写法，一种是函数写法)</p>\n</li>\n<li>\n<p>最完美的解决方案： watch + nextTick</p>\n</li>\n</ul>\n<p>nextTick：在下次 DOM 更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n<pre><code>   watch: &#123;\n  //监听bannerList数据的变化：因为这条数据发生过变化，由空数组变为数组中有四个元素\n  //handler:可以监听到新的值和旧的值\n  bannerList: &#123;\n    handler(newValue, oldValue) &#123;\n      //如果执行handler方法，代表组件实例身上这个属性的数据已经有了。但只能保证有数据，不知道v-for有没有执行完\n      //nextTick：在下次DOM更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM\n      this.$nextTick(() =&gt; &#123;\n        //当执行这个回调的时候，保证服务器数据回来了，v-for执行完毕\n        var mySwiper = new Swiper(this.$refs.mySwiper, &#123;\n          loop: true, // 循环模式选项\n\n          // 如果需要分页器\n          pagination: &#123;\n            el: &quot;.swiper-pagination&quot;,\n            clickable: true,\n          &#125;,\n\n          // 如果需要前进后退按钮\n          navigation: &#123;\n            nextEl: &quot;.swiper-button-next&quot;,\n            prevEl: &quot;.swiper-button-prev&quot;,\n          &#125;,\n        &#125;);\n      &#125;);\n    &#125;,\n  &#125;,\n&#125;,\n</code></pre>\n<h1 id=\"开发-floor-组件\"><a class=\"anchor\" href=\"#开发-floor-组件\">#</a> 开发 floor 组件</h1>\n<ol>\n<li>写 API<br />\n 在 api 文件夹下的 index.js 中写：  <code>export const reqFloorList = () =&gt; mockRequests.get('/floor') </code></li>\n<li>写 vuex 三连环 在 store 文件夹下写</li>\n</ol>\n<ul>\n<li>引入请求： <code>import &#123; reqFloorList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<pre><code class=\"language-actions中：\">  async getFloorList(&#123; commit &#125;) &#123;\n  //获取发送请求的结果\n  let result = await reqGetBannerList();\n  if (result.code == 200) &#123;\n  //提交 mutation\n  commit(&quot;GETFLOORLIST&quot;, result.data);\n    &#125;\n  &#125;\n  ```\n\n```mutations中：\n  GETFLOORLIST(state, floorList) &#123;\n  state.floorList = floorList;\n  &#125;\n</code></pre>\n<pre><code class=\"language-state中：\">floorList: []\n</code></pre>\n<ul>\n<li>注意： <code>getFloorList</code>  这个 action 在哪里触发？需要在 Home 路由组件中发。如果在 floor 组件内部触发没有办法 v-for 出来两个 floor。因为用了两个 floor</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>组件获取数据</p>\n<ul>\n<li>让组件拿到相应数据，使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code></li>\n<li>并把数据映射为组件实例身上的一个属性：<pre><code>computed: &#123;\n  ...mapState(&#123;\n    floorList: (state) =&gt; state.home.floorList\n  &#125;)\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>展示数据<br />\n根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成。(v-for 也可以在自定义标签中使用)</p>\n<ul>\n<li>\n<p>因为 Floor 的数据在 Home 那里，而 Home 组件与 Floor 组件是父子关系，所以涉及到了父子间的组件通信</p>\n</li>\n<li>\n<p>组件通信的方式有哪些？(面试频率极高)</p>\n<ul>\n<li>props：用于父子间组件通信</li>\n<li>自定义事件 (@on @emit)：可以实现子给父通信</li>\n<li>全局事件总线 ($bus)：全能</li>\n<li>插槽</li>\n<li>vuex</li>\n</ul>\n</li>\n</ul>\n<p>父传：<br />\n <code>&lt;Floor v-for=&quot;(floor, index) in floorList&quot; :key=&quot;floor.id&quot; :list=&quot;floor&quot;/&gt;</code></p>\n<p>子收：<br />\n <code> props: ['list']</code></p>\n<ul>\n<li>动态展示数据<br />\n根据数据的格式和内容，将之前写的死数据替换成动态数据，把复用的删掉，该遍历的遍历<br />\n <code>&#123;&#123;list.name&#125;&#125;,list.navList,&#123;&#123;nav.text&#125;&#125;</code>  等</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"search-模块开发\"><a class=\"anchor\" href=\"#search-模块开发\">#</a> search 模块开发</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"写请求-在-api-文件夹下的indexjs中\"><a class=\"anchor\" href=\"#写请求-在-api-文件夹下的indexjs中\">#</a> 写请求 在 api 文件夹下的 <code>index.js</code>  中</h2>\n<pre><code>//当前这个接口，给服务器传递一个默认的参数params，至少是一个空对象，不然会报错\nexport const reqGetSearchInfo = (params) =&gt; requests(&#123;\n  url:'/list',\n  method:'post',\n  data:params\n&#125;)\n\n</code></pre>\n<h2 id=\"search-模块根据不同的参数获取数据展示\"><a class=\"anchor\" href=\"#search-模块根据不同的参数获取数据展示\">#</a> Search 模块根据不同的参数获取数据展示</h2>\n<p>因为 mounted 只会调用一次，所以将 <code>this.$store.dispatch(&quot;getSearchList&quot;, &#123;&#125;)</code>  封装成一个函数，写在 methods 中，需要的时候调用即可</p>\n<pre><code>  data() &#123;\n    return &#123;\n      searchParams: &#123;\n        //一级分类的id\n        category1Id: &quot;&quot;,\n        //二级分类的id\n        category2Id: &quot;&quot;,\n        //三级分类的id\n        category3Id: &quot;&quot;,\n        //分类的名字\n        categoryName: &quot;&quot;,\n        //关键字\n        keyword: &quot;&quot;,\n        //排序\n        order: &quot;&quot;,\n        //分页器\n        pageNo: 1,\n        //代表每一页展示数据的个数\n        pageSize: 10,\n        //平台售卖属性操作带的参数\n        props: [],\n        //品牌\n        trademark: &quot;&quot;,\n      &#125;,\n    &#125;;\n  &#125;,\n  beforeMount() &#123;\n    //使用Object.assign:ES6 新增的语法，合并对象 整理参数\n    Object.assign(this.searchParams, this.$route.query, this.$route.params);\n  &#125;,\n  mounted() &#123;\n    //在发请求之前带给服务器参数【searchParams参数发生变化有数值带给服务器】\n    this.getData();\n  &#125;,\n  methods: &#123;\n    //向服务器发请求获取search数据(根据参数不同返回不同的数据进行展示)\n    getData() &#123;\n      this.$store.dispatch(&quot;getSearchList&quot;, this.searchParams);\n    &#125;,\n  &#125;\n</code></pre>\n<h2 id=\"监听路由的变化再次发请求获取数据\"><a class=\"anchor\" href=\"#监听路由的变化再次发请求获取数据\">#</a> 监听路由的变化再次发请求获取数据</h2>\n<pre><code>  watch: &#123;\n    $route(newValue,oldValue) &#123;\n      //再次发请求之前还需要整理带给服务器的参数\n      Object.assign(this.searchParams, this.$route.query, this.$route.params);\n      //再次发起ajax请求\n      this.getData()\n      //每次一请求完毕，应该把相应的一二三级分类的id置空，让他接收下一次的相应的id\n      this.searchParams.category1Id = ''\n      this.searchParams.category2Id = ''\n      this.searchParams.category3Id = ''\n    &#125;\n  &#125;\n</code></pre>\n<h2 id=\"面包屑分类处理\"><a class=\"anchor\" href=\"#面包屑分类处理\">#</a> 面包屑分类处理</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl sui-tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>with-x<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>searchParams.categoryName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>removeCategoryName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>x<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code class=\"language-script中的methods\">    //删除分类的名字\n    removeCategoryName() &#123;\n      //一点击“x”，就把categoryName置空(恢复默认页面)，还需要向服务器发请求\n      //也可以不置空，而是写成undefined，这样这个字段就不会带给服务器，提高性能\n      this.searchParams.categoryName = undefined\n      this.searchParams.category1Id = undefined\n      this.searchParams.category2Id = undefined\n      this.searchParams.category3Id = undefined\n      this.getData()\n      //地址栏也需要修改：进行路由的修改,自己跳自己\n      //严谨：本意是删除query，如果路径中出现params不应该删除，路由跳转的时候应该带着\n      if(this.$route.params) &#123;\n        this.$router.push(&#123;\n          name:&quot;search&quot;,\n          params:this.$route.params\n        &#125;)\n      &#125;\n\n    &#125;\n</code></pre>\n<h2 id=\"平台售卖属性操作\"><a class=\"anchor\" href=\"#平台售卖属性操作\">#</a> 平台售卖属性操作</h2>\n<ul>\n<li>给售卖属性绑定点击事件</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type-wrap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(attr,index) in attrList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attr.attrId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 平台售卖属性：比如说颜色 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl key<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">&lt;!-- 平台相应的属性值：粉色，蓝色，黑色。。。--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(attrValue,index) in attr.attrValueList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attrValue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attrInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code class=\"language-js,SeachSelectr组件中，methods方法中:\">\n//平台售卖属性值的点击事件\nattrInfo(attr,attrVal) &#123;\n//[&quot;属性ID：属性值：属性名&quot;]\n  this.$emit(&quot;attrInfo&quot;,attr,attrValue)\n&#125;\n</code></pre>\n<pre><code class=\"language-js,Search组件中，methods方法中:\">attrInfo(attr,attrValue) &#123;\n  //[&quot;属性ID：属性值：属性名&quot;]\n  //参数格式整理好\n  let props = `$&#123;attr.attrID&#125;:$&#123;attrValue&#125;:$&#123;attr.attrName&#125;`\n  this.searchParams.props(props)\n  //再次发请求\n  this.getData()\n&#125;\n</code></pre>\n<h2 id=\"数组去重\"><a class=\"anchor\" href=\"#数组去重\">#</a> 数组去重</h2>\n<pre><code>if(this.array.x.indexOf(x)==-1) &#123;\n  this.array.x.push(x)\n&#125;\n</code></pre>\n<h2 id=\"排序操作\"><a class=\"anchor\" href=\"#排序操作\">#</a> 排序操作</h2>\n<p>api 接口给出的 order 排序参数：<br />\n1：综合<br />\n 2：价格<br />\n asc：升序<br />\n desc：降序<br />\n一共有四种情况</p>\n<ol>\n<li>判断 active 动态类名在谁身上？</li>\n</ol>\n<ul>\n<li>通过 order 属性值中包含 1 (综合)| 包含 2 (价格)</li>\n</ul>\n<pre><code>&lt;ul class=&quot;sui-nav&quot;&gt;\n  &lt;li :class=&quot;&#123;active:searchParams.order.indexOf('1'!=-1)&#125;&quot;&gt;\n    &lt;a&gt;综合&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li :class=&quot;&#123;active:searchParams.order.indexOf('2'!=-1)&#125;&quot;&gt;\n    &lt;a&gt;价格&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ol start=\"2\">\n<li>判断箭头</li>\n</ol>\n<pre><code>//太长了可以写在计算属性里\n&lt;li :class=&quot;&#123;active:isOne&#125;&quot;&gt;\n  &lt;a&gt;综合&lt;span v-show=&quot;isOne&quot; class=&quot;iconfont&quot; :class=&quot;&#123;'icon-UP':isAsc,'icon-DOWN':isDesc&#125;&quot;&gt;&lt;/span&gt;&lt;/a&gt;\n&lt;/li&gt;\n</code></pre>\n<ol start=\"3\">\n<li>点击事件</li>\n</ol>\n<pre><code class=\"language-methods\">changeOrder(flag) &#123;\n  //flag形参：它是一个标记，代表用户点击的是综合(1)还是价格(2)  用户点击的时候传递进来的\n  let originOrder = this.searchParams.order\n  //这里获取到的是最开始的状态\n  let originFlag = this.searchParams.order.split(&quot;:&quot;)[0]\n  let originSort = this.searchParams.order.split(&quot;:&quot;)[1]\n  //准备一个新的order的属性值\n  let newOrder = ''\n  //确定点击的一定是“综合”\n  if(flag == originFlag) &#123;\n    newOrder = `$&#123;originFlag&#125;:$&#123;originSort==&quot;desc&quot;?&quot;asc&quot;:&quot;desc&quot;&#125;`\n  &#125;else &#123;\n  //确定点击的一定是“价格”\n  newOrder = `$&#123;flag&#125;:$&#123;&quot;desc&quot;&#125;`\n  &#125;\n  //将newOrder赋予searchParams\n  this.searchParams.order = newOrder\n  //再次发请求\n  this.getData()\n&#125;\n</code></pre>\n<h1 id=\"分页器\"><a class=\"anchor\" href=\"#分页器\">#</a> 分页器</h1>\n<ul>\n<li>为什么很多项目采用分页功能，因为有的平台同时展示的数据有很多</li>\n<li>对于分页器而言，自定义数据需要知道四个前提条件\n<ol>\n<li>pageNo：当前第几页</li>\n<li>pageSize：代表每一页展示多少条数据</li>\n<li>total：代表整个分页一共要展示多少条数据</li>\n<li>continues：代表分页连续页码个数</li>\n</ol>\n</li>\n<li>自定义分页器，在开发的时候先自己传递假的数据进行测试，调试成功后在用服务器数据</li>\n<li>对于分页器而言，很重要的一个地方即为【算出：连续页面起始数字和结束数字】</li>\n</ul>\n<pre><code>export default &#123;\n  name: &quot;Pagination&quot;,\n  props: [&quot;pageNo&quot;, &quot;pageSize&quot;, &quot;total&quot;, &quot;continues&quot;],\n  computed: &#123;\n    //总共多少页\n    totalPage() &#123;\n      //向上取整\n      return Math.ceil(this.total / this.pageSize);\n    &#125;,\n    //计算出连续页码的起始数字与结束数字[连续的页码数字，至少是5]\n    startNumAndEndNum() &#123;\n      //解构\n      const &#123; continues, pageNo, totalPage &#125; = this;\n      //先定义两个变量存储起始数字与结束数字\n      let start = 0,\n        end = 0;\n      //连续页码数字5【就是至少5页】，如果出现不正常现象(就是不够五页)\n      //不正常现象：总页数没有连续页码多\n      if (continues &gt; totalPage) &#123;\n        start = 1;\n        end = totalPage;\n      &#125; else &#123;\n        //正常现象\n        //起始数字\n        start = pageNo - parseInt(continues / 2);\n        //结束数字\n        end = pageNo + parseInt(continues / 2);\n        //把出现的不正常现象(start数字出现0或负数)纠正\n        if (start &lt; 1) &#123;\n          start = 1;\n          end = continues;\n        &#125;\n        //把出现的不正常现象(end数字大于总页码)纠正\n        if (end &gt; totalPage) &#123;\n          end = totalPage;\n          start = totalPage - continues + 1;\n        &#125;\n      &#125;\n      return &#123; start, end &#125;;\n    &#125;,\n  &#125;,\n&#125;;\n</code></pre>\n<h2 id=\"分页器动态展示\"><a class=\"anchor\" href=\"#分页器动态展示\">#</a> 分页器动态展示</h2>\n<pre><code class=\"language-html\">\n</code></pre>\n<p>——————————Search 模块结束，再开发 “详情” 模块</p>\n<h1 id=\"开发某一个商品的详情页面\"><a class=\"anchor\" href=\"#开发某一个商品的详情页面\">#</a> 开发某一个商品的详情页面</h1>\n<ol>\n<li>搭静态组件\n<ul>\n<li>详情页的组件还没有注册路由组件 (router 文件夹中)：</li>\n</ul>\n</li>\n</ol>\n<pre><code>import Detail from from '@/pages/Detail'\n\nroutes: [\n  &#123;\n    //点击商品跳到其详情页，需要进行路由跳转并带参(产品的id给详情页面)，所以还要占位/:skuid\n      path:&quot;/detail/:skuid&quot;,\n      component:Detail,\n      meta: &#123;show:true&#125;\n    &#125;,\n]\n</code></pre>\n<ul>\n<li>同时还要让商品图片可点击（跳转详情页）【search 模块中】</li>\n</ul>\n<pre><code>//在路由跳转的时候别忘记带id（params）参数\n&lt;router-link :to=&quot;`/detail/$&#123;good.id&#125;`&quot;&gt;\n  &lt;img :src=&quot;good.defaultImg&quot;&gt;\n&lt;/router-link&gt;\n</code></pre>\n<ul>\n<li>在跳转后还需要让滚轮回到顶上。vuerouter 滚动行为【router 文件夹中】</li>\n</ul>\n<pre><code>const router = new VueRouter(&#123;\n  routes:[...],\n  scrollBehavior(to,savedPosition) &#123;\n    //return 期望滚动到哪个的位置\n    return &#123;y:0&#125;\n  &#125;\n&#125;)\n</code></pre>\n<ol start=\"2\">\n<li>发请求【api 文件夹中】</li>\n</ol>\n<ul>\n<li>获取商品详情数据<br />\n // 获取商品详细信息的接口 URL：/api/item/{skuId} 请求方式：get<br />\nexport const reqGoodsInfo = (skuId) =&gt;<br />\nrequests({<br />\nurl:  <code>/item/$&#123;skuId&#125;</code> ,<br />\nmethod: &quot;get&quot;,<br />\n});</li>\n</ul>\n<ol start=\"3\">\n<li>vuex--- 获取商品详情信息</li>\n</ol>\n<ul>\n<li>vuex 中（store 文件夹中）还需要新增一个模块 detail.</li>\n</ul>\n<pre><code>const state= &#123;&#125;\nconst mutations = &#123;&#125;\nconst actions = &#123;&#125;\nconst getters = &#123;&#125;\n\nexport default &#123;\n   state,\n   actions,\n   mutations,\n   getters\n&#125;\n</code></pre>\n<ul>\n<li>搞完之后还需要回到大仓库中进行合并【store 文件夹中 index.js 中】</li>\n</ul>\n<pre><code>import detail from &quot;./detail&quot;;\n//对外暴露Store类的一个实例\nexport default new Vuex.Store(&#123;\n  //实现Vuex仓库模块式开发存储数据\n  modules:&#123;\n    detail\n  &#125;\n</code></pre>\n<ul>\n<li>派发 action，发请求捞数据【detail 模块 index.vue 中】</li>\n</ul>\n<pre><code>\n</code></pre>\n<ol start=\"4\">\n<li>动态展示组件</li>\n</ol>\n<h1 id=\"面试分页器封装原理\"><a class=\"anchor\" href=\"#面试分页器封装原理\">#</a> 面试：分页器封装原理</h1>\n<p>封装一个分页器组件 pagination</p>\n<ol>\n<li>知道当前是第几页：pageNo</li>\n<li>知道分页器一共需要展示多少条数据：total</li>\n<li>知道每一页需要展示数据的个数：pageSize，根据 2,3 能算出一共有多少页：totalPage</li>\n<li>知道连续的页码数：continues</li>\n</ol>\n<h1 id=\"zoom-放大镜展示数据\"><a class=\"anchor\" href=\"#zoom-放大镜展示数据\">#</a> zoom 放大镜展示数据</h1>\n<ul>\n<li>\n<p>遮罩层随鼠标移动<br />\n let left = event.offsetX-mask.offsetWidth/2<br />\nlet top = event.offsetY-mask.offsetHeight/2</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HWT%5D5JAIEXRTU@0%25%7D9C()19.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5ZHB%7D4YUP1GE%F4YJ8BLR$4.png\" alt=\"\" /></p>\n<h1 id=\"商品售卖属性-排他操作点击高亮\"><a class=\"anchor\" href=\"#商品售卖属性-排他操作点击高亮\">#</a> 商品售卖属性 排他操作，点击高亮</h1>\n<h1 id=\"购买产品个数的操作\"><a class=\"anchor\" href=\"#购买产品个数的操作\">#</a> 购买产品个数的操作</h1>\n<h1 id=\"加入购物车重要\"><a class=\"anchor\" href=\"#加入购物车重要\">#</a> 加入购物车（重要）</h1>\n<ul>\n<li>\n<p>以前的路由跳转，就是从 A 路由跳到 B 路由，这里加入购物车、路由跳转之前，还要发请求。把你购买的产品的信息通过请求的形式通知服务器，服务器进行相应的存储</p>\n</li>\n<li>\n<p>加入购物车（发请求）以后，前台将参数带给服务器，服务器写入数据成功，并没有返回其他的数据，只返回了 code=200，代表这次操作成功。所以不用 vue 三连环存仓库了</p>\n</li>\n<li>\n<p>派发 action 操作实际上就是调用仓库中的 addOrUpdateShopCart，它是 async 函数，返回的结果是 Promise，只有成功和失败两种情况，为了判断购物车是否成功加入，store 仓库的 detail.js 中的 addOrUpdateShopCart 函数要进行判断，如果 code=200 则返回成功的回调，否则返回失败的回调。<br />\n写 try catch<br />\n![]( <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L1pGUA==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/ZFP</span>}3KBYS7(OJ(2D{$(_M~D.png)</p>\n<ul>\n<li>浏览器存储功能：HTML5 中新增的，本地存储和会话存储。一般存储的是字符串，不能存对象。要先把对象转化为字符串才能进行存储，JSON.stringify ()。捞到之后再转化回对象：JSON.parse ()</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3%7D\" alt=\"\" />%ZR}ERURV(R3V$]Z9MP8.png)</p>\n<h1 id=\"购物车模块\"><a class=\"anchor\" href=\"#购物车模块\">#</a> 购物车模块</h1>\n<ol>\n<li>购物车静态组件</li>\n<li>向服务器发起 ajax 请求，获取服务车数据，操作 vuex 三连环、组件获取数据展示数据</li>\n</ol>\n<ul>\n<li>问题：发请求的时候，获取不到你购物车里面的数据，因为服务器不知道你是谁</li>\n</ul>\n<ol start=\"3\">\n<li>UUID 临时游客身份</li>\n</ol>\n<ul>\n<li>生成 uuid，localStorage 存储</li>\n</ul>\n<p>detail.js 中</p>\n<pre><code>const state = &#123;\n//游客的临时身份\nuuid_token: getUUID()\n&#125;;\n</code></pre>\n<p>新建一个 utils 文件夹放 uuid_token.js</p>\n<pre><code>import &#123; v4 as uuidv4 &#125; from 'uuid';\n//要随机生成一个字符串，且每次执行不能发生变化，游客身份持久存储\nexport const getUUID = () =&gt; &#123;\n//先从本地存储获取uuid（看本地存储是否有）\nlet uuid_token = localStorage.getItem('UUIDTOKEN')\n//如果没有我则生成\nif(!uuid_token) &#123;\n  uuid_token = uuidv4()\n  //本地存储一次\n  localStorage.setItem('UUIDTOKEN',uuid_token)\n&#125;\n //切记有返回值，没有返回值undefined\nreturn uuid_token\n&#125;\n</code></pre>\n<p>api 文件夹中 request.js</p>\n<pre><code>//在当前模块中引入store\nimport store from &quot;@/store&quot;;\n\n//请求拦截器\nrequests.interceptors.request.use((config) =&gt; &#123;\n  if(store.state.detail.uuid_token) &#123;\n  //给请求头添加一个字段(userTempId)：和后台老师商量好\n  config.headers.userTempId = store.state.detail.uuid_token\n</code></pre>\n</li>\n</ul>\n<p>})</p>\n<ol start=\"4\">\n<li>动态展示购物车</li>\n</ol>\n<ul>\n<li>\n<p>数据格式有点不完美</p>\n</li>\n<li>\n<p>全选效果：用数组的 every 方法</p>\n</li>\n<li>\n<p>处理购物车数量（+，-，输入的数值）<br />\n三个地方触发一个回调<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HTZ8$@2$UO%60LRH5%5DY%7DJ%60RI8.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>购物车删除操作<br />\n用户删除的太快，可能会出现负的情况（即使已经做了限制） 解决：节流</p>\n</li>\n<li>\n<p>删除选中的所有商品操作<br />\n没有一次删除很多产品的接口，但是有通过 ID 删除产品的接口（一次删一个）<br />\n传入参数 context 再调用 deleteCartListBySkuId</p>\n</li>\n</ul>\n<p>Promise.all () 只有所有的 promise 都成功才能调用<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/4MTF\" alt=\"\" /> 9W3%6Z8AK9) 840DLOD.png)<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L1NVRzlONjhJUVolMjVYKDBHSEsyJTVCTTNDQi5wbmcp\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/SUG9N68IQZ%X(0GHK2[M3CB.png)</span></p>\n<p>删完之后 await,async, 再次调用 getData<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/V%7D3%7DR17~XO0CS42CS02EL~8.png\" alt=\"\" /></p>\n<h1 id=\"登录与注册非常重要\"><a class=\"anchor\" href=\"#登录与注册非常重要\">#</a> 登录与注册（非常重要）</h1>\n<ol>\n<li>登录与注册的静态组件</li>\n</ol>\n<ul>\n<li>assets 文件夹：放置全部组件共用静态资源， webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</li>\n<li>在 css 中写相对路径也可以用 @（@表示 src），但在 css 中要在 @前加个～。</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.list-item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>~@/assets/images/icons.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>注册业务</li>\n</ol>\n<ul>\n<li>获取验证码的接口</li>\n</ul>\n<ol start=\"3\">\n<li>登录业务</li>\n</ol>\n<ul>\n<li>\n<p>注册：通过数据库存储用户信息（账号，密码）</p>\n</li>\n<li>\n<p>登录：登录成功的时候，后台为了区分你这个用户是谁，服务器下方 token【令牌：唯一标识符】</p>\n</li>\n<li>\n<p>将来经常通过带 token 找服务器要用户信息进行展示</p>\n</li>\n<li>\n<p>注意：vuex 仓库存储数据 —— 不是持久化</p>\n</li>\n<li>\n<p>当用户注册完成，用户登录【用户名 + 密码】向服务器发请求（组件派发 action：userLogin），登陆成功获取 token，存储于仓库当中（非持久化的）。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 登录业务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>commit<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">reqUserLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 服务器下发 token，用户唯一标识符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将来经常通过带 token 找服务器要用用户信息进行展示</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USERLOGIN\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faile\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>随后路由跳转到 home 首页，因此在首页当中（mounted）派发 action（getUserInfo）获取用户信息，以及动态展示 header 组件的内容。<br />\n问题：一刷新 home 首页，会获取不到用户信息（token：vuex 非持久化存储）</p>\n<ul>\n<li>持久化存储</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 登录业务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>commit<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">reqUserLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 服务器下发 token，用户唯一标识符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将来经常通过带 token 找服务器要用用户信息进行展示</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USERLOGIN\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 持久化存储 token</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faile\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"存在的问题\"><a class=\"anchor\" href=\"#存在的问题\">#</a> 存在的问题</h2>\n<ol>\n<li>多个组件展示用户信息需要在每一个组件的 mounted 中触发 <code>this.$store.dispatch('getUserInfo')</code></li>\n<li>用户已经登陆了，就不应该再回登录页</li>\n</ol>\n<ul>\n<li></li>\n</ul>\n<ol>\n<li>有接口，现在 api 里 export 接口，写明接口地址和请求方式</li>\n<li>然后在 store 里引入请求，写 vue 三连环，</li>\n<li>在相应的位置派发 action</li>\n</ol>\n<ul>\n<li>\n<p>路由跳转不是你想跳就能跳的</p>\n</li>\n<li>\n<p>tips：空对象隐式转换为布尔值为真，所以空对象作为条件一定为真</p>\n</li>\n</ul>\n<h2 id=\"导航守卫\"><a class=\"anchor\" href=\"#导航守卫\">#</a> 导航守卫</h2>\n<p>导航：表示进行路由跳转<br />\n守卫：看门的，</p>\n<ul>\n<li>\n<p>全局守卫：全部都要排查。<br />\neg. 皇宫（皇帝，妃子，大臣）大门守卫，全部排查</p>\n</li>\n<li>\n<p>路由独享守卫：是相应的（皇帝，妃子，大臣）毕竟之路上的守卫</p>\n</li>\n<li>\n<p>组件内守卫：已经进去了，但还是要接受排查</p>\n</li>\n</ul>\n<h3 id=\"全局前置守卫routerbeforeeach在路由跳转之前进行判断\"><a class=\"anchor\" href=\"#全局前置守卫routerbeforeeach在路由跳转之前进行判断\">#</a> 全局前置守卫：router.beforeEach（在路由跳转之前进行判断）</h3>\n<p>在 router 中进行全局前置守卫配置:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//to: 可以获取到你要跳转到的那个路由的信息（去哪里）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">//from: 可以获取到你从哪个路由而来的信息（从哪来）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//next: 放行函数，  next () 全部放行 next (path) 放行到指定路径  nextfalse)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 用户登录了才会有 token，未登录一定不会有 token</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 用户信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 用户已经登陆了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 用户已经登陆了还想去 login：不能去，停留在首页</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token operator\">==</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 登录，去得不是 login：home/search/detail/shopcart</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 如果用户名已有</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 没有用户信息，派发 action 让仓库存储用户信息再跳转</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">// 获取用户信息成功</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">await</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserInfo'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token comment\">//token 失效了</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token comment\">// 清除 token</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 没有用户信息</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"trade交易页面组件\"><a class=\"anchor\" href=\"#trade交易页面组件\">#</a> trade（交易）页面组件</h1>\n<ul>\n<li>\n<p>排他：被选中的那个展示样式<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/WPKZDCBG%25HS8L%25WC7NEH$BG.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>import *as 命名 from URL 地址 统一引入<br />\n不需要一个个引入了，所有请求的接口统一接收，并且挂载到 vue.prototype 原型对象身上。到时候组件直接用就行，不用一个个引了</p>\n</li>\n</ul>\n<p>在 main.js 中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统一接口 api 文件夹里面全部请求函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">API</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 全局事件总线</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$<span class=\"token constant\">API</span> <span class=\"token operator\">=</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>不用 vuex 怎么获取支付信息？</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 订单号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">order</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 提交订单</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">submitOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 交易编码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> tradeNo <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$<span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">reqSubmitOrder</span><span class=\"token punctuation\">(</span>tradeNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 提交订单成功</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderId <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 路由跳转 + 路由传参</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pay?orderId=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 提交订单失败</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>注意：不要在生命周期函数中使用 async</li>\n</ul>\n<h1 id=\"elementui-使用按需引入\"><a class=\"anchor\" href=\"#elementui-使用按需引入\">#</a> elementUI 使用 + 按需引入</h1>\n<ul>\n<li>已经学习过的组件库<br />\n react:antd [PC]、antd-mobile [移动端]<br />\n Vue:ElementUIp [PC]、vant [移动端]</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<pre><code># 选择一个你喜欢的包管理器\n\n# NPM\n$ npm install element-plus --save\n\n# Yarn\n$ yarn add element-plus\n\n# pnpm\n$ pnpm install element-plus\n</code></pre>\n<ol start=\"2\">\n<li>引入 elementUI</li>\n</ol>\n<ul>\n<li>完全引入</li>\n</ul>\n<pre><code>// main.ts\nimport &#123; createApp &#125; from 'vue'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\napp.use(ElementPlus)\napp.mount('#app')\n</code></pre>\n<ul>\n<li>按需导入</li>\n</ul>\n<pre><code># 自动导入，首先安装unplugin-vue-components 和 unplugin-auto-import这两款插件\nnpm install -D unplugin-vue-components unplugin-auto-import\n</code></pre>\n<p>然后把下列代码插入到你的 Vite 或 Webpack 的配置文件中</p>\n<p>Webpack：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> AutoImport <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-auto-import/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> Components <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> ElementPlusResolver <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/resolvers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">AutoImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-config-provider</span> <span class=\"token attr-name\">:size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>size<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:z-index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zIndex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>app</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-config-provider</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElConfigProvider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      ElConfigProvider<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">zIndex</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token string\">\"small\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>ElementUI 注册组件的时候，还有一种写法，挂在原型上。</li>\n</ul>\n<h1 id=\"支付\"><a class=\"anchor\" href=\"#支付\">#</a> 支付</h1>\n<ul>\n<li>生成二维码</li>\n</ul>\n<pre><code>npm i qrcode --save\n</code></pre>\n<p>注意：${url} 和 / 之间要有一个空格，不然图片不显示<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/DG%5DS224H69@C0NQ%5DI%5B%7BMQBD.png\" alt=\"\" /></p>\n<ul>\n<li>弹出二维码后，需要知道支付成功 | 失败<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3QAX\" alt=\"\" /> 5 [NXJTG9`ES@6~MA] 4.png)</li>\n</ul>\n<h1 id=\"二级路由\"><a class=\"anchor\" href=\"#二级路由\">#</a> 二级路由</h1>\n<ol>\n<li>拆分<br />\n将不变的内容留下，将会根据点击发生页面变化的内容拆分到子组件中</li>\n</ol>\n<ul>\n<li>注意拆分后路径会有不对的地方，记得改</li>\n<li>样式，把父组件中样式的 scoped 去掉</li>\n</ul>\n<ol start=\"2\">\n<li>在 router.js 中引入二级路由</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入二级路由组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> MyOrder <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/views/Center/myOrder\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> GroupOrder <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/views/Center/groupOrder\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 配置路由</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Center<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">isShow</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 二级路由组件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> MyOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"groupOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> GroupOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>把点击会发生路由变化的地方换成 <code>&lt;router-linl to=&quot;/center/myorder&quot;&gt;我的订单&lt;/router-linl&gt;</code>  包裹，并设置二级路由组件的出口位置，让组件显示： <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n</li>\n<li>\n<p>重定向。设置默认显示的路由（不能让用户一切换过来看一个半边空白的页面，还得点击才能显示）<br />\nrouter.js 中：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Center<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">isShow</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 二级路由组件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> MyOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"groupOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> GroupOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center/myorder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>面试的时候问是否封装过组件：分页器，日历</p>\n</li>\n<li>\n<p>完善路由守卫</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//to: 可以获取到你要跳转到的那个路由的信息（去哪里）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">//from: 可以获取到你从哪个路由而来的信息（从哪来）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//next: 放行函数，  next () 全部放行 next (path) 放行到指定路径  nextfalse)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 用户登录了才会有 token，未登录一定不会有 token</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 用户信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 用户已经登陆了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 用户已经登陆了还想去 login：不能去，停留在首页</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token operator\">==</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 登录，去得不是 login：home/search/detail/shopcart</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 如果用户名已有</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 没有用户信息，派发 action 让仓库存储用户信息再跳转</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">// 获取用户信息成功</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">await</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserInfo'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token comment\">//token 失效了</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token comment\">// 清除 token</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 未登录：不能去交易相关、不能去支付相关【pay、paysuccess】、不能去个人中心</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 未登录想去上面这些路由 --- 跳转到登录页</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">let</span> toPath <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>toPath<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/trade'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>toPath<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pay'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>toPath<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/center'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">// 把未登录的时候想去而没有去成的信息，存储于地址栏中【路由】</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login?redirect='</span><span class=\"token operator\">+</span>toPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 去的不是上面这些路由（home、search、shopCard）--- 放行</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>登录后不是回首页，而是到你之前点击却被提示登录的那个页面<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0FT%7DO~%7BM41H%7D%250OJXEEEOU1.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>路由独享守卫<br />\n！[](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LyhKNTYlMjUxQEFETyUyNVZWQkpSJFclNjBPJTdCVUUucG5nKQ==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/(J56%1@ADO%VVBJR$W`O{UE.png)</span></p>\n</li>\n<li>\n<p>组件内守卫</p>\n</li>\n</ul>\n<h1 id=\"图片懒加载-vue-lazyload\"><a class=\"anchor\" href=\"#图片懒加载-vue-lazyload\">#</a> 图片懒加载 vue-lazyload</h1>\n<ul>\n<li>\n<p>使用插件 <code>Vue.use(VueLazyload)</code> ,vuex，vuerouter 也是插件</p>\n</li>\n<li>\n<p>图片、json 可以直接引用，它们是默认对外暴露的</p>\n</li>\n</ul>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L0pZJTYwJCRA\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JY`$$@</span>](M45T3}YVVE9{VN6.png)</p>\n<h1 id=\"封装自定义插件\"><a class=\"anchor\" href=\"#封装自定义插件\">#</a> 封装自定义插件</h1>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L1lYVFcoWjY5JTVCXzhTTjVQRTNNOFRaRE4ucG5nKQ==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/YXTW(Z69[_8SN5PE3M8TZDN.png)</span></p>\n<h1 id=\"vee-validate-表单验证-了解\"><a class=\"anchor\" href=\"#vee-validate-表单验证-了解\">#</a> vee-validate 表单验证 （了解）</h1>\n<ol>\n<li>安装</li>\n<li>引入</li>\n<li>使用</li>\n</ol>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0Lw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</span>[_`IH(QLVOZKL0HD33}2ZU7.png)</p>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0Lw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</span>]98(9U9F(9L_8)E[{IO~~J6.png)</p>\n<h1 id=\"路由懒加载\"><a class=\"anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h1>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p>\n<h1 id=\"打包上线\"><a class=\"anchor\" href=\"#打包上线\">#</a> 打包上线</h1>\n<ol>\n<li>打包 <code>npm run build</code></li>\n</ol>\n<ul>\n<li>map<br />\n 项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。<br />\n有了 map 就可以像未加密的代码一样，准确输出是哪一行有错。<br />\n没有，该文件如果项目不需要是可以去掉的<br />\n vue.config.js 配置：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">productionSourceMap</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>购买服务器</p>\n</li>\n<li>\n<p>设置安全组</p>\n</li>\n<li>\n<p>利用 Xshell 工具登录服务器</p>\n</li>\n<li>\n<p>利用 Xftp 把本地文件上传到云服务器</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>问题 1：刚刚在服务器上：/root/www/shangpinhui/dist<br />\n 如何保证一访问 ip 地址就展示 dist 内容而不是展示其他文件夹内容？<br />\n解决：配置一些东西</p>\n</li>\n<li>\n<p>问题 2：项目数据来自于本地服务器，如何让用户在访问买的 ip 地址时捞到本地服务器的数据？<br />\n解决：nginx 反向代理</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>nginx 反向代理<br />\n配置：</p>\n</li>\n<li>\n<p>Xshell 进入  <code>/</code>  根目录下有一个 <code>etc</code>  目录，其下又有一个 <code>nginx</code>  目录。安装 nginx， <code>yum install nginx</code></p>\n</li>\n<li>\n<p>安装完 nginx 服务器以后，nginx 目录下会多一个 ngxinx.conf 文件，在这个文件中进行配置。<br />\n通过 <code>vim nginx.conf</code>  指令进行编辑，主要添加如下两项：<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LzB+Mkow\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0~2J0</span> <code>BXN%A6($%G2O8AS]8.png) 按 INSERT 编辑，编辑完 ESC 退出编辑，输入</code> :wq` 保存</p>\n</li>\n<li>\n<p><code>serve nginx start</code></p>\n</li>\n</ol>\n<ul>\n<li>Linux<br />\n <code>/</code>  是 linux 系统的根目录</li>\n</ul>\n<p>常见 linux 命令</p>\n<ul>\n<li><code>ls</code> ：列出你想要的目录的内容（默认情况下为当前目录）</li>\n<li><code>alias</code> ：允许你在 shell 会话中定义临时别名</li>\n<li><code>unalias</code> ：从已定义的别名中删除 alias</li>\n<li><code>pwd</code> ：输出你所在目录的绝对路径</li>\n<li><code>cd</code> ：更改目录<br />\n <code>cd</code> ： 进入 home 文件夹<br />\n <code>cd ..</code> ：向上移动一个级别<br />\n <code>cd -</code> ：返回上一个目录</li>\n<li><code>cp</code> ：复制文件和文件夹。要使用 cp 命令，只需将其与源文件和目标文件一起键入即可： <code>cp file_to_copy.txt new_file.txt</code></li>\n<li><code>rm</code> ：删除文件和目录</li>\n<li><code>mv</code> ：在文件系统中移动（或重命名）文件和目录</li>\n<li><code>mkdir</code> ：在 shell 中创建文件夹</li>\n<li><code>man</code> ：显示任何其他命令的手册页面（只要有）。</li>\n<li><code>chmod</code> ：快速更改文件的模式（权限)，文件的基本权限包括：r (只读)、w (写入)、x (执行)</li>\n<li><code>sudo</code> ：此命令代表 “超级用户 do”，它允许您在运行特定命令时充当超级用户或根用户。这就是 Linux 如何保护自己，防止用户意外修改机器的文件系统或安装不合适的软件包。</li>\n<li><code>vim</code> ：编辑文件</li>\n</ul>\n",
            "tags": [
                "实战"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/",
            "url": "https://eucli.top/2023/09/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/",
            "title": "微信小程序实战",
            "date_published": "2023-09-29T10:45:48.000Z",
            "content_html": "<h1 id=\"认识小程序\"><a class=\"anchor\" href=\"#认识小程序\">#</a> 认识小程序</h1>\n<ul>\n<li>小程序与普通网页开发的区别</li>\n</ul>\n<ol>\n<li>运行环境不同<br />\n网页运行在浏览器环境中，小程序运行在微信环境中</li>\n<li>API 不同<br />\n由于运行环境不同，所以小程序中无法调用 DOM 和 BOM 的 API，但是可以调用微信环境提供的各种 API，如：地理定位，扫码，支付</li>\n<li>开发模式不同<br />\n网页开发模式：浏览器 + 代码编辑器<br />\n小程序：申请小程序开发账号，安装小程序开发者工具，创建和配置小程序项目</li>\n</ol>\n<ul>\n<li>\n<p>注册小程序账号，获取小程序的 AppID<br />\nwx40e49b099125edca</p>\n</li>\n<li>\n<p>开发者工具 不建议使用 vscode，官方提供的功能更多</p>\n</li>\n<li>\n<p>设置代理 --- 不适用代理，直连</p>\n</li>\n<li>\n<p>常用功能<br />\n帮助 --- 开发者文档<br />\n工具 --- 构建 npm<br />\n 详情 --- 本地设置</p>\n</li>\n<li>\n<p>小程序代码的构成<br />\n！[](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LzhLU0U=\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/8KSE</span>([I`L5(HI<sub>JE@$E]</sub>7C.png)</p>\n</li>\n</ul>\n",
            "tags": [
                "实战",
                "小程序"
            ]
        }
    ]
}