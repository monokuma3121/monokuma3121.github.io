{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucliの小窝 • All posts by \"axios\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/09/29/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "url": "https://eucli.top/2023/09/29/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "title": "axios二次封装",
            "date_published": "2023-09-29T12:45:48.000Z",
            "content_html": "<h1 id=\"前端-后端-数据库间的数据传输\"><a class=\"anchor\" href=\"#前端-后端-数据库间的数据传输\">#</a> 前端 - 后端 - 数据库间的数据传输</h1>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92.png\" alt=\"(数据交互)\" /></p>\n<h1 id=\"前端请求流程\"><a class=\"anchor\" href=\"#前端请求流程\">#</a> 前端请求流程</h1>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%8B%BF%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.png\" alt=\"(前端请求流程)\" /></p>\n<h1 id=\"不进行封装直接使用-axios-一般有两种方式\"><a class=\"anchor\" href=\"#不进行封装直接使用-axios-一般有两种方式\">#</a> 不进行封装直接使用 axios 一般有两种方式：</h1>\n<h2 id=\"1-axiosget-axiospost\"><a class=\"anchor\" href=\"#1-axiosget-axiospost\">#</a> 1.  <code>axios.get()</code> 、 <code>axios.post()</code></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url?参数1=值&amp;参数2=值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  参数<span class=\"token number\">1</span><span class=\"token operator\">:</span>值，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  参数<span class=\"token number\">2</span><span class=\"token operator\">:</span>值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"2-axios\"><a class=\"anchor\" href=\"#2-axios\">#</a> 2.  <code>axios(&#123;&#125;)</code></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请求的路径\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请求的方式，默认是get\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//get 请求方式：前端给后端传递的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//post 请求方式：前端给后端传递的数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 自定义请求头</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 如果请求超过 timeout 的值，请求会中断</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">responseType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"默认是json\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 表示浏览器将要响应的数据类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"2-实际开发情况下的网络请求\"><a class=\"anchor\" href=\"#2-实际开发情况下的网络请求\">#</a> 2. 实际开发情况下的网络请求</h1>\n<h1 id=\"实际开发中前端请求接口会出现跨域\"><a class=\"anchor\" href=\"#实际开发中前端请求接口会出现跨域\">#</a> 实际开发中，前端请求接口会出现跨域</h1>\n<p>控制台打印 <code>CORS   &quot;NO 'Access-Control-Allow-Origin' ……&quot;</code></p>\n<h2 id=\"解决跨域前端解决-设置代理\"><a class=\"anchor\" href=\"#解决跨域前端解决-设置代理\">#</a> 解决跨域：前端解决 ——&gt; 设置代理</h2>\n<p>vue 项目，在  <code>vue.config.js</code>  中配置  <code>devServer</code> <br />\n 配置参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2NvbmZpZw==\">https://cli.vuejs.org/zh/config</span><br />\n 说明：如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在 <code>开发环境下</code> 将 API 请求代理到 API 服务器<br />\n具体配置，在  <code>vue.config.js</code>  文件中加入：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">devServer</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">proxy</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:4000\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后端 API 服务器地址</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>代理之后  <code>axios</code>  请求的时候就不用写地址全拼了，直接写代理地址后面的就行</li>\n</ul>\n<h1 id=\"主要的文件\"><a class=\"anchor\" href=\"#主要的文件\">#</a> 主要的文件</h1>\n<ul>\n<li><code>src/utils/request.js</code>  `：用于二次封装 axios</li>\n<li><code>src/api</code>  ：用于统一管理接口</li>\n<li><code>src/.env.development</code>  ：开发环境</li>\n<li><code>src/.env.production</code>  ：生产环境</li>\n<li><code>vite.config.js</code> ：配置代理</li>\n</ul>\n<h2 id=\"前端请求接口的封装axios-二次封装\"><a class=\"anchor\" href=\"#前端请求接口的封装axios-二次封装\">#</a> 前端请求接口的封装 (axios 二次封装)</h2>\n<p>在  <code>src/utils/request.js:</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**1. 引入 axios */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/**2. 创建 axios 实例 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">baseURL</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://some-domain.com/api/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">timeout</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">headers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string-property property\">'X-Custom-Header'</span><span class=\"token operator\">:</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/**3. 请求拦截器 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 创建请求拦截  前端给后端的东西 (没有到后端)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/** 在发送请求之前做些什么 ==> 判断用户登录状态 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">/**4. 响应拦截器 */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 创建响应拦截  后端给前端的东西</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 处理自己的业务逻辑，比如判断 token 是否过期等等 request</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 代码块</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> instance<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"api-接口统一管理\"><a class=\"anchor\" href=\"#api-接口统一管理\">#</a> api 接口统一管理</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/request'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 查询课程接口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token function-variable function\">courseSearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">method</span><span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    data <span class=\"token comment\">// 因为不同的页面对参数配置的值的需求不一样，所以作为形参让用户自己传过来 get 请求是 params，post 请求是 data</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"使用请求\"><a class=\"anchor\" href=\"#使用请求\">#</a> 使用请求</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 某个需要用到 “查询课程接口” 的 vue 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>courseSearch<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/api/course.js'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">courseSearch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 传入需求的参数的值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">pageNum</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">pageSize</span><span class=\"token operator\">:</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "axios"
            ]
        }
    ]
}