{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucliの小窝 • All posts by \"nodejs\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/09/29/Node.js/",
            "url": "https://eucli.top/2023/09/29/Node.js/",
            "title": "Nodejs",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<p>NodeJS 二三事</p>\n<ul>\n<li>浏览器中的 javascript<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LzZUXw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/6T_</span>{RAS8(KQ3SRX[SK8WDYT.png)</li>\n<li>Node.js 中的 javascript<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/@GYE0D_MX7EBAJO@H%5DOJ6@5.png\" alt=\"\" /><br />\nnodejs 中不能使用 BOM 和 DOM 的 API</li>\n<li>nodejs 顶级对象： <code>global</code>\n<blockquote>\n<p>计算机基础快看</p>\n</blockquote>\n</li>\n<li>计算机主板主要由 CPU、内存（运算快，断电数据丢失），硬盘（运算慢，断电数据不丢失）组成。</li>\n<li>操作系统（windows、linux、macos）也是一种应用程序，用来管理和调度硬件资源。<br />\n“装系统” 就是把操作系统这个应用程序装到硬盘的过程<br />\n！[](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L0NNWVFVUEZQKFNIM000WDRLQU9EVUdYLnBuZyk=\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/CMYQUPFP(SH3M4X4KAODUGX.png)</span><br />\n 程序一般保存在硬盘中，软件安装的过程就是将程序写入硬盘的过程<br />\n程序在运行时会加载进入内存，然后由 cpu 读取并执行程序</li>\n<li>进程和线程<br />\n进程：进行（运行）中的程序。windows 可以通过任务管理器查看进程<br />\n线程：线程是一个进程中执行的一个执行流。一个线程是属于某个进程的（工厂和工人的关系）<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%5BMS$WLCI3Q%7BP~C@N_%25WHMUA.png\" alt=\"\" /></li>\n</ul>\n<h1 id=\"buffer缓冲器\"><a class=\"anchor\" href=\"#buffer缓冲器\">#</a> Buffer（缓冲器）</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>Buffer 是一个类似于数组的  <code>对象</code>  ，用于表示固定长度的字节序列</p>\n<p>Buffer 本质是一段内存空间，专门用来处理  <code>二进制数据</code>  。</p>\n<p><img data-src=\"../image/buffer.png\" alt=\"image-20230320173023659\" /></p>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<ol>\n<li>Buffer 大小固定且无法调整</li>\n<li>Buffer 性能较好，可以直接对计算机内存进行操作</li>\n<li>每个元素的大小为 1 字节（byte）</li>\n</ol>\n<p><img data-src=\"../image/buffer2.png\" alt=\"image-20230320173043532\" /></p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<h3 id=\"创建-buffer\"><a class=\"anchor\" href=\"#创建-buffer\">#</a> 创建 Buffer</h3>\n<p>Node.js 中创建 Buffer 的方式主要如下几种：</p>\n<ol>\n<li>\n<p><code>Buffer.alloc</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建了一个长度为 10 字节的 Buffer，相当于申请了 10 字节的内存空间，每个字节的值为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> buf_1 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 结果为 & lt;Buffer 00 00 00 00 00 00 00 00 00 00></span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Buffer.allocUnsafe</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建了一个长度为 10 字节的 Buffer，buffer 中可能存在旧数据，可能会影响执行结果，所以叫 unsafe ，但是效率比 alloc 高</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> buf_2 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Buffer.from</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过字符串创建 Buffer</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> buf_3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 通过数组创建 Buffer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> buf_4 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">118</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">121</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"buffer-与字符串的转化\"><a class=\"anchor\" href=\"#buffer-与字符串的转化\">#</a> Buffer 与字符串的转化</h3>\n<blockquote>\n<p>我们可以借助  <code>toString</code>  方法将 Buffer 转为字符串</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> buf_4 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">118</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">121</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf_4<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>iloveyou</span></pre></td></tr></table></figure><p><strong>注意:</strong>  <code>toString</code>  默认是按照  <code>utf-8</code>  编码方式进行转换的</p>\n<h3 id=\"buffer-的读写\"><a class=\"anchor\" href=\"#buffer-的读写\">#</a> Buffer 的读写</h3>\n<blockquote>\n<p>Buffer 可以直接通过  <code>[]</code>  的方式对数据进行处理。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> buf_3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 读取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf_3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>101</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>buf_3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">97</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 查看字符串结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf_3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>hallo</span></pre></td></tr></table></figure><p><strong>注意:</strong></p>\n<ol>\n<li>溢出：如果修改的数值超过  <code>255</code>  ，则 &lt;span style=&quot;color:red&quot;&gt; 超过 &lt;/span&gt;  <code>8</code>  位数据会被舍弃</li>\n<li>中文：一个  <code>utf-8</code>  的字符 &lt;span style=&quot;color:red&quot;&gt; 一般 &lt;/span&gt; 占 3 个字节</li>\n</ol>\n<h1 id=\"fs-模块fs-api\"><a class=\"anchor\" href=\"#fs-模块fs-api\">#</a> fs 模块（fs API）</h1>\n<blockquote>\n<p>fs 全称为  <code>file system</code>  ，称之为  <code>文件系统</code>  ，是 Node.js 中的  <code>内置模块</code>  ，可以对计算机中的磁盘进行操作。</p>\n</blockquote>\n<p>本章节会介绍如下几个操作：</p>\n<ol>\n<li>\n<p>文件写入</p>\n</li>\n<li>\n<p>文件读取</p>\n</li>\n<li>\n<p>文件移动与重命名</p>\n</li>\n<li>\n<p>文件删除</p>\n</li>\n<li>\n<p>文件夹操作</p>\n</li>\n<li>\n<p>查看资源状态</p>\n</li>\n</ol>\n<h2 id=\"文件写入\"><a class=\"anchor\" href=\"#文件写入\">#</a> 文件写入</h2>\n<blockquote>\n<p>文件写入就是将 &lt;span style=&quot;color:red&quot;&gt; 数据 &lt;/span&gt; 保存到 &lt;span style=&quot;color:red&quot;&gt; 文件 &lt;/span&gt; 中，我们可以使用如下几个方法来实现该效果</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>writeFile</td>\n<td>异步写入</td>\n</tr>\n<tr>\n<td>writeFileSync</td>\n<td>同步写入</td>\n</tr>\n<tr>\n<td>appendFile / appendFileSync</td>\n<td>追加写入</td>\n</tr>\n<tr>\n<td>createWriteStream</td>\n<td>流式写入</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"writefile-异步写入\"><a class=\"anchor\" href=\"#writefile-异步写入\">#</a> writeFile 异步写入</h3>\n<p><strong>语法</strong>：  <code>fs.writeFile(file, data[, options], callback)</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>file 文件名</p>\n</li>\n<li>\n<p>data 待写入的数据</p>\n</li>\n<li>\n<p>options 选项设置  <code>（可选）</code></p>\n</li>\n<li>\n<p>callback 写入回调</p>\n</li>\n</ul>\n<p><strong>返回值</strong>：  <code>undefined</code></p>\n<p><strong>代码示例</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//require 是 Node.js 环境中的 ' 全局 ' 变量，用来导入模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 将 [三人行，必有我师焉。] 写入到当前文件夹下的 [座右铭.txt] 文件中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"三人行，必有我师焉。\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 如果写入失败，则回调函数调用时，会传入错误对象，如写入成功，会传入 null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"writefilesync-同步写入\"><a class=\"anchor\" href=\"#writefilesync-同步写入\">#</a> writeFileSync 同步写入</h3>\n<p><strong>语法:</strong>  <code>fs.writeFileSync(file, data[, options])</code></p>\n<p>参数与  <code>fs.writeFile</code>  大体一致，只是没有 callback 参数</p>\n<p><strong>返回值：</strong> <code>undefined</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"三人行，必有我师焉。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Node.js 中的磁盘操作是由其他  <code>线程</code>  完成的，结果的处理有两种模式:</p>\n<ul>\n<li>同步处理 JavaScript 主线程  <code>会等待</code>  其线程的执行结果，然后再继续执行主线程的代码， <code>效率较低</code></li>\n<li>异步处理 JavaScript 主线程  <code>不会等待</code>  其线程的执行结果，直接执行后续的主线程代码， <code>效率较好</code></li>\n</ul>\n</blockquote>\n<h3 id=\"appendfile-appendfilesync-追加写入\"><a class=\"anchor\" href=\"#appendfile-appendfilesync-追加写入\">#</a> appendFile /appendFileSync 追加写入</h3>\n<blockquote>\n<p><code>appendFile</code>  作用是在文件尾部追加内容， <code>appendFile</code>  语法与  <code>writeFile</code>  语法完全相同</p>\n</blockquote>\n<p><strong>语法</strong>:</p>\n<p><code>fs.appendFile(file, data[, options], callback)</code></p>\n<p><code>fs.appendFileSync(file, data[, options])</code></p>\n<p><strong>返回值</strong>：二者都为  <code>undefined</code></p>\n<p>实例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"则其善者而从之，其不善者而改之。\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n温故而知新，可以为师矣\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"createwritestream-流式写入\"><a class=\"anchor\" href=\"#createwritestream-流式写入\">#</a> createWriteStream 流式写入</h3>\n<p><strong>语法</strong>： <code>fs.createWriteStream(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p><code>path</code>  文件路径</p>\n</li>\n<li>\n<p><code>options</code>  选项配置（  <code>可选</code>  ）</p>\n</li>\n</ul>\n<p>** 返回值: ** <code>Object</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./观书有感.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 写入数据到流</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"半亩方塘一鉴开\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"天光云影共徘徊\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"问渠那得清如许\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为有源头活水来\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 关闭写入流，表明已没有数据要被写入可写流</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt; 程序打开一个文件是需要消耗资源的 &lt;/span&gt;，流式写入可以减少打开关闭文件的次数。</p>\n<p>流式写入方式适用于 &lt;span style=&quot;color:red&quot;&gt; 大文件写入或者频繁写入 &lt;/span &gt; 的场景， <code>writeFile</code>  适合于 &lt;span style=&quot;color:red&quot;&gt; 写入频率较低的场景 &lt;/span&gt;</p>\n</blockquote>\n<h3 id=\"写入文件的场景\"><a class=\"anchor\" href=\"#写入文件的场景\">#</a> 写入文件的场景</h3>\n<p><code>文件写入</code>  在计算机中是一个非常常见的操作，下面的场景都用到了文件写入</p>\n<ul>\n<li>\n<p>下载文件</p>\n</li>\n<li>\n<p>安装软件</p>\n</li>\n<li>\n<p>保存程序日志，如 Git</p>\n</li>\n<li>\n<p>编辑器保存文件</p>\n</li>\n<li>\n<p>视频录制</p>\n</li>\n</ul>\n<blockquote>\n<p>当 &lt;span style=&quot;color:red&quot;&gt; 需要持久化保存数据 &lt;/span&gt; 的时候，应该想到  <code>文件写入</code></p>\n</blockquote>\n<h2 id=\"文件读取\"><a class=\"anchor\" href=\"#文件读取\">#</a> 文件读取</h2>\n<blockquote>\n<p>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>readFile</td>\n<td>异步读取</td>\n</tr>\n<tr>\n<td>readFileSync</td>\n<td>同步读取</td>\n</tr>\n<tr>\n<td>createReadStream</td>\n<td>流式读取</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"readfile-异步读取\"><a class=\"anchor\" href=\"#readfile-异步读取\">#</a> readFile 异步读取</h3>\n<p><strong>语法</strong>:  <code>fs.readFile(path[, options], callback)</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>options 选项配置</p>\n</li>\n<li>\n<p>callback 回调函数</p>\n</li>\n</ul>\n<p><strong>返 回 值 ：</strong>  <code>undefined</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"uft-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"readfilesync-同步读取\"><a class=\"anchor\" href=\"#readfilesync-同步读取\">#</a> readFileSync 同步读取</h3>\n<p><strong>语法：</strong> <code>fs.readFileSync(path[, options])</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>options 选项配置</p>\n</li>\n</ul>\n<p><strong>返 回 值 ：</strong> <code>string | Buffer</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"createreadstream-流式读取\"><a class=\"anchor\" href=\"#createreadstream-流式读取\">#</a> createReadStream 流式读取</h3>\n<p><strong>语法：</strong> <code>fs.createReadStream(path[, options])</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>options 选项配置（  <code>可选</code>  ）</p>\n</li>\n</ul>\n<p><strong>返回值：</strong> <code>Object</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建读取流对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> rs <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./观书有感.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 每次取出 64k 数据后执行一次 data 回调</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 绑定一个 data 事件  chunk 块儿  大块儿</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>re<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 读取完毕后，执行 end 回调 (可选事件)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>re<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"读取文件应用场景\"><a class=\"anchor\" href=\"#读取文件应用场景\">#</a> 读取文件应用场景</h3>\n<ul>\n<li>\n<p>电脑开机</p>\n</li>\n<li>\n<p>程序运行</p>\n</li>\n<li>\n<p>编辑器打开文件</p>\n</li>\n<li>\n<p>查看图片</p>\n</li>\n<li>\n<p>播放视频</p>\n</li>\n<li>\n<p>播放音乐</p>\n</li>\n<li>\n<p>Git 查看日志</p>\n</li>\n<li>\n<p>上传文件</p>\n</li>\n<li>\n<p>查看聊天记录</p>\n</li>\n</ul>\n<h2 id=\"文件移动与重命名\"><a class=\"anchor\" href=\"#文件移动与重命名\">#</a> 文件移动与重命名</h2>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>rename</code>  或  <code>renameSync</code>  来移动或重命名  <code>文件或文件夹</code></p>\n</blockquote>\n<p><strong>语法：</strong></p>\n<p><code>fs.rename(oldPath, newPath, callback)</code></p>\n<p><code>fs.renameSync(oldPath, newPath)</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>oldPath 文件当前的路径</p>\n</li>\n<li>\n<p>newPath 文件新的路径</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./观书有感.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./论语/观书有感.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"移动完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">renameSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./论语/.我的座右铭.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注</strong>：如果还是移动到当前路径，但是修改了名字，就是重命名了</p>\n<h2 id=\"文件删除\"><a class=\"anchor\" href=\"#文件删除\">#</a> 文件删除</h2>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>unlink</code>  或  <code>unlinkSync</code>  来删除文件</p>\n</blockquote>\n<p><strong>语法:</strong></p>\n<p><code>fs.unlink(path, callback)</code></p>\n<p><code>fs.unlinkSync(path)</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 调用 rm 方法  14.4   同步 rmSync</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./论语.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"文件夹操作\"><a class=\"anchor\" href=\"#文件夹操作\">#</a> 文件夹操作</h2>\n<blockquote>\n<p>借助 Node.js 的能力，我们可以对文件夹进行  <code>创建</code>  、 <code>读取</code>  、 <code>删除</code>  等操作</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mkdir / mkdirSync</td>\n<td>创建文件夹</td>\n</tr>\n<tr>\n<td>readdir / readdirSync</td>\n<td>读取文件夹</td>\n</tr>\n<tr>\n<td>rmdir / rmdirSync</td>\n<td>删除文件夹</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"mkdir-创建文件夹\"><a class=\"anchor\" href=\"#mkdir-创建文件夹\">#</a> mkdir 创建文件夹</h3>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>mkdir</code>  或  <code>mkdirSync</code>  来创建文件夹</p>\n</blockquote>\n<p><strong>语法</strong>:</p>\n<p><code>fs.mkdir(path[, options], callback)</code></p>\n<p><code>fs.mkdirSync(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（  <code>可选</code>  ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步创建文件夹  mk  make  制作   dir  directory  文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./page\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 递归异步创建</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1/2/3\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递归创建成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 递归同步创建文件夹</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./x/y/z\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"readdir-读取文件夹\"><a class=\"anchor\" href=\"#readdir-读取文件夹\">#</a> readdir 读取文件夹</h3>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>readdir</code>  或  <code>readdirSync</code>  来读取文件夹</p>\n</blockquote>\n<p><strong>语法：</strong></p>\n<p><code>fs.readdir(path[, options], callback)</code></p>\n<p><code>fs.readdirSync(path[, options])</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（  <code>可选</code>  ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./论语\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 同步读取</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./论语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"rmdir-删除文件夹\"><a class=\"anchor\" href=\"#rmdir-删除文件夹\">#</a> rmdir 删除文件夹</h3>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>rmdir</code>  或  <code>rmdirSync</code>  来删除文件夹</p>\n</blockquote>\n<p><strong>语法</strong>：</p>\n<p><code>fs.rmdir(path[, options], callback)</code></p>\n<p><code>fs.redirSync(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（ 可选 ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步删除文件夹  rm  remove 移除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./page\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 异步递归删除文件夹  不推荐</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//=>DeprecationWarning: In future versions of Node.js, fs.rmdir(path, &#123; recursive: true &#125;) will be removed. Use fs.rm(path, &#123; recursive: true &#125;) instead</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递归删除\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 同步递归删除文件夹</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./x\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 建议使用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"查看资源状态\"><a class=\"anchor\" href=\"#查看资源状态\">#</a> 查看资源状态</h2>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>stat</code>  或  <code>statSync</code>  来查看资源的详细信息</p>\n</blockquote>\n<p><strong>语法</strong>：</p>\n<p><code>fs.stat(path[, options], callback)</code></p>\n<p><code>fs.statSync(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（ 可选 ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步获取状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//stat  方法  status 缩写 状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/data.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 同步获取状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"./assets/3d5f0b54415a2949c04dcbc49a0452e7ec91899b.png\" alt=\"image-20230321144242912\" /></p>\n<p><strong>结果值对象结构</strong>：</p>\n<ul>\n<li>\n<p>size 文件体积</p>\n</li>\n<li>\n<p>birthtime 创建时间</p>\n</li>\n<li>\n<p>mtime 最后修改时间</p>\n</li>\n<li>\n<p>isFile 检测是否为文件</p>\n</li>\n<li>\n<p>isDirectory 检测是否为文件夹</p>\n</li>\n<li>\n<p>....</p>\n</li>\n</ul>\n<h2 id=\"相对路径问题\"><a class=\"anchor\" href=\"#相对路径问题\">#</a> 相对路径问题</h2>\n<p>fs 模块对资源进行操作时，路径的写法有两种：</p>\n<ul>\n<li>\n<p>相对路径</p>\n<ul>\n<li><code>./座右铭.txt</code>  当前目录下的 座右铭.txt</li>\n<li><code>座右铭.txt</code>  等效于上面的写法</li>\n<li><code>../座右铭.txt</code>  当前目录的上一级目录中的 座右铭.txt</li>\n</ul>\n</li>\n<li>\n<p>绝对路径</p>\n<ul>\n<li><code>D:/Program Files</code>  windows 系统下的绝对路径</li>\n<li><code>/user/bin</code>  Linux 系统下的绝对路径</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>相对路径中所谓的  <code>当前目录</code>  ，指的是  <code>命名行的工作目录</code>  ，而并非是文件的所在目录</p>\n<p>所以当命名行的工作目录与文件所在目录不一致时，会出现一些 Bug</p>\n</blockquote>\n<h2 id=\"__dirname\"><a class=\"anchor\" href=\"#__dirname\">#</a> __dirname</h2>\n<p><code>__dirname</code>  与  <code>require</code>  类似，都是 Node.js 环境中的 ' 全局 ' 变量</p>\n<p><code>__dirname</code>  保存着 &lt;span style=&quot;color:red&quot;&gt; 当前文件夹所在目录的绝对路径 &lt;/span&gt;，可以使用  <code>__dirname</code>  与文件名拼接成绝对路径</p>\n<p>代码示例:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//=>__dirname + '/data.txt'  === 'D:\\\\Desktop\\\\Node\\\\code\\\\03-fs 模块 /data.txt'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 fs 模块的时候，尽量使用  <code>__dirname</code>  路径转换为绝对路径，这样可以避免相对路径产生的 Bug</p>\n</blockquote>\n<h2 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h2>\n<h3 id=\"编写一个-js-文件实现复制文件的功能\"><a class=\"anchor\" href=\"#编写一个-js-文件实现复制文件的功能\">#</a> 编写一个 JS 文件，实现复制文件的功能</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *  需求:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *    复制  资料文件夹下的  [笑看风云.mp4]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 方式一  readFile</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 写入文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云2.mp4\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 方式二 流式操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 创建读取流对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> rs <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 创建一个写入流对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> ws <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云3.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 绑定 data 事件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 理想状态下，读取 64k 就写入 64 k，这样消耗的内存最少，实际上读取的速度大于写入的速度</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>rs<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//  绑定 data 事件 ==== rs.pipe (ws)</span></pre></td></tr></table></figure><h3 id=\"文件重命名\"><a class=\"anchor\" href=\"#文件重命名\">#</a> 文件重命名</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 读取 03-fs 模块 文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../03-fs模块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 创建新的文件名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> newName <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 重命名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">renameSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../03-fs模块/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../03-fs模块/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>newName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"path-模块\"><a class=\"anchor\" href=\"#path-模块\">#</a> path 模块</h1>\n<blockquote>\n<p><code>path</code>  模块提供了  <code>操作路径</code>  的功能，我们将介绍如下几个较为常用的几个 API (主要用第一个 <code>path.resolve</code> )：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>API</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path.resolve</td>\n<td>拼接规范的绝对路径  <code>常用</code></td>\n</tr>\n<tr>\n<td>path.sep</td>\n<td>获取操作系统的路径分隔符</td>\n</tr>\n<tr>\n<td>path.parse</td>\n<td>解析路径并返回对象</td>\n</tr>\n<tr>\n<td>path.basename</td>\n<td>获取路径的基础名称</td>\n</tr>\n<tr>\n<td>path.dirname</td>\n<td>获取路径的目录名</td>\n</tr>\n<tr>\n<td>path.extname</td>\n<td>获得路径的扩展名</td>\n</tr>\n</tbody>\n</table>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 导入 path 模块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 写入文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// fs.writeFileSync(__dirname + '/index.html', 'love')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\Desktop\\Node\\code\\04-path/index.html</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//resolve 解决问题  拼接绝对路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\Desktop\\Node\\code\\04-path\\index.html</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\Desktop\\Node\\code\\04-path\\index.html</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\index.html\\test</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//sep 获取路径分隔符</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> window \\  linux /</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//parse 方法  __filename  ' 全局变量'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 文件的绝对路径 //=>D:\\Desktop\\Node\\code\\04-path\\01-path.js</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 解析路径</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\Desktop\\\\Node\\\\code\\\\04-path\\\\01-path.js\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 获取路径基础名称</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 获取路径的目录名</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 获取路径的拓展名</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"http-协议\"><a class=\"anchor\" href=\"#http-协议\">#</a> HTTP 协议</h1>\n<h2 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<blockquote>\n<p>HTTP（hypertext transport protocol）协议；中文叫 &lt;span style=&quot;color:red&quot;&gt; 超文本传输协议 &lt;/span&gt;</p>\n</blockquote>\n<p>是一种基于 TCP/IP 的应用层通信协议</p>\n<p>这个协议详细规定了  <code>浏览器</code>  和 万维网  <code>服务器</code>  之间互相通信的规则</p>\n<p>协议中主要规定了两个方面的内容:</p>\n<ul>\n<li>\n<p>客户端：用来向服务器发送数据，可以被称之为 &lt;span style=&quot;color:red&quot;&gt; 请求报文 &lt;/span&gt;</p>\n</li>\n<li>\n<p>服务端：向客户端返回数据，可以被称之为 &lt;span style=&quot;color:red&quot;&gt; 响应报文 &lt;/span&gt;</p>\n</li>\n</ul>\n<blockquote>\n<p>报文：可以简单理解为就是一堆字符串</p>\n</blockquote>\n<h2 id=\"请求报文的组成\"><a class=\"anchor\" href=\"#请求报文的组成\">#</a> 请求报文的组成</h2>\n<ul>\n<li>请求行</li>\n<li>请求头</li>\n<li>空行</li>\n<li>请求体</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/Q$G@\" alt=\"\" />}4DTBP28G0W`)~NCTJ.png)</p>\n<h2 id=\"http-的请求行\"><a class=\"anchor\" href=\"#http-的请求行\">#</a> <strong>HTTP</strong> 的请求行</h2>\n<blockquote>\n<p>请求行由三部分组成：请求方法、URL、HTTP 版本号</p>\n</blockquote>\n<ul>\n<li>\n<p>请求方法（get、post、put、delete 等）</p>\n</li>\n<li>\n<p>请求 URL（统一资源定位器），其本身也是一个字符串，定位服务器中的资源</p>\n<p>例如：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20vaW5kZXguaHRtbD9hPTEwMCZhbXA7Yj0yMDAjbG9nbw==\">http://www.baidu.com/index.html?a=100&amp;b=200#logo</span></p>\n<ul>\n<li>http: 协议 (https、ftp、ssh 等)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span> 域名</li>\n<li>80 端口号</li>\n<li>/index.html 路径</li>\n<li>a=100&amp;b=200 查询字符串</li>\n<li>#logo 哈希 (锚点链接)</li>\n</ul>\n</li>\n<li>\n<p>HTTP 协议版本号</p>\n</li>\n</ul>\n<h2 id=\"http-请求头\"><a class=\"anchor\" href=\"#http-请求头\">#</a> HTTP 请求头</h2>\n<p><code>格式：『头名：头值』</code> <br />\nHTTP 请求头提供了关于请求，响应或者其他的发送实体的信息。HTTP 的头信息包括通用头、请求头、响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。</p>\n<p>常见的请求头有：</p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Host</td>\n<td>主机名</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>连接的设置 keep-alive（保持连接）；close（关闭连接）</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>缓存控制 max-age = 0 （没有缓存）</td>\n</tr>\n<tr>\n<td>Upgrade-Insecure-Requests</td>\n<td>将网页中的 http 请求转化为 https 请求（很少用）老网站升级</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端 ，一般在 PC 端和手机端的区分</td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>设置浏览器接收的数据类型</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>设置接收的压缩方式</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>设置接收的语言 q=0.7 为喜好系数，满分为 1</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>后面单独讲</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"http-的请求体\"><a class=\"anchor\" href=\"#http-的请求体\">#</a> HTTP 的请求体</h2>\n<p>请求体内容的格式是非常灵活的，</p>\n<p>（可以是空）==&gt; GET 请求，</p>\n<p>（也可以是字符串，还可以是 JSON）===&gt; POST 请求</p>\n<p>例如：</p>\n<ul>\n<li>\n<p>字符串：keywords = 手机 &amp; price=2000</p>\n</li>\n<li keywords:手机,price:2000=\"\">\n<p>JSON：</p>\n</li>\n</ul>\n<h2 id=\"响应报文的组成\"><a class=\"anchor\" href=\"#响应报文的组成\">#</a> 响应报文的组成</h2>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/C~ZJ6K5\" alt=\"\" />F5BXF@AZ@4_$TBW.png)</p>\n<ul>\n<li>\n<p>响应行:  <code>HTTP/1.1 200 OK</code></p>\n<ul>\n<li>\n<p>HTTP/1.1：HTTP 协议版本号</p>\n</li>\n<li>\n<p>200：响应状态码 404 Not Found 500 Internal Server Error</p>\n<p>还有一些状态码，参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</span><br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L0tYfjQoVExFR0xPQ0JTQjdfQTRPNkAwLnBuZyk=\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/KX~4(TLEGLOCBSB7_A4O6@0.png)</span></p>\n</li>\n<li>\n<p>OK：响应状态描述<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/EJ$%7B%7D\" alt=\"\" /> NA$0F~4VOE1] I83YK.png)</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>响应状态码 和 响应字符串 关系是 一一对应 的。</p>\n</blockquote>\n<ul>\n<li>\n<p>响应头</p>\n<ul>\n<li><code>Cache-Control</code> : 缓存控制 private 私有的，只允许客户端缓存数据</li>\n<li><code>Connection</code> : 链接设置</li>\n<li><code>Content-Type:text/html;charset=utf-8</code> : 设置响应体的数据类型以及字符集，响应体为 html，字符集 utf-8</li>\n<li><code>Content-Length</code> : 响应体的长度，单位为字节</li>\n</ul>\n</li>\n<li>\n<p>空行</p>\n</li>\n<li>\n<p>响应体</p>\n<p>响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</p>\n</li>\n</ul>\n<h2 id=\"ip\"><a class=\"anchor\" href=\"#ip\">#</a> IP</h2>\n<ol>\n<li>\n<p>了解 ip</p>\n<blockquote>\n<p>ip 可以理解成地址，其本身是一个数字标识，由 32 位的二进制数字转十进制转化而来。<br />\nip 用来标识网络中的设备，实现设备间通信。任何设备只要接入互联网都会有一个 ip 地址<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/TT%7B2%5D7%7DJU68OI198%5B6~VW%7BB.png\" alt=\"\" /></p>\n</blockquote>\n</li>\n<li>\n<p>ip 的分类</p>\n</li>\n</ol>\n<ul>\n<li>ip 总共只有 32 位，最多能表示 40 多亿个 ip 地址，但全世界有 80 多亿人，每个人又不可能只有一个接入互联网的设备，这就造成了 ip 不够用的情况<br />\n目前解决 ip 不够用的方法：共享 ip（区域共享、家庭共享）<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0UP6%5BDDV7NQV$22SGK%5BW7GM.png\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/_$31T5%256~BE%258MKUJPANRP5.png\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0E%7BI21N~XU@%5DSE6K%5D1K%60CW8.png\" alt=\"\" /><br />\n局域网 ip 是可以被复用的，每个局域网再通过一个公网 ip 就可以实现相互间的通信了<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/32$TAVS5%5D%5D_8K2OE@ZCRWC9.png\" alt=\"\" /></li>\n</ul>\n<hr />\n<ul>\n<li>本地回环 ip 地址： <code>127.0.0.1~127.255.255.254</code> <br />\n 永远访问本机，用什么设备就会访问这个设备本身</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JPXVT5LX_983X%5BW3QAOW8D9.png\" alt=\"\" /></p>\n<h2 id=\"端口\"><a class=\"anchor\" href=\"#端口\">#</a> 端口</h2>\n<p>端口：应用程序的数字标识。<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/\" alt=\"\" />~6SM@{C9](Q3BZ%XL9S_`B.png)</p>\n<blockquote>\n<p>一台现代计算机有 65536 个端口（0~65535）<br />\n一个应用程序可以使用一个或多个端口</p>\n</blockquote>\n<ul>\n<li>端口的主要作用：<br />\n实现不同主机应用程序间的通信</li>\n<li>端口场景说明<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/P2TG7T(WLO2%60G$A2O33E)JT.png\" alt=\"\" /></li>\n</ul>\n<h2 id=\"创建-http-服务\"><a class=\"anchor\" href=\"#创建-http-服务\">#</a> 创建 <strong>HTTP</strong> 服务</h2>\n<p>使用 nodejs 创建 HTTP 服务</p>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2. 创建服务对象 create 创建 server 服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//request 意为请求。是对请求报文的封装对象，通过 request 对象可以 `获得请求报文的数据`</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//response 意为响应。是对响应报文的封装对象，通过 response 对象可以 `设置响应报文`</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 设置响应体并结束响应</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello HTTP server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 返回结果是一个对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//3. 监听端口，启动服务。`listen ()` 方法传入两个参数：端口号（结合上面端口的介绍）、启动成功后执行的函数体</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动, 端口 9000 监听中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>http.createServer</code>  里的回调函数的执行时机： &lt;span style=&quot;color:red&quot;&gt; 当接收到 HTTP 请求的时候，就会执行 &lt;/span&gt;<br />\n 使用浏览器访问该 http 服务 (127.0.0.1:9000)，http 服务就会返回响应报文： <code>Hello HTTP server</code> <br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/X21IDO~IT%254%7DL$\" alt=\"\" />`KS()~%1.png)<br />\n nodejs 应用程序占用了本机的 9000 端口</p>\n</blockquote>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ol>\n<li>\n<p>命令行  <code>ctrl + c</code>  停止服务</p>\n</li>\n<li>\n<p>当服务启动后，更新代码 &lt;span style=&quot;color:red&quot;&gt; 必须重启服务才能生效 &lt;/span&gt;</p>\n</li>\n<li>\n<p>响应内容中文乱码的解决办法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置响应头</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>端口号被占用 (非常常见)</p>\n<p><code>Error: listen EADDRINUSE: address already in use :::9000</code></p>\n<p>1）关闭当前正在运行监听端口的服务 （ &lt;span style=&quot;color:red&quot;&gt; 使用较多 &lt;/span&gt; ）</p>\n<p>2）修改其他端口号</p>\n</li>\n<li>\n<p><code>HTTP</code>  协议 &lt;span style=&quot;color:red&quot;&gt; 默认端口 &lt;/span &gt; 是  <code>80</code>  。 <code>HTTPS</code>  协议的 &lt;span style=&quot;color:red&quot;&gt; 默认端口 &lt;/span &gt; 是  <code>443</code> , HTTP 服务开发常用端口有  <code>3000</code> ， <code>8080</code> ， <code>8090</code> ， <code>9000</code>  等</p>\n</li>\n</ol>\n<blockquote>\n<p>如果端口被其他程序占用，可以使用 &lt;span style=&quot;color:red&quot;&gt; 资源监视器 &lt;/span&gt; 找到占用端口的程序 (开始按钮搜索 “资源监视器”，记住占用端口的 PID)，然后使用 &lt;span style=&quot;color:red&quot;&gt; 任务管理器 &lt;/span&gt; 关闭对应的程序（根据前面查到的 PID 找）</p>\n</blockquote>\n<h2 id=\"浏览器查看-http-报文\"><a class=\"anchor\" href=\"#浏览器查看-http-报文\">#</a> 浏览器查看 HTTP 报文</h2>\n<p>点击步骤</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5e43303dea39359bd3514518f3d5517efac21bd2.jpg\" alt=\"\" /></p>\n<h3 id=\"查看请求行与请求头\"><a class=\"anchor\" href=\"#查看请求行与请求头\">#</a> 查看请求行与请求头</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/e5062ab2d8edc132beddd35d7cd40c83a8b81c87.jpg\" alt=\"\" /></p>\n<h3 id=\"查看请求体\"><a class=\"anchor\" href=\"#查看请求体\">#</a> 查看请求体</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/e421f0e1e84c5ec43bcc56f7856c1f7b623b69a5.jpg\" alt=\"\" /></p>\n<h3 id=\"查看-url-查询字符串\"><a class=\"anchor\" href=\"#查看-url-查询字符串\">#</a> 查看 <strong>URL</strong> 查询字符串</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/9373dc9437fa52b90d195ed8d76f10e346c8e9e3.jpg\" alt=\"\" /></p>\n<h3 id=\"查看响应行与响应头\"><a class=\"anchor\" href=\"#查看响应行与响应头\">#</a> 查看响应行与响应头</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/a553bc93e90d1721bfc27fc960edeeea2eb7ea90.jpg\" alt=\"\" /></p>\n<h3 id=\"查看响应体\"><a class=\"anchor\" href=\"#查看响应体\">#</a> 查看响应体</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/a9440ee4a416d06a8f28be8f524c685ccac4c68d.jpg\" alt=\"\" /></p>\n<h2 id=\"获取-http-请求报文\"><a class=\"anchor\" href=\"#获取-http-请求报文\">#</a> 获取 HTTP 请求报文</h2>\n<p>只有通过 <code>请求报文</code> 得到需求，才能根据需求返回正确的 <code>响应报文</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">语法</th>\n<th style=\"text-align:left\">重点掌握</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">请求方法</td>\n<td style=\"text-align:left\"><code>request.method</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求版本</td>\n<td style=\"text-align:left\">request.httpVersion</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求路径</td>\n<td style=\"text-align:left\"><code>request.url</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL 路径</td>\n<td style=\"text-align:left\"><code>require('url').parse(request.url).pathname</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL 查询字符串</td>\n<td style=\"text-align:left\"><code>require('url').parse(request.url,  true).query</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求头</td>\n<td style=\"text-align:left\"><code>request.headers</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求体</td>\n<td style=\"text-align:left\">request.on('data', function(chunk){})&lt;br&gt;request.on('end', function(){})</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>获取 HTTP 请求报文</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取请求的方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>GET</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 获取请求的 url</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只包含 url 中的 路径 与查询字符串</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 获取 http 协议的版本号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>httpVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 1.1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 获取 http 的请求头</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 结果是一个对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 设置响应体</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 3. 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意事项：</strong></p>\n<ol>\n<li><code>request.url</code>  只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li>\n<li><code>request.headers</code>  将请求信息转化成一个对象，并将属性名都转化成了『小写』</li>\n<li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为  <code>/</code></li>\n<li>关于  <code>favicon.ico</code> ：这个请求是属于浏览器自动发送的请求</li>\n</ol>\n<ul>\n<li>提取 http 报文的请求体\n<blockquote>\n<p>注意：get 请求的请求体一般是空的，要发送 post 请求<br />\n下面这个方法了解即可，后面会介绍更简单的提取报文请求体的方法</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 1. 声明一个变量，用来接收响应结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 2. 绑定 data 事件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    body <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 3. 绑定 end 事件，请求完后打印 body</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>'username=111&amp;password=111'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 响应</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 设置响应体</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 3. 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>提取 http 报文中 url 的路径 与 查询字符串（<strong>重要</strong>）</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 导入 url 模块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 2. 解析 request.url</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>/search?keyword=h5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 使用 parse 解析 request.url 的内容，parse 就是 “解析” 的意思</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">//true 将 query 属性将会设置为一个 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如下图所示，为一个对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 获取路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> pathname <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 获取查询字符串</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">let</span> keyword <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>keyword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>h5</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3960e1c84da383ba7dda53b627e1dc68384f2e49.png\" alt=\"\" /></p>\n<ul>\n<li>提取 http 报文中 url 的路径 与 查询字符串 [新]（<strong>重要</strong>）</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 实例化 url 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// let url = new URL('/search?a=100&amp;b=200','http://127.0.0.1:9000')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 如图所示，为一个对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 输出路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>/search</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 输出 keyword 查询字符串</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 100</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url new\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/67ddb914c3ae4e0444a8a1fdab0fa2b58d0e3065.png\" alt=\"\" /></p>\n<h3 id=\"练习-2\"><a class=\"anchor\" href=\"#练习-2\">#</a> 练习</h3>\n<p>按照以下要求搭建 HTTP 服务</p>\n<table>\n<thead>\n<tr>\n<th>请求类型 **(<strong>方法</strong>)**</th>\n<th>请求地址</th>\n<th>响应体结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get</td>\n<td>/login</td>\n<td>登录页面</td>\n</tr>\n<tr>\n<td>get</td>\n<td>/reg</td>\n<td>注册页面</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1、引入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2、建立服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对象的解构赋值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 设置响应头信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 解决中文乱码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token string\">\"/register\"</span> <span class=\"token operator\">&amp;&amp;</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注册页面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token string\">\"/login\"</span> <span class=\"token operator\">&amp;&amp;</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录页面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//3、监听端口</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务启动中....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"设置-http-响应报文\"><a class=\"anchor\" href=\"#设置-http-响应报文\">#</a> 设置 <strong>HTTP</strong> 响应报文</h2>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设置响应状态码</td>\n<td>response.statusCode</td>\n</tr>\n<tr>\n<td>设置响应状态描述</td>\n<td>response.statusMessage （ 用的非常少 ）</td>\n</tr>\n<tr>\n<td>设置响应头信息</td>\n<td>response.setHeader (' 头名 ', ' 头值 ') ( <code>可以自定义</code> )</td>\n</tr>\n<tr>\n<td>设置响应体</td>\n<td>response.write('xx')&lt;br/&gt;response.end('xxx')</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>设置响应报文</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 设置响应状态码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">203</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 响应状态的描述</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>response<span class=\"token punctuation\">.</span>statusMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 响应头</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 自定义响应头</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myHeader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设置多个同名的响应头</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>设置响应报文的响应体</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//write 和 end 的两种使用情况：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1. write 和 end 的结合使用 响应体相对分散</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每一个请求，在处理的时候必须要执行 end 方法的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//2. 单独使用 end 方法 响应体相对集中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"练习-3\"><a class=\"anchor\" href=\"#练习-3\">#</a> 练习</h3>\n<p>搭建 HTTP 服务，响应一个 4 行 3 列的表格，并且要求表格有  <code>隔行换色效果</code>  ，且  <code>点击</code>  单元格能  <code>高亮显示</code></p>\n<p><strong>方法一</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &lt;!DOCTYPE html></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &lt;html lang=\"en\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &lt;head></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      &lt;meta charset=\"UTF-8\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      &lt;title>Document&lt;/title></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      &lt;style></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        td &#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          padding: 20px 40px;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        table tr:nth-child(odd) &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          background-color: #aef;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        table tr:nth-child(even) &#123;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          background-color: #fcb;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        table,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        td &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          border-collapse: collapse;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      &lt;/style></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &lt;/head></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    &lt;body></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      &lt;table border=\"1\"></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      &lt;/table></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      &lt;script></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        const tds = document.querySelectorAll('td')</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        tds.forEach(item => &#123;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>          item.addEventListener('click', function () &#123;</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            this.style.backgroundColor = '#000'</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>          &#125;)</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        &#125;)</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      &lt;/script></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    &lt;/body></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    &lt;/html></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务器</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法二</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> html <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/table.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">//end 方法的参数可以是字符串也可以是 Buffer</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"网页资源的基本加载过程重要\"><a class=\"anchor\" href=\"#网页资源的基本加载过程重要\">#</a> 网页资源的基本加载过程（<strong>重要</strong>）</h2>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/929cb3e9fb5f89c7589ee9a7cd93e767ae1a1bc9.jpg\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/01b27104af8ecfe88afc6f70450cc04682d95f31.jpg\" alt=\"\" /></p>\n<p>网页资源的加载都是循序渐进的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如 CSS，Javascript，图片等。&lt;span style=&quot;color:red&quot;&gt; 理解了这个内容对于后续的学习与成长有非常大的帮助 &lt;/span&gt;</p>\n<h2 id=\"静态资源服务\"><a class=\"anchor\" href=\"#静态资源服务\">#</a> 静态资源服务</h2>\n<p><code>静态资源</code>  是指 &lt;span style=&quot;color:red&quot;&gt; 内容长时间不发生改变的资源 &lt;/span&gt; ，例如图片，视频，CSS 文件，JS 文件，HTML 文件，字体文件等</p>\n<p><code>动态资源</code>  是指 &lt;span style=&quot;color:red&quot;&gt; 内容经常更新的资源 &lt;/span&gt; ，例如百度首页，网易首页，京东搜索列表页面等</p>\n<h3 id=\"http-响应练习\"><a class=\"anchor\" href=\"#http-响应练习\">#</a> http 响应练习</h3>\n<p>创建一个 http 服务，端口为 9000，满足下列需求<br />\n GET /index.html 响应 page/index.html 文件内容<br />\n GET /css/app.css 响应 page/css/app.css 文件内容<br />\n GET /images/logo.png 响应 page/images/logo.png 文件内容</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 获取请求 url 路径</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> pathname <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 拼接文件路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">let</span> filePath <span class=\"token operator\">=</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/page\"</span> <span class=\"token operator\">+</span> pathname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 读取文件 fs 异步 api</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件读取失败~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      retuen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 响应文件内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务器</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"网站根目录或静态资源目录\"><a class=\"anchor\" href=\"#网站根目录或静态资源目录\">#</a> 网站根目录或静态资源目录</h3>\n<p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 &lt;span style=&quot;color:red&quot;&gt; 静态资源目录 &lt;/span&gt; ，也称之为 &lt;span style=&quot;color:red&quot;&gt; 网站根目录 &lt;/span&gt;</p>\n<blockquote>\n<p>思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？</p>\n<ul>\n<li>该文件的所处的文件夹</li>\n</ul>\n</blockquote>\n<h3 id=\"网页中的-url\"><a class=\"anchor\" href=\"#网页中的-url\">#</a> 网页中的 <strong>URL</strong></h3>\n<p>网页中的 URL 主要分为两大类： <code>相对路径</code>  与  <code>绝对路径</code></p>\n<h4 id=\"绝对路径\"><a class=\"anchor\" href=\"#绝对路径\">#</a> 绝对路径</h4>\n<p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p>\n<table>\n<thead>\n<tr>\n<th>形式</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2F0Z3VpZ3UuY29tL3dlYg==\">http://atguigu.com/w eb</span></td>\n<td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td>\n</tr>\n<tr>\n<td><a href=\"//atguigu.com/web\">//atguigu.com/web</a></td>\n<td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td>\n</tr>\n<tr>\n<td>/web</td>\n<td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"相对路径\"><a class=\"anchor\" href=\"#相对路径\">#</a> 相对路径</h4>\n<p>相对路径在发送请求时，需要与当前页面 URL 路径进行  <code>计算</code>  ，得到完整 URL 后，再发送请求，学习阶段用的较多</p>\n<p>例如当前网页 url 为 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9jb3Vyc2UvaDUuaHRtbA==\">http://www.atguigu.com/course/h5.html</span></p>\n<table>\n<thead>\n<tr>\n<th>形式</th>\n<th>最终的 <strong>URL</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>./css/app.css</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9jb3Vyc2UvY3NzL2FwcC5jc3M=\">http://www.atguigu.com/course/css/app.css</span></td>\n</tr>\n<tr>\n<td>js/app.js</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9jb3Vyc2UvanMvYXBwLmpz\">http://www.atguigu.com/course/js/app.js</span></td>\n</tr>\n<tr>\n<td>../img/logo.png</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9pbWcvbG9nby5wbmc=\">http://www.atguigu.com/img/logo.png</span></td>\n</tr>\n<tr>\n<td>../../mp4/show.mp4</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9tcDQvc2hvdy5tcDQ=\">http://www.atguigu.com/mp4/show.mp4</span></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"网页中使用-url-的场景小结\"><a class=\"anchor\" href=\"#网页中使用-url-的场景小结\">#</a> 网页中使用 <strong>URL</strong> 的场景小结</h4>\n<p>包括但不限于如下场景：</p>\n<ul>\n<li>a 标签 href</li>\n<li>link 标签 href</li>\n<li>script 标签 src</li>\n<li>img 标签 src</li>\n<li>video audio 标签 src</li>\n<li>form 中的 action</li>\n<li>AJAX 请求中的 URL</li>\n</ul>\n<h3 id=\"设置资源类型mime类型\"><a class=\"anchor\" href=\"#设置资源类型mime类型\">#</a> 设置资源类型（<strong>mime</strong> 类型）</h3>\n<p><code>媒体类型</code> （通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p>\n<pre><code>mime 类型结构： [type]/[subType]\n[主类型]/[辅类型]\n例如： text/html text/css image/jpeg image/png application/json\n</code></pre>\n<p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p>\n<p>下面是常见文件对应的 mime 类型</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">css</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/css'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">png</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/png'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token literal-property property\">jpg</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token literal-property property\">gif</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/gif'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token literal-property property\">mp4</span><span class=\"token operator\">:</span> <span class=\"token string\">'video/mp4'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token literal-property property\">mp3</span><span class=\"token operator\">:</span> <span class=\"token string\">'audio/mpeg'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token literal-property property\">json</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr></table></figure><blockquote>\n<p>对于未知的资源类型，可以选择  <code>application/octet-stream</code>  类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的  <code>下载</code>  效果</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取请求的方法已经路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 判断请求方式以及请求路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> url <span class=\"token operator\">==</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 需要响应文件中的内容</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> url <span class=\"token operator\">==</span> <span class=\"token string\">\"/css/app.css\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 需要响应文件中的内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/public/css/app.css\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> url <span class=\"token operator\">==</span> <span class=\"token string\">\"/js/app.js\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 需要响应文件中的内容</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/public/js/app.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">//404 响应</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"80端口正在启动中....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>很明显上面的代码，当只要有一个请求路径就需要进行判断，显然这种方式不够完美，那么我们需要封装</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取请求的方法已经路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 文件夹路径  根路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> rootDir <span class=\"token operator\">=</span> dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/public\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 拼接文件路径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> filePath <span class=\"token operator\">=</span> rootDir <span class=\"token operator\">+</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 如果出现错误，响应 404 状态码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 响应文件内容</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"80端口正在启动中....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"get-和-post-请求场景小结\"><a class=\"anchor\" href=\"#get-和-post-请求场景小结\">#</a> GET <strong>和</strong> POST <strong>请求场景小结</strong></h3>\n<p>GET 请求的情况：</p>\n<ul>\n<li>在地址栏直接输入 url 访问</li>\n<li>点击 a 链接</li>\n<li>link 标签引入 css</li>\n<li>script 标签引入 js</li>\n<li>img 标签引入图片</li>\n<li>form 标签中的 method 为 get （不区分大小写）</li>\n<li>ajax 中的 get 请求</li>\n</ul>\n<p>POST 请求的情况：</p>\n<ul>\n<li>\n<p>form 标签中的 method 为 post（不区分大小写）</p>\n</li>\n<li>\n<p>AJAX 的 post 请求</p>\n</li>\n</ul>\n<h2 id=\"get和post请求的区别\"><a class=\"anchor\" href=\"#get和post请求的区别\">#</a> <strong>GET</strong> 和<strong> POST</strong> 请求的区别</h2>\n<p><code>GET</code>  和  <code>POST</code>  是 HTTP 协议请求的两种方式。</p>\n<ul>\n<li><code>GET</code>  主要用来获取数据， <code>POST</code>  主要用来提交数据</li>\n<li><code>GET</code>  带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求， <code>POST</code>  带参数请求是将参数放到请求体中</li>\n<li><code>POST</code>  请求相对  <code>GET</code>  安全一些，因为在浏览器中参数会暴露在地址栏</li>\n<li><code>GET</code>  请求大小有限制，一般为 2K，而 POST 请求则没有</li>\n</ul>\n<h1 id=\"nodejs-模块化\"><a class=\"anchor\" href=\"#nodejs-模块化\">#</a> Node.js 模块化</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<h3 id=\"什么是模块化与模块\"><a class=\"anchor\" href=\"#什么是模块化与模块\">#</a> 什么是模块化与模块？</h3>\n<blockquote>\n<p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为  <code>模块化</code></p>\n</blockquote>\n<p>其中拆分出的 &lt;span style=&quot;color:red&quot;&gt; 每个文件就是一个模块 &lt;/span&gt;，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p>\n<h3 id=\"什么是模块化项目\"><a class=\"anchor\" href=\"#什么是模块化项目\">#</a> 什么是模块化项目？</h3>\n<blockquote>\n<p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p>\n</blockquote>\n<h3 id=\"模块化好处\"><a class=\"anchor\" href=\"#模块化好处\">#</a> 模块化好处</h3>\n<p>下面是模块化的一些好处：</p>\n<ol>\n<li>\n<p>防止命名冲突</p>\n</li>\n<li>\n<p>高复用性</p>\n</li>\n<li>\n<p>高维护性</p>\n</li>\n</ol>\n<h2 id=\"模块暴露数据\"><a class=\"anchor\" href=\"#模块暴露数据\">#</a> 模块暴露数据</h2>\n<h3 id=\"模块初体验\"><a class=\"anchor\" href=\"#模块初体验\">#</a> 模块初体验</h3>\n<p>可以通过下面的操作步骤，快速体验模块化</p>\n<ol>\n<li>\n<p>创建 me.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">tiemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"贴膜....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 暴露数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> tiemo<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> tiemo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./me.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tiemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 贴膜....</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"暴露数据\"><a class=\"anchor\" href=\"#暴露数据\">#</a> 暴露数据</h3>\n<p>模块暴露数据的方式有两种：</p>\n<ol>\n<li>\n<p><code>module.exports</code>  = value</p>\n</li>\n<li>\n<p><code>exports.name</code>  = value</p>\n</li>\n</ol>\n<blockquote>\n<p>使用时有几点注意：</p>\n<ul>\n<li><code>module.exports</code>  可以暴露 &lt;span style=&quot;color:red&quot;&gt; 任意 &lt;/span&gt; 数据</li>\n<li>不能使用  <code>exports = value</code>  的形式暴露数据，模块内部 module 与 exports 的隐式关系<br />\n <code>exports = module.exports = &#123;&#125;</code>  ，require 返回的是目标模块中  <code>module.exports</code>  的值</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/a40a41f72dee15ee4d3e3cabd91ec9c2df2fa090.jpg\" alt=\"\" /></p>\n<h2 id=\"导入引入模块\"><a class=\"anchor\" href=\"#导入引入模块\">#</a> 导入（引入）模块</h2>\n<p>在模块中使用 require 传入文件路径即可引入文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./me.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>require 使用的一些注意事项：</p>\n<ol>\n<li>\n<p>对于自己创建的模块，导入时路径建议写 &lt;span style=&quot;color:red&quot;&gt; 相对路径 &lt;/span&gt;，且不能省略  <code>./</code>  和  <code>../</code></p>\n</li>\n<li>\n<p><code>js</code>  和  <code>json</code>  文件导入时可以不用写后缀，c/c++ 编写的  <code>node</code>  扩展文件也可以不写后缀，但是一般用不到，直接使用 <strong>node</strong> 的  <code>require()</code>  方法即可将 JSON 文件转换成 JS 对象</p>\n</li>\n<li>\n<p>如果导入其他类型的文件，会以  <code>js</code>  文件进行处理</p>\n</li>\n<li>\n<p>如果导入的路径是个文件夹，则会 &lt;span style=&quot;color:red&quot;&gt; 首先 &lt;/span&gt; 检测该文件夹下  <code>package.json</code>  文件中  <code>main</code>  属性对应的文件，</p>\n<p>如果存在则导入，反之如果文件不存在会报错。</p>\n<p>如果 main 属性不存在，或者 package.json 不存在，则会尝试导入文件夹下的  <code>index.js</code>  和<br />\n <code>index.json</code> ，</p>\n<p>如果还是没找到，就会报错</p>\n</li>\n<li>\n<p>导入 node.js 内置模块时，直接 require 模块的名字即可，无需加  <code>./</code>  和  <code>../</code></p>\n</li>\n</ol>\n<h2 id=\"导入模块的基本流程\"><a class=\"anchor\" href=\"#导入模块的基本流程\">#</a> 导入模块的基本流程</h2>\n<p>这里我们介绍一下  <code>require</code>  导入 &lt;span style=&quot;color:red&quot;&gt; 自定义模块 &lt;/span&gt; 的基本流程</p>\n<ol>\n<li>将相对路径转为绝对路径，定位目标文件</li>\n<li>缓存检测</li>\n<li>读取目标文件代码</li>\n<li>包裹为一个函数并执行（自执行函数）。通过  <code>arguments.callee.toString()</code>  查看自执行函数</li>\n<li>缓存模块的值</li>\n<li>返回  <code>module.exports</code>  的值</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 伪代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//1. 将相对路径转为绝对路径，定位目标文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> absolutePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//2. 缓存检测</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">[</span>absolutePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">[</span>absolutePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//3. 读取文件的代码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//4. 包裹为一个函数 然后执行</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> module <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">let</span> exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> __filename<span class=\"token punctuation\">,</span> __dirname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"尚硅谷\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> __filename<span class=\"token punctuation\">,</span> __dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">//5. 缓存结果</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  caches<span class=\"token punctuation\">[</span>absolutePath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">//6. 返回 module.exports 的值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5b1f2533d8071dd34751737864e20362539418d1.jpg\" alt=\"\" /></p>\n<h2 id=\"commonjs-规范\"><a class=\"anchor\" href=\"#commonjs-规范\">#</a> CommonJS 规范</h2>\n<p><code>module.exports</code>  、 <code>exports</code>  以及  <code>require</code>  这些都是  <code>CommonJS</code>  模块化规范中的内容。</p>\n<p>而 Node.js 是实现了 CommonJS 模块化规范，二者关系有点像 JavaScript 与 ECMAScript</p>\n<h1 id=\"包管理工具\"><a class=\"anchor\" href=\"#包管理工具\">#</a> 包管理工具</h1>\n<h2 id=\"概念介绍\"><a class=\"anchor\" href=\"#概念介绍\">#</a> 概念介绍</h2>\n<h3 id=\"包是什么\"><a class=\"anchor\" href=\"#包是什么\">#</a> 包是什么</h3>\n<blockquote>\n<p>『包』英文单词是  <code>package</code>  ，代表了一组特定功能的源码集合</p>\n</blockquote>\n<h3 id=\"包管理工具-2\"><a class=\"anchor\" href=\"#包管理工具-2\">#</a> 包管理工具</h3>\n<p>管理『包』的应用软件，可以对「包」进行  <code>下载安装</code>  ，  <code>更新</code>  ，  <code>删除</code> ，  <code>上传</code> 等操作</p>\n<p>借助包管理工具，可以快速开发项目，提升开发效率</p>\n<p>包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 &lt;span style=&quot;color:red&quot;&gt; 掌握好包管理工具非常重要 &lt;/span&gt;</p>\n<h3 id=\"常用的包管理工具\"><a class=\"anchor\" href=\"#常用的包管理工具\">#</a> 常用的包管理工具</h3>\n<p>下面列举了前端常用的包管理工具</p>\n<ul>\n<li><code>npm</code></li>\n<li>yarn</li>\n<li>cnpm</li>\n</ul>\n<h2 id=\"npm\"><a class=\"anchor\" href=\"#npm\">#</a> npm</h2>\n<blockquote>\n<p>npm 全称  <code>Node Package Manager</code>  ，翻译为中文意思是『Node 的包管理工具』</p>\n</blockquote>\n<p>npm 是 node.js 官方内置的包管理工具，是 &lt;span style=&quot;color:red&quot;&gt; 必须要掌握住的工具 &lt;/span&gt;</p>\n<h3 id=\"npm-的安装\"><a class=\"anchor\" href=\"#npm-的安装\">#</a> npm 的安装</h3>\n<p>node.js 在安装时会  <code>自动安装 npm</code>  ，所以如果你已经安装了 node.js，可以直接使用 npm</p>\n<p>可以通过  <code>npm -v</code>  查看版本号测试，如果显示版本号说明安装成功，反之安装失败</p>\n<h3 id=\"npm-基本使用\"><a class=\"anchor\" href=\"#npm-基本使用\">#</a> npm 基本使用</h3>\n<h4 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h4>\n<p>创建一个空目录，然后以此目录作为工作目录 &lt;span style=&quot;color:red&quot;&gt; 启动命令行工具 &lt;/span&gt;，执行  <code>npm init</code></p>\n<p><code>npm init</code>  命令的作用是将文件夹初始化为一个『包』，  <code>交互式创建 package.json 文件</code></p>\n<p><code>package.json</code>  是包的配置文件，每个包都必须要有  <code>package.json</code></p>\n<p><code>package.json</code>  内容示例：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"01_npm\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>属性翻译</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1-npm\"</span><span class=\"token punctuation\">,</span> \t\t#包的名字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span> \t#包的版本</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> \t\t#包的描述</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span> \t#包的入口文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> \t\t    #脚本配置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> \t\t\t#作者</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span> \t\t#开源证书</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>初始化的过程中还有一些注意事项：</p>\n<ol>\n<li>package name ( <code>包名</code> ) 不能使用中文、大写，默认值是 <code>文件夹的名称</code> ，所以文件夹名称也不<br />\n能使用中文和大写</li>\n<li>version ( <code>版本号</code> ) 要求  <code>x.x.x</code>  的形式定义， <code>x</code>  必须是数字，默认值是  <code>1.0.0</code></li>\n<li>ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTEvMDUvaG93X3RvX2Nob29zZV9mcmVlX3NvZnR3YXJlX2xpY2Vuc2VzLmh0bWw=\">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</span></li>\n<li><code>package.json</code>  可以手动创建与修改</li>\n<li>使用  <code>npm init -y</code>  或者  <code>npm init --yes</code>  极速创建  <code>package.json</code></li>\n</ol>\n</blockquote>\n<h4 id=\"搜索包\"><a class=\"anchor\" href=\"#搜索包\">#</a> 搜索包</h4>\n<p>搜索包的方式有两种</p>\n<ol>\n<li>\n<p>命令行 『npm s/search 关键字』</p>\n</li>\n<li>\n<p><code>网站搜索</code>  网址是  <code>https://www.npmjs.com/</code></p>\n</li>\n</ol>\n<blockquote>\n<p>经常有同学问，『我怎样才能精准找到我需要的包？』<br />\n这个事儿需要大家在实践中不断的积累，通过看文章，看项目去学习去积累</p>\n</blockquote>\n<h4 id=\"下载安装包\"><a class=\"anchor\" href=\"#下载安装包\">#</a> 下载安装包</h4>\n<p>我们可以通过  <code>npm install</code>  和  <code>npm i</code>  命令安装包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>包名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token operator\">&lt;</span>包名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 示例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token function\">uniq</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token function\">uniq</span></pre></td></tr></table></figure><p>运行之后文件夹下会增加两个资源</p>\n<ul>\n<li><code>node_modules 文件夹</code>  存放下载的包</li>\n<li><code>package-lock.json 包的锁文件</code> ，用来锁定包的版本</li>\n</ul>\n<blockquote>\n<p>安装 uniq 之后， uniq 就是当前这个包的一个  <code>依赖包</code>  ，有时会简称为  <code>依赖</code></p>\n<p>比如我们创建一个包名字为 A，A 中安装了包名字是 B，我们就说 &lt;span style=&quot;color:red&quot;&gt;B 是 A 的一个依赖包 &lt;/span&gt;，也会说 &lt;span style=&quot;color:red&quot;&gt;A 依赖 B&lt;/span&gt;</p>\n</blockquote>\n<h4 id=\"require-导入-npm-包基本流程\"><a class=\"anchor\" href=\"#require-导入-npm-包基本流程\">#</a> require 导入 npm 包基本流程</h4>\n<ol>\n<li>在当前文件夹下 node_modules 中寻找同名的文件夹</li>\n<li>在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录</li>\n</ol>\n<h3 id=\"生产环境与开发环境\"><a class=\"anchor\" href=\"#生产环境与开发环境\">#</a> 生产环境与开发环境</h3>\n<p><code>开发环境</code>  是程序员 &lt;span style=&quot;color:red&quot;&gt; 专门用来写代码 &lt;/span&gt; 的环境，一般是指程序员的电脑，开发环境的项目一般 &lt;span style=&quot;color:red&quot;&gt; 只能程序员自己访问 &lt;/span&gt;</p>\n<p><code>生产环境</code>  是项目 &lt;span style=&quot;color:red&quot;&gt; 代码正式运行 &lt;/span&gt; 的环境，一般是指正式的服务器电脑，生产环境的项目一般 &lt;span style=&quot;color:red&quot;&gt; 每个客户都可以访问 &lt;/span&gt;</p>\n<h3 id=\"生产依赖与开发依赖\"><a class=\"anchor\" href=\"#生产依赖与开发依赖\">#</a> 生产依赖与开发依赖</h3>\n<p>我们可以在安装时设置选项来区分  <code>依赖的类型</code> ，目前分为两类：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>命令</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发依赖</td>\n<td>npm i -D less&lt;br/&gt;npm i --save-dev less</td>\n<td>-D 等效于 --save-dev&lt;br/&gt; 包信息保存在 package.json 中  <code>devDependencies</code>  属性</td>\n</tr>\n<tr>\n<td>生产依赖</td>\n<td>npm i -S uniq &lt;br/&gt;npm i --save uniq</td>\n<td>-S 等效于 --save， <code>-S 是默认选项</code>  &lt;br/&gt; 包信息保存在 package.json 中  <code>dependencies</code>  属性</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>举个例子方便大家理解，比如说做蛋炒饭需要 <code>大米</code> ， <code>油</code> ， <code>葱</code> ， <code>鸡蛋</code> ， <code>锅</code> ， <code>煤气</code> ， <code>铲子</code> 等</p>\n<p>其中 <code>锅</code> ，  <code>煤气</code> ，  <code>铲子</code> 属于开发依赖，只在制作阶段使用</p>\n<p>而  <code>大米</code> ，  <code>油</code> ，  <code>葱</code> ，  <code>鸡蛋</code> 属于生产依赖，在制作与最终食用都会用到</p>\n<p>所以  <code>开发依赖</code>  是只在开发阶段使用的依赖包，而  <code>生产依赖</code>  是开发阶段和最终上线运行阶段都用到的依赖包</p>\n</blockquote>\n<h3 id=\"全局安装\"><a class=\"anchor\" href=\"#全局安装\">#</a> 全局安装</h3>\n<p>我们可以执行安装选项 -g 进行全局安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> nodemon</pre></td></tr></table></figure><p>全局安装完成之后就可以在命令行的任何位置运行  <code>nodemon</code>  命令</p>\n<p>该命令的作用是  <code>自动重启 node 应用程序</code></p>\n<blockquote>\n<p>说明：</p>\n<ul>\n<li>全局安装的命令不受工作目录位置影响</li>\n<li>可以通过  <code>npm root -g</code>  可以查看全局安装包的位置</li>\n<li>&lt;span style=&quot;color:red&quot;&gt; 不是所有的包都适合全局安装 &lt;/span&gt;，只有全局类的工具才适合，可以通过 &lt; span style=&quot;color:red&quot;&gt; 查看包的官方文档来确定安装方式 &lt;/span&gt;，这里先不必太纠结</li>\n</ul>\n</blockquote>\n<h4 id=\"修改-windows-执行策略\"><a class=\"anchor\" href=\"#修改-windows-执行策略\">#</a> 修改 windows 执行策略</h4>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/753392684c58b41b6df39e59a23c80509136fe84.jpg\" alt=\"\" /></p>\n<p>windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略</p>\n<ol>\n<li>以 <code>管理员身份</code> 打开  <code>powershell</code>  命令行</li>\n</ol>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/88986346dd7ae5c2ef0e784eec6d2b4fe24c53c7.jpg\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>键入命令  <code>set-ExecutionPolicy remoteSigned</code></li>\n</ol>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/9feab516f2f940881eaa23cd367fe244ab7d3036.jpg\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>\n<p>键入 A 然后敲回车 👌</p>\n</li>\n<li>\n<p>如果不生效，可以尝试重启 vscode</p>\n</li>\n</ol>\n<h4 id=\"环境变量-path\"><a class=\"anchor\" href=\"#环境变量-path\">#</a> 环境变量 Path</h4>\n<p>Path 是操作系统的一个环境变量，可以设置一些文件夹的路径，在当前工作目录下找不到可执行文件时，就会在环境变量 Path 的目录中挨个的查找，如果找到则执行，如果没有找到就会报错</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/7d10fa57df7a791566fb7379c9b700ea67178720.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>补充说明：</p>\n<ul>\n<li>如果希望某个程序在任何工作目录下都能正常运行，就应该将该程序的所在目录配置到环境变量 Path 中</li>\n<li>windows 下查找命令的所在位置\n<ul>\n<li><code>cmd 命令行</code>  中执行  <code>where nodemon</code></li>\n<li><code>powershell命令行</code>  执行  <code>get-command nodemon</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"安装包依赖\"><a class=\"anchor\" href=\"#安装包依赖\">#</a> 安装包依赖</h3>\n<p>在项目协作中有一个常用的命令就是  <code>npm i</code> ，通过该命令可以依据  <code>package.json</code>  和  <code>package-lock.json</code>  的依赖声明安装项目依赖</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><blockquote>\n<p>node_modules 文件夹大多数情况都不会存入版本库</p>\n</blockquote>\n<h3 id=\"安装指定版本的包\"><a class=\"anchor\" href=\"#安装指定版本的包\">#</a> 安装指定版本的包</h3>\n<p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token operator\">&lt;</span>包名@版本号<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">## 示例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> i jquery@1.11.2</pre></td></tr></table></figure><h3 id=\"删除依赖\"><a class=\"anchor\" href=\"#删除依赖\">#</a> 删除依赖</h3>\n<p>项目中可能需要删除某些不需要的包，可以使用下面的命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 局部删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> remove <span class=\"token function\">uniq</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> r <span class=\"token function\">uniq</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">## 全局删除</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> remove <span class=\"token parameter variable\">-g</span> nodemon</pre></td></tr></table></figure><h3 id=\"配置命令别名\"><a class=\"anchor\" href=\"#配置命令别名\">#</a> 配置命令别名</h3>\n<p>通过配置命令别名可以更简单的执行命令</p>\n<p>配置 package.json 中的  <code>scripts</code>  属性</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node server.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置完成之后，可以使用别名执行命令<br />\n通过 <code>npm run 别名</code> 来执行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> run start</pre></td></tr></table></figure><p>不过  <code>start</code>  别名比较特别，使用时可以省略  <code>run</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> start</pre></td></tr></table></figure><blockquote>\n<p>补充说明：</p>\n<ul>\n<li><code>npm start</code>  是项目中常用的一个命令，一般用来启动项目</li>\n<li><code>npm run</code>  有自动向上级目录查找的特性，跟  <code>require</code>  函数也一样</li>\n<li>对于陌生的项目，我们可以通过查看  <code>scripts</code>  属性来参考项目的一些操作</li>\n</ul>\n</blockquote>\n<h2 id=\"cnpm\"><a class=\"anchor\" href=\"#cnpm\">#</a> cnpm</h2>\n<h3 id=\"介绍-2\"><a class=\"anchor\" href=\"#介绍-2\">#</a> 介绍</h3>\n<p>cnpm 是一个淘宝构建的 <code>npmjs.com</code>  的完整镜像，也称为『淘宝镜像』，网址 https://npmmirror.com/<br />\ncnpm 服务部署在国内 &lt;span style=&quot;color:red&quot;&gt; 阿里云服务器上 &lt;/span&gt;，可以提高包的下载速度</p>\n<p>官方也提供了一个全局工具包  <code>cnpm</code>  ，操作命令与 npm 大体相同</p>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<p>我们可以通过 npm 来安装 cnpm 工具</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> cnpm <span class=\"token parameter variable\">--registry</span><span class=\"token operator\">=</span>https://registry.npmmirror.com</pre></td></tr></table></figure><h3 id=\"操作命令\"><a class=\"anchor\" href=\"#操作命令\">#</a> 操作命令</h3>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化</td>\n<td>cnpm init / cnpm init</td>\n</tr>\n<tr>\n<td>安装包</td>\n<td>cnpm i uniq&lt;br/&gt;cnpm i -S uniq&lt;br/&gt;cnpm i -D uniq&lt;br/&gt;cnpm i -g nodemon</td>\n</tr>\n<tr>\n<td>安装项目依赖</td>\n<td>cnpm i</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>cnpm r uniq</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"npm-配置淘宝镜像\"><a class=\"anchor\" href=\"#npm-配置淘宝镜像\">#</a> npm 配置淘宝镜像</h3>\n<p>用 npm 也可以使用淘宝镜像，配置的方式有两种</p>\n<ul>\n<li>直接配置</li>\n<li>工具配置</li>\n</ul>\n<h4 id=\"直接配置\"><a class=\"anchor\" href=\"#直接配置\">#</a> 直接配置</h4>\n<p>执行如下命令即可完成配置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npmmirror.com/</pre></td></tr></table></figure><h4 id=\"工具配置\"><a class=\"anchor\" href=\"#工具配置\">#</a> 工具配置</h4>\n<p>使用  <code>nrm</code>  配置 npm 的镜像地址  <code>npm registry manager</code></p>\n<ol>\n<li>\n<p>安装 nrm</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> nrm</pre></td></tr></table></figure></li>\n<li>\n<p>修改镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nrm use taobao</pre></td></tr></table></figure></li>\n<li>\n<p>检查是否配置成功（选做）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config list</pre></td></tr></table></figure><p>检查 registry 地址是否为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG1taXJyb3IuY29tLw==\">https://registry.npmmirror.com/</span> , 如果  <code>是</code>  则表明成功</p>\n</li>\n</ol>\n<blockquote>\n<p>补充说明：</p>\n<ol>\n<li>&lt;span style=&quot;color:red&quot;&gt; 建议使用第二种方式 &lt;/span &gt; 进行镜像配置，因为后续修改起来会比较方便</li>\n<li>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 &lt;span style=&quot;color:red&quot;&gt;npm 的使用率还是高于 cnpm&lt;/span&gt;</li>\n</ol>\n</blockquote>\n<h2 id=\"yarn\"><a class=\"anchor\" href=\"#yarn\">#</a> yarn</h2>\n<p><img data-src=\"./assets/bcc5f325c00fde7886ea75bad1d66b8c2a9add97.jpg\" alt=\"06_包管理工具\" /></p>\n<h3 id=\"yarn-介绍\"><a class=\"anchor\" href=\"#yarn-介绍\">#</a> yarn 介绍</h3>\n<blockquote>\n<p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly95YXJucGtnLmNvbS8=\">https://yarnpkg.com/</span></p>\n</blockquote>\n<h3 id=\"yarn-特点\"><a class=\"anchor\" href=\"#yarn-特点\">#</a> yarn 特点</h3>\n<p>yarn 官方宣称的一些特点</p>\n<ul>\n<li>速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快</li>\n<li>超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</li>\n<li>超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作</li>\n</ul>\n<h3 id=\"yarn-安装\"><a class=\"anchor\" href=\"#yarn-安装\">#</a> yarn 安装</h3>\n<p>我们可以使用 npm 安装 yarn</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> <span class=\"token function\">yarn</span></pre></td></tr></table></figure><h3 id=\"yarn-常用命令\"><a class=\"anchor\" href=\"#yarn-常用命令\">#</a> yarn 常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化</td>\n<td>yarn init / yarn init -y</td>\n</tr>\n<tr>\n<td>安装包</td>\n<td>yarn add uniq 生产依赖 &lt;br/&gt;yarn add less --dev 开发依赖 &lt; br/&gt;yarn global add nodemon 全局安装</td>\n</tr>\n<tr>\n<td>删除包</td>\n<td>yarn remove uniq 删除项目依赖包 &lt;br&gt;yarn global remove nodemon 全局删除包</td>\n</tr>\n<tr>\n<td>安装项目依赖</td>\n<td>yarn</td>\n</tr>\n<tr>\n<td>运行命令别名</td>\n<td>yarn &lt;别名&gt; # 不需要添加  <code>run</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>思考题：</p>\n<p>这里有个小问题就是 &lt;span style=&quot;color:red&quot;&gt; 全局安装的包不可用 &lt;/span&gt;，yarn 全局安装包的位置可以通过  <code>yarn global bin</code>  来查看，</p>\n<p>那你有没有办法使 yarn 全局安装的包能够正常运行？</p>\n<ul>\n<li>配置 path 环境</li>\n</ul>\n</blockquote>\n<h3 id=\"yarn-配置淘宝镜像\"><a class=\"anchor\" href=\"#yarn-配置淘宝镜像\">#</a> yarn 配置淘宝镜像</h3>\n<p>可以通过如下命令配置淘宝镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">yarn</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npmmirror.com/</pre></td></tr></table></figure><p>可以通过  <code>yarn config list</code>  查看 yarn 的配置项</p>\n<h3 id=\"npm-和-yarn-选择\"><a class=\"anchor\" href=\"#npm-和-yarn-选择\">#</a> npm 和 yarn 选择</h3>\n<p>大家可以根据不同的场景进行选择</p>\n<ol>\n<li>\n<p>个人项目</p>\n<p>如果是个人项目，&lt;span style=&quot;color:red&quot;&gt; 哪个工具都可以 &lt;/span&gt;，可以根据自己的喜好来选择</p>\n</li>\n<li>\n<p>公司项目<br />\n如果是公司要根据项目代码来选择，可以 &lt;span style=&quot;color:red&quot;&gt; 通过锁文件判断 &lt;/span&gt; 项目的包管理工具</p>\n<ul>\n<li>npm 的锁文件为  <code>package-lock.json</code></li>\n<li>yarn 的锁文件为  <code>yarn.lock</code></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>包管理工具 &lt;span style=&quot;color:red&quot;&gt; 不要混着用，切记，切记，切记 &lt;/span&gt;</p>\n</blockquote>\n<h2 id=\"管理发布包\"><a class=\"anchor\" href=\"#管理发布包\">#</a> 管理发布包</h2>\n<h3 id=\"创建与发布\"><a class=\"anchor\" href=\"#创建与发布\">#</a> 创建与发布</h3>\n<p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p>\n<ol>\n<li>\n<p>创建文件夹，并创建文件 index.js， 在文件中声明函数，使用 module.exports 暴露</p>\n</li>\n<li>\n<p>npm 初始化工具包，package.json 填写包的信息 (包的名字是唯一的)</p>\n</li>\n<li>\n<p>注册账号 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3NpZ251cA==\">https://www.npmjs.com/signup</span></p>\n</li>\n<li>\n<p>激活账号 （ &lt;span style=&quot;color:red&quot;&gt; 一定要激活账号 &lt;/span&gt; ）</p>\n</li>\n<li>\n<p>修改为官方的官方镜像 (命令行中运行  <code>nrm use npm</code>  )</p>\n</li>\n<li>\n<p>命令行下  <code>npm login</code>  填写相关用户信息</p>\n</li>\n<li>\n<p>命令行下  <code>npm publish</code>  提交包 👌</p>\n</li>\n</ol>\n<h3 id=\"更新包\"><a class=\"anchor\" href=\"#更新包\">#</a> 更新包</h3>\n<p>后续可以对自己发布的包进行更新，操作步骤如下</p>\n<ol>\n<li>\n<p>更新包中的代码</p>\n</li>\n<li>\n<p>测试代码是否可用</p>\n</li>\n<li>\n<p>修改  <code>package.json</code>  中的版本号</p>\n</li>\n<li>\n<p>发布更新</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> publish</pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"删除包\"><a class=\"anchor\" href=\"#删除包\">#</a> 删除包</h3>\n<p>执行如下命令删除包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> unpublish <span class=\"token parameter variable\">--force</span></pre></td></tr></table></figure><blockquote>\n<p>删除包需要满足一定的条件， <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9wb2xpY2llcy91bnB1Ymxpc2g=\">https://docs.npmjs.com/policies/unpublish</span></p>\n<ul>\n<li>你是包的作者</li>\n<li>发布小于 24 小时</li>\n<li>大于 24 小时后，没有其他包依赖，并且每周小于 300 下载量，并且只有一个维护者</li>\n</ul>\n</blockquote>\n<h2 id=\"扩展内容\"><a class=\"anchor\" href=\"#扩展内容\">#</a> 扩展内容</h2>\n<p>在很多语言中都有包管理工具，比如：</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>包管理工具</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PHP</td>\n<td>composer</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>pip</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>maven</td>\n</tr>\n<tr>\n<td>Go</td>\n<td>go mod</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>npm/yarn/cnpm/other</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>rubyGems</td>\n</tr>\n</tbody>\n</table>\n<p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是『 <code>软件包</code> 』</p>\n<table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>包管理工具</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Centos</td>\n<td>yum</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL3N0YWJsZS8=\">https://packages.debian.org/stable/</span></td>\n</tr>\n<tr>\n<td>Ubuntu</td>\n<td>apt</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy51YnVudHUuY29tLw==\">https://packages.ubuntu.com/</span></td>\n</tr>\n<tr>\n<td>MacOS</td>\n<td>homebrew</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icmV3LnNoLw==\">https://brew.sh/</span></td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>chocolatey</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaG9jb2xhdGV5Lm9yZy8=\">https://chocolatey.org/</span></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"nvm\"><a class=\"anchor\" href=\"#nvm\">#</a> nvm</h1>\n<h2 id=\"介绍-3\"><a class=\"anchor\" href=\"#介绍-3\">#</a> 介绍</h2>\n<p>nvm 全称  <code>Node Version Manager</code>  顾名思义它是用来管理 node 版本的工具，方便切换不同版本的 Node.js</p>\n<h2 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用</h2>\n<p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p>\n<h3 id=\"下载安装\"><a class=\"anchor\" href=\"#下载安装\">#</a> 下载安装</h3>\n<p>首先先下载 nvm，下载地址 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz\">https://github.com/coreybutler/nvm-windows/releases</span> ，</p>\n<p>选择  <code>nvm-setup.exe</code>  下载即可（网络异常的小朋友可以在资料文件夹中获取）</p>\n<h3 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nvm list available</td>\n<td>显示所有可以下载的 Node.js 版本</td>\n</tr>\n<tr>\n<td>nvm list</td>\n<td>显示已安装的版本</td>\n</tr>\n<tr>\n<td>nvm install 18.12.1</td>\n<td>安装 18.12.1 版本的 Node.js</td>\n</tr>\n<tr>\n<td>nvm install latest</td>\n<td>安装最新版的 Node.js</td>\n</tr>\n<tr>\n<td>nvm uninstall 18.12.1</td>\n<td>删除某个版本的 Node.js</td>\n</tr>\n<tr>\n<td>nvm use 18.12.1</td>\n<td>切换 18.12.1 的 Node.js</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"接口是什么\"><a class=\"anchor\" href=\"#接口是什么\">#</a> 接口是什么</h3>\n<blockquote>\n<p>接口是 &lt;span style=&quot;color:red&quot;&gt; 前后端通信的桥梁 &lt;/span&gt;</p>\n</blockquote>\n<p>简单理解：一个接口就是 &lt;span style=&quot;color:red&quot;&gt; 服务中的一个路由规则 &lt;/span&gt; ，根据请求响应结果</p>\n<p>接口的英文单词是 API (Application Program Interface)，所以有时也称之为  <code>API 接口</code></p>\n<p>这里的接口指的是『数据接口』， &lt;span style=&quot;color:red&quot;&gt; 与编程语言（Java，Go 等）中的接口语法不同 &lt;/span&gt;</p>\n<h3 id=\"接口的作用\"><a class=\"anchor\" href=\"#接口的作用\">#</a> 接口的作用</h3>\n<blockquote>\n<p>实现 &lt;span style=&quot;color:red&quot;&gt; 前后端通信 &lt;/span&gt;</p>\n</blockquote>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/b6836e5dc9b1f33ee5f030de2fd1780db7f2447c.png\" alt=\"\" /></p>\n<h3 id=\"接口的开发与调用\"><a class=\"anchor\" href=\"#接口的开发与调用\">#</a> 接口的开发与调用</h3>\n<p>大多数接口都是由 &lt;span style=&quot;color:red&quot;&gt; 后端工程师 &lt;/span&gt; 开发的， &lt;span style=&quot;color:red&quot;&gt; 开发语言不限 &lt;/span&gt;</p>\n<p>一般情况下接口都是由 &lt;span style=&quot;color:red&quot;&gt; 前端工程师 &lt;/span&gt; 调用的，但有时 &lt;span style=&quot;color:red&quot;&gt; 后端工程师也会调用接口 &lt;/span&gt; ，比如短信接口，支付接口<br />\n等</p>\n<h3 id=\"接口的组成\"><a class=\"anchor\" href=\"#接口的组成\">#</a> 接口的组成</h3>\n<p>一个接口一般由如下几个部分组成</p>\n<ul>\n<li>\n<p>请求方法</p>\n</li>\n<li>\n<p>接口地址（URL）</p>\n</li>\n<li>\n<p>请求参数</p>\n</li>\n<li>\n<p>响应结果</p>\n</li>\n</ul>\n<p>一个接口示例 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZS1hcGkuY29tL2RvYy8zMjU=\">https://www.free-api.com/doc/325</span></p>\n<p>体验一下： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuYXNpbHUuY29tL2lkY2FyZC8/aWQ9MzcxNTIyMTk5MTExMjk5NjY4\">https://api.asilu.com/idcard/?id=371522199111299668</span></p>\n<h2 id=\"restful-api\"><a class=\"anchor\" href=\"#restful-api\">#</a> RESTful API</h2>\n<p>RESTful API 是一种特殊风格的接口，主要特点有如下几个：</p>\n<ul>\n<li>URL 中的路径表示 &lt;span style=&quot;color:red&quot;&gt; 资源 &lt;/span&gt;，路径中不能有  <code>动词</code> ，例如 <code>create</code>  ,  <code>delete</code>  ,  <code>update</code>  等这些都不能有</li>\n<li>操作资源要与  <code>HTTP 请求方法</code>  对应</li>\n<li>操作结果要与  <code>HTTP 响应状态码</code>  对应</li>\n</ul>\n<p>规则示例：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>请求类型</th>\n<th>URL</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新增歌曲</td>\n<td>POST</td>\n<td>/song</td>\n<td>返回新生成的歌曲信息</td>\n</tr>\n<tr>\n<td>删除歌曲</td>\n<td>DELETE</td>\n<td>/song/10</td>\n<td>返回一个空文档</td>\n</tr>\n<tr>\n<td>修改歌曲</td>\n<td>PUT</td>\n<td>/song/10</td>\n<td>返回更新后的歌曲信息</td>\n</tr>\n<tr>\n<td>修改歌曲</td>\n<td>PATCH</td>\n<td>/song/10</td>\n<td>返回更新后的歌曲信息</td>\n</tr>\n<tr>\n<td>获取所有歌曲</td>\n<td>GET</td>\n<td>/song</td>\n<td>返回歌曲列表数组</td>\n</tr>\n<tr>\n<td>获取单个歌曲</td>\n<td>GET</td>\n<td>/song/10</td>\n<td>返回单个歌曲信息</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>扩展阅读： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE0LzA1L3Jlc3RmdWxfYXBpLmh0bWw=\">https://www.ruanyifeng.com/blog/2014/05/restful_api.html</span></p>\n</blockquote>\n<h2 id=\"json-server\"><a class=\"anchor\" href=\"#json-server\">#</a> json-server</h2>\n<p>json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务</p>\n<p>官方地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGljb2RlL2pzb24tc2VydmVy\">https://github.com/typicode/json-server</span></p>\n<p>操作步骤：</p>\n<ol>\n<li>\n<p>全局安装  <code>json-server</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> json-server</pre></td></tr></table></figure></li>\n<li>\n<p>创建 JSON 文件（db.json），编写基本结构</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"song\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"干杯\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"singer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"五月天\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"当\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"singer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"动力火车\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"不能说的秘密\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"singer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"周杰伦\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>以 JSON 文件所在文件夹作为工作目录</code> ，执行如下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>json-server <span class=\"token parameter variable\">--watch</span> db.json</pre></td></tr></table></figure></li>\n</ol>\n<p>默认监听端口为  <code>3000</code></p>\n<h2 id=\"接口测试工具\"><a class=\"anchor\" href=\"#接口测试工具\">#</a> 接口测试工具</h2>\n<p>介绍几个接口测试工具<br />\n apipost <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpcG9zdC5jbi8=\">https://www.apipost.cn/</span> (中文)<br />\napifox <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpZm94LmNuLw==\">https://www.apifox.cn/</span> (中文)<br />\npostman <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9zdG1hbi5jb20v\">https://www.postman.com/</span> (英文)</p>\n<h1 id=\"会话控制\"><a class=\"anchor\" href=\"#会话控制\">#</a> 会话控制</h1>\n<h2 id=\"介绍-4\"><a class=\"anchor\" href=\"#介绍-4\">#</a> 介绍</h2>\n<blockquote>\n<p>所谓会话控制就是 &lt;span style=&quot;color:red&quot;&gt; 对会话进行控制 &lt;/span&gt;</p>\n</blockquote>\n<p>HTTP 是一种无状态的协议，它没有办法区分多次的请求是否来自于同一个客户端，&lt;span style=&quot;color:red&quot;&gt; 无法区分用户 &lt;/span&gt;</p>\n<p>而产品中又大量存在的这样的需求，所以我们需要通过 &lt;span style=&quot;color:red&quot;&gt; 会话控制 &lt;/span&gt; 来解决该问题</p>\n<p>常见的会话控制技术有三种：</p>\n<ul>\n<li>cookie</li>\n<li>session</li>\n<li>token</li>\n</ul>\n<h2 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> cookie</h2>\n<h3 id=\"cookie-是什么\"><a class=\"anchor\" href=\"#cookie-是什么\">#</a> cookie 是什么</h3>\n<blockquote>\n<p>cookie 是 HTTP 服务器发送到用户浏览器并保存在本地的一小块数据</p>\n</blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;cookie 是保存在浏览器端的一小块数据 &lt;/span&gt;</p>\n<p>&lt;span style=&quot;color:red&quot;&gt;cookie 是按照域名划分保存的 &lt;/span&gt;</p>\n<p>简单示例：</p>\n<table>\n<thead>\n<tr>\n<th>域名</th>\n<th>cookie</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span></td>\n<td>a=100; b=200</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaWxpYmlsaS5jb20=\">www.bilibili.com</span></td>\n<td>xid=1020abce121; hm=112411213</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2pkLmNvbQ==\">jd.com</span></td>\n<td>x=100; ocw=12414cce</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cookie-的特点\"><a class=\"anchor\" href=\"#cookie-的特点\">#</a> cookie 的特点</h3>\n<p>浏览器向服务器发送请求时，会自动将  <code>当前域名下</code>  可用的 cookie 设置在请求头中，然后传递给服务器</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/2432689d3a6913a8952b0e2f7c13b6aa468fe9ce.jpg\" alt=\"\" /></p>\n<p>这个请求头的名字也叫  <code>cookie</code>  ，所以将 &lt;span style=&quot;color:red&quot;&gt;cookie 理解为一个 HTTP 的请求头也是可以的 &lt;/span&gt;</p>\n<h3 id=\"cookie-的运行流程\"><a class=\"anchor\" href=\"#cookie-的运行流程\">#</a> cookie 的运行流程</h3>\n<p>填写账号和密码校验身份，校验通过后下发 cookie</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/f65d061b87c7b44dbddc1e9703146f9e03482aea.png\" alt=\"\" /><br />\n有了 cookie 之后，后续向服务器发送请求时，就会自动携带 cookie</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/82caab8f82650a12b76b9085e3d7b5c44a725ee8.png\" alt=\"\" /></p>\n<h3 id=\"浏览器操作-cookie\"><a class=\"anchor\" href=\"#浏览器操作-cookie\">#</a> 浏览器操作 cookie</h3>\n<p>浏览器操作 cookie 的操作，使用相对较少，大家了解即可</p>\n<ol>\n<li>禁用所有 cookie</li>\n<li>删除 cookie</li>\n<li>查看 cookie</li>\n</ol>\n<h3 id=\"cookie-的代码操作\"><a class=\"anchor\" href=\"#cookie-的代码操作\">#</a> cookie 的代码操作</h3>\n<p>express 中可以使用  <code>cookie-parser</code>  进行处理</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 安装 cookie-parser\t npm i cookie-parser</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 引入 cookieParser 包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> cookieParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//3. 设置 cookieParser 中间件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//4-1 设置 cookie</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/set-cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 不带时效性    会在浏览器关闭的时候，销毁</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 带时效性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"23123456@qq.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 响应</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cookie的设置\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//4-2 读取 cookie</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get-cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 读取 cookie</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 响应体</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cookie的读取\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//4-3 删除 cookie</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete-cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">clearCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 响应</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie 的清除\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//4. 启动服务</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>不同浏览器中的 cookie 是相互独立的，不共享</p>\n</blockquote>\n<h2 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> session</h2>\n<h3 id=\"session-是什么\"><a class=\"anchor\" href=\"#session-是什么\">#</a> session 是什么</h3>\n<p>session 是保存在 &lt;span style=&quot;color:red&quot;&gt; 服务器端的一块儿数据 &lt;/span&gt;，保存当前访问用户的相关信息</p>\n<h3 id=\"session-的作用\"><a class=\"anchor\" href=\"#session-的作用\">#</a> session 的作用</h3>\n<p>实现会话控制，可以识别用户的身份，快速获取当前用户的相关信息</p>\n<h3 id=\"session-运行流程\"><a class=\"anchor\" href=\"#session-运行流程\">#</a> session 运行流程</h3>\n<p>填写账号和密码校验身份，校验通过后创建  <code>session 信息</code> ，然后将  <code>session_id</code>  的值通过响应头 (cookie) 返回给浏览器</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/b85539cfe706e14c1b8e3c951169ef818af4f247.png\" alt=\"\" /></p>\n<p>有了 cookie，下次发送请求时会自动携带 cookie，服务器通过  <code>cookie</code>  中的  <code>session_id</code>  的值确定用<br />\n户的身份</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/58c03619b70c2ecc76ac8684691a30fe977f59c1.png\" alt=\"\" /></p>\n<h3 id=\"session-中间件配置\"><a class=\"anchor\" href=\"#session-中间件配置\">#</a> session 中间件配置</h3>\n<p>express 中可以使用  <code>express-session</code>  对 session 进行操作</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 安装包 npm i express-session connect-mongo</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 引入 express-session connect-mongo</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-session\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> MongoStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect-mongo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//3. 设置 session 的中间件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设置 cookie 的 name，默认值是：connect.sid</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 参与加密的字符串（又称签名）  加盐</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">saveUninitialized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否为每次请求都设置一个 cookie 用来存储 session 的 id</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token literal-property property\">resave</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否在每次请求时重新保存 session</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> MongoStore<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">mongoUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mongodb://127.0.0.1:27017/project\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 数据库的连接配置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token literal-property property\">cookie</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开启后前端无法通过 JS 操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这一条 是控制 sessionID 的过期时间的！！！</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 创建 session  session 的设置</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 设置 session</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 获取 session</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"session的信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// 检测 session 是否存在用户数据</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你好 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录 注册\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 销毁 session</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/logout\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// 销毁 session</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">//res.send (' 设置 session');</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功退出\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动, 端口 \"</span> <span class=\"token operator\">+</span> <span class=\"token number\">3000</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 监听中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"session-和-cookie-的区别\"><a class=\"anchor\" href=\"#session-和-cookie-的区别\">#</a> session 和 cookie 的区别</h2>\n<p>cookie 和 session 的区别主要有如下几点：</p>\n<ol>\n<li>存在的位置</li>\n</ol>\n<ul>\n<li>cookie：浏览器端</li>\n<li>session：服务端</li>\n</ul>\n<ol start=\"2\">\n<li>安全性</li>\n</ol>\n<ul>\n<li>cookie 是以明文的方式存放在客户端的，安全性相对较低</li>\n<li>session 存放于服务器中，所以安全性  <code>相对</code>  较好</li>\n</ul>\n<ol start=\"3\">\n<li>网络传输量</li>\n</ol>\n<ul>\n<li>cookie 设置内容过多会增大报文体积， 会影响传输效率</li>\n<li>session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</li>\n</ul>\n<ol start=\"4\">\n<li>存储限制</li>\n</ol>\n<ul>\n<li>浏览器限制单个 cookie 保存的数据不能超过  <code>4K</code>  ，且单个域名下的存储数量也有限制</li>\n<li>session 数据存储在服务器中，所以没有这些限制</li>\n</ul>\n<h2 id=\"csrf-跨域请求伪造\"><a class=\"anchor\" href=\"#csrf-跨域请求伪造\">#</a> CSRF 跨域请求伪造</h2>\n<p>把 get 请求改成 post 请求</p>\n<h2 id=\"公益-404-页面\"><a class=\"anchor\" href=\"#公益-404-页面\">#</a> 公益 404 页面</h2>\n<h2 id=\"token\"><a class=\"anchor\" href=\"#token\">#</a> token</h2>\n<h3 id=\"token-是什么\"><a class=\"anchor\" href=\"#token-是什么\">#</a> token 是什么</h3>\n<p><code>token</code>  是服务端生成并返回给 HTTP 客户端的一串加密 <code>字符串</code> ，  <code>token</code>  中保存着 <code>用户信息</code> <br />\n (openai 的 token)</p>\n<p>token 不属于 http 标准，完全由前后端协商而定，但 cookie 属于 http 标准</p>\n<h3 id=\"token-的作用\"><a class=\"anchor\" href=\"#token-的作用\">#</a> token 的作用</h3>\n<p>实现会话控制，可以识别用户的身份，主要用于移动端 APP</p>\n<h3 id=\"token-的工作流程\"><a class=\"anchor\" href=\"#token-的工作流程\">#</a> token 的工作流程</h3>\n<p>填写账号和密码校验身份，校验通过后响应 token，token 一般是在响应体中返回给客户端的</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5e03daa442b749955aac291d68ffa22c3506ba86.png\" alt=\"\" /><br />\n后续发送请求时，需要 <code>手动</code> 将 token 添加在请求报文中 (&lt;span style=&quot;color:red&quot;&gt;cookie 是自动携带的 &lt;/span&gt;)，一般是放在请求头中<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/7e7369958050ccff563122b9618f09c28dae956b.png\" alt=\"\" /></p>\n<h3 id=\"token-的特点\"><a class=\"anchor\" href=\"#token-的特点\">#</a> token 的特点</h3>\n<ul>\n<li>\n<p>服务端压力更小</p>\n<ul>\n<li>数据存储在客户端</li>\n</ul>\n</li>\n<li>\n<p>相对更安全</p>\n<ul>\n<li>数据加密</li>\n<li>可以避免 CSRF（跨站请求伪造）</li>\n</ul>\n</li>\n<li>\n<p>扩展性更强</p>\n<ul>\n<li>服务间可以共享</li>\n<li>增加服务节点更简单</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jwt\"><a class=\"anchor\" href=\"#jwt\">#</a> JWT</h3>\n<p>JWT（JSON Web Token ）是目前最流行的跨域认证解决方案，可用于基于  <code>token</code>  的身份验证</p>\n<p>JWT 使 token 的生成与校验更规范</p>\n<p>我们可以使用  <code>jsonwebtoken 包</code>  来操作 token</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 jsonwebtokan</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建 token</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//jwt.sign (数据，加密字符串，配置对象)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 单位是 秒</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 解析 token</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//jwt.verify (token, 加密字符串，回调函数)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"校验失败~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;username: ' 张三 ', iat: (创建时间), exp:(过期时间)&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>扩展阅读： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE4LzA3L2pzb25fd2ViX3Rva2VuLXR1dG9yaWFsLmh0bWw=\">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</span></p>\n</blockquote>\n<h2 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h2>\n<h3 id=\"本地域名\"><a class=\"anchor\" href=\"#本地域名\">#</a> 本地域名</h3>\n<p>所谓本地域名就是 &lt;span style=&quot;color:red&quot;&gt; 只能在本机使用的域名 &lt;/span&gt;，一般在开发阶段使用</p>\n<h4 id=\"操作流程\"><a class=\"anchor\" href=\"#操作流程\">#</a> 操作流程</h4>\n<p>编辑文件  <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p>\n<pre><code>127.0.0.1   www.baidu.com\n</code></pre>\n<p>如果修改失败，&lt;span style=&quot;color:red&quot;&gt; 可以修改该文件的权限 &lt;/span&gt;</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/bfe2b3b80fe871577ca342891eef6201f352b682.jpg\" alt=\"\" /></p>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h4>\n<p>在地址栏输入  <code>域名</code>  之后，浏览器会先进行 DNS（Domain Name System）查询，获取该域名对应的 IP 地<br />\n址<br />\n请求会发送到 DNS 服务器，可以  <code>根据域名返回 IP 地址</code></p>\n<p>可以通过  <code>ipconfig /all</code>  查看本机的 DNS 服务器</p>\n<p><code>hosts</code>  文件也可以设置域名与 IP 的映射关系，在发送请求前，可以通过该文件获取域名的 IP 地址</p>\n",
            "tags": [
                "nodejs"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF/",
            "url": "https://eucli.top/2023/09/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF/",
            "title": "服务端",
            "date_published": "2023-09-29T12:45:48.000Z",
            "content_html": "<h1 id=\"学习-pm2\"><a class=\"anchor\" href=\"#学习-pm2\">#</a> 学习 pm2</h1>\n<h2 id=\"pm2-node-应用进程管理器\"><a class=\"anchor\" href=\"#pm2-node-应用进程管理器\">#</a> PM2 Node 应用进程管理器</h2>\n<p>pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务。</p>\n<h2 id=\"pm2-的主要特性\"><a class=\"anchor\" href=\"#pm2-的主要特性\">#</a> PM2 的主要特性</h2>\n<ul>\n<li>内建负载均衡（使用 Node cluster 集群模块）</li>\n<li>后台运行</li>\n<li>0 秒停机重载</li>\n<li>具有 Ubuntu 和 CentOS 的启动脚本</li>\n<li>停止不稳定的进程（避免无限循环）</li>\n<li>控制台检测</li>\n<li>提供 HTTP API</li>\n<li>远程控制和实时的接口 API (Nodejs 模块，允许和 PM2 进程管理器交互)</li>\n</ul>\n<ol>\n<li>安装 &amp; 目录<br />\n运行以下命令进行全局安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> pm2</pre></td></tr></table></figure><ol start=\"2\">\n<li>常用命令</li>\n</ol>\n<ul>\n<li>启动命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 start app.js</pre></td></tr></table></figure><ul>\n<li>命令行参数<br />\n我们可以在最基本的启动命令后面，添加一些参数选项，去满足我们的需求，常用的参数选项如下所示：<br />\n--watch：监听应用目录的变化，一旦发生变化，自动重启。<br />\n-i or --instance：启用多少个实例，可用于负载均衡，如果 -i 0 或者 -i max，则根据当前机器核数确定实例数目。<br />\n--ignore-watch：排除监听的目录或文件，可以是特定的文件名，也可以是正则。</li>\n</ul>\n<p>我们在启动命令后面加入以上的一些参数，完整的启动命令如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pm2 start app.js <span class=\"token parameter variable\">--watch</span> <span class=\"token parameter variable\">-i</span> max <span class=\"token parameter variable\">-n</span> xiaoman</pre></td></tr></table></figure><ol start=\"3\">\n<li>重启命令</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 restart app.js</pre></td></tr></table></figure><ol start=\"4\">\n<li>停止命令<br />\n停止特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令停止相应的应用；</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 stop app_name <span class=\"token operator\">|</span> app_id</pre></td></tr></table></figure><p>如果需要停止全部的应用，则使用以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 stop all</pre></td></tr></table></figure><ol start=\"5\">\n<li>删除命令<br />\n删除特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令删除相应的应用；</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 delete app_name <span class=\"token operator\">|</span> app_id</pre></td></tr></table></figure><p>如果需要删除全部的应用，则使用以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 delete all</pre></td></tr></table></figure><ol start=\"6\">\n<li>查看有哪些进程</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 list</pre></td></tr></table></figure><h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>如果我们使用命令行参数定义一些选项，那么每次启动进程时，都需要敲上一大堆的命令，非常繁琐；所以我们可以使用配置文件来将命令行参数进行配置，配置文件里的配置项跟命令行参数是基本一致的；如下所示 pm2 的配置文件 pm2.json ，然后在 package.json 文件中配置启动命令 &quot;pm2&quot;: &quot;pm2 start pm2.json&quot; ，这样我们只需要运行 npm run pm2 就可以使用 pm2 启动我们的 express 项目，并且相关运行参数直接在 pm2.json 中配置好了。相关配置项表示的意义在下面文件中都已经注释说明</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string-property property\">\"apps\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"express_project\"</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 项目名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string-property property\">\"script\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app.js\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 执行文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string-property property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 根目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string-property property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">// 传递给脚本的参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string-property property\">\"interpreter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 指定的脚本解释器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string-property property\">\"interpreter_args\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 传递给解释器的参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string-property property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 是否监听文件变动然后重启</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string-property property\">\"ignore_watch\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>                <span class=\"token comment\">// 不用监听的文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"public\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string-property property\">\"exec_mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cluster_mode\"</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 应用启动模式，支持 fork 和 cluster 模式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string-property property\">\"instances\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"max\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 应用启动实例个数，仅在 cluster 模式有效 默认为 fork</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string-property property\">\"error_file\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./logs/app-err.log\"</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 错误日志文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string-property property\">\"out_file\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./logs/app-out.log\"</span><span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 正常日志文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string-property property\">\"merge_logs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// 设置追加日志而不是新建日志</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string-property property\">\"log_date_format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YYYY-MM-DD HH:mm:ss\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 指定日志文件的时间格式</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string-property property\">\"min_uptime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"60s\"</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 应用运行少于时间被认为是异常启动</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string-property property\">\"max_restarts\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// 最大异常重启次数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string-property property\">\"autorestart\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 默认为 true, 发生异常的情况下自动重启</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string-property property\">\"restart_delay\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"60\"</span>                       <span class=\"token comment\">// 异常重启情况下，延时重启时间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string-property property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           <span class=\"token string-property property\">\"NODE_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 环境参数，当前指定为生产环境</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           <span class=\"token string-property property\">\"REMOTE_ADDR\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string-property property\">\"env_dev\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string-property property\">\"NODE_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 环境参数，当前指定为开发环境</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string-property property\">\"REMOTE_ADDR\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token string-property property\">\"env_test\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>                               <span class=\"token comment\">// 环境参数，当前指定为测试环境</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token string-property property\">\"NODE_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token string-property property\">\"REMOTE_ADDR\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"高阶应用\"><a class=\"anchor\" href=\"#高阶应用\">#</a> 高阶应用</h2>\n<ol>\n<li>负载均衡<br />\n可以使用 -i 参数配置集群数，实现负载均衡，相关命令如下</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 start app.js <span class=\"token parameter variable\">-i</span> <span class=\"token number\">3</span> // 开启三个进程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ pm2 start app.js <span class=\"token parameter variable\">-i</span> max // 根据机器CPU核数，开启对应数目的进程</pre></td></tr></table></figure><ol start=\"2\">\n<li>日志查看<br />\n我们可以通过打开日志文件查看日志外，还可以通过 pm2 logs 来查看实时日志，这点有对于线上问题排查；日志查看命令如下：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 logs</pre></td></tr></table></figure><ol start=\"3\">\n<li>监控<br />\n我们可以使用以下命令，查看当前通过 pm2 运行的进程的状态；</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 monit</pre></td></tr></table></figure><h1 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> Linux</h1>\n<h2 id=\"认识-linux\"><a class=\"anchor\" href=\"#认识-linux\">#</a> 认识 Linux</h2>\n<p>是一个基于 POSIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<ol>\n<li>\n<p>使用 SSH 连接服务器<br />\n window 安装 SSH（安装地址） <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tbHMtc29mdHdhcmUuY29tL29wZW5zc2hkLmh0bWw=\">mls-software.com</span><br />\nMacbook 免安装自带</p>\n</li>\n<li>\n<p>使用方式<br />\n打开终端，输入：<br />\n <code>ssh  账号默认root@服务器地址</code> <br />\n例子：  <code>ssh root@123.456.789</code>  然后选择 Y ，然后输入密码即可</p>\n</li>\n<li>\n<p>基本命令</p>\n</li>\n</ol>\n<ul>\n<li><code>ls</code>  : 用来查看当前的目录的文件</li>\n<li><code>cd</code>  : 用来切换目录</li>\n<li><code>wget</code>  : 用来下载一些东西<br />\n下载 nodejs:  <code>wget https://cdn.npmmirror.com/binaries/node/v14.19.1/node-v14.19.1-linux-x64.tar.xz</code> <br />\n 下载完成后解压，使用 <code>tar</code>  命令：</li>\n<li>-c: 压缩</li>\n<li>-x：解压</li>\n<li>-t：查看内容</li>\n<li>-r：向压缩归档文件末尾追加文件</li>\n<li>-u：更新原压缩包中的文件<br />\n这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的:</li>\n<li>-z：有 gzip 属性的</li>\n<li>-j：有 bz2 属性的</li>\n<li>-Z：有 compress 属性的</li>\n<li>-v：显示所有过程</li>\n<li>-O：将文件解开到标准输出<br />\n下面的参数 - f 是必须的:-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</li>\n</ul>\n<p><code>tar -xf all.tar</code> : 这条命令是解出 all.tar 包中所有文件，-x 是解开的意思<br />\n <code>tar -cf all.tar *.jpg</code>  这条命令是将所有.jpg 的文件打成一个名为 all.tar 的包。-c 是表示产生新的包，-f 指定包的文件名。</p>\n<ol start=\"4\">\n<li>配置环境变量<br />\n <code>pwd</code>  用于显示工作目录<br />\n使用 pwd 命令获取 node bin 的位置<br />\n前往根目录下面的 etc/profile 此文件涉及系统的环境，即环境变量相关。这里修改会对所有用户起作用<br />\n使用 vi 命令编辑该文件 vi profile<br />\n 然后按一下 I 键 进入编辑模式<br />\n在最后一行添加： <code>export PATH=$PATH:你的目录/node-v14.19.1-linux-x64/bin</code> <br />\n 然后执行 source profile 或者重启 linux<br />\n 配置淘宝代理 npm config set registry <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG0udGFvYmFvLm9yZw==\">https://registry.npm.taobao.org</span></li>\n</ol>\n<h2 id=\"linux-文件属性\"><a class=\"anchor\" href=\"#linux-文件属性\">#</a> Linux 文件属性</h2>\n<h3 id=\"ls-l-查看文件属性信息可简写为ll\"><a class=\"anchor\" href=\"#ls-l-查看文件属性信息可简写为ll\">#</a>  <code>ls -l</code>  查看文件属性信息 (可简写为 <code>ll</code> )</h3>\n<ul>\n<li>\n<p>首字母作用<br />\n文件的开头对应是 -<br />\n 目录开头对应的是 d<br />\n 快捷方式对应的是 l<br />\nU 盘对应的是 b<br />\n 鼠标键盘等硬件对应的 c</p>\n</li>\n<li>\n<p><code>rwx</code> : 读 | 写 | 可执行，每三个一组（该文件创建者，该文件所在的用户组，其他用户权限）<br />\n <code>-</code>  为缺少权限，如缺少 “可执行” 权限，则为 <code>rw-</code></p>\n</li>\n</ul>\n<h2 id=\"linux-权限\"><a class=\"anchor\" href=\"#linux-权限\">#</a> Linux 权限</h2>\n<p>RWX 分别是可读 可写 可执行权限，这个权限我们可以修改使用 chmod 777 文件名<br />\n我们先学习一组规律：</p>\n<ul>\n<li>\n<p>读 ------R 对应数字 4</p>\n</li>\n<li>\n<p>写 ------W 对应数字 2</p>\n</li>\n<li>\n<p>可执行 -----X 对应数字 1</p>\n</li>\n</ul>\n<p>所以 7 就是可读可写可执行权限</p>\n",
            "tags": [
                "nodejs",
                "服务端"
            ]
        }
    ]
}