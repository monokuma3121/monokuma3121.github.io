{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucliの小窝 • All posts by \"服务端\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/09/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF/",
            "url": "https://eucli.top/2023/09/29/%E6%9C%8D%E5%8A%A1%E7%AB%AF/",
            "title": "服务端",
            "date_published": "2023-09-29T12:45:48.000Z",
            "content_html": "<h1 id=\"学习-pm2\"><a class=\"anchor\" href=\"#学习-pm2\">#</a> 学习 pm2</h1>\n<h2 id=\"pm2-node-应用进程管理器\"><a class=\"anchor\" href=\"#pm2-node-应用进程管理器\">#</a> PM2 Node 应用进程管理器</h2>\n<p>pm2 是 node 进程管理工具，可以利用它来简化很多 node 应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，因为在工作中遇到服务器重启后，需要一个个去重新启动每个服务，这样不仅繁琐、效率低，而且容易遗忘开启一些服务。</p>\n<h2 id=\"pm2-的主要特性\"><a class=\"anchor\" href=\"#pm2-的主要特性\">#</a> PM2 的主要特性</h2>\n<ul>\n<li>内建负载均衡（使用 Node cluster 集群模块）</li>\n<li>后台运行</li>\n<li>0 秒停机重载</li>\n<li>具有 Ubuntu 和 CentOS 的启动脚本</li>\n<li>停止不稳定的进程（避免无限循环）</li>\n<li>控制台检测</li>\n<li>提供 HTTP API</li>\n<li>远程控制和实时的接口 API (Nodejs 模块，允许和 PM2 进程管理器交互)</li>\n</ul>\n<ol>\n<li>安装 &amp; 目录<br />\n运行以下命令进行全局安装：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> pm2</pre></td></tr></table></figure><ol start=\"2\">\n<li>常用命令</li>\n</ol>\n<ul>\n<li>启动命令</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 start app.js</pre></td></tr></table></figure><ul>\n<li>命令行参数<br />\n我们可以在最基本的启动命令后面，添加一些参数选项，去满足我们的需求，常用的参数选项如下所示：<br />\n--watch：监听应用目录的变化，一旦发生变化，自动重启。<br />\n-i or --instance：启用多少个实例，可用于负载均衡，如果 -i 0 或者 -i max，则根据当前机器核数确定实例数目。<br />\n--ignore-watch：排除监听的目录或文件，可以是特定的文件名，也可以是正则。</li>\n</ul>\n<p>我们在启动命令后面加入以上的一些参数，完整的启动命令如下所示：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pm2 start app.js <span class=\"token parameter variable\">--watch</span> <span class=\"token parameter variable\">-i</span> max <span class=\"token parameter variable\">-n</span> xiaoman</pre></td></tr></table></figure><ol start=\"3\">\n<li>重启命令</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 restart app.js</pre></td></tr></table></figure><ol start=\"4\">\n<li>停止命令<br />\n停止特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令停止相应的应用；</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 stop app_name <span class=\"token operator\">|</span> app_id</pre></td></tr></table></figure><p>如果需要停止全部的应用，则使用以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 stop all</pre></td></tr></table></figure><ol start=\"5\">\n<li>删除命令<br />\n删除特定的应用，可以通过 pm2 list 先获取应用的名字或者进程的 id，然后再调用以下命令删除相应的应用；</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 delete app_name <span class=\"token operator\">|</span> app_id</pre></td></tr></table></figure><p>如果需要删除全部的应用，则使用以下命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 delete all</pre></td></tr></table></figure><ol start=\"6\">\n<li>查看有哪些进程</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 list</pre></td></tr></table></figure><h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>如果我们使用命令行参数定义一些选项，那么每次启动进程时，都需要敲上一大堆的命令，非常繁琐；所以我们可以使用配置文件来将命令行参数进行配置，配置文件里的配置项跟命令行参数是基本一致的；如下所示 pm2 的配置文件 pm2.json ，然后在 package.json 文件中配置启动命令 &quot;pm2&quot;: &quot;pm2 start pm2.json&quot; ，这样我们只需要运行 npm run pm2 就可以使用 pm2 启动我们的 express 项目，并且相关运行参数直接在 pm2.json 中配置好了。相关配置项表示的意义在下面文件中都已经注释说明</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string-property property\">\"apps\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string-property property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"express_project\"</span><span class=\"token punctuation\">,</span>       <span class=\"token comment\">// 项目名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string-property property\">\"script\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"app.js\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 执行文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string-property property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span>                     <span class=\"token comment\">// 根目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string-property property\">\"args\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">// 传递给脚本的参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string-property property\">\"interpreter\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>               <span class=\"token comment\">// 指定的脚本解释器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string-property property\">\"interpreter_args\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>          <span class=\"token comment\">// 传递给解释器的参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string-property property\">\"watch\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// 是否监听文件变动然后重启</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string-property property\">\"ignore_watch\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>                <span class=\"token comment\">// 不用监听的文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token string\">\"public\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string-property property\">\"exec_mode\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cluster_mode\"</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// 应用启动模式，支持 fork 和 cluster 模式</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string-property property\">\"instances\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"max\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 应用启动实例个数，仅在 cluster 模式有效 默认为 fork</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string-property property\">\"error_file\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./logs/app-err.log\"</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\">// 错误日志文件</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string-property property\">\"out_file\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./logs/app-out.log\"</span><span class=\"token punctuation\">,</span>           <span class=\"token comment\">// 正常日志文件</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string-property property\">\"merge_logs\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// 设置追加日志而不是新建日志</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string-property property\">\"log_date_format\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"YYYY-MM-DD HH:mm:ss\"</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// 指定日志文件的时间格式</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string-property property\">\"min_uptime\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"60s\"</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 应用运行少于时间被认为是异常启动</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string-property property\">\"max_restarts\"</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// 最大异常重启次数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string-property property\">\"autorestart\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>                        <span class=\"token comment\">// 默认为 true, 发生异常的情况下自动重启</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token string-property property\">\"restart_delay\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"60\"</span>                       <span class=\"token comment\">// 异常重启情况下，延时重启时间</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token string-property property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>           <span class=\"token string-property property\">\"NODE_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"production\"</span><span class=\"token punctuation\">,</span>                <span class=\"token comment\">// 环境参数，当前指定为生产环境</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>           <span class=\"token string-property property\">\"REMOTE_ADDR\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string-property property\">\"env_dev\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token string-property property\">\"NODE_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// 环境参数，当前指定为开发环境</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token string-property property\">\"REMOTE_ADDR\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token string-property property\">\"env_test\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span>                               <span class=\"token comment\">// 环境参数，当前指定为测试环境</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token string-property property\">\"NODE_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token string-property property\">\"REMOTE_ADDR\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"高阶应用\"><a class=\"anchor\" href=\"#高阶应用\">#</a> 高阶应用</h2>\n<ol>\n<li>负载均衡<br />\n可以使用 -i 参数配置集群数，实现负载均衡，相关命令如下</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 start app.js <span class=\"token parameter variable\">-i</span> <span class=\"token number\">3</span> // 开启三个进程</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ pm2 start app.js <span class=\"token parameter variable\">-i</span> max // 根据机器CPU核数，开启对应数目的进程</pre></td></tr></table></figure><ol start=\"2\">\n<li>日志查看<br />\n我们可以通过打开日志文件查看日志外，还可以通过 pm2 logs 来查看实时日志，这点有对于线上问题排查；日志查看命令如下：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 logs</pre></td></tr></table></figure><ol start=\"3\">\n<li>监控<br />\n我们可以使用以下命令，查看当前通过 pm2 运行的进程的状态；</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ pm2 monit</pre></td></tr></table></figure><h1 id=\"linux\"><a class=\"anchor\" href=\"#linux\">#</a> Linux</h1>\n<h2 id=\"认识-linux\"><a class=\"anchor\" href=\"#认识-linux\">#</a> 认识 Linux</h2>\n<p>是一个基于 POSIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。它能运行主要的 Unix 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>\n<ol>\n<li>\n<p>使用 SSH 连接服务器<br />\n window 安装 SSH（安装地址） <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tbHMtc29mdHdhcmUuY29tL29wZW5zc2hkLmh0bWw=\">mls-software.com</span><br />\nMacbook 免安装自带</p>\n</li>\n<li>\n<p>使用方式<br />\n打开终端，输入：<br />\n <code>ssh  账号默认root@服务器地址</code> <br />\n例子：  <code>ssh root@123.456.789</code>  然后选择 Y ，然后输入密码即可</p>\n</li>\n<li>\n<p>基本命令</p>\n</li>\n</ol>\n<ul>\n<li><code>ls</code>  : 用来查看当前的目录的文件</li>\n<li><code>cd</code>  : 用来切换目录</li>\n<li><code>wget</code>  : 用来下载一些东西<br />\n下载 nodejs:  <code>wget https://cdn.npmmirror.com/binaries/node/v14.19.1/node-v14.19.1-linux-x64.tar.xz</code> <br />\n 下载完成后解压，使用 <code>tar</code>  命令：</li>\n<li>-c: 压缩</li>\n<li>-x：解压</li>\n<li>-t：查看内容</li>\n<li>-r：向压缩归档文件末尾追加文件</li>\n<li>-u：更新原压缩包中的文件<br />\n这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。下面的参数是根据需要在压缩或解压档案时可选的:</li>\n<li>-z：有 gzip 属性的</li>\n<li>-j：有 bz2 属性的</li>\n<li>-Z：有 compress 属性的</li>\n<li>-v：显示所有过程</li>\n<li>-O：将文件解开到标准输出<br />\n下面的参数 - f 是必须的:-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</li>\n</ul>\n<p><code>tar -xf all.tar</code> : 这条命令是解出 all.tar 包中所有文件，-x 是解开的意思<br />\n <code>tar -cf all.tar *.jpg</code>  这条命令是将所有.jpg 的文件打成一个名为 all.tar 的包。-c 是表示产生新的包，-f 指定包的文件名。</p>\n<ol start=\"4\">\n<li>配置环境变量<br />\n <code>pwd</code>  用于显示工作目录<br />\n使用 pwd 命令获取 node bin 的位置<br />\n前往根目录下面的 etc/profile 此文件涉及系统的环境，即环境变量相关。这里修改会对所有用户起作用<br />\n使用 vi 命令编辑该文件 vi profile<br />\n 然后按一下 I 键 进入编辑模式<br />\n在最后一行添加： <code>export PATH=$PATH:你的目录/node-v14.19.1-linux-x64/bin</code> <br />\n 然后执行 source profile 或者重启 linux<br />\n 配置淘宝代理 npm config set registry <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG0udGFvYmFvLm9yZw==\">https://registry.npm.taobao.org</span></li>\n</ol>\n<h2 id=\"linux-文件属性\"><a class=\"anchor\" href=\"#linux-文件属性\">#</a> Linux 文件属性</h2>\n<h3 id=\"ls-l-查看文件属性信息可简写为ll\"><a class=\"anchor\" href=\"#ls-l-查看文件属性信息可简写为ll\">#</a>  <code>ls -l</code>  查看文件属性信息 (可简写为 <code>ll</code> )</h3>\n<ul>\n<li>\n<p>首字母作用<br />\n文件的开头对应是 -<br />\n 目录开头对应的是 d<br />\n 快捷方式对应的是 l<br />\nU 盘对应的是 b<br />\n 鼠标键盘等硬件对应的 c</p>\n</li>\n<li>\n<p><code>rwx</code> : 读 | 写 | 可执行，每三个一组（该文件创建者，该文件所在的用户组，其他用户权限）<br />\n <code>-</code>  为缺少权限，如缺少 “可执行” 权限，则为 <code>rw-</code></p>\n</li>\n</ul>\n<h2 id=\"linux-权限\"><a class=\"anchor\" href=\"#linux-权限\">#</a> Linux 权限</h2>\n<p>RWX 分别是可读 可写 可执行权限，这个权限我们可以修改使用 chmod 777 文件名<br />\n我们先学习一组规律：</p>\n<ul>\n<li>\n<p>读 ------R 对应数字 4</p>\n</li>\n<li>\n<p>写 ------W 对应数字 2</p>\n</li>\n<li>\n<p>可执行 -----X 对应数字 1</p>\n</li>\n</ul>\n<p>所以 7 就是可读可写可执行权限</p>\n",
            "tags": [
                "nodejs",
                "服务端"
            ]
        }
    ]
}