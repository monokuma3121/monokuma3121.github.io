{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucliの小窝 • All posts by \"算法\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/11/07/TS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88coderwhy%EF%BC%89/",
            "url": "https://eucli.top/2023/11/07/TS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88coderwhy%EF%BC%89/",
            "title": "TS数据结构与算法（coderwhy）",
            "date_published": "2023-11-07T13:45:48.000Z",
            "content_html": "<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>术之尽头，炁体源流<br />\n编程尽头，数据结构</p>\n<ul>\n<li>\n<p>编程的真相：数据的处理</p>\n<blockquote>\n<p>数据结构的本质是<strong>一门专门研究数据如何组织、存储和操作的科目</strong></p>\n</blockquote>\n</li>\n<li>\n<p>学习数据结构与算法的实际应用</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231017223537651.png\" alt=\"image-20231017223537651\" /></p>\n</li>\n<li>\n<p>常见数据结构与算法</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231017225224143.png\" alt=\"image-20231017225224143\" /></p>\n</li>\n<li>\n<p>高阶数据结构与算法</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231018093540755.png\" alt=\"image-20231018093540755\" /></p>\n</li>\n</ul>\n<blockquote>\n<p>常见数据结构：数组（Array）、栈结构（Stack）、队列（Queue）、链表（LinkedList）、堆结构（Heap）、树结构（Tree）、散列表（Hash）、图结构（Craph）</p>\n</blockquote>\n<ul>\n<li>\n<p>什么是数据结构</p>\n<p><code>存储和组织数据的方式</code></p>\n</li>\n<li>\n<p>什么是算法（算法的定义）</p>\n<ul>\n<li>\n<p>一个有限的指令集，每条指令的描述不依赖于语言</p>\n</li>\n<li>\n<p>接受一些输入（有些情况下不需要输入）</p>\n</li>\n<li>\n<p>产生输出</p>\n</li>\n<li>\n<p>一定在有限步骤之后终止</p>\n</li>\n</ul>\n<p>算法并不只是那些高大上的东西，你在一个函数（如 sum 函数、fomat 函数）里写的功能其实都是算法。</p>\n</li>\n</ul>\n<h1 id=\"一-数组-array\"><a class=\"anchor\" href=\"#一-数组-array\">#</a> 一、数组 Array</h1>\n<ul>\n<li>\n<p>线性结构</p>\n<blockquote>\n<p>线性结构是由 n（n≥0）个数据元素（结点）组成的有限序列</p>\n</blockquote>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231019222855252.png\" alt=\"image-20231019222855252\" /></p>\n</li>\n<li>\n<p>数组结构</p>\n<p>数组的内存是连续的，所以数组在知道下标值的情况下访问效率是非常高的</p>\n</li>\n</ul>\n<h1 id=\"二-栈-stack\"><a class=\"anchor\" href=\"#二-栈-stack\">#</a> 二、栈 Stack</h1>\n<h2 id=\"1-认识栈结构和特性\"><a class=\"anchor\" href=\"#1-认识栈结构和特性\">#</a> 1、认识栈结构和特性</h2>\n<p>我们知道数组是一种 <code>线性结构</code> ，并且可以在数组的 <code>任意位置</code> 插入和删除数据，但有时候我们为了实现某些功能，必须<strong>对任意性加以限制</strong>，而栈和队列就是比较常见的 <code>受限的线性结构</code></p>\n<ul>\n<li>\n<p>栈结构示意图</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231019224950547.png\" alt=\"image-20231019224950547\" /></p>\n</li>\n<li>\n<p>特性</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020212121813.png\" alt=\"image-20231020212121813\" /></p>\n</li>\n</ul>\n<h2 id=\"2-栈结构特性面试题\"><a class=\"anchor\" href=\"#2-栈结构特性面试题\">#</a> 2、栈结构特性 —— 面试题</h2>\n<ol>\n<li><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020212602906.png\" alt=\"image-20231020212602906\" /></li>\n</ol>\n<ul>\n<li>\n<p>解析</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020213129445.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p>​\t&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L2ltYWdlLTIwMjMxMDIwMjEzMjI5MDkzLnBuZw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020213229093.png</span>&quot; alt=&quot;image-20231020213229093&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ol start=\"2\">\n<li>\n<p>十进制转二进制</p>\n<blockquote>\n<p>要把十进制转二进制，是将十进制除二取余直到 0 为止，然后将各个余数<strong>从后往前排</strong>就是该十进制的二进制，可以利用栈结构的特点（后进先出）</p>\n</blockquote>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里用 string 是因为如果还是 number 二进制也会以十进制的形式表示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">decimalToBinary</span><span class=\"token punctuation\">(</span>decimal<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//1. 创建一个栈，用于存放余数 ArrayStack</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//2. 使用循环：while（不确定次数，只知道循环的结束条件） /for (知道循环的次数时)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>decimal <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> decimal <span class=\"token operator\">%</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      decimal <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>decimal <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//3. 所有的余数都已经放入了栈中，依次取出即可</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> binary <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binary <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> binary</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">decimalToBinary</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>有效的括号</p>\n<p>题目：给定一个只包含 <code>(</code> , <code>)</code> , <code>&#123;</code> , <code>&#125;</code> , <code>[</code> , <code>]</code>  的字符串 s，判断字符串是否有效</p>\n<blockquote>\n<p>括号必须成对出现，有一一对应关系，如 <code>(&#123;&#125;)[]</code> ，像 <code>([)]</code>  就不行。</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合</li>\n<li>左括号必须以正确顺序闭合</li>\n<li>每个右括号都有一个对应类型的左括号</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>\n<p>思路：将给的字符串做一个遍历，先判断左括号，每遍历到一个左括号就把对应类型的一个右括号压入栈中（注意不是压字符串的右括号），</p>\n<p><img data-src=\"C:%5CUsers%5Cmonokuma%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231028223114887.png\" alt=\"image-20231028223114887\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ArrayStack <span class=\"token keyword\">from</span> <span class=\"token string\">'地址'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//1. 创建栈结构</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//2. 遍历 s 中的所有的括号</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         cace <span class=\"token string\">\"(\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         cace <span class=\"token string\">\"&#123;\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         cace <span class=\"token string\">\"[\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">!==</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-实现栈结构封装\"><a class=\"anchor\" href=\"#3-实现栈结构封装\">#</a> 3、实现栈结构封装</h2>\n<h3 id=\"1-基于数组实现\"><a class=\"anchor\" href=\"#1-基于数组实现\">#</a> 1. 基于数组实现</h3>\n<ul>\n<li>\n<p>常见的栈有哪些操作呢？</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L2ltYWdlLTIwMjMxMDI0MTMxNTE4NTc2LnBuZw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231024131518576.png</span>&quot; alt=&quot;image-20231024131518576&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 封装一个栈</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义一个数组 / 链表，用于存储元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 实现栈中相关的操作方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//push 方法：将一个元素压入栈中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//pop 方法：将栈顶的元素弹出栈（返回出去，并且从栈顶移除掉）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//peek 方法：看一眼栈顶元素，但是不进行任何操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//isEmpty 方法：判断栈是否为空</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//size 方法：返回栈的数据的个数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 创建栈实例</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">const</span> stack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">const</span> stack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">124</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2-基于链表实现\"><a class=\"anchor\" href=\"#2-基于链表实现\">#</a> 2. 基于链表实现</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义栈的结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 封装一个栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//pop 方法：将栈顶的元素弹出栈（返回出去，并且从栈顶移除掉）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//peek 方法：看一眼栈顶元素，但是不进行任何操作</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//isEmpty 方法：判断栈是否为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//size 方法：返回栈的数据的个数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"三-队列-queue\"><a class=\"anchor\" href=\"#三-队列-queue\">#</a> 三、队列 Queue</h1>\n<h2 id=\"1-认识队列和其特性\"><a class=\"anchor\" href=\"#1-认识队列和其特性\">#</a> 1、认识队列和其特性</h2>\n<p>队列也是一种受限的线性结构，其特性为<strong>先进先出</strong>，队列结构还有两个特点：</p>\n<ul>\n<li>只允许在队列的 ** 前端 (front)** 进行 <code>删除</code> 操作</li>\n<li>在队列的 ** 后端 (rear)** 进行 <code>插入</code> 操作</li>\n</ul>\n<p>队列在开发中还有很多应用，如线程队列，很多算法也会用到队列（如二叉树中的层序遍历）</p>\n<h2 id=\"2-实现队列结构封装\"><a class=\"anchor\" href=\"#2-实现队列结构封装\">#</a> 2、实现队列结构封装</h2>\n<ul>\n<li>\n<p>队列的常见操作</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/IMG_20231029_224210.jpg\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"1-基于数组实现-2\"><a class=\"anchor\" href=\"#1-基于数组实现-2\">#</a> 1. 基于数组实现</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 入队方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 出队方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 返回队列中第一个元素</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 元素的个数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 内部使用过数组（链表保存）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  pivate data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nba\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 用了 get，就不用加括号调用了</span></pre></td></tr></table></figure><h3 id=\"2-基于链表实现性能更好\"><a class=\"anchor\" href=\"#2-基于链表实现性能更好\">#</a> 2. 基于链表实现（性能更好）</h3>\n<h2 id=\"3-队列结构常见方法\"><a class=\"anchor\" href=\"#3-队列结构常见方法\">#</a> 3、队列结构常见方法</h2>\n<h2 id=\"4-队列结构面试题\"><a class=\"anchor\" href=\"#4-队列结构面试题\">#</a> 4、队列结构面试题</h2>\n<h3 id=\"击鼓传花\"><a class=\"anchor\" href=\"#击鼓传花\">#</a> 击鼓传花</h3>\n<p>几个人围成一圈，开始数数，数到某个数字 (假设是 3) 的人自动淘汰，最后剩下的人会获得胜利，问最后这个人的名字或者位置？</p>\n<blockquote>\n<p>循环：queue.size ()&gt; 1<br />\n 循环体内完成什么操作：</p>\n<ol>\n<li>数的是 1，2 的人，操作出队 -&gt; 入队</li>\n<li>数的是 3 的人，只出队，不需要入队<br />\n return queue.dequeue ()</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ArrayQueue <span class=\"token keyword\">from</span> <span class=\"token string\">'地址'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hotPotato</span><span class=\"token punctuation\">(</span>names<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 将所有的 name 入队操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">of</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 淘汰的规则</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//1,2 不淘汰</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//3 淘汰</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> lastName <span class=\"token operator\">=</span> <span class=\"token function\">hotPotato</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"james\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kobe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"curry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"约瑟夫环\"><a class=\"anchor\" href=\"#约瑟夫环\">#</a> 约瑟夫环</h3>\n<ul>\n<li>\n<p>0,1,・・・,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数），求出这个圆圈里剩下的最后一个数字<br />\n例如：0、1、2、3、4 这 5 个人数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3</p>\n</li>\n<li>\n<p>代码实现</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ArrayQueue <span class=\"token keyword\">from</span> <span class=\"token string\">'地址'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 将所有数字加入到队列中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 判断队列中是否还有数字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>！</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>动态规划实现</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> i</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> position</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"四-链表-linkedlist\"><a class=\"anchor\" href=\"#四-链表-linkedlist\">#</a> 四、链表 LinkedList</h1>\n<h2 id=\"1-认识链表及其特性\"><a class=\"anchor\" href=\"#1-认识链表及其特性\">#</a> 1、认识链表及其特性</h2>\n<p>链表和数组一样可以用于存储一系列的元素，但链表和数组的实现机制完全不同</p>\n<blockquote>\n<p>数组也有很多缺点:</p>\n<ul>\n<li>数组创建通常需要申请一段<strong>连续的内存</strong>，并且大小是需要扩容固定的，所有当前数组不能满足容量需求时</li>\n<li>在<strong>数组开头或中间插入数据的成本很</strong>高，需要进行大量元素的位移</li>\n</ul>\n</blockquote>\n<ul>\n<li>相对于数组，链表的优点</li>\n</ul>\n<ol>\n<li>链表的元素在内存中<strong>不必是连续的空间</strong>。链表的每个元素由一个 <code>存储元素本身的节点</code> 和一个 <code>指向下一个元素的引用</code> （也可称为指针）组成</li>\n<li>链表不必在创建时就确定大小，并且可以无限的延伸下去</li>\n<li>链表在插入和删除数据时，时间复杂度可以达到 O (1)</li>\n</ol>\n<ul>\n<li>相对于数组，链表的缺点</li>\n</ul>\n<ol>\n<li>链表访问任何一个位置的元素时，需要从头开始访问（无法跳过第一个元素访问任何一个元素）</li>\n<li>无法通过下标直接访问元素，需要从头一个个访问，直到找到对应元素</li>\n</ol>\n<p>链表类似于火车，有车厢和连接下一个车厢的节点<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/IMG_20231030_220108.jpg\" alt=\"链表的火车结构\" /><br />\n item 是 “车厢” 的数据，也可以叫 value、element 等</p>\n<h2 id=\"2-封装链表的类结构\"><a class=\"anchor\" href=\"#2-封装链表的类结构\">#</a> 2、封装链表的类结构</h2>\n<p>要封装两个类</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 创建 Node 节点类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  value<span class=\"token operator\">:</span><span class=\"token constant\">T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  next<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">// 默认值设置为 null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//2. 创建 LinkedList 类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  head<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  size<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3-封装链表相关方法\"><a class=\"anchor\" href=\"#3-封装链表相关方法\">#</a> 3、封装链表相关方法</h2>\n<ul>\n<li>链表常见方法：\n<ul>\n<li>append (element): 向链表尾部插入一个新的项</li>\n<li>insert (position,element): 向链表的特定位置插入一个新的项</li>\n<li>get (position): 获取对应位置的元素</li>\n<li>indexOf (element): 返回元素在链表中的索引，如果链表中没有该元素则返回 - 1</li>\n<li>update (position,element): 修改某个元素的位置</li>\n<li>removeAt (position): 从链表的特定位置移除一项</li>\n<li>remove (element): 从链表中移除一项</li>\n<li>isEmptu (): 如果链表不包含任何元素，返回 true，否则返回 false</li>\n<li>size (): 返回链表包含的元素个数，与数组的 length 属性类型</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-append方法\"><a class=\"anchor\" href=\"#1-append方法\">#</a> 1. append 方法</h3>\n<p>向链表尾部追加数据可能有两种情况：</p>\n<ul>\n<li>链表本身为空，新添加的数据为唯一的节点</li>\n<li>链表不为空，需要在其他节点后面追加节点</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 创建 Node 节点类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  value<span class=\"token operator\">:</span><span class=\"token constant\">T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  next<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">// 默认值设置为 null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//2. 创建 LinkedList 类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  head<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  size<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//1. 根据 value 创建一个新节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//2. 判断链表是否为空（即 this.head 是否为 null）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newNode</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 创建一个临时变量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 出了循环，就说明此时 current 肯定是指向最后一个节点的，这时候为最后的节点连接上新添加的节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//size 增加</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// 遍历链表并打印的方法</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">const</span> values<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">const</span> LinkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>LinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>LinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2-insert方法\"><a class=\"anchor\" href=\"#2-insert方法\">#</a> 2. insert 方法</h3>\n<ul>\n<li>确定 position 的边界</li>\n<li>插入的位置有两种情况：\n<ul>\n<li>插入到最前面</li>\n<li>插入到其他地方</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//2. 根据 value 创建一个新的节点（待插入）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//3. 判断是否插入到头部</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newNode <span class=\"token comment\">// 这两行代码不能反过来，不然头结点和新插入的节点就会互相指向，独立出来了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 这里用双指针，previous 表示 current 的前一个节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">let</span> previous<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      previous <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 跳出循环表示此时 index === position</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    previous<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3-removeat\"><a class=\"anchor\" href=\"#3-removeat\">#</a> 3. removeAt</h3>\n<p>两种情况：</p>\n<ul>\n<li>移除第一项信息<br />\n移除第一项时，直接让 head 指向第二项信息就可以了。之后因为第一项信息没有引用指向，就在链表中不再有效，后面会被回收掉</li>\n<li>移除其他项信息<br />\n移除其他项的信息操作方式是相同的。首先，通过 while 循环找到正确的位置，然后就可以直接将上一项 previous 的 next 指向 current 项的 next，这样中间的项就没有引用指向它，之后会被回收</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除方法（根据位置移除对应数据）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//2. 判断删除的是不是第一个节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> previous<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      previous <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 跳出循环表示此时 index === position, 找到了需要的节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    previous<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token operator\">?.</span>next <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-get方法\"><a class=\"anchor\" href=\"#4-get方法\">#</a> 4. get 方法</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取对应位置的元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//2. 查找并返回元素</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 查找到元素，返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> current<span class=\"token operator\">?.</span>value <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-封装私有方法\"><a class=\"anchor\" href=\"#5-封装私有方法\">#</a> 5. 封装私有方法</h3>\n<h3 id=\"根据position获取当前的节点注意不是节点的值而是获取节点本身\"><a class=\"anchor\" href=\"#根据position获取当前的节点注意不是节点的值而是获取节点本身\">#</a> 根据 position 获取当前的节点（注意不是节点的值，而是获取节点本身）</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> current</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样， <code>current = this.getNode(position)</code> , <code>previous = this.getNode(position-1)</code></p>\n<h3 id=\"6-update方法\"><a class=\"anchor\" href=\"#6-update方法\">#</a> 6. update 方法</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 获取相应位置节点，直接更新即可</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"7-indexof方法\"><a class=\"anchor\" href=\"#7-indexof方法\">#</a> 7. indexOf 方法</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据值，获取对应位置的索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 从第一个节点开始向后遍历</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> index</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    index<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"8-remove\"><a class=\"anchor\" href=\"#8-remove\">#</a> 8. remove</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除方法（根据元素移除对应数据）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4-链表常见的面试题\"><a class=\"anchor\" href=\"#4-链表常见的面试题\">#</a> 4、链表常见的面试题</h2>\n<h3 id=\"1-面试题一手写链表\"><a class=\"anchor\" href=\"#1-面试题一手写链表\">#</a> 1. 面试题一：手写链表</h3>\n<p>见上文</p>\n<h3 id=\"2-面试题二删除链表中的节点\"><a class=\"anchor\" href=\"#2-面试题二删除链表中的节点\">#</a> 2. 面试题二：删除链表中的节点</h3>\n<blockquote>\n<ul>\n<li>\n<p>有一个单链表的 head，我们想删除它其中一个节点 node</p>\n<p>条件：</p>\n<ul>\n<li>给你一个需要删除的节点</li>\n<li>你无法访问第一个节点 head</li>\n</ul>\n</li>\n<li>\n<p>链表的所有值都是唯一的，并且保证给定的节点 node 不是链表中最后一个节点</p>\n</li>\n<li>\n<p>注意，删除节点并不是指从内存中删除它。这里的意思是：</p>\n<ul>\n<li>给定节点的指不应该存在于链表中</li>\n<li>链表中的节点数应该减一</li>\n<li>node 前面的所有值顺序相同</li>\n<li>node 后面的所有值顺序相同</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/IMG_20231103_214705-2023-11-4.jpg\" alt=\"IMG_20231103_214705-2023-11-4.jpg\" /></p>\n<blockquote>\n<p>思路：</p>\n<ol>\n<li>把 &quot;5&quot; 改成 &quot;1&quot;</li>\n<li>让 value 为 &quot;5&quot; 的节点的 next 指向其 next 的 next（即指向 &quot;9&quot;）</li>\n<li>这样虽然看起来是把值为 &quot;1&quot; 的节点删了，但因为第一步 &quot;5&quot; 已改成 &quot;1&quot; 了，所以相当于有两个 &quot;1&quot; 节点，删掉一个还剩一个，就等于删掉了 &quot;5&quot;</li>\n</ol>\n</blockquote>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMTY5OTA3MjMwNTg0OC0yMDIzLTExLTQuanBn\">https://gitee.com/eucli312/img/raw/master/1699072305848-2023-11-4.jpg</span>&quot; alt=&quot;IMG_20231103_214705-2023-11-4.jpg&quot; style=&quot;zoom:150%;&quot; /&gt;</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    val<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    next<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span><span class=\"token operator\">?</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>next<span class=\"token operator\">?</span><span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 在这里写代码实现功能</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>val</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3-面试题三反转链表\"><a class=\"anchor\" href=\"#3-面试题三反转链表\">#</a> 3. 面试题三：反转链表</h3>\n<p>p998</p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/Screenshot_2023-11-04-22-23-09-676_com.baidu.netd-2023-11-4.jpg\" alt=\"Screenshot_2023-11-04-22-23-09-676_com.baidu.netd-2023-11-4.jpg\" /></p>\n<h4 id=\"31-反转链表非递归\"><a class=\"anchor\" href=\"#31-反转链表非递归\">#</a> 3.1 反转链表（非递归）</h4>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/Screenshot_2023-11-05-22-35-01-424_com.baidu.netd-2023-11-5.jpg\" alt=\"Screenshot_2023-11-05-22-35-01-424_com.baidu.netd-2023-11-5.jpg\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699195871664-2023-11-5.jpg\" alt=\"1699195871664-2023-11-5.jpg\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/Screenshot_2023-11-05-22-49-06-382_com.baidu.netd-2023-11-5.jpg\" alt=\"Screenshot_2023-11-05-22-49-06-382_com.baidu.netd-2023-11-5.jpg\" /></p>\n<blockquote>\n<ol>\n<li>\n<p>让 current 节点指向 head 节点的下一个节点。（目的：保留下一个节点的引用，保证其可以拿到且不会因为之后没有被引用而被销毁）</p>\n</li>\n<li>\n<p>改变 head 当前指向的节点，令其指向 newHead。（对于第一个节点来说，指向 newHead 就是指向 null）</p>\n</li>\n<li>\n<p>让 newHead 指向 head 节点。（目的：下一次遍历时，第二步可以让下一节点指向第一个节点）</p>\n</li>\n<li>\n<p>让 head 移动到下一个节点：即让 head 指向 current</p>\n</li>\n</ol>\n<p>进行一次上面的操作可以反转一个节点</p>\n</blockquote>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    val<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    next<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span><span class=\"token operator\">?</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>next<span class=\"token operator\">?</span><span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 在这里写代码实现功能</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//1. 判断节点为 null 或者只有一个节点，那么直接返回即可</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//2. 反转链表结构</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">let</span> newHead<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">let</span> current<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newHead</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      newHead <span class=\"token operator\">=</span> head</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      head <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> newHead</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"32-反转链表递归\"><a class=\"anchor\" href=\"#32-反转链表递归\">#</a> 3.2 反转链表（递归）</h4>\n<p>p999</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc5M1NjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi0xOC0yNC02NDBfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-793Screenshot_2023-11-06-22-18-24-640_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-793Screenshot_2023-11-06-22-18-24-640_com.baidu.netd.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc5MlNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi0xOS00OC01NzRfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-792Screenshot_2023-11-06-22-19-48-574_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-792Screenshot_2023-11-06-22-19-48-574_com.baidu.netd.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc4OVNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi0yMS0xOS03NzJfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-789Screenshot_2023-11-06-22-21-19-772_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-789Screenshot_2023-11-06-22-21-19-772_com.baidu.netd.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 在这里写代码实现功能</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 如果使用的是递归，那么递归必须要有结束条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> newHead <span class=\"token operator\">=</span>  <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">?.</span>next <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 完成想要的操作是在这个位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 第一次来到这里的时候，是倒数第二个节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> newHead</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5-算法的复杂度分析\"><a class=\"anchor\" href=\"#5-算法的复杂度分析\">#</a> 5、算法的复杂度分析</h2>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc5MFNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi00MS0wNS03MTRfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-790Screenshot_2023-11-06-22-41-05-714_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-790Screenshot_2023-11-06-22-41-05-714_com.baidu.netd.jpg&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc4NlNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi00NS00NS01NDBfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-786Screenshot_2023-11-06-22-45-45-540_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-786Screenshot_2023-11-06-22-45-45-540_com.baidu.netd.jpg&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h2 id=\"6-数组和链表的对比\"><a class=\"anchor\" href=\"#6-数组和链表的对比\">#</a> 6、数组和链表的对比</h2>\n",
            "tags": [
                "TS",
                "算法"
            ]
        }
    ]
}