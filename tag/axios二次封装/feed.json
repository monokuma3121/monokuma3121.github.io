{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucli • All posts by \"axios二次封装\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/04/14/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "url": "https://eucli.top/2023/04/14/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "title": "axios二次封装",
            "date_published": "2023-04-14T12:58:34.000Z",
            "content_html": "<h1 id=\"前端-后端-数据库间的数据传输\"><a class=\"markdownIt-Anchor\" href=\"#前端-后端-数据库间的数据传输\">#</a> 前端 - 后端 - 数据库间的数据传输</h1>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92.png\" alt=\"(数据交互)\"></p>\n<h1 id=\"前端请求流程\"><a class=\"markdownIt-Anchor\" href=\"#前端请求流程\">#</a> 前端请求流程</h1>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%8B%BF%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.png\" alt=\"(前端请求流程)\"></p>\n<h1 id=\"不进行封装直接使用-axios-一般有两种方式\"><a class=\"markdownIt-Anchor\" href=\"#不进行封装直接使用-axios-一般有两种方式\">#</a> 不进行封装直接使用 axios 一般有两种方式：</h1>\n<h2 id=\"1-axiosget-axiospost\"><a class=\"markdownIt-Anchor\" href=\"#1-axiosget-axiospost\">#</a> 1.  <code>axios.get()</code> 、 <code>axios.post()</code></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;url?参数1=值&amp;参数2=值&quot;</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;url&#x27;</span>,&#123;</span><br><span class=\"line\">  参数<span class=\"number\">1</span>:值，</span><br><span class=\"line\">  参数<span class=\"number\">2</span>:值</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-axios\"><a class=\"markdownIt-Anchor\" href=\"#2-axios\">#</a> 2.  <code>axios(&#123;&#125;)</code></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;请求的路径&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&quot;请求的方式，默认是get&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;&#125;, <span class=\"comment\">//get请求方式：前端给后端传递的数据</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;&#125;, <span class=\"comment\">//post请求方式：前端给后端传递的数据</span></span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;&#125;, <span class=\"comment\">//自定义请求头</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>, <span class=\"comment\">//如果请求超过timeout的值，请求会中断</span></span><br><span class=\"line\">  <span class=\"attr\">responseType</span>: <span class=\"string\">&quot;默认是json&quot;</span>, <span class=\"comment\">// 表示浏览器将要响应的数据类型</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-实际开发情况下的网络请求\"><a class=\"markdownIt-Anchor\" href=\"#2-实际开发情况下的网络请求\">#</a> 2. 实际开发情况下的网络请求</h1>\n<h1 id=\"实际开发中前端请求接口会出现跨域\"><a class=\"markdownIt-Anchor\" href=\"#实际开发中前端请求接口会出现跨域\">#</a> 实际开发中，前端请求接口会出现跨域</h1>\n<p>控制台打印 <code>CORS   &quot;NO 'Access-Control-Allow-Origin' ……&quot;</code></p>\n<h2 id=\"解决跨域前端解决-设置代理\"><a class=\"markdownIt-Anchor\" href=\"#解决跨域前端解决-设置代理\">#</a> 解决跨域：前端解决 ——&gt; 设置代理</h2>\n<p>vue 项目，在  <code>vue.config.js</code>  中配置  <code>devServer</code> <br>\n 配置参考：<a href=\"https://cli.vuejs.org/zh/config\">https://cli.vuejs.org/zh/config</a><br>\n 说明：如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在 <code>开发环境下</code> 将 API 请求代理到 API 服务器<br>\n具体配置，在  <code>vue.config.js</code>  文件中加入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">proxy</span>: <span class=\"string\">&quot;http://localhost:4000&quot;</span>; <span class=\"comment\">//后端API服务器地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代理之后  <code>axios</code>  请求的时候就不用写地址全拼了，直接写代理地址后面的就行</li>\n</ul>\n<h1 id=\"主要的文件\"><a class=\"markdownIt-Anchor\" href=\"#主要的文件\">#</a> 主要的文件</h1>\n<ul>\n<li><code>src/utils/request.js</code>  `：用于二次封装 axios</li>\n<li><code>src/api</code>  ：用于统一管理接口</li>\n<li><code>src/.env.development</code>  ：开发环境</li>\n<li><code>src/.env.production</code>  ：生产环境</li>\n<li><code>vite.config.js</code> ：配置代理</li>\n</ul>\n<h2 id=\"前端请求接口的封装axios-二次封装\"><a class=\"markdownIt-Anchor\" href=\"#前端请求接口的封装axios-二次封装\">#</a> 前端请求接口的封装 (axios 二次封装)</h2>\n<p>在  <code>src/utils/request.js:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**1.引入axios */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**2.创建axios实例 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>: <span class=\"string\">&#x27;foobar&#x27;</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**3.请求拦截器 */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建请求拦截  前端给后端的东西(没有到后端)</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**在发送请求之前做些什么==&gt; 判断用户登录状态 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**4.响应拦截器 */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建响应拦截  后端给前端的东西</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 处理自己的业务逻辑，比如判断 token 是否过期等等 request</span></span><br><span class=\"line\">    <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(message);</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> instance;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"api-接口统一管理\"><a class=\"markdownIt-Anchor\" href=\"#api-接口统一管理\">#</a> api 接口统一管理</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/request&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询课程接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> courseSearch = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data <span class=\"comment\">//因为不同的页面对参数配置的值的需求不一样，所以作为形参让用户自己传过来 get请求是params，post请求是data</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用请求\"><a class=\"markdownIt-Anchor\" href=\"#使用请求\">#</a> 使用请求</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//某个需要用到“查询课程接口”的vue文件</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;courseSearch&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/course.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">……</span><br><span class=\"line\"><span class=\"title function_\">courseSearch</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//传入需求的参数的值</span></span><br><span class=\"line\">  <span class=\"attr\">pageNum</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">pageSize</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">……</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "axios二次封装"
            ]
        }
    ]
}