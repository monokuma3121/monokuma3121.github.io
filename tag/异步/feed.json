{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucli • All posts by \"异步\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/07/05/%E5%BC%82%E6%AD%A5async%E3%80%81await/",
            "url": "https://eucli.top/2023/07/05/%E5%BC%82%E6%AD%A5async%E3%80%81await/",
            "title": "异步async、await",
            "date_published": "2023-07-05T04:35:00.000Z",
            "content_html": "<p>b 站讲解：<a href=\"https://www.bilibili.com/video/BV1WP4y187Tu/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ff247772a62ee9c3b2ed27fa5e4a91e2\">https://www.bilibili.com/video/BV1WP4y187Tu/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ff247772a62ee9c3b2ed27fa5e4a91e2</a></p>\n<h1 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步</h1>\n<p>js 中异步有两种方式实现：</p>\n<ol>\n<li>回调函数，如 setTimeOut。但是会回调地狱</li>\n<li>Promise。“承诺”：承诺会在未来的某个时刻返回数据。链式调用，避免代码的层层嵌套</li>\n</ol>\n<h1 id=\"asyncawait是什么\"><a class=\"markdownIt-Anchor\" href=\"#asyncawait是什么\">#</a> async/await 是什么</h1>\n<p>async/await 是 ES2017 (ES8) 提出的基于 Promise 的解决异步的最终方案，是一个语法糖。<br>\nasync 是 “异步” 的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>\n<p>一个问题：await 只能出现在 async 函数中，那这个 async 函数应该怎么调用？如果需要通过 await 来调用一个 async 函数，那这个调用的外面必须得再包一个 async 函数，然后…… 进入死循环，永无出头之日……<br>\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，我们当然应该用原来的方式：then () 链来处理这个 Promise 对象</p>\n<h2 id=\"async\"><a class=\"markdownIt-Anchor\" href=\"#async\">#</a> async</h2>\n<p>async 是一个加在函数前的修饰符，被 async 定义的函数会默认返回一个 Promise 对象 resolve 的值。因此对 async 函数可以直接 then，返回值就是 then 方法传入的函数。</p>\n<h2 id=\"await\"><a class=\"markdownIt-Anchor\" href=\"#await\">#</a> await</h2>\n<p>await 也是一个修饰符，只能放在 async 定义的函数内。可以理解为<strong>等待</strong>。可以不再使用 then 直接使用 await</p>\n<ul>\n<li>\n<p>await 到底在等啥？<br>\n一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。<br>\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值 —— 这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。</p>\n</li>\n<li>\n<p>await 等到了要等的，然后呢？<br>\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p>\n</li>\n</ul>\n<ol>\n<li>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</li>\n<li>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</li>\n</ol>\n<blockquote>\n<p>看到上面的阻塞一词，心慌了吧…… 放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n</blockquote>\n<p>——————————————————<br>\n 使用 async 和 await 可以让我们写出更清晰、更容易理解的异步代码，有了它们之后，我们几乎不再需要使用底层的 Promise 对象，包括调用它的 then (),catch () 函数等等</p>\n",
            "tags": [
                "异步"
            ]
        }
    ]
}