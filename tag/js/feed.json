{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucliの小窝 • All posts by \"js\" tag",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/11/05/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://eucli.top/2023/11/05/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "JS基础",
            "date_published": "2023-11-05T13:45:48.000Z",
            "content_html": "<h1 id=\"js基础\"><a class=\"anchor\" href=\"#js基础\">#</a> JS 基础</h1>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"基本类型有7种-undefined-null-string-number-boolean-bigint-symbol\"><a class=\"anchor\" href=\"#基本类型有7种-undefined-null-string-number-boolean-bigint-symbol\">#</a> 基本类型有 7 种：  <code>undefined</code> 、 <code>null</code> 、 <code>string</code> 、 <code>number</code> 、 <code>boolean</code> 、 <code>bigint</code> 、 <code>symbol</code></h3>\n<h3 id=\"引用类型有-object-array\"><a class=\"anchor\" href=\"#引用类型有-object-array\">#</a> 引用类型有：  <code>Object</code> 、 <code>Array</code></h3>\n<h2 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> For 循环</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>of<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>数组原型链上的方法可能经常会拿出来单独考，如果平时不常使用就很容易卡壳，可以从数组去重这个切入点来巩固 for 循环。</p>\n</blockquote>\n<h3 id=\"数组方法\"><a class=\"anchor\" href=\"#数组方法\">#</a> 数组方法：</h3>\n<blockquote>\n<p>数组常考，实际开发中也常用，需要尽量全面地了解。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>push：末尾添加</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unshift：首部添加</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pop：末尾删除</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shift：首部删除</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>concat：数组合并</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>join：数组元素通过连接符变成字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>reverse：数组反转</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sort：数组排序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flat：数组拍平</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">slice</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>：切割，不改变原数组，返回新数组</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">splice</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>：切割，改变数组，从指定位置开始删除，同时可插入新元素</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>indexOf：查找元素下标</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>map、foreach、filter <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<blockquote>\n<p>简单来说就是函数中嵌套函数，这个内部函数暴露给了外部调用。作用是可以访问局部变量，缺点是容易发生内存泄漏（即变量不会被自动回收）。</p>\n</blockquote>\n<ol>\n<li>可以用来封装私有变量，编写 JS 库 / 插件可能会用到</li>\n<li>用来实现节流这类函数</li>\n<li>可以作为缓存数据的一种策略</li>\n</ol>\n<h2 id=\"原型链\"><a class=\"anchor\" href=\"#原型链\">#</a> 原型链</h2>\n<p>每个函数都有  <code>prototype</code>  属性，每个函数实例对象都有一个  <code>__proto__</code>  属性， <code>__proto__</code>  指向了  <code>prototype</code> ，当访问实例对象的属性或方法，会先从自身构造函数中查找，如果找不到就通过  <code>__proto__</code>  去原型中查找。</p>\n<h3 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链：</h3>\n<p>在当前作用域下找不到某个变量时就去父级作用域查找，依次向上一级一层层查找变量的过程就叫做作用域链。</p>\n<h2 id=\"call-apply-bind\"><a class=\"anchor\" href=\"#call-apply-bind\">#</a> call、apply、bind</h2>\n<ul>\n<li>共同点：都可以改变函数的作用域（改变 this 指向）<br />\n <code>call</code>  /  <code>apply</code>  ：会立即执行函数，两者基本区别在于传参不同<br />\n <code>bind</code> ：不会立即执行</li>\n</ul>\n<h2 id=\"this的指向\"><a class=\"anchor\" href=\"#this的指向\">#</a> this 的指向</h2>\n<h2 id=\"new关键字\"><a class=\"anchor\" href=\"#new关键字\">#</a> New 关键字</h2>\n<h2 id=\"如何理解-foreach\"><a class=\"anchor\" href=\"#如何理解-foreach\">#</a> 如何理解 foreach</h2>\n<h2 id=\"关于深浅拷贝\"><a class=\"anchor\" href=\"#关于深浅拷贝\">#</a> 关于深浅拷贝</h2>\n<h3 id=\"浅拷贝\"><a class=\"anchor\" href=\"#浅拷贝\">#</a> 浅拷贝：</h3>\n<h3 id=\"深拷贝\"><a class=\"anchor\" href=\"#深拷贝\">#</a> 深拷贝：</h3>\n<ol>\n<li><code>JSON.parse(JSON.Stringify())</code> ，优点是简单，缺点是<strong>不能拷贝 Function、undefined</strong> 会丢失，时间对象会变成字符串。</li>\n<li>深度递归遍历</li>\n<li><code>Object.assign</code>  （一层是深拷贝，嵌套二层以上为浅拷贝）</li>\n</ol>\n<h1 id=\"js进阶\"><a class=\"anchor\" href=\"#js进阶\">#</a> JS 进阶</h1>\n<h2 id=\"es6-新语法特性\"><a class=\"anchor\" href=\"#es6-新语法特性\">#</a> ES6 新语法 / 特性</h2>\n<ol>\n<li>模板字符串</li>\n<li><code>let</code> 、 <code>const</code>  关键字</li>\n<li>箭头函数（没有自己的  <code>this</code> ，不能使用  <code>new</code>  命令，不能调用  <code>call</code> ）</li>\n<li><code>class</code>  类</li>\n<li><code>Promise</code> 、 <code>async</code> / <code>await</code> （es7 之后才支持）</li>\n<li><code>export</code> 、 <code>import</code>  模块化（<strong>ES Module</strong>）</li>\n<li>对象扩展（很常用，键值对同名简写， <code>Object.assign</code>  拷贝或合并对象）</li>\n<li>展开运算符（很常用， <code>...</code>  用于组装数组 / 对象）</li>\n<li>解构赋值（可简化提取数组 / 对象中的值，变量交换不用中间变量）</li>\n<li><code>Map</code> （性能更好的对象）</li>\n<li><code>Set</code> （元素值是唯一的，常用于数组去重）</li>\n</ol>\n<h3 id=\"map和普通对象的区别\"><a class=\"anchor\" href=\"#map和普通对象的区别\">#</a> Map 和普通对象的区别：</h3>\n<ul>\n<li>键值类型；</li>\n<li><code>Map</code>  有记录顺序，对象是无序的；</li>\n<li><code>Map</code>  采用红黑树来存储键值，储存大量数据时性能更优，对象需要维护键值对映射关系，会受到内存上的一些限制。</li>\n</ul>\n<blockquote>\n<p>由于这些差异，通常在需要存储大量数据且需要按照特定规则查找和排序时，使用 Map 对象更为合适；而在存储少量数据，并且知道属性名的情况下，使用对象更加方便。</p>\n</blockquote>\n<h4 id=\"特殊类型-weakmap\"><a class=\"anchor\" href=\"#特殊类型-weakmap\">#</a> 特殊类型 WeakMap：</h4>\n<ul>\n<li><code>Map</code>  对象的键可以是任何类型，但  <code>WeakMap</code>  对象中的键只能是引用对象（如果对象不再被引用，则会自动 GC）</li>\n<li><code>WeakMap</code>  对象是不可枚举的，无法获取集合的大小</li>\n</ul>\n<blockquote>\n<p><code>WeakMap</code>  由于无法遍历和清空，使用场景比较有限，通常可以用于避免循环引用造成内存泄漏</p>\n</blockquote>\n<h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<p>JS 实现继承写法如下，JAVA 直呼内行 (bushi</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"高阶函数\"><a class=\"anchor\" href=\"#高阶函数\">#</a> 高阶函数</h2>\n<p>高阶函数泛指那些操作其他函数的函数。简单来说，就是一个<strong>将函数作为 <code>参数</code> 或者 <code>返回值</code> 的函数</strong>。例如  <code>Array.prototype.map</code> 、 <code>Array.prototype.filter</code> 、 <code>Array.prototype.reduce</code>  这些都是 JavaScript 原生的高阶函数。</p>\n<ul>\n<li></li>\n</ul>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E4%BC%98%E9%9B%85JS/",
            "url": "https://eucli.top/2023/09/29/%E4%BC%98%E9%9B%85JS/",
            "title": "优雅JS",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h2 id=\"多条件-if-语句\"><a class=\"anchor\" href=\"#多条件-if-语句\">#</a> 多条件 if 语句</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token string\">\"abc\"</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"def\"</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"ghi\"</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//logic</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 简化写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//logic</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"移除数组假值\"><a class=\"anchor\" href=\"#移除数组假值\">#</a> <strong>移除数组假值</strong></h2>\n<blockquote>\n<p>假值指的是在条件判断中被视为  <code>false</code>  的值，例如 <code>null</code> 、 <code>undefined</code> 、 <code>空字符串</code> （&quot;&quot; 或 ''）、 <code>0</code> 、 <code>NaN</code>  和  <code>false</code> 。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> filterArray <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [12, 'xyz', -25, 0.5]</span></pre></td></tr></table></figure><p>Boolean 是 JavaScript 的内置构造函数，通过传递一个值给它，可以将该值转换为布尔值。在这种情况下，Boolean 构造函数作为回调函数传递给 filter () 方法，因此会将每个数组元素转换为布尔值。只有转换结果为真值的元素才会保留在新数组中。</p>\n<blockquote>\n<p>注意：这种方式会将 0 也过滤掉，如果不需要过滤 0，需要进行额外的判断。</p>\n</blockquote>\n<h2 id=\"空值合并运算符\"><a class=\"anchor\" href=\"#空值合并运算符\">#</a> <strong>空值合并运算符</strong></h2>\n<blockquote>\n<p>空值合并运算符（??）用于为  <code>null</code>  或  <code>undefined</code>  的变量提供默认值</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> data <span class=\"token operator\">??</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>空位合并赋值运算符（ <code>??=</code> ）</strong>\n<blockquote>\n<p>用于在变量为空（null 或 undefined）时进行赋值操作<br />\n <code>??=</code>  的写法更加简洁和易读。它首先检查变量  <code>variable1</code>  是否为  <code>null</code>  或  <code>undefined</code> ，如果是，则将它赋值为  <code>variable2</code>  的值。如果  <code>variable1</code>  已经有一个非空的值，那么赋值操作就不会发生</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> variable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> variable2 <span class=\"token operator\">=</span> <span class=\"token string\">\"前端充电宝\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>variable1 <span class=\"token operator\">??=</span> variable2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"逻辑或赋值运算符\"><a class=\"anchor\" href=\"#逻辑或赋值运算符\">#</a> <strong>逻辑或赋值运算符（ <code>||=</code> ）</strong></h2>\n<blockquote>\n<p>用于为变量分配默认值</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count <span class=\"token operator\">||=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当  <code>count</code>  为假值（例如  <code>undefined</code> 、 <code>null</code> 、 <code>false</code> 、 <code>0</code> 、 <code>NaN</code>  或 <code>空字符串</code> ）时，逻辑或赋值运算符将  <code>count</code>  赋值为 0。否则，它会保留 <code> count</code>  的原始值。</p>\n<h2 id=\"多值匹配\"><a class=\"anchor\" href=\"#多值匹配\">#</a> <strong>多值匹配</strong></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"短路求值\"><a class=\"anchor\" href=\"#短路求值\">#</a> <strong>短路求值</strong></h2>\n<blockquote>\n<p>当将一个变量的值赋给另一个变量时，可能希望确保源变量不为 null、undefined 或空。可以编写一个包含多个条件的长 if 语句，或者使用短路求值来简化。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>variable1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> variable1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> variable1 <span class=\"token operator\">!==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> variable2 <span class=\"token operator\">=</span> variable1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 简化写法：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> variable2 <span class=\"token operator\">=</span> variable1 <span class=\"token operator\">||</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"对于逻辑或操作符以下值被视为假\"><a class=\"anchor\" href=\"#对于逻辑或操作符以下值被视为假\">#</a> 对于逻辑或（||）操作符，以下值被视为假：</h4>\n<ul>\n<li>false</li>\n<li>0</li>\n<li>空字符串（&quot;&quot; 或 ''）</li>\n<li>null</li>\n<li>undefined</li>\n<li>NaN<br />\n 所以，如果本身的值可能就是这些中的一个，就不适合使用短路求值</li>\n</ul>\n<h2 id=\"双位运算符\"><a class=\"anchor\" href=\"#双位运算符\">#</a> <strong>双位运算符</strong></h2>\n<p>可以用它来替代 Math.floor () 函数，它在执行相同的操作时速度更快。</p>\n<blockquote>\n<p>Math.floor () 函数总是返回小于等于一个给定数字的最大整数</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 简化写法：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token number\">4.9</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr></table></figure><h2 id=\"指数幂运算es7-语法\"><a class=\"anchor\" href=\"#指数幂运算es7-语法\">#</a> <strong>指数幂运算</strong>（ES7 语法）</h2>\n<blockquote>\n<p>指数幂运算可以使用  <code>**</code>  来简化。</p>\n</blockquote>\n<pre><code class=\"language-JS\">//传统写法：\nMath.pow(2,3); // 8\nMath.pow(2,2); // 4\nMath.pow(4,3); // 64\n\n//简化写法：\n2**3 // 8\n2**4 // 4\n4**3 // 64\n</code></pre>\n<h2 id=\"双重逻辑非操作符将任何值转换为布尔值\"><a class=\"anchor\" href=\"#双重逻辑非操作符将任何值转换为布尔值\">#</a> <strong> <code>双重逻辑非</code> 操作符将任何值转换为布尔值。</strong></h2>\n<blockquote>\n<p>单一的逻辑非操作符已经可以将值转换为布尔类型并对其进行取反，所以第二个逻辑非操作符会再次对其进行取反，从而将其恢复为原始含义，并保持为布尔类型</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">23</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TRUE</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FALSE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FALSE</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TRUE</span></pre></td></tr></table></figure><h2 id=\"变量交换\"><a class=\"anchor\" href=\"#变量交换\">#</a> <strong>变量交换</strong></h2>\n<blockquote>\n<p>可以使用数组解构来轻松实现变量交换。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法（使用临时变量完成两个变量的交换）：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 简化写法（使用数组解构赋值完成两个变量交换）：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里创建了一个包含两个元素的数组 [b, a]，然后使用数组解构赋值将其中的值分别赋给变量 a 和 b。由于左侧的数组和右侧的数组结构相同，所以两个值会进行交换。</p>\n<h2 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> <strong>For 循环</strong></h2>\n<blockquote>\n<p>传统的 for 循环语法使用数组的长度作为迭代器来遍历数组。还有很多 for 循环的快捷方式提供了 <code>在数组中迭代对象</code> 的不同方法，例如：</p>\n</blockquote>\n<ul>\n<li>\n<p><code>for...of</code> ：用于遍历内置字符串、数组、类数组对象、NodeList。</p>\n</li>\n<li>\n<p><code>for...in</code> ：用于访问数组的索引和对对象字面量进行遍历，并记录属性名称和值的字符串。</p>\n</li>\n<li>\n<p><code>Array.forEach</code> ：使用回调函数对数组元素及其索引执行操作。</p>\n</li>\n</ul>\n<p>传统写法:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item: \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>简化写法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//for...of</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> str <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item: \"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//for...in</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//Array.forEach</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item: \"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于对象字面量，也可以使用  <code>for...in</code>  来遍历</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数组扁平化\"><a class=\"anchor\" href=\"#数组扁平化\">#</a> <strong>数组扁平化</strong></h2>\n<p>一个部门 JSON 数据中，属性名是部门 id，属性值是个部门成员 id 数组集合，现在要把有部门的成员 id 都提取到一个数组集合中。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">采购部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">人事部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">行政部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">运输部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> member <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>Object.values()</code> : 获取对象的全部属性值； <code>flat</code>  方法：数组扁平化</p>\n</blockquote>\n<h2 id=\"set-数组去重\"><a class=\"anchor\" href=\"#set-数组去重\">#</a> <strong>Set 数组去重</strong></h2>\n<blockquote>\n<p>Set 是 es6 新增的数据结构，似于数组，但它的一大特性就是所有元素都是唯一的，没有重复的值，我们一般称为集合</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"前端\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uniqueArr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[' 前端 ','js','html','css']</span></pre></td></tr></table></figure><h2 id=\"set-合并数组并去重\"><a class=\"anchor\" href=\"#set-合并数组并去重\">#</a> <strong>Set 合并数组（并去重）</strong></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3,5,6]</span></pre></td></tr></table></figure><h2 id=\"从-url-获取参数并转为对象\"><a class=\"anchor\" href=\"#从-url-获取参数并转为对象\">#</a> <strong>从 url 获取参数并转为对象</strong></h2>\n<p>网页路径经常是： <code>www.baidu.com?search=js&amp;xxx=kkk</code>  这种形式的，我们是经常需要取参数的，可以使用第三方的 qs 包实现，如果你只是要实现去参数，这一句代码就可以实现，不用再引入 qs 了。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getParameters</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&#123;\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">decodeURL</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&amp;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\",\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">=</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\":\"'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"&#125;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">getParameters</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.google.com.hk/search?q=js+md&amp;newwinodw=1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// &#123;q: 'js+md', newwinodw: '1'&#125;</span></pre></td></tr></table></figure><h2 id=\"检查对象是否为空\"><a class=\"anchor\" href=\"#检查对象是否为空\">#</a> <strong>检查对象是否为空</strong></h2>\n<p>检查对象是否为空，实际上并不那么简单，即使对象为空，每次检查对象是否等于 {} 也会返回 false。<br />\n幸运的是，下面的单行代码正是我们想要的。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isEmpty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"not empty\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><h2 id=\"反转字符串\"><a class=\"anchor\" href=\"#反转字符串\">#</a> <strong>反转字符串</strong></h2>\n<p>反转字符串可以使用 <code>split</code>  结合 <code>reverse</code>  和 <code>join</code>  方法轻松实现。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// esrever si siht</span></pre></td></tr></table></figure><h2 id=\"生成随机十六进制\"><a class=\"anchor\" href=\"#生成随机十六进制\">#</a> <strong>生成随机十六进制</strong></h2>\n<p>生成随机数相信你能信手拈来，那随机生成十六进制，例如生成十六进制颜色值。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomHexColor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0xffffff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">randomHexColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// #a2ce5b</span></pre></td></tr></table></figure><h2 id=\"检查当前选项卡是否在后台\"><a class=\"anchor\" href=\"#检查当前选项卡是否在后台\">#</a> <strong>检查当前选项卡是否在后台</strong></h2>\n<p>浏览器使用选项卡式浏览，任何网页都有可能在后台，此时对用户来说是没有在浏览的，知道怎么快速检测到，你的网页对用户是隐藏还是可见吗？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTabActive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>document<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isTabActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// true|false</span></pre></td></tr></table></figure><h2 id=\"检测元素是否处于焦点\"><a class=\"anchor\" href=\"#检测元素是否处于焦点\">#</a> <strong>检测元素是否处于焦点</strong></h2>\n<p><code>activeElement</code>  属性返回文档中当前获得焦点的元素</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">elementIsInFocus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el <span class=\"token operator\">===</span> document<span class=\"token punctuation\">.</span>activeElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">elementIsInFocus</span><span class=\"token punctuation\">(</span>anyElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 元素处于焦点返回 true，反之返回 false</span></pre></td></tr></table></figure><h2 id=\"检查设备类型\"><a class=\"anchor\" href=\"#检查设备类型\">#</a> <strong>检查设备类型</strong></h2>\n<p>使用 <code>navigator.userAgent</code>  判断是移动设备还是电脑设备：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">judgeDeviceType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Mobile\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"PC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">judgeDeviceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// PC | Mobile</span></pre></td></tr></table></figure><h2 id=\"文字复制到剪贴板\"><a class=\"anchor\" href=\"#文字复制到剪贴板\">#</a> <strong>文字复制到剪贴板</strong></h2>\n<p><code>Clipboard API </code> 它的所有操作都是异步的，返回  <code>Promise </code> 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">copyText</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">writeText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">copyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单行代码 前端世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"获取选定的文本\"><a class=\"anchor\" href=\"#获取选定的文本\">#</a> <strong>获取选定的文本</strong></h2>\n<p>使用内置的  <code>getSelection </code> 获取用户选择的文本:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSelectedText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">getSelectedText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 返回选中的内容</span></pre></td></tr></table></figure><h2 id=\"查询某天是否为工作日\"><a class=\"anchor\" href=\"#查询某天是否为工作日\">#</a> <strong>查询某天是否为工作日</strong></h2>\n<p>我们自己写日历组件时经常会用到，判断某个日期是否为工作日；周一至周五为工作日:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isWeekday</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isWeekday</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><h2 id=\"转换华氏摄氏\"><a class=\"anchor\" href=\"#转换华氏摄氏\">#</a> <strong>转换华氏 / 摄氏</strong></h2>\n<p>处理温度有时会晕头转向。这两个函数则能帮助大家将华氏温度转换为摄氏温度，以及将摄氏温度转换为华氏温度。</p>\n<ul>\n<li>将华氏温度转换为摄氏温度</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fahrenheitToCelsius</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fahrenheit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">fahrenheitToCelsius</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 10</span></pre></td></tr></table></figure><ul>\n<li>将摄氏温度转华氏温度</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">celsiusToFahrenheit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">celsius</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">*</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">celsiusToFahrenheit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 212</span></pre></td></tr></table></figure><h2 id=\"两日期之间相差的天数\"><a class=\"anchor\" href=\"#两日期之间相差的天数\">#</a> <strong>两日期之间相差的天数</strong></h2>\n<p>日常开发中经常遇到需要显示剩余天数， 一般我们就需要计算两日期之间相差天数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dayDiff</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date1<span class=\"token punctuation\">,</span> date2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> date2<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">86400000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">dayDiff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-10-21\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2022-02-12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Result: 114</span></pre></td></tr></table></figure><h2 id=\"将-rgb-转换为十六进制\"><a class=\"anchor\" href=\"#将-rgb-转换为十六进制\">#</a> <strong>将 RGB 转换为十六进制</strong></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rgbToHex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rgbToHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//  #ffffff</span></pre></td></tr></table></figure><h2 id=\"计算数组平均值\"><a class=\"anchor\" href=\"#计算数组平均值\">#</a> <strong>计算数组平均值</strong></h2>\n<p>计算平均值的方式很多，计算的逻辑都是一样的， 但是实现方式各不相同，一行代码简单实现：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">average</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//16</span></pre></td></tr></table></figure>",
            "tags": [
                "JS"
            ]
        }
    ]
}