{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucli の小窝",
    "subtitle": null,
    "icon": "https://eucli.top/images/favicon.ico",
    "description": "真不是二次元",
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/05/16/CSS/",
            "url": "https://eucli.top/2023/05/16/CSS/",
            "title": "CSS相关",
            "date_published": "2023-05-16T10:20:34.000Z",
            "content_html": "<h1 id=\"tips\"><a class=\"markdownIt-Anchor\" href=\"#tips\">#</a> Tips</h1>\n<ul>\n<li>网格式布局</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>:grid</span><br><span class=\"line\">grid-template-columns: <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr <span class=\"number\">1</span>fr</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue3-集成-tailwind-css\"><a class=\"markdownIt-Anchor\" href=\"#vue3-集成-tailwind-css\">#</a> Vue3 集成 Tailwind CSS</h1>\n<p>[Tailwind CSS] 是一个由 js 编写的 CSS 框架 他是基于 postCss 去解析的</p>\n<p>对于<a href=\"https://www.postcss.com.cn/\"> PostCSS</a> 的插件使用，我们再使用的过程中一般都需要如下步骤：</p>\n<ol>\n<li>PostCSS 配置文件 postcss.config.js，新增 tailwindcss 插件。</li>\n<li>TaiWindCss 插件需要一份配置文件，比如:tailwind.config.js。</li>\n</ol>\n<ul>\n<li>postCss 功能介绍</li>\n</ul>\n<ol>\n<li>\n<p>增强代码的可读性 （利用从 Can I Use 网站获取的数据为 CSS 规则添加特定厂商的前缀。 Autoprefixer 自动获取浏览器的流行度和能够支持的属性，并根据这些数据帮你自动为 CSS 规则添加前缀。）</p>\n</li>\n<li>\n<p>将未来的 CSS 特性带到今天！（PostCSS Preset Env 帮你将最新的 CSS 语法转换成大多数浏览器都能理解的语法，并根据你的目标浏览器或运行时环境来确定你需要的 polyfills，此功能基于 cssdb 实现。）</p>\n</li>\n<li>\n<p>终结全局 CSS（CSS 模块 能让你你永远不用担心命名太大众化而造成冲突，只要用最有意义的名字就行了。）</p>\n</li>\n<li>\n<p>避免 CSS 代码中的错误（通过使用 stylelint 强化一致性约束并避免样式表中的错误。stylelint 是一个现代化 CSS 代码检查工具。它支持最新的 CSS 语法，也包括类似 CSS 的语法，例如 SCSS 。）</p>\n</li>\n</ol>\n<ul>\n<li>postCss 处理 tailWind Css 大致流程</li>\n</ul>\n<ol>\n<li>将 CSS 解析成抽象语法树 (AST 树)</li>\n<li>读取插件配置，根据配置文件，生成新的抽象语法树</li>\n<li>将 AST 树” 传递” 给一系列数据转换操作处理（变量数据循环生成，切套类名循环等）</li>\n<li>清除一系列操作留下的数据痕迹</li>\n<li>将处理完毕的 AST 树重新转换成字符串</li>\n</ol>\n<ul>\n<li>安装</li>\n</ul>\n<ol>\n<li>安装 Tailwind 以及其它依赖项</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D tailwindcss@latest postcss@latest autoprefixer@latest</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>生成配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx tailwindcss init -p</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改<a href=\"https://www.tailwindcss.cn/docs/configuration\">配置</a>文件 tailwind.config.js<br>\n2.6 版本:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">purge</span>: [<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"string\">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">theme</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extend</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>3.0 版本:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">content</span>: [<span class=\"string\">&quot;./index.html&quot;</span>, <span class=\"string\">&quot;./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">theme</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">extend</span>: &#123;&#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>创建一个 index.css, 在 main.ts 引入<br>\n index.css:</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@tailwind</span> base;</span><br><span class=\"line\"><span class=\"keyword\">@tailwind</span> components;</span><br><span class=\"line\"><span class=\"keyword\">@tailwind</span> utilities;</span><br></pre></td></tr></table></figure>\n<p>main.ts:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./index.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>最后 npm run dev 就可以使用啦</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-2xl&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;md:flex&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;md:flex-shrink-0&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;h-48 w-full object-cover md:w-48&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://n.sinaimg.cn/translate/20170815/OoVn-fyixtym5144510.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;Man looking at item at a store&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;p-8&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;uppercase tracking-wide text-sm text-indigo-500 font-semibold&quot;</span>&gt;</span>Case study<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;#&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;block mt-1 text-lg leading-tight font-medium text-black hover:underline&quot;</span>&gt;</span>Finding customers for your new business<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;mt-2 text-gray-500&quot;</span>&gt;</span>Getting a new business off the ground is a lot of hard work. Here are five ideas you can use to find your first customers.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"unocss-原子化\"><a class=\"markdownIt-Anchor\" href=\"#unocss-原子化\">#</a> unocss 原子化</h1>\n<ul>\n<li>什么是 css 原子化？<br>\nCSS 原子化的优缺点:</li>\n</ul>\n<ol>\n<li>\n<p>减少了 css 体积，提高了 css 复用</p>\n</li>\n<li>\n<p>减少起名的复杂度</p>\n</li>\n<li>\n<p>增加了记忆成本 将 css 拆分为原子之后，你势必要记住一些 class 才能书写，哪怕 tailwindcss 提供了完善的工具链，你写 background，也要记住开头是 bg</p>\n</li>\n</ol>\n<ul>\n<li>接入 unocss<br>\n (tips：最好用于 vite ,webpack 属于阉割版功能很少)</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D unocss</span><br></pre></td></tr></table></figure>\n<p>或者：安装 unocss 和三个预设，第一个是工具类预设，第二个是属性化模式支持，第三个是 icon 支持</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i -D unocss @unocss/preset-uno @unocss/preset-attributify @unocss/preset-icons</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置 vite.config.ts</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> unocss <span class=\"keyword\">from</span> <span class=\"string\">&#x27;unocss/vite&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; presetUno, presetAttributify, presetIcons &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;unocss&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>(), <span class=\"title function_\">vueJsx</span>(),<span class=\"title function_\">unocss</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">presets</span>: [</span><br><span class=\"line\">        <span class=\"title function_\">presetUno</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">presetAttributify</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">presetIcons</span>()],</span><br><span class=\"line\">      <span class=\"attr\">rules</span>:[</span><br><span class=\"line\"></span><br><span class=\"line\">      ]</span><br><span class=\"line\">  &#125;)],</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>main.ts 引入</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;uno.css&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>使用</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;text-25px text-#ff6700 bg-#ccc&quot;</span>&gt;</span>你好Unocss<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- text-25px: font-size:25px</span></span><br><span class=\"line\"><span class=\"comment\">text-#ff6700: color: #ff6700</span></span><br><span class=\"line\"><span class=\"comment\">bg-#ccc: background: #ccc</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">使用class类名来描述样式,省去了单独写style的样式 --&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置静态 css</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rules</span>: [[<span class=\"string\">&quot;flex&quot;</span>, &#123; <span class=\"attr\">display</span>: <span class=\"string\">&quot;flex&quot;</span> &#125;]];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>unocss 预设</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">presets</span>: [<span class=\"title function_\">presetIcons</span>(), <span class=\"title function_\">presetAttributify</span>(), <span class=\"title function_\">presetUno</span>()];</span><br></pre></td></tr></table></figure>\n<ol>\n<li>presetIcons Icon 图标预设<br>\n图标集合安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm add -D @iconify-json/ic</span><br></pre></td></tr></table></figure>\n<p>首先我们去<a href=\"https://icones.js.org/\"> icones</a> 官网（方便浏览和使用 iconify）浏览我们需要的 icon，比如这里我用到了 Google Material Icons 图标集里面的 baseline-add-circle 图标</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;i-ic-baseline-backspace text-3xl bg-green-500&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>presetAttributify 属性化模式支持<br>\n属性语义化 无须 class</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">font</span>=<span class=\"string\">&quot;black&quot;</span>&gt;</span>btn<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>presetUno 工具类预设<br>\n默认的 <a href=\"https://github.com/unocss/unocss/tree/main/packages/preset-uno\">@unocss/preset-uno</a> 预设（实验阶段）是一系列流行的原子化框架的 通用超集，包括了 Tailwind CSS，Windi CSS，Bootstrap，Tachyons 等。</li>\n</ol>\n<p>例如，ml-3（Tailwind），ms-2（Bootstrap），ma4（Tachyons），mt-10px（Windi CSS）均会生效。</p>\n",
            "tags": [
                "前端开发",
                "css"
            ]
        },
        {
            "id": "https://eucli.top/2023/05/07/element%20plus%E4%B9%8BTable%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/",
            "url": "https://eucli.top/2023/05/07/element%20plus%E4%B9%8BTable%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/",
            "title": "Element Plus之Table合并单元格",
            "date_published": "2023-05-07T09:20:34.000Z",
            "content_html": "<p><a href=\"https://www.cnblogs.com/aerfazhe/p/17051696.html\">https://www.cnblogs.com/aerfazhe/p/17051696.html</a></p>\n",
            "tags": [
                "前端开发",
                "Element Plus"
            ]
        },
        {
            "id": "https://eucli.top/2023/05/03/%E3%80%90%E5%B0%8F%E6%BB%A1%E3%80%91Vue3%20+%20vite%20+%20Ts%20+%20pinia%20+%20%E5%AE%9E%E6%88%98%20+%20%E6%BA%90%E7%A0%81%20+electron/",
            "url": "https://eucli.top/2023/05/03/%E3%80%90%E5%B0%8F%E6%BB%A1%E3%80%91Vue3%20+%20vite%20+%20Ts%20+%20pinia%20+%20%E5%AE%9E%E6%88%98%20+%20%E6%BA%90%E7%A0%81%20+electron/",
            "title": "【小满】Vue3 + vite + Ts + pinia + 实战 + 源码 +electron",
            "date_published": "2023-05-03T02:46:00.000Z",
            "content_html": "",
            "tags": [
                "前端开发",
                "项目实战",
                "TypeScript",
                "vue3",
                "pinia",
                "vite",
                "electron"
            ]
        },
        {
            "id": "https://eucli.top/2023/05/03/%E5%B7%A5%E5%A4%A7%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/",
            "url": "https://eucli.top/2023/05/03/%E5%B7%A5%E5%A4%A7%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/",
            "title": "工大生存手册",
            "date_published": "2023-05-03T02:39:00.000Z",
            "content_html": "<p>更新计划尚不明确……</p>\n",
            "tags": [
                "日常生活"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/17/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "url": "https://eucli.top/2023/04/17/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "title": "前端自动化",
            "date_published": "2023-04-17T04:35:00.000Z",
            "content_html": "<h1 id=\"自动化插件\"><a class=\"markdownIt-Anchor\" href=\"#自动化插件\">#</a> 自动化插件</h1>\n<h2 id=\"unplugin-auto-import\"><a class=\"markdownIt-Anchor\" href=\"#unplugin-auto-import\">#</a>  <code>unplugin-auto-import</code></h2>\n<p>自动导入 Api, 支持 Vite, Webpack, Rollup and esbuild。<br>\n适用于 &quot;vue&quot;, “vue-router”, &quot;axios&quot; 等库的 api。</p>\n<ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add unplugin-auto-import -D</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改配置文件 <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@name</span> <span class=\"variable\">AutoImportDeps</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> <span class=\"variable\">auto</span>-import lib</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AutoImport</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">AutoImportDeps</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">imports</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vue-router&quot;</span>, <span class=\"string\">&quot;axios&quot;</span>, <span class=\"string\">&quot;@vueuse/core&quot;</span>, <span class=\"string\">&quot;@pureadmin/utils&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">include</span>: [<span class=\"regexp\">/\\.[tj]sx?$/</span>, <span class=\"regexp\">/\\.vue$/</span>, <span class=\"regexp\">/\\.vue\\?vue/</span>, <span class=\"regexp\">/\\.md$/</span>],</span><br><span class=\"line\">    <span class=\"comment\">// eslint报错解决</span></span><br><span class=\"line\">    <span class=\"attr\">eslintrc</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enabled</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// Default `false`</span></span><br><span class=\"line\">      <span class=\"attr\">filepath</span>: <span class=\"string\">&quot;./.eslintrc-auto-import.json&quot;</span>, <span class=\"comment\">// Default `./.eslintrc-auto-import.json`</span></span><br><span class=\"line\">      <span class=\"attr\">globalsPropValue</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// Default `true`, (true | false | &#x27;readonly&#x27; | &#x27;readable&#x27; | &#x27;writable&#x27; | &#x27;writeable&#x27;)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">dts</span>: <span class=\"string\">&quot;src/auto-imports.d.ts&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"unplugin-vue-components\"><a class=\"markdownIt-Anchor\" href=\"#unplugin-vue-components\">#</a>  <code>unplugin-vue-components</code></h2>\n<p>为 Vue 自动按需导入组件，既不需要导入也不需要声明<br>\n支持： Vite, Webpack, Vue CLI, Rollup, esbuild 等</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add unplugin-vue-components -D</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改配置文件 <code>vite.config.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Components</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 要搜索组件的目录的相对路径</span></span><br><span class=\"line\">      <span class=\"attr\">dirs</span>: [<span class=\"string\">&quot;src/components&quot;</span>],</span><br><span class=\"line\">      <span class=\"comment\">// 组件的有效文件扩展名</span></span><br><span class=\"line\">      <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;vue&quot;</span>],</span><br><span class=\"line\">      <span class=\"comment\">// 配置文件生成位置</span></span><br><span class=\"line\">      <span class=\"comment\">// 也接受自定义文件名的路径</span></span><br><span class=\"line\">      <span class=\"attr\">dts</span>: <span class=\"string\">&quot;src/components.d.ts&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其实也能自动导入 ui 库，但 bug 比较多，所以放弃</p>\n",
            "tags": [
                "前端开发",
                "自动化"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/16/20%E4%B8%AAJavaScript%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/",
            "url": "https://eucli.top/2023/04/16/20%E4%B8%AAJavaScript%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/",
            "title": "20个JavaScript经典案例",
            "date_published": "2023-04-16T13:44:34.000Z",
            "content_html": "",
            "tags": [
                "前端开发",
                "JavaScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/16/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://eucli.top/2023/04/16/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "【案例】泛型封装数据库",
            "date_published": "2023-04-16T13:44:34.000Z",
            "content_html": "<p>功能：定义一个操作数据库的库，支持 mysql、mongoDB<br>\n 要求：mysql、mongoDB 功能是一样的，都有增删改查（insert delete update select）方法<br>\n注意：约束统一的规范、代码复用<br>\n规范：interface<br>\n 复用：泛型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增删改查（insert delete update select）方法 ==&gt; 规范：interface</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Db</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"attr\">data</span>:T):<span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">select</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">any</span>[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sql</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Db</span>&lt;T&gt; &#123; <span class=\"comment\">//类实现接口用implements，接口实现接口用extends</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"attr\">data</span>:T):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">select</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">any</span>[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">userName</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">userPwd</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySql = <span class=\"keyword\">new</span> <span class=\"title class_\">Sql</span>&lt;<span class=\"title class_\">User</span>&gt;()</span><br><span class=\"line\">mySql.<span class=\"title function_\">insert</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">userName</span>:<span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">userPwd</span>:<span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "TypeScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/14/VueRouter/",
            "url": "https://eucli.top/2023/04/14/VueRouter/",
            "title": "VueRouter",
            "date_published": "2023-04-14T12:58:34.000Z",
            "content_html": "<h1 id=\"vue-router\"><a class=\"markdownIt-Anchor\" href=\"#vue-router\">#</a> Vue Router</h1>\n<ul>\n<li>前言：<br>\n因为 vue 是单页应用，不会有那么多 html 让我们跳转，所有要使用路由做页面的跳转</li>\n</ul>\n<p>Vue 路由允许我们通过不同的 URL 访问不同的内容。通过 Vue 可以实现多视图的单页 Web 应用</p>\n<ul>\n<li>快速上手</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add vue-router@4</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>src/router/index.ts</code> :</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入路由对象</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, createWebHashHistory, createMemoryHistory, <span class=\"title class_\">RouteRecordRaw</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//vue2 mode history vue3 createWebHistory</span></span><br><span class=\"line\"><span class=\"comment\">//vue2 mode  hash  vue3  createWebHashHistory</span></span><br><span class=\"line\"><span class=\"comment\">//vue2 mode abstact vue3  createMemoryHistory</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//路由数组的类型 RouteRecordRaw</span></span><br><span class=\"line\"><span class=\"comment\">// 定义一些路由</span></span><br><span class=\"line\"><span class=\"comment\">// 每个路由都需要映射到一个组件。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecordRaw</span>&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../components/a.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/register&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../components/b.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHistory</span>(),</span><br><span class=\"line\">  routes,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//导出router</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用<router-link>和<router-view>：<br>\n请注意，我们没有使用常规的 a 标签，而是使用一个自定义组件 router-link 来创建链接。这使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码。我们将在后面看到如何从这些功能中获益。<br>\nrouter-view 将显示与 url 对应的组件。你可以把它放在任何地方，以适应你的布局。</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h1&gt;小满最骚&lt;/h1&gt;</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;!--使用 router-link 组件进行导航 --&gt;</span><br><span class=\"line\">      &lt;!--通过传递 `to` 来指定链接 --&gt;</span><br><span class=\"line\">      &lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;</span><br><span class=\"line\">      &lt;router-link tag=&quot;div&quot; to=&quot;/&quot;&gt;跳转a&lt;/router-link&gt;</span><br><span class=\"line\">      &lt;router-link tag=&quot;div&quot; style=&quot;margin-left:200px&quot; to=&quot;/register&quot;&gt;跳转b&lt;/router-link&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;hr /&gt;</span><br><span class=\"line\">    &lt;!-- 路由出口 --&gt;</span><br><span class=\"line\">    &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span><br><span class=\"line\">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>最后在 main.ts 挂载</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>).<span class=\"title function_\">use</span>(router).<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"编程式导航\"><a class=\"markdownIt-Anchor\" href=\"#编程式导航\">#</a> 编程式导航</h2>\n<p>除了使用  <code>&lt;router-link&gt;</code>  创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。<br>\n想要导航到不同的 URL，可以使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。<br>\n当你点击 <code>&lt;router-link&gt;</code>  时，内部会调用这个方法，所以点击  <code>&lt;router-link :to=&quot;...&quot;&gt; </code> (声明式) 相当于调用 <code>router.push(...)</code> (编程式).</p>\n<ol>\n<li>编程式导航，字符串模式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toPage</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;/reg&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编程式导航，对象模式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toPage</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/reg&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>编程式导航，命名式路由模式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toPage</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Reg&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名路由\"><a class=\"markdownIt-Anchor\" href=\"#命名路由\">#</a> 命名路由</h2>\n<p>除了 path 之外，你还可以为任何路由提供 name。这有以下优点：</p>\n<ol>\n<li>没有硬编码的 URL</li>\n<li>params 的自动编码 / 解码。</li>\n<li>防止你在 url 中出现打字错误。</li>\n<li>绕过路径排序（如显示一个）</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecordRaw</span>&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../components/login.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/reg&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Reg&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../components/reg.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>router-link 跳转方式需要改变 变为对象并且有对应 name:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>小满最骚<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;name:&#x27;Login&#x27;&#125;&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left:10px&quot;</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;name:&#x27;Reg&#x27;&#125;&quot;</span>&gt;</span>Reg<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">hr</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"历史记录\"><a class=\"markdownIt-Anchor\" href=\"#历史记录\">#</a> 历史记录</h2>\n<ul>\n<li>replace 的使用<br>\n采用 replace 进行页面的跳转会同样也会创建渲染新的 Vue 组件，但是在 history 中其不会重复保存记录，而是替换原有的 vue 组件；</li>\n</ul>\n<ol>\n<li>router-link 使用方法</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">replace</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">replace</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-left:10px&quot;</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/reg&quot;</span>&gt;</span>Reg<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>编程式导航</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;toPage(&#x27;/&#x27;)&quot;</span>&gt;</span>Login<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;toPage(&#x27;/reg&#x27;)&quot;</span>&gt;</span>Reg<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">useRouter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toPage</span> = (<span class=\"params\">url: string</span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">replace</span>(url);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>横跨历史<br>\n该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;next&quot;</span>&gt;</span>前进<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;prev&quot;</span>&gt;</span>后退<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">next</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//前进 数量不限于1</span></span><br><span class=\"line\">  router.<span class=\"title function_\">go</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">prev</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">//后退</span></span><br><span class=\"line\">  router.<span class=\"title function_\">back</span>();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由传参\"><a class=\"markdownIt-Anchor\" href=\"#路由传参\">#</a> 路由传参</h2>\n<ul>\n<li>useRouter：传参</li>\n<li>useRoute：接收参数</li>\n</ul>\n<p>传递参数两种传参方式（query/params）</p>\n<ol>\n<li>query 传参（用 path）<br>\nquery 只能接收一个对象，这里的 item 一个就是对象<br>\n传参:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRouter &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">userRouter</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toDetail</span> = (<span class=\"params\">item</span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">query</span>: item, <span class=\"comment\">//query只能接收一个对象，这里的item一个就是对象</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接收参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">useRoute</span>();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>品牌：&#123;&#123; route.query?.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>价格：&#123;&#123; route.query?.price &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>ID：&#123;&#123; route.query?.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>params 传参（用 name）<br>\nparams 存在于内存中，刷新会丢失<br>\n传参:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">…………</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toDetail</span> = (<span class=\"params\">item</span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: item, <span class=\"comment\">//params存在于内存中，刷新会丢失</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接收参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">useRoute</span>();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>品牌：&#123;&#123; route.params?.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>价格：&#123;&#123; route.params?.price &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>ID：&#123;&#123; route.params?.id &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>动态路由参数<br>\n很多时候，我们需要将给定匹配模式的路由映射到同一个组件。例如，我们可能有一个 User 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数<br>\n使用带有参数的路由时需要注意的是，当用户从  <code>/users/johnny </code> 导航到 <code>/users/jolyne</code>  时，相同的组件实例将被重复使用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会被调用。</li>\n</ol>\n<p>路径参数 用冒号  <code>:</code>  表示。当一个路由被匹配时，它的 params 的值将在每个组件<br>\n需要先配置路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecordRaw</span>&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../components/login.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//动态路由参数</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/reg/:id&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Reg&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../components/reg.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>传参：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//路由的path要改成动态（/:id）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">toDetail</span> = (<span class=\"params\">item</span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">id</span>: item.<span class=\"property\">id</span>, <span class=\"comment\">//此时刷新参数不会丢失</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>接收参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; useRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; data &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./list.json&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">useRoute</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> item = data.<span class=\"title function_\">find</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> v.<span class=\"property\">id</span> === <span class=\"title class_\">Number</span>(route.<span class=\"property\">params</span>.<span class=\"property\">id</span>));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>二者的区别</li>\n</ul>\n<ol>\n<li>\n<p>query 传参配置的是 path，而 params 传参配置的是 name，在 params 中配置 path 无效</p>\n</li>\n<li>\n<p>query 在路由配置不需要设置参数，而 params 必须设置</p>\n</li>\n<li>\n<p>query 传递的参数会显示在地址栏中</p>\n</li>\n<li>\n<p>params 传参刷新会无效，但是 query 会保存传递过来的值，刷新不变；</p>\n</li>\n<li>\n<p>路由配置</p>\n</li>\n</ol>\n<h2 id=\"sensitive-与-strict-路由配置\"><a class=\"markdownIt-Anchor\" href=\"#sensitive-与-strict-路由配置\">#</a> Sensitive 与 strict 路由配置</h2>\n<p>默认情况下，所有路由是不区分大小写的，并且能匹配带有或不带有尾部斜线的路由。例如，路由 <code>/users</code>  将匹配  <code>/users</code> 、 <code>/users/</code> 、甚至 <code> /Users/</code> 。可以通过 <code> strict</code>  和  <code>sensitive </code> 选项来修改:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHistory</span>(),</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 将匹配 /users/posva 而非：</span></span><br><span class=\"line\">    <span class=\"comment\">// - /users/posva/ 当 strict: true</span></span><br><span class=\"line\">    <span class=\"comment\">// - /Users/posva 当 sensitive: true</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:id&#x27;</span>, <span class=\"attr\">sensitive</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 将匹配 /users, /Users, 以及 /users/42 而非 /users/ 或 /users/42/</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:id?&#x27;</span> &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  <span class=\"attr\">strict</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// applies to all routes</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选参数\"><a class=\"markdownIt-Anchor\" href=\"#可选参数\">#</a> 可选参数</h2>\n<p>可以通过使用？修饰符 (0 个或 1 个) 将一个参数标记为可选：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  <span class=\"comment\">// 匹配 /users 和 /users/posva</span></span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/users/:userId?&quot;</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h2 id=\"嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#嵌套路由\">#</a> 嵌套路由</h2>\n<p>需要在路由中配置  <code>children</code> , 不写 <code>/</code></p>\n<h2 id=\"命名视图\"><a class=\"markdownIt-Anchor\" href=\"#命名视图\">#</a> 命名视图</h2>\n<p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有  <code>sidebar </code> (侧导航) 和  <code>main </code> (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果  <code>router-view </code> 没有设置名字，那么默认为 default。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view left-sidebar&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LeftSidebar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view main-content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view right-sidebar&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;RightSidebar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHashHistory</span>(),</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"title class_\">Home</span>,</span><br><span class=\"line\">        <span class=\"comment\">// LeftSidebar: LeftSidebar 的缩写</span></span><br><span class=\"line\">        <span class=\"title class_\">LeftSidebar</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 它们与 `&lt;router-view&gt;` 上的 `name` 属性匹配</span></span><br><span class=\"line\">        <span class=\"title class_\">RightSidebar</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"重定向和别名\"><a class=\"markdownIt-Anchor\" href=\"#重定向和别名\">#</a> 重定向和别名</h2>\n<ul>\n<li>重定向也是通过 routes 配置来完成，下面例子是从 <code> /home</code>  重定向到  <code>/</code> ：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/&quot;</span> &#125;];</span><br></pre></td></tr></table></figure>\n<p>重定向的目标也可以是一个命名的路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;homepage&quot;</span> &#125; &#125;];</span><br></pre></td></tr></table></figure>\n<p>请注意，导航守卫并没有应用在跳转路由上，而仅仅应用在其目标上。在上面的例子中，在  <code>/home</code>  路由中添加  <code>beforeEnter </code> 守卫不会有任何效果。</p>\n<p>在写  <code>redirect </code> 的时候，可以省略  <code>component</code>  配置，因为它从来没有被直接访问过，所以没有组件要渲染。唯一的例外是嵌套路由：如果一个路由记录有  <code>children</code>  和  <code>redirect</code>  属性，它也应该有 <code> component</code>  属性。</p>\n<ul>\n<li>别名<br>\n重定向是指当用户访问  <code>/home</code>  时，URL 会被  <code>/</code>  替换，然后匹配成  <code>/</code> 。那么什么是别名呢？<br>\n将  <code>/</code>  别名为  <code>/home</code> ，意味着当用户访问  <code>/home</code>  时，URL 仍然是  <code>/home</code> ，但会被匹配为用户正在访问  <code>/</code> 。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">Homepage</span>, <span class=\"attr\">alias</span>: <span class=\"string\">&quot;/home&quot;</span> &#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由组件传参\"><a class=\"markdownIt-Anchor\" href=\"#路由组件传参\">#</a> 路由组件传参</h2>\n<ul>\n<li>\n<p>将  <code>props</code>  传递给路由组件</p>\n</li>\n<li>\n<p>命名视图<br>\n对于有命名视图的路由，你必须为每个命名视图定义  <code>props</code>  配置：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/user/:id&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123; <span class=\"attr\">default</span>: <span class=\"title class_\">User</span>, <span class=\"attr\">sidebar</span>: <span class=\"title class_\">Sidebar</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123; <span class=\"attr\">default</span>: <span class=\"literal\">true</span>, <span class=\"attr\">sidebar</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>布尔模式</li>\n<li>对象模式</li>\n<li>函数模式</li>\n</ul>\n<h2 id=\"路由的默认路径\"><a class=\"markdownIt-Anchor\" href=\"#路由的默认路径\">#</a> 路由的默认路径</h2>\n<p>默认情况下，进入网站的首页，我们希望 <code>&lt;router-view&gt;</code>  渲染首页的内容，但是我们的实现中，默认没有显示首页组件，必须让用户点击才可以。如何可以让路径默认跳到到首页，并且 <code>&lt;router-view&gt;</code>  渲染首页组件呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>, <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/home&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/about&quot;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">About</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>在 routes 中再配置一个映射， <code>path</code>  配置的是根路径:  <code>/</code> , <code>redirect</code>  是重定向，也就是我们将根路径重定向到 <code>/home</code>  的路径下，这样就可以得到我们想要的结果了</p>\n<h2 id=\"history-模式\"><a class=\"markdownIt-Anchor\" href=\"#history-模式\">#</a> history 模式</h2>\n<h2 id=\"路由懒加载\"><a class=\"markdownIt-Anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h2>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。<br>\n <code>component</code>  可以传入一个组件，也可以接收一个函数，该函数需要放回一个 Promise. 而 <code>import</code>  函数就是返回一个 Promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../pages/Home.vue&quot;</span>) &#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由的其他属性\"><a class=\"markdownIt-Anchor\" href=\"#路由的其他属性\">#</a> 路由的其他属性</h2>\n<p><code>name</code>  属性：路由记录独一无二的名称<br>\n <code>meta</code>  属性：自定义的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;about-router&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/About.vue&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;why&#x27;</span>,</span><br><span class=\"line\">    age；<span class=\"number\">18</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态路由基本匹配\"><a class=\"markdownIt-Anchor\" href=\"#动态路由基本匹配\">#</a> 动态路由基本匹配</h2>\n<p>很多时候我们需要将给定匹配模式的路由映射到同一个组件，例如，我们可能有一个 User 组件，它应该对所有用户进行渲染，但是用户的 ID 是不同的，在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/user/:id&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/User.vue&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 router-link 中进行如下跳转：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/user/123&quot;&gt;用户：123&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获取动态路由的值<br>\n在 setup 中，我们要使用 vue-router 库给我们提供的一个 hook：  <code>useRoute</code> . 该 Hook 会返回一个 Route 对象，对象中保存着当前路由相关的值；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">userRoute</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(route.<span class=\"property\">params</span>.<span class=\"property\">id</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"notfound\"><a class=\"markdownIt-Anchor\" href=\"#notfound\">#</a> NotFound</h3>\n<p>对于没有匹配到的路由，我们通常会匹配到固定的某个页面，比如 NotFound 的错误页面中，这个时候我们可编写一个动态路由用于匹配所有的页面；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/:pathMatch(.*)&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/NotFound.vue&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#路由的嵌套\">#</a> 路由的嵌套</h2>\n<p>什么是路由的嵌套？<br>\n目前我们匹配的 Home、About、User 等都属于底层路由，我们在它们之间可以来回进行切换。但是，我们 Home 页面本身，也可能会在多个组件之间来回切换：比如 Home 中包括 Product、Message，它们可以在 Home 内部来回切换。<br>\n这个时候我们就需要使用嵌套路由，在 Home 中也使用 router-view 来占位之后需要渲染的组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;.../pages/Home.vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"attr\">children</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirect</span>:<span class=\"string\">&#x27;/home/product&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeProduct.vue&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeMessage.vue&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>query 方式的参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;useRouter&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-rourer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">useRouter</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jumpToHome</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/profile&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">quert</span>: &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;why&#x27;</span>,age：<span class=\"number\">18</span>&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"router-link-的-v-slot\"><a class=\"markdownIt-Anchor\" href=\"#router-link-的-v-slot\">#</a> router-link 的 v-slot</h3>\n<h3 id=\"router-view-的-v-slot\"><a class=\"markdownIt-Anchor\" href=\"#router-view-的-v-slot\">#</a> router-view 的 v-slot</h3>\n<p><code>router-view</code>  也提供给我们一个插槽，可以用于  <code>&lt;transition&gt;</code>  和  <code>&lt;keep-alive&gt;</code>  组件来包裹你的路由组件：</p>\n<ul>\n<li><code>Component</code> ：要渲染的组件</li>\n<li><code>route</code> ：解析出的标准化路由对象</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class=\"line\">  &lt;transition name=&quot;why&quot;&gt;</span><br><span class=\"line\">    &lt;keep-alive&gt;</span><br><span class=\"line\">      &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;</span><br><span class=\"line\">    &lt;/keep-alive&gt;</span><br><span class=\"line\">  &lt;/transition&gt;</span><br><span class=\"line\">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态添加路由\"><a class=\"markdownIt-Anchor\" href=\"#动态添加路由\">#</a> 动态添加路由</h2>\n<p>某些情况下我们可能需要动态的来添加路由：比如根据用户不同的权限，注册不同的路由。这个时候我们可以使用一个方法  <code>addRoute</code></p>\n<ul>\n<li>添加顶级路由：<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/P%25I_0((DM%60ITK%25DRPCF2COO.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/P%I_0((DM`ITK%DRPCF2COO.png)</a></li>\n<li>添加二级路由对象<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/1RB3VFZZHORS82DD%60FO_C5C.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"动态删除路由\"><a class=\"markdownIt-Anchor\" href=\"#动态删除路由\">#</a> 动态删除路由</h2>\n<ol>\n<li>添加一个 name 相同的路由</li>\n<li>通过 removeRoute 方法，传入路由的名称</li>\n<li>通过 addRoute 方法的返回值回调<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/OJLWP%5DY@S80JCYCDWFNM81Z.png\" alt=\"\"><br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/H%5DFZO@8N@%5BW_D%5DYEU5E5S0K.png\" alt=\"\"><br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/I$OQ6ZJH$_Q%5BI%5BJ%7B6%60MLIPJ.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"路由导航守卫\"><a class=\"markdownIt-Anchor\" href=\"#路由导航守卫\">#</a> 路由导航守卫</h2>\n<p>全局的前置守卫 <code>beforeEach</code>  是在导航触发时会被回调的，它有两个参数：</p>\n<ul>\n<li><code>to</code> ：即将进入的路由 Route 对象</li>\n<li><code>from</code> ：即将离开的路由 Route 对象<br>\n它有返回值：</li>\n<li>false：取消当前导航</li>\n<li>不返回或者 undefined：进行默认导航</li>\n<li>返回一个路由地址：可以是一个 string 类型的路径；可以是一个对象，对象中包含 path、query、params 等信息<br>\n可选的第三个参数： <code>next</code></li>\n<li>在 Vue2 中我们是通过 next 函数来决定如何进行跳转的，但是在 Vue3 中我们是通过返回值来控制的，不再推荐使用 next 函数，这是因为开发中很容易调用多次 next<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/XV_VGX$9\" alt=\"\">HB5AE8SG943NS9.png)</li>\n</ul>\n<h2 id=\"登录守卫功能\"><a class=\"markdownIt-Anchor\" href=\"#登录守卫功能\">#</a> 登录守卫功能</h2>\n<p>比如我们完成一个功能，只有登录后才能看到其他页面：<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/4%606%60HY%60G8ABQ2R_B\" alt=\"\">T)UFO1.png)<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/6U0\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/6U0</a>{1(~VVLP7IR99W5WGRHU.png)</p>\n<h1 id=\"vuex-状态管理\"><a class=\"markdownIt-Anchor\" href=\"#vuex-状态管理\">#</a> Vuex 状态管理</h1>\n<ul>\n<li>\n<p>什么是状态管理？<br>\n在开发中，应用程序需要处理各种各样的数据，这些<br>\n数据需要保存在我们应用程序中的某一个位置，对于这些数据<br>\n的管理我们就称之为是 状态管理</p>\n</li>\n<li>\n<p>在前面我们是如何管理自己的状态呢？<br>\n在 Vue 开发中，我们使用组件化的开发方式，而在组件中我们定义 <code>data</code>  或者在 <code>setup</code>  中返回使用的数据，这些数据我们称之为 <code>state</code> <br>\n 在模块 <code>template</code>  中我们可以使用这些数据，模块最终会被渲染成 DOM，我们称之为 <code>View</code> <br>\n 在模块中我们会产生一些行为事件，处理这些行为事件时，<br>\n有可能会修改 state，这些行为事件我们称之为 <code>actions</code> <br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%25MA5OURUF\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%MA5OURUF</a>}(PO5C%MNS6{AM.png)</p>\n</li>\n<li>\n<p>复杂的状态管理<br>\n JavaScript 需要管理的状态越来越多，越来越复杂，这些状态包括服务器返回的数据、缓存数据、用户操作产生的数据等等，也包括一些 UI 的状态，比如某些元素是否被选中，是否显示加载动效，当前分页；<br>\n 当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏；<br>\n 对于一些简单的状态，确实可以通过 props 的传递或者 Provide 的方式来共享状态，但是对于复杂的状态管理来说，显然单纯通过传递和共享的方式是不足以解决问题的，比如兄弟组件如何共享数据呢？</p>\n</li>\n</ul>\n",
            "tags": [
                "前端开发",
                "VueRouter",
                "路由"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/14/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "url": "https://eucli.top/2023/04/14/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "title": "axios二次封装",
            "date_published": "2023-04-14T12:58:34.000Z",
            "content_html": "<h1 id=\"前端-后端-数据库间的数据传输\"><a class=\"markdownIt-Anchor\" href=\"#前端-后端-数据库间的数据传输\">#</a> 前端 - 后端 - 数据库间的数据传输</h1>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92.png\" alt=\"(数据交互)\"></p>\n<h1 id=\"前端请求流程\"><a class=\"markdownIt-Anchor\" href=\"#前端请求流程\">#</a> 前端请求流程</h1>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%8B%BF%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.png\" alt=\"(前端请求流程)\"></p>\n<h1 id=\"不进行封装直接使用-axios-一般有两种方式\"><a class=\"markdownIt-Anchor\" href=\"#不进行封装直接使用-axios-一般有两种方式\">#</a> 不进行封装直接使用 axios 一般有两种方式：</h1>\n<h2 id=\"1-axiosget-axiospost\"><a class=\"markdownIt-Anchor\" href=\"#1-axiosget-axiospost\">#</a> 1.  <code>axios.get()</code> 、 <code>axios.post()</code></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;url?参数1=值&amp;参数2=值&quot;</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;url&#x27;</span>,&#123;</span><br><span class=\"line\">  参数<span class=\"number\">1</span>:值，</span><br><span class=\"line\">  参数<span class=\"number\">2</span>:值</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-axios\"><a class=\"markdownIt-Anchor\" href=\"#2-axios\">#</a> 2.  <code>axios(&#123;&#125;)</code></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;请求的路径&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&quot;请求的方式，默认是get&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;&#125;, <span class=\"comment\">//get请求方式：前端给后端传递的数据</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;&#125;, <span class=\"comment\">//post请求方式：前端给后端传递的数据</span></span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;&#125;, <span class=\"comment\">//自定义请求头</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>, <span class=\"comment\">//如果请求超过timeout的值，请求会中断</span></span><br><span class=\"line\">  <span class=\"attr\">responseType</span>: <span class=\"string\">&quot;默认是json&quot;</span>, <span class=\"comment\">// 表示浏览器将要响应的数据类型</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-实际开发情况下的网络请求\"><a class=\"markdownIt-Anchor\" href=\"#2-实际开发情况下的网络请求\">#</a> 2. 实际开发情况下的网络请求</h1>\n<h1 id=\"实际开发中前端请求接口会出现跨域\"><a class=\"markdownIt-Anchor\" href=\"#实际开发中前端请求接口会出现跨域\">#</a> 实际开发中，前端请求接口会出现跨域</h1>\n<p>控制台打印 <code>CORS   &quot;NO 'Access-Control-Allow-Origin' ……&quot;</code></p>\n<h2 id=\"解决跨域前端解决-设置代理\"><a class=\"markdownIt-Anchor\" href=\"#解决跨域前端解决-设置代理\">#</a> 解决跨域：前端解决 ——&gt; 设置代理</h2>\n<p>vue 项目，在  <code>vue.config.js</code>  中配置  <code>devServer</code> <br>\n 配置参考：<a href=\"https://cli.vuejs.org/zh/config\">https://cli.vuejs.org/zh/config</a><br>\n 说明：如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在 <code>开发环境下</code> 将 API 请求代理到 API 服务器<br>\n具体配置，在  <code>vue.config.js</code>  文件中加入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">proxy</span>: <span class=\"string\">&quot;http://localhost:4000&quot;</span>; <span class=\"comment\">//后端API服务器地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代理之后  <code>axios</code>  请求的时候就不用写地址全拼了，直接写代理地址后面的就行</li>\n</ul>\n<h1 id=\"主要的文件\"><a class=\"markdownIt-Anchor\" href=\"#主要的文件\">#</a> 主要的文件</h1>\n<ul>\n<li><code>src/utils/request.js</code>  `：用于二次封装 axios</li>\n<li><code>src/api</code>  ：用于统一管理接口</li>\n<li><code>src/.env.development</code>  ：开发环境</li>\n<li><code>src/.env.production</code>  ：生产环境</li>\n<li><code>vite.config.js</code> ：配置代理</li>\n</ul>\n<h2 id=\"前端请求接口的封装axios-二次封装\"><a class=\"markdownIt-Anchor\" href=\"#前端请求接口的封装axios-二次封装\">#</a> 前端请求接口的封装 (axios 二次封装)</h2>\n<p>在  <code>src/utils/request.js:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**1.引入axios */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**2.创建axios实例 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>: <span class=\"string\">&#x27;foobar&#x27;</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**3.请求拦截器 */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建请求拦截  前端给后端的东西(没有到后端)</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**在发送请求之前做些什么==&gt; 判断用户登录状态 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**4.响应拦截器 */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建响应拦截  后端给前端的东西</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 处理自己的业务逻辑，比如判断 token 是否过期等等 request</span></span><br><span class=\"line\">    <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(message);</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> instance;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"api-接口统一管理\"><a class=\"markdownIt-Anchor\" href=\"#api-接口统一管理\">#</a> api 接口统一管理</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/request&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询课程接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> courseSearch = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data <span class=\"comment\">//因为不同的页面对参数配置的值的需求不一样，所以作为形参让用户自己传过来 get请求是params，post请求是data</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用请求\"><a class=\"markdownIt-Anchor\" href=\"#使用请求\">#</a> 使用请求</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//某个需要用到“查询课程接口”的vue文件</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;courseSearch&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/course.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">……</span><br><span class=\"line\"><span class=\"title function_\">courseSearch</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//传入需求的参数的值</span></span><br><span class=\"line\">  <span class=\"attr\">pageNum</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">pageSize</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">……</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "axios二次封装"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/12/TypeScript%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/",
            "url": "https://eucli.top/2023/04/12/TypeScript%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/",
            "title": "TypeScript中文文档",
            "date_published": "2023-04-12T10:32:23.000Z",
            "content_html": "<h1 id=\"中文手册\"><a class=\"markdownIt-Anchor\" href=\"#中文手册\">#</a> <strong>中文手册</strong></h1>\n<h1 id=\"基础类型\"><a class=\"markdownIt-Anchor\" href=\"#基础类型\">#</a> 基础类型</h1>\n<p>大多类型都和 js 一样，不一一列举了，就记录几个 ts 特有的：</p>\n<h2 id=\"数组-number\"><a class=\"markdownIt-Anchor\" href=\"#数组-number\">#</a> 数组 number</h2>\n<p>TypeScript 有两种方式可以定义数组。<br>\n第一种，可以在元素类型后面接上 <code>[]</code> ，表示由此类型元素组成的一个数组：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>第二种方式是使用数组泛型， <code>Array&lt;元素类型&gt;</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组-tuple\"><a class=\"markdownIt-Anchor\" href=\"#元组-tuple\">#</a> 元组 Tuple</h2>\n<p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>  和 <code>number</code>  类型的元组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个元组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\"><span class=\"comment\">// 初始化这个元组</span></span><br><span class=\"line\">x = [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化不正确</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&quot;hello&quot;</span>]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<p>当访问一个已知索引的元素，会得到正确的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">1</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// Error, &#x27;number&#x27; does not have &#x27;substr&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>当访问一个越界的元素，会使用联合类型替代：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&quot;world&quot;</span>; <span class=\"comment\">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">5</span>].<span class=\"title function_\">toString</span>()); <span class=\"comment\">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">6</span>] = <span class=\"literal\">true</span>; <span class=\"comment\">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举-enum\"><a class=\"markdownIt-Anchor\" href=\"#枚举-enum\">#</a> 枚举 enum</h2>\n<p><code>enum</code>  类型是对 JavaScript 标准数据类型的一个补充。 像 C# 等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Red</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Green</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Blue</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>;</span><br></pre></td></tr></table></figure>\n<p>默认情况下，从 <code>0</code>  开始为元素编号。 你也可以手动的指定成员的数值:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Red</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Green</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Blue</span> = <span class=\"number\">4</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>;</span><br></pre></td></tr></table></figure>\n<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Red</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Green</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Blue</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">colorName</span>: <span class=\"built_in\">string</span> = <span class=\"title class_\">Color</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colorName); <span class=\"comment\">// 显示&#x27;Green&#x27;因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"任意值-any\"><a class=\"markdownIt-Anchor\" href=\"#任意值-any\">#</a> 任意值 any</h2>\n<p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code>  类型来标记这些变量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">notSure</span>: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">notSure = <span class=\"string\">&quot;maybe a string instead&quot;</span>;</span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>; <span class=\"comment\">// 变成了布尔值</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"空值-void\"><a class=\"markdownIt-Anchor\" href=\"#空值-void\">#</a> 空值 void</h2>\n<p>某种程度上来说， <code>void</code>  类型像是与 <code>any</code>  类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">warnUser</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明一个 <code>void</code>  类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code>  和 <code>null</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unusable</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"null-和-undefined\"><a class=\"markdownIt-Anchor\" href=\"#null-和-undefined\">#</a> Null 和 Undefined</h2>\n<p>TypeScript 里， <code>undefined</code>  和 <code>null</code>  两者各自有自己的类型分别叫做 <code>undefined</code>  和 <code>null</code> 。 和 <code>void</code>  相似，它们的本身的类型用处不是很大。<br>\n默认情况下 <code>null</code>  和 <code>undefined</code>  是所有类型的子类型。 就是说你可以把 <code>null</code>  和 <code>undefined</code>  赋值给 <code>number</code>  类型的变量。<br>\n然而，当你指定了 <code>--strictNullChecks</code>  标记， <code>null</code>  和 <code>undefined</code>  只能赋值给 <code>void</code>  和它们各自。 这能避免很多常见的问题。 也许在某处你想传入一个 <code>string</code>  或 <code>null</code>  或 <code>undefined</code> ，你可以使用联合类型 <code>string | null | undefined</code> 。</p>\n<ul>\n<li>注意：我们鼓励尽可能地使用 <code>--strictNullChecks</code> ，但在本手册里我们假设这个标记是关闭的。</li>\n</ul>\n<h2 id=\"never\"><a class=\"markdownIt-Anchor\" href=\"#never\">#</a> Never</h2>\n<p><code>never</code>  类型表示的是那些永不存在的值的类型。 例如， <code>never</code>  类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never 类型，当它们被永不为真的类型保护所约束时。</p>\n<p><code>never</code>  类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code>  的子类型或可以赋值给 <code>never</code>  类型（除了 <code>never</code>  本身之外）。 即使 <code>any</code>  也不可以赋值给 <code>never</code> 。</p>\n<p>下面是一些返回 <code>never</code>  类型的函数：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推断的返回值类型为never</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(<span class=\"string\">&quot;Something failed&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">infiniteLoop</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型断言\"><a class=\"markdownIt-Anchor\" href=\"#类型断言\">#</a> 类型断言</h2>\n<p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p>\n<p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。<br>\n类型断言有两种形式。<br>\n其一是 “尖括号” 语法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>另一个为  <code>as </code> 语法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有  <code>as</code>  语法断言是被允许的。</p>\n<h1 id=\"变量声明\"><a class=\"markdownIt-Anchor\" href=\"#变量声明\">#</a> 变量声明</h1>\n<h2 id=\"let-声明\"><a class=\"markdownIt-Anchor\" href=\"#let-声明\">#</a> let 声明</h2>\n<h3 id=\"块作用域\"><a class=\"markdownIt-Anchor\" href=\"#块作用域\">#</a> 块作用域</h3>\n<p>当用 <code>let</code>  声明一个变量，它使用的是词法作用域或块作用域。 不同于使用 <code>var</code>  声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 <code>for</code>  循环之外是<strong>不能访问的</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">input: <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 仍然可以引用 &#x27;a&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = a + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Error: &#x27;b&#x27; 在这里不存在</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们定义了 2 个变量 <code>a</code>  和 <code>b</code> 。  <code>a</code>  的作用域是 <code>f</code>  函数体内，而 b 的作用域是 <code>if</code>  语句块里。</p>\n<p>在 <code>catch</code>  语句里声明的变量也具有同样的作用域规则:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">&quot;oh no!&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Oh well.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error: &#x27;e&#x27; 在这里不存在</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br></pre></td></tr></table></figure>\n<p>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终 “存在” 于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。<br>\n它只是用来说明我们不能在 <code>let</code>  语句之前访问它们，幸运的是 TypeScript 可以告诉我们这些信息:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a++; <span class=\"comment\">// illegal to use &#x27;a&#x27; before it&#x27;s declared;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br></pre></td></tr></table></figure>\n<h2 id=\"const-声明\"><a class=\"markdownIt-Anchor\" href=\"#const-声明\">#</a> const 声明</h2>\n<p>const 声明是声明变量的另一种方式。它们与 let 声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let 相同的作用域规则，但是不能对它们重新赋值。</p>\n<h2 id=\"let-vs-const\"><a class=\"markdownIt-Anchor\" href=\"#let-vs-const\">#</a> let vs. const</h2>\n<p>现在我们有两种作用域相似的声明方式，我们自然会问到底应该使用哪个。 与大多数泛泛的问题一样，答案是：依情况而定。</p>\n<p>使用<strong>最小特权原则</strong>，所有变量除了你计划去修改的都应该使用  <code>const</code> 。 基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。 使用  <code>const</code>  也可以让我们更容易的推测数据的流动。</p>\n<p>另一方面，用户很喜欢  <code>let</code>  的简洁性。</p>\n<h2 id=\"解构\"><a class=\"markdownIt-Anchor\" href=\"#解构\">#</a> 解构</h2>\n<h3 id=\"解构数组\"><a class=\"markdownIt-Anchor\" href=\"#解构数组\">#</a> 解构数组</h3>\n<p>最简单的解构莫过于数组的解构赋值了：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second] = input;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first); <span class=\"comment\">//  1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second); <span class=\"comment\">//  2</span></span><br></pre></td></tr></table></figure>\n<p>这创建了 2 个命名变量  <code>first</code>  和  <code>second</code> 。 相当于使用了索引，但更为方便：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first = input[<span class=\"number\">0</span>];</span><br><span class=\"line\">second = input[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<p>作用于函数参数：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[first, second]: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(input);</span><br></pre></td></tr></table></figure>\n<p>你可以在数组里使用 <code>...</code>  语法创建剩余变量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first); <span class=\"comment\">//  1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest); <span class=\"comment\">//  [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象解构\"><a class=\"markdownIt-Anchor\" href=\"#对象解构\">#</a> 对象解构</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&quot;foo&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&quot;bar&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = o;</span><br></pre></td></tr></table></figure>\n<p>这通过  <code>o.a</code>  and  <code>o.b</code>  创建了  <code>a</code>  和 <code>b</code>  。 注意，如果你不需要  <code>c</code>  你可以忽略它。</p>\n<p>就像数组解构，你可以用没有声明的赋值：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;baz&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">101</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>注意，我们需要用括号将它括起来，因为 Javascript 通常会将以  <code>&#123;</code>  起始的语句解析为一个块。</p>\n<h3 id=\"函数声明\"><a class=\"markdownIt-Anchor\" href=\"#函数声明\">#</a> 函数声明</h3>\n<p>解构也能用于函数声明。 看以下简单的情况：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> C = &#123; <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>; b?: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125;: C</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125; = &#123; a: <span class=\"string\">&quot;&quot;</span>, b: <span class=\"number\">0</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(); <span class=\"comment\">// ok, default to &#123; a: &quot;&quot;, b: 0 &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>上面的代码是一个类型推断的例子，将在本手册后文介绍。</li>\n</ul>\n<p>其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道  <code>C </code> 的定义有一个  <code>b</code>  可选属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b = <span class=\"number\">0</span> &#125; = &#123; a: <span class=\"string\">&quot;&quot;</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;yes&quot;</span> &#125;); <span class=\"comment\">// ok, 默认 b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(); <span class=\"comment\">// ok, 默认为&#123;a: &quot;&quot;&#125;，然后默认为b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123;&#125;); <span class=\"comment\">// error, 如果你提供一个参数，&#x27;a&#x27;是必需的</span></span><br></pre></td></tr></table></figure>\n<p>要小心使用解构。 从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。 尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。 解构表达式要尽量保持小而简单。 你自己也可以直接使用解构将会生成的赋值表达式。</p>\n<h2 id=\"展开\"><a class=\"markdownIt-Anchor\" href=\"#展开\">#</a> 展开</h2>\n<p>展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。 例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> first = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> second = [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> bothPlus = [<span class=\"number\">0</span>, ...first, ...second, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<p>这会令 <code>bothPlus</code>  的值为 <code>[0, 1, 2, 3, 4, 5]</code> 。 展开操作创建了 <code>first</code>  和 <code>second</code>  的一份浅拷贝。 它们不会被展开操作所改变。<br>\n你还可以展开对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> defaults = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&quot;spicy&quot;</span>, <span class=\"attr\">price</span>: <span class=\"string\">&quot;$$&quot;</span>, <span class=\"attr\">ambiance</span>: <span class=\"string\">&quot;noisy&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> search = &#123; ...defaults, <span class=\"attr\">food</span>: <span class=\"string\">&quot;rich&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>search</code>  的值为 <code>&#123; food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; &#125;</code> 。 对象的展开比数组的展开要复杂的多。 像数组展开一样，它是从左至右进行处理，但结果仍为对象。<br>\n这就意味着<strong>出现在展开对象后面的属性会覆盖前面的属性</strong>。<br>\n因此，如果我们修改上面的例子，在结尾处进行展开的话:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> defaults = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&quot;spicy&quot;</span>, <span class=\"attr\">price</span>: <span class=\"string\">&quot;$$&quot;</span>, <span class=\"attr\">ambiance</span>: <span class=\"string\">&quot;noisy&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> search = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&quot;rich&quot;</span>, ...defaults &#125;;</span><br></pre></td></tr></table></figure>\n<p>那么， <code>defaults</code>  里的 <code>food</code>  属性会把 <code>food: &quot;rich&quot;</code>  重写，在这里这并不是我们想要的结果。</p>\n<p>对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 <strong>自身的可枚举属性</strong>。 大体上是说当你展开一个对象实例时，你会丢失其方法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  p = <span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"title function_\">m</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> clone = &#123; ...c &#125;;</span><br><span class=\"line\">clone.<span class=\"property\">p</span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">clone.<span class=\"title function_\">m</span>(); <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<p>其次，TypeScript 编译器不允许展开泛型函数上的类型参数。 这个特性会在 TypeScript 的未来版本中考虑实现。</p>\n<h1 id=\"接口interface\"><a class=\"markdownIt-Anchor\" href=\"#接口interface\">#</a> 接口 (interface)</h1>\n<p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做 “鸭式辨型法” 或 “结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>\n<h2 id=\"接口初探\"><a class=\"markdownIt-Anchor\" href=\"#接口初探\">#</a> 接口初探</h2>\n<p>下面通过一个简单示例来观察接口是如何工作的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printLabel</span>(<span class=\"params\">labelledObj: &#123; label: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(labelledObj.<span class=\"property\">label</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123; <span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">printLabel</span>(myObj);</span><br></pre></td></tr></table></figure>\n<p>类型检查器会查看 <code>printLabel</code>  的调用。  <code>printLabel</code>  有一个参数，并要求这个对象参数有一个名为 l <code>abel</code>  类型为 <code>string</code>  的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。 然而，有些时候 TypeScript 却并不会这么宽松，我们下面会稍做讲解。<br>\n下面我们重写上面的例子，这次使用接口来描述：必须包含一个 <code>label</code>  属性且类型为 <code>string</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LabelledValue</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">label</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printLabel</span>(<span class=\"params\">labelledObj: LabelledValue</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(labelledObj.<span class=\"property\">label</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123; <span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">printLabel</span>(myObj);</span><br></pre></td></tr></table></figure>\n<p><code>LabelledValue</code>  接口就好比一个名字，用来描述上面例子里的要求。 它代表了有一个 <code>label</code>  属性且类型为 <code>string</code>  的对象。 需要注意的是，我们在这里并不能像在其它语言里一样，说传给 <code>printLabel</code>  的对象实现了这个接口。我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的。</p>\n<p>还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</p>\n<h2 id=\"可选属性\"><a class=\"markdownIt-Anchor\" href=\"#可选属性\">#</a> 可选属性</h2>\n<p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用 “option bags” 模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p>\n<p>下面是应用了 “option bags” 的例子：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSquare</span>(<span class=\"params\">config: SquareConfig</span>): &#123; <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">area</span>: <span class=\"built_in\">number</span> &#125; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newSquare = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;white&quot;</span>, <span class=\"attr\">area</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">color</span>) &#123;</span><br><span class=\"line\">    newSquare.<span class=\"property\">color</span> = config.<span class=\"property\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">width</span>) &#123;</span><br><span class=\"line\">    newSquare.<span class=\"property\">area</span> = config.<span class=\"property\">width</span> * config.<span class=\"property\">width</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newSquare;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code>  符号。</p>\n<p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 <code>createSquare</code>  里的 <code>color</code>  属性名拼错，就会得到一个错误提示：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSquare</span>(<span class=\"params\">config: SquareConfig</span>): &#123; <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">area</span>: <span class=\"built_in\">number</span> &#125; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newSquare = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;white&quot;</span>, <span class=\"attr\">area</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">color</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Error: Property &#x27;clor&#x27; does not exist on type &#x27;SquareConfig&#x27;</span></span><br><span class=\"line\">    newSquare.<span class=\"property\">color</span> = config.<span class=\"property\">clor</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">width</span>) &#123;</span><br><span class=\"line\">    newSquare.<span class=\"property\">area</span> = config.<span class=\"property\">width</span> * config.<span class=\"property\">width</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newSquare;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"只读属性\"><a class=\"markdownIt-Anchor\" href=\"#只读属性\">#</a> 只读属性</h2>\n<p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>  来指定只读属性:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以通过赋值一个对象字面量来构造一个 <code>Point</code> 。 赋值后， <code>x</code>  和 <code>y</code>  再也不能被改变了。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">Point</span> = &#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">20</span> &#125;;</span><br><span class=\"line\">p1.<span class=\"property\">x</span> = <span class=\"number\">5</span>; <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<p>TypeScript 具有 <code>ReadonlyArray&lt;T&gt;</code>  类型，它与 <code>Array&lt;T&gt;</code>  相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ro</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"title function_\">push</span>(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"property\">length</span> = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的最后一行，可以看到就算把整个 <code>ReadonlyArray</code>  赋值到一个普通数组也是不可以的。 但是你可以用类型断言重写：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n<h3 id=\"readonly-vs-const\"><a class=\"markdownIt-Anchor\" href=\"#readonly-vs-const\">#</a> readonly vs const</h3>\n<p>最简单判断该用 <code>readonly</code>  还是 <code>const</code>  的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code> ，若做为属性则使用 <code>readonly</code> 。</p>\n<h2 id=\"函数类型\"><a class=\"markdownIt-Anchor\" href=\"#函数类型\">#</a> 函数类型</h2>\n<p>接口能够描述 JavaScript 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>\n<p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。 它就像是一个只有<strong>参数列表</strong>和<strong>返回值类型</strong>的函数定义。参数列表里的每个参数都需要名字和类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span> (<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source.<span class=\"title function_\">search</span>(subString);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可索引的类型\"><a class=\"markdownIt-Anchor\" href=\"#可索引的类型\">#</a> 可索引的类型</h2>\n<p>与使用接口描述函数类型差不多，我们也可以描述那些能够 “通过索引得到” 的类型，比如  <code>a[10]</code>  或  <code>ageMap[&quot;daniel&quot;]</code> 。 可索引类型具有一个<strong>索引签名</strong>，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看一个例子：</p>\n<h2 id=\"类类型\"><a class=\"markdownIt-Anchor\" href=\"#类类型\">#</a> 类类型</h2>\n<h3 id=\"实现接口\"><a class=\"markdownIt-Anchor\" href=\"#实现接口\">#</a> 实现接口</h3>\n<h2 id=\"继承接口\"><a class=\"markdownIt-Anchor\" href=\"#继承接口\">#</a> 继承接口</h2>\n<h1 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h1>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<h1 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\">#</a> 枚举</h1>\n<h1 id=\"类型推论\"><a class=\"markdownIt-Anchor\" href=\"#类型推论\">#</a> 类型推论</h1>\n<h1 id=\"类型兼容性\"><a class=\"markdownIt-Anchor\" href=\"#类型兼容性\">#</a> 类型兼容性</h1>\n<h1 id=\"高级类型\"><a class=\"markdownIt-Anchor\" href=\"#高级类型\">#</a> 高级类型</h1>\n<h1 id=\"symbols\"><a class=\"markdownIt-Anchor\" href=\"#symbols\">#</a> Symbols</h1>\n<h1 id=\"iterators-和-generators\"><a class=\"markdownIt-Anchor\" href=\"#iterators-和-generators\">#</a> Iterators 和 Generators</h1>\n<h1 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\">#</a> 模块</h1>\n<h1 id=\"命名空间\"><a class=\"markdownIt-Anchor\" href=\"#命名空间\">#</a> 命名空间</h1>\n<h1 id=\"命名空间和模块\"><a class=\"markdownIt-Anchor\" href=\"#命名空间和模块\">#</a> 命名空间和模块</h1>\n<h1 id=\"模块解析\"><a class=\"markdownIt-Anchor\" href=\"#模块解析\">#</a> 模块解析</h1>\n<h1 id=\"声明合并\"><a class=\"markdownIt-Anchor\" href=\"#声明合并\">#</a> 声明合并</h1>\n<h1 id=\"书写dts-文件\"><a class=\"markdownIt-Anchor\" href=\"#书写dts-文件\">#</a> 书写.d.ts 文件</h1>\n<h1 id=\"jsx\"><a class=\"markdownIt-Anchor\" href=\"#jsx\">#</a> JSX</h1>\n<h1 id=\"decorators\"><a class=\"markdownIt-Anchor\" href=\"#decorators\">#</a> Decorators</h1>\n<h1 id=\"混入\"><a class=\"markdownIt-Anchor\" href=\"#混入\">#</a> 混入</h1>\n<h1 id=\"三斜线指令\"><a class=\"markdownIt-Anchor\" href=\"#三斜线指令\">#</a> 三斜线指令</h1>\n<h1 id=\"javascript-文件里的类型检查\"><a class=\"markdownIt-Anchor\" href=\"#javascript-文件里的类型检查\">#</a> JavaScript 文件里的类型检查</h1>\n<p>——————————————————————————————————————————————————————————————</p>\n<h1 id=\"如何书写声明文件\"><a class=\"markdownIt-Anchor\" href=\"#如何书写声明文件\">#</a> <strong>如何书写声明文件</strong></h1>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h1>\n<h1 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h1>\n<h1 id=\"规范\"><a class=\"markdownIt-Anchor\" href=\"#规范\">#</a> 规范</h1>\n<h1 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\">#</a> 举例</h1>\n<h1 id=\"深入\"><a class=\"markdownIt-Anchor\" href=\"#深入\">#</a> 深入</h1>\n<h1 id=\"发布\"><a class=\"markdownIt-Anchor\" href=\"#发布\">#</a> 发布</h1>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>——————————————————————————————————————————————————————————————</p>\n<h1 id=\"工程配置\"><a class=\"markdownIt-Anchor\" href=\"#工程配置\">#</a> <strong>工程配置</strong></h1>\n<h1 id=\"tsconfigjson\"><a class=\"markdownIt-Anchor\" href=\"#tsconfigjson\">#</a> tsconfig.json</h1>\n<h1 id=\"npm-包的类型\"><a class=\"markdownIt-Anchor\" href=\"#npm-包的类型\">#</a> NPM 包的类型</h1>\n<h1 id=\"编译选项\"><a class=\"markdownIt-Anchor\" href=\"#编译选项\">#</a> 编译选项</h1>\n<h1 id=\"在-msbuild-里使用编译选项\"><a class=\"markdownIt-Anchor\" href=\"#在-msbuild-里使用编译选项\">#</a> 在 MSBuild 里使用编译选项</h1>\n<h1 id=\"与其他构建工具整合\"><a class=\"markdownIt-Anchor\" href=\"#与其他构建工具整合\">#</a> 与其他构建工具整合</h1>\n<h1 id=\"使用-typescript-的每日构建版本\"><a class=\"markdownIt-Anchor\" href=\"#使用-typescript-的每日构建版本\">#</a> 使用 TypeScript 的每日构建版本</h1>\n",
            "tags": [
                "前端开发",
                "TypeScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/12/MATLAB/",
            "url": "https://eucli.top/2023/04/12/MATLAB/",
            "title": "MATLAB",
            "date_published": "2023-04-12T02:16:34.000Z",
            "content_html": "",
            "tags": [
                "数学建模",
                "MATLAB"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/04/%E4%BC%98%E9%9B%85%E7%9A%84%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/",
            "url": "https://eucli.top/2023/04/04/%E4%BC%98%E9%9B%85%E7%9A%84%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/",
            "title": "优雅的单行代码",
            "date_published": "2023-04-04T04:20:34.000Z",
            "content_html": "<h2 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> <strong>数组去重</strong></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">uniqueArr</span> = (<span class=\"params\">arr</span>) =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">uniqueArr</span>([<span class=\"string\">&quot;前端&quot;</span>, <span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;html&quot;</span>, <span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>, <span class=\"string\">&quot;html&quot;</span>]));</span><br><span class=\"line\"><span class=\"comment\">//[&#x27;前端&#x27;,&#x27;js&#x27;,&#x27;html&#x27;,&#x27;css&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"从-url-获取参数并转为对象\"><a class=\"markdownIt-Anchor\" href=\"#从-url-获取参数并转为对象\">#</a> <strong>从 url 获取参数并转为对象</strong></h2>\n<p>网页路径经常是： <code>www.baidu.com?search=js&amp;xxx=kkk</code>  这种形式的，我们是经常需要取参数的，可以使用第三方的 qs 包实现，如果你只是要实现去参数，这一句代码就可以实现，不用再引入 qs 了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getParameters</span> = (<span class=\"params\">URL</span>) =&gt; <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">`&#123;&quot;<span class=\"subst\">$&#123;decodeURL(URL.split(<span class=\"string\">&quot;?&quot;</span>)[<span class=\"number\">1</span>]).replace(/<span class=\"string\">&quot;/g, &#x27;\\\\&quot;</span><span class=\"string\">&#x27;).replace(/&amp;/g, &#x27;</span><span class=\"string\">&quot;,&quot;</span><span class=\"string\">&#x27;).replace(/=/g, &#x27;</span><span class=\"string\">&quot;:&quot;</span><span class=\"string\">&#x27;)&#125;&quot;&#125;`);</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\"></span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">getParameters(&quot;https://www.google.com.hk/search?q=js+md&amp;newwinodw=1&quot;);</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">// &#123;q: &#x27;</span>js+md<span class=\"string\">&#x27;, newwinodw: &#x27;</span><span class=\"number\">1</span><span class=\"string\">&#x27;&#125;</span></span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查对象是否为空\"><a class=\"markdownIt-Anchor\" href=\"#检查对象是否为空\">#</a> <strong>检查对象是否为空</strong></h2>\n<p>检查对象是否为空，实际上并不那么简单，即使对象为空，每次检查对象是否等于 {} 也会返回 false。<br>\n幸运的是，下面的单行代码正是我们想要的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isEmpty</span> = (<span class=\"params\">obj</span>) =&gt; <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj).<span class=\"property\">length</span> === <span class=\"number\">0</span> &amp;&amp; obj.<span class=\"property\">constructor</span> === <span class=\"title class_\">Object</span>;</span><br><span class=\"line\"><span class=\"title function_\">isEmpty</span>(&#123;&#125;); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title function_\">isEmpty</span>(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;not empty&quot;</span> &#125;); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"反转字符串\"><a class=\"markdownIt-Anchor\" href=\"#反转字符串\">#</a> <strong>反转字符串</strong></h2>\n<p>反转字符串可以使用 <code>split</code>  结合 <code>reverse</code>  和 <code>join</code>  方法轻松实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverse</span> = (<span class=\"params\">str</span>) =&gt; str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"string\">&quot;this is reverse&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// esrever si siht</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成随机十六进制\"><a class=\"markdownIt-Anchor\" href=\"#生成随机十六进制\">#</a> <strong>生成随机十六进制</strong></h2>\n<p>生成随机数相信你能信手拈来，那随机生成十六进制，例如生成十六进制颜色值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomHexColor</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xffffff</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    .toString(<span class=\"number\">16</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    .padEnd(<span class=\"number\">6</span>, <span class=\"string\">&quot;0&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">randomHexColor</span>());</span><br><span class=\"line\"><span class=\"comment\">// #a2ce5b</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查当前选项卡是否在后台\"><a class=\"markdownIt-Anchor\" href=\"#检查当前选项卡是否在后台\">#</a> <strong>检查当前选项卡是否在后台</strong></h2>\n<p>浏览器使用选项卡式浏览，任何网页都有可能在后台，此时对用户来说是没有在浏览的，知道怎么快速检测到，你的网页对用户是隐藏还是可见吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isTabActive</span> = (<span class=\"params\"></span>) =&gt; !<span class=\"variable language_\">document</span>.<span class=\"property\">hidden</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isTabActive</span>();</span><br><span class=\"line\"><span class=\"comment\">// true|false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检测元素是否处于焦点\"><a class=\"markdownIt-Anchor\" href=\"#检测元素是否处于焦点\">#</a> <strong>检测元素是否处于焦点</strong></h2>\n<p><code>activeElement</code>  属性返回文档中当前获得焦点的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">elementIsInFocus</span> = (<span class=\"params\">el</span>) =&gt; el === <span class=\"variable language_\">document</span>.<span class=\"property\">activeElement</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">elementIsInFocus</span>(anyElement);</span><br><span class=\"line\"><span class=\"comment\">// 元素处于焦点返回true，反之返回false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查设备类型\"><a class=\"markdownIt-Anchor\" href=\"#检查设备类型\">#</a> <strong>检查设备类型</strong></h2>\n<p>使用 <code>navigator.userAgent</code>  判断是移动设备还是电脑设备：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">judgeDeviceType</span> = (<span class=\"params\"></span>) =&gt; (<span class=\"regexp\">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i</span>.<span class=\"title function_\">test</span>(navigator.<span class=\"property\">userAgent</span>) ? <span class=\"string\">&quot;Mobile&quot;</span> : <span class=\"string\">&quot;PC&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">judgeDeviceType</span>(); <span class=\"comment\">// PC | Mobile</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文字复制到剪贴板\"><a class=\"markdownIt-Anchor\" href=\"#文字复制到剪贴板\">#</a> <strong>文字复制到剪贴板</strong></h2>\n<p><code>Clipboard API </code> 它的所有操作都是异步的，返回  <code>Promise </code> 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyText</span> = <span class=\"keyword\">async</span> (<span class=\"params\">text</span>) =&gt; <span class=\"keyword\">await</span> navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(text);</span><br><span class=\"line\"><span class=\"title function_\">copyText</span>(<span class=\"string\">&quot;单行代码 前端世界&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取选定的文本\"><a class=\"markdownIt-Anchor\" href=\"#获取选定的文本\">#</a> <strong>获取选定的文本</strong></h2>\n<p>使用内置的  <code>getSelection </code> 获取用户选择的文本:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSelectedText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getSelectedText</span>();</span><br><span class=\"line\"><span class=\"comment\">// 返回选中的内容</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查询某天是否为工作日\"><a class=\"markdownIt-Anchor\" href=\"#查询某天是否为工作日\">#</a> <strong>查询某天是否为工作日</strong></h2>\n<p>我们自己写日历组件时经常会用到，判断某个日期是否为工作日；周一至周五为工作日:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isWeekday</span> = (<span class=\"params\">date</span>) =&gt; date.<span class=\"title function_\">getDay</span>() % <span class=\"number\">6</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isWeekday</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">03</span>, <span class=\"number\">11</span>));</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"转换华氏摄氏\"><a class=\"markdownIt-Anchor\" href=\"#转换华氏摄氏\">#</a> <strong>转换华氏 / 摄氏</strong></h2>\n<p>处理温度有时会晕头转向。这两个函数则能帮助大家将华氏温度转换为摄氏温度，以及将摄氏温度转换为华氏温度。</p>\n<ul>\n<li>将华氏温度转换为摄氏温度</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fahrenheitToCelsius</span> = (<span class=\"params\">fahrenheit</span>) =&gt; ((fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span>) / <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fahrenheitToCelsius</span>(<span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>将摄氏温度转华氏温度</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">celsiusToFahrenheit</span> = (<span class=\"params\">celsius</span>) =&gt; (celsius * <span class=\"number\">9</span>) / <span class=\"number\">5</span> + <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">celsiusToFahrenheit</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"comment\">// 212</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"两日期之间相差的天数\"><a class=\"markdownIt-Anchor\" href=\"#两日期之间相差的天数\">#</a> <strong>两日期之间相差的天数</strong></h2>\n<p>日常开发中经常遇到需要显示剩余天数， 一般我们就需要计算两日期之间相差天数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dayDiff</span> = (<span class=\"params\">date1, date2</span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(date1.<span class=\"title function_\">getTime</span>() - date2.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">86400000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">dayDiff</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-21&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2022-02-12&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// Result: 114</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>将 RGB 转换为十六进制</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">rgbToHex</span> = (<span class=\"params\">r, g, b</span>) =&gt; <span class=\"string\">&quot;#&quot;</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">rgbToHex</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"comment\">//  #ffffff</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"计算数组平均值\"><a class=\"markdownIt-Anchor\" href=\"#计算数组平均值\">#</a> <strong>计算数组平均值</strong></h2>\n<p>计算平均值的方式很多，计算的逻辑都是一样的， 但是实现方式各不相同，一行代码简单实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">average</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / arr.<span class=\"property\">length</span>;</span><br><span class=\"line\"><span class=\"title function_\">average</span>([<span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">18</span>, <span class=\"number\">36</span>]); <span class=\"comment\">//16</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "优雅",
                "JavaScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/04/Nginx/",
            "url": "https://eucli.top/2023/04/04/Nginx/",
            "title": "Nginx学习",
            "date_published": "2023-04-04T02:16:34.000Z",
            "content_html": "",
            "tags": [
                "反向代理",
                "Nginx"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/28/TS%E7%99%BE%E7%BB%83%E9%A3%9E%E5%8D%87/",
            "url": "https://eucli.top/2023/03/28/TS%E7%99%BE%E7%BB%83%E9%A3%9E%E5%8D%87/",
            "title": "TS百练飞升",
            "date_published": "2023-03-28T10:20:34.000Z",
            "content_html": "<h2 id=\"什么时候用ts写法\"><a class=\"markdownIt-Anchor\" href=\"#什么时候用ts写法\">#</a> 什么时候用 ts 写法？</h2>\n<p>类型能推导出来的时候不用写 ts，推导不出来的时候再写</p>\n<ul>\n<li>类型断言<br>\n通过类型断言这种方式可以告诉编译器：“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响。TypeScript 会假设你已经进行了必须的检查。<br>\n断言类型有两种形式。其一是’‘尖括号’' 语法：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;this is a string&#x27;</span>；</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>:<span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).<span class=\"property\">length</span>；</span><br></pre></td></tr></table></figure>\n<p>另一个为 as 语法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;this is a string&#x27;</span>；</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>:<span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span>；</span><br></pre></td></tr></table></figure>\n<p>两种形式是等价的。至于使用哪个大多数情况是凭个人爱好；然而，当你在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。</p>\n<p>——————————————————————————————————————————————————————————————————————————————————————————————————————————————</p>\n<h1 id=\"认识-typescript\"><a class=\"markdownIt-Anchor\" href=\"#认识-typescript\">#</a> 认识 TypeScript</h1>\n<ul>\n<li>\n<p>JavaScript 的痛点：<br>\nJavaScript 在类型检测上依然是毫无进展，而，编程开发中我们有一个共识：错误出现的越早越好。能在写代码的时候发现错误，就不要在代码编译时再发现；能在代码编译期间发现错误，就不要在代码运行期间再发现（类型检测就可以很好的帮助我们做到这一点）；能在开发阶段发现错误，就不要在测试期间发现错误，能在测试期间发现错误，就不要在上线后发现错误</p>\n</li>\n<li>\n<p>认识 TypeScript<br>\nTypeScript 是拥有类型的 JavaScript 超集。JavaScript 所拥有的特性，TypeScript 全部都是支持的，并且它紧随 ECMAScript 的标准，所以 ES6、ES7、ES8 等新语法标准，它都是支持的。<br>\n并且在语言层面上，不仅仅增加了类型约束，而且包括一些语法的扩展，比如枚举类型（Enum）、元组类型（Tuple）等<br>\n并且 TypeScript 最终会被编译成 JavaScript 代码，所以你并不需要担心它的兼容性问题，在编译时也不需要借助于 Babel 这样的工具</p>\n</li>\n</ul>\n<h1 id=\"类型\"><a class=\"markdownIt-Anchor\" href=\"#类型\">#</a> 类型</h1>\n<h2 id=\"变量的声明\"><a class=\"markdownIt-Anchor\" href=\"#变量的声明\">#</a> 变量的声明</h2>\n<p>在 TypeScript 中定义变量需要指定 <strong>标识符 (变量)</strong> 的类型，声明的类型可以称之为 <code>类型注解</code> <br>\n<strong> <code>var/let/const 标识符: 数据类型 = 赋值</code> </strong><br>\n比如我们声明一个 message，完整的写法如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">message</span>: string = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>如果给 message 赋值其他类型的值，那么就会报错。<br>\n(注意：这里的 <code>string</code>  是小写的，和 <code>String</code>  是有区别的。 <code>string</code>  是 TypeScript 中定义的字符串类型， <code>String</code>  是 ECMAScript 中定义的一个类)</p>\n<h2 id=\"声明变量的关键字\"><a class=\"markdownIt-Anchor\" href=\"#声明变量的关键字\">#</a> 声明变量的关键字</h2>\n<p>可以使用 <code>var</code> 、 <code>let</code> 、 <code>const</code> , 但不推荐使用 <code>var</code>  来声明变量，主要原因和 ES6 升级后 <code>let</code>  和 <code>var</code>  的区别是一样的， <code>var</code>  是没有块级作用域的，会引起很多的问题。</p>\n<h2 id=\"变量的类型推导推断\"><a class=\"markdownIt-Anchor\" href=\"#变量的类型推导推断\">#</a> 变量的类型推导（推断）</h2>\n<p>在开发中，有时候为了方便起见我们并不会在声明每一个变量时都写上对应的数据类型，我们更希望可以通过 TypeScript 本身的特性帮助我们推断出对应的变量类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>如果这个时候再给 message 赋值 <code>123</code> , 就会报错，这是因为在一个变量第一次赋值时，会根据后面的赋值内容的类型，来推断出变量的类型。上面的 message 就是因为后面赋值的是一个 <code>string</code>  类型，所以 <code>message</code>  虽然没有明确的说明，但是依然是一个 <code>string</code>  类型。</p>\n<h3 id=\"javascript-和-typescript-类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-和-typescript-类型\">#</a> JavaScript 和 TypeScript 类型</h3>\n<h4 id=\"javascript-类型-number类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-number类型\">#</a> JavaScript 类型 –  <code>number</code>  类型</h4>\n<p>数字类型是我们开发中经常使用的类型，TypeScript 和 JavaScript 一样，不区分整数类型（int）和浮点型（double），统一为 <code>number</code>  类型。</p>\n<h4 id=\"javascript-类型-boolean类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-boolean类型\">#</a> JavaScript 类型 –  <code>boolean</code>  类型</h4>\n<p><code>boolean</code>  类型只有两个取值：true 和 false，非常简单</p>\n<h4 id=\"javascript-类型-string类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-string类型\">#</a> JavaScript 类型 –  <code>string</code>  类型</h4>\n<p><code>string</code>  类型是字符串类型，可以使用单引号或者双引号表示。<br>\n同时也支持 ES6 的模板字符串 `` 来拼接变量和字符串</p>\n<h4 id=\"javascript-类型-array类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-array类型\">#</a> JavaScript 类型 –  <code>Array</code>  类型</h4>\n<p>数组类型的定义有两种方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">names</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>, <span class=\"string\">&quot;cab&quot;</span>]; <span class=\"comment\">//方式一，推荐</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">names2</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>, <span class=\"string\">&quot;nab&quot;</span>]; <span class=\"comment\">//方式二，开发中不推荐使用，jsx有冲突，&lt;div&gt;&lt;/div&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">names.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\">names2.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>第二种方式中的 <code>&lt;string&gt;</code>  是泛型， <code>const names2: Array&lt;string&gt; = [&quot;abc&quot;, &quot;cba&quot;, &quot;nab&quot;]</code> ; 其中：</p>\n<ul>\n<li><code>Array</code>  ==&gt; 是一个 interface</li>\n<li><code>&lt;string&gt;</code>  ==&gt; 具体的某种类型：字符串类型</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names.<span class=\"title function_\">push</span>(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript-类型-object类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-object类型\">#</a> JavaScript 类型 –  <code>Object</code>  类型</h4>\n<p><strong>(写对象类型不要写类型注解，让其类型推导即可)</strong></p>\n<h4 id=\"javascript-类型-symbol-类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-symbol-类型\">#</a> JavaScript 类型 – Symbol 类型</h4>\n<p>在 ES5 中，如果我们是不可以在对象中添加相同的属性名称的，比如下面的做法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">identity</span>: <span class=\"string\">&quot;程序员&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">identity</span>: <span class=\"string\">&quot;老师&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通常我们的做法是定义两个不同的属性名字：比如 identity1 和 identity2<br>\n 但是我们也可以通过 <code>symbol</code>  来定义相同的名称，因为 <code>Symbol</code>  函数返回的是不同的值：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">s1</span>: <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;title&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">s2</span>: <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;title&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  [s1]: <span class=\"string\">&quot;程序员&quot;</span>,</span><br><span class=\"line\">  [s2]: <span class=\"string\">&quot;老师&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript-类型-null和undefined类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-null和undefined类型\">#</a> JavaScript 类型 –  <code>null</code>  和 <code>undefined</code>  类型</h4>\n<h4 id=\"typescript-类型-any类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-any类型\">#</a> TypeScript 类型 -  <code>any</code>  类型</h4>\n<p>在某些情况下，我们确实无法确定一个变量的类型，并且可能它会发生一些变化，这个时候我们可以使用 <code>any</code>  类型<br>\n <code>any</code>  类型有点像一种讨巧的 TypeScript 手段：我们可以对 <code>any</code>  类型的变量进行任何的操作，包括获取不存在的属性、方法<br>\n如果对于某些情况的处理过于繁琐不希望添加规定的类型注解，或者在引入一些第三方库时，缺失了类型注解，这个时候我们可以使用 <code>any</code></p>\n<h4 id=\"typescript-类型-unknown类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-unknown类型\">#</a> TypeScript 类型 -  <code>unknown</code>  类型</h4>\n<p><code>unknown</code>  是 TypeScript 中比较特殊的一种类型，它用于描述类型不确定的变量 (防止在别的地方乱用，区别于 <code>any</code> )<br>\n 什么意思呢？我们来看下面的场景：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">result</span>: <span class=\"built_in\">unknown</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">  result = <span class=\"title function_\">foo</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  result = <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"typescript-类型-void类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-void类型\">#</a> TypeScript 类型 -  <code>void</code>  类型</h4>\n<p><code>void</code>  通常用来指定一个函数是没有返回值的，那么它的返回值就是 <code>void</code>  类型：<br>\n我们可以将 <code>null</code>  和 <code>undefined</code>  赋值给 <code>void</code>  类型，也就是函数可以返回 <code>null</code>  或者 <code>undefined</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1 + num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数我们没有写任何类型，那么它默认返回值类型就是 <code>void</code> ，我们也可以显示的来指定返回值是 <code>void</code> :</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1 + num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在开发中一般是不写的</p>\n<h4 id=\"typescript-类型-never类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-never类型\">#</a> TypeScript 类型 -  <code>never</code>  类型</h4>\n<p><code>never</code>  表示永远不会发生值的类型，比如一个函数：如果一个函数中是一个死循环或者抛出一个异常，那么这个函数会返回东西吗？不会，那么写 <code>void</code>  类型或者其他类型作为返回值类型都不合适，我们就可以使用 <code>never</code>  类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loopFun</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loopErr</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>never</code>  有什么样的应用场景呢？这里我们举一个例子，但是它用到了联合类型，后面我们会讲到：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleMessage</span>(<span class=\"params\">message: <span class=\"built_in\">number</span> | strintg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;bar&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">check</span>: <span class=\"built_in\">never</span> = message;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"typescript-类型-tuple类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-tuple类型\">#</a> TypeScript 类型 -  <code>tuple</code>  类型</h4>\n<p><code>tuple</code>  是元组类型，很多语言中也有这种数据类型，比如 Python、Swift 等。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tInfo</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&quot;why&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">1.88</span>]; <span class=\"comment\">//tuple的书写方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">item1</span>: tInfo[<span class=\"number\">0</span>]; <span class=\"comment\">//why 并且知道类型是string类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">item1</span>: tInfo[<span class=\"number\">1</span>]; <span class=\"comment\">//18 并且知道类型是number类型</span></span><br></pre></td></tr></table></figure>\n<p>那么 <code>tuple</code>  和数组有什么区别呢？</p>\n<ol>\n<li>首先，数组中通常建议存放相同类型的元素，不同类型的元素是不推荐放在数组中。（可以放在对象或者元组中）</li>\n<li>其次，元组中每个元素都有自己特性的类型，根据索引值获取到的值可以确定对应的类型</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">info</span>: (<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>)[] = [<span class=\"string\">&quot;why&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">1.88</span>]; <span class=\"comment\">//数组书写方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> item1 = info[<span class=\"number\">0</span>]; <span class=\"comment\">//不能确定类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tInfo</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&quot;why&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">1.88</span>]; <span class=\"comment\">//tuple的书写方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">item2</span>: tInfo[<span class=\"number\">0</span>]; <span class=\"comment\">//一定是string类型</span></span><br></pre></td></tr></table></figure>\n<p>Tuples 的应用场景：tuple 通常可以作为返回的值，在使用的时候会非常的方便</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> useState&lt;T&gt;(<span class=\"attr\">state</span>: T): [T, [<span class=\"function\">(<span class=\"params\">newState:T</span>) =&gt;</span> <span class=\"built_in\">void</span>] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">changeState</span> = (<span class=\"params\">newState:T</span>) =&gt; &#123;</span><br><span class=\"line\">    currentState = newState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [currentState,changeState]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [counter,setCounter] = <span class=\"title function_\">useState</span>(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数的参数类型与返回值类型\"><a class=\"markdownIt-Anchor\" href=\"#函数的参数类型与返回值类型\">#</a> 函数的参数类型与返回值类型</h4>\n<p>函数是 JavaScript 非常重要的组成部分，TypeScript 允许我们<strong>指定函数的参数和返回值的类型</strong>。</p>\n<ul>\n<li>\n<p>参数的类型注解：声明函数时，可以在每个参数后添加类型注解，以声明函数接受的参数类型<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/9\" alt=\"\"> K4X1D1YO5 (SR] 5LBLCF%6.png)</p>\n</li>\n<li>\n<p>返回值的类型注解，这个注解出现在函数列表的后面：</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和变量的类型注解一样，我们通常情况下不需要返回类型注解，因为 TypeScript 会根据 return 返回值推断函数的返回类型<br>\n某些第三方库处于方便理解，会明确指定返回类型，但是这个看个人喜好</p>\n<h3 id=\"匿名函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数的参数\">#</a> 匿名函数的参数</h3>\n<p>匿名函数与函数声明会有一些不同：当一个函数出现在 TypeScript 可以确定该函数会被如何调用的地方时，该函数的参数会自动指定类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>, <span class=\"string\">&quot;nba&quot;</span>];</span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们并没有指定 <code>item</code>  的类型，但是 <code>item</code>  是一个 string 类型：这是因为 TypeScript 会根据 <code>forEach</code>  函数的类型以及数组的类型推断出 <code>item</code>  的类型。这个过程称之为<strong>上下文类型（contextual typing）</strong>，因为函数执行的上下文可以帮助确定参数和返回值的类型</p>\n<h3 id=\"对象类型\"><a class=\"markdownIt-Anchor\" href=\"#对象类型\">#</a> 对象类型</h3>\n<p>如果我们希望限定一个函数接受的参数是一个对象，我们可以使用对象类型:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printCoordinate</span>(<span class=\"params\">point: &#123; x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;x坐标&quot;</span>, point.<span class=\"property\">x</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;y坐标&quot;</span>, point.<span class=\"property\">y</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>其中 <code>point</code>  是形参，而 <code>&#123; x: number; y: number &#125;</code>  是它的类型注解<br>\n我们使用了一个对象来作为类型，在对象我们可以添加属性，并且告知 TypeScript 该属性需要是什么类型；每个属性的类型部分也是可选的，如果不指定，那么就是 any 类型</p>\n<h3 id=\"可选类型\"><a class=\"markdownIt-Anchor\" href=\"#可选类型\">#</a> 可选类型</h3>\n<p>对象类型也可以指定哪些属性是可选的，可以在属性的后面添加一个 <code>?：</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printCoordinate</span>(<span class=\"params\">point: &#123; x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>; z?: <span class=\"built_in\">number</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;x坐标&quot;</span>, point.<span class=\"property\">x</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;y坐标&quot;</span>, point.<span class=\"property\">y</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (point.<span class=\"property\">z</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;z坐标&quot;</span>, point.<span class=\"property\">z</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span>, <span class=\"attr\">z</span>: <span class=\"number\">40</span> &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这个时候 x 和 y 依然是有类型的，它们的类型是： <code>number | undefined</code></li>\n<li>可选类型需要在必传参数的后面</li>\n</ul>\n<h3 id=\"联合类型\"><a class=\"markdownIt-Anchor\" href=\"#联合类型\">#</a> 联合类型</h3>\n<p>TypeScript 的类型系统允许我们使用多种运算符，从现有类型中构建新类型<br>\n第一种组合类型的方法：<strong>联合类型（Union Type）</strong></p>\n<ul>\n<li>联合类型是由两个或者多个其他类型组成的类型</li>\n<li>表示可以是这些类型中的任何一个值</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你的id是&quot;</span>, id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printId</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"title function_\">printId</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用联合类型\"><a class=\"markdownIt-Anchor\" href=\"#使用联合类型\">#</a> 使用联合类型</h4>\n<p>传入给一个联合类型的值是非常简单的，只要保证是联合类型中的某一个类型的值即可<br>\n但是我们拿到这个值之后，我们应该如何使用它呢？因为它可能是任何一种类型，比如我们拿到的值可能是 string 或者 number，我们就不能对其调用 string 上的一些方法</p>\n<ul>\n<li>我们需要使用<strong>缩小（narrow）联合</strong>，TypeScript 可以根据我们缩小的代码结构，推断出更加具体的类型；</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你的id是&quot;</span>, id.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你的id是&quot;</span>, id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型别名\"><a class=\"markdownIt-Anchor\" href=\"#类型别名\">#</a> 类型别名</h3>\n<p>在前面，我们通过在类型注解中编写 对象类型 和 联合类型，但是当我们想要多次在其他地方使用时，就要编写多次，这时候可以给对象类型起一个别名</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printPoint</span>(<span class=\"params\">point: Point</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(point.<span class=\"property\">x</span>, point.<span class=\"property\">y</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">ID</span> = <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: ID</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;您的id：&quot;</span>, id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型断言as\"><a class=\"markdownIt-Anchor\" href=\"#类型断言as\">#</a> 类型断言 <code>as</code></h3>\n<p>有时候 TypeScript 无法获取具体的类型信息，这个我们需要使用<strong>类型断言（Type Assertions）</strong></p>\n<ul>\n<li>我们通过  <code>document.getElementById</code>  去获得一个 dom，TypeScript 只知道该函数会返回 HTMLElement ，但并不知道它<br>\n具体的类型，这是就可以使用类型断言</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myEl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;my_img&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLImageElement</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">myEl.<span class=\"property\">src</span> = <span class=\"string\">&quot;图片地址&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：TypeScript 只允许类型断言转换为 更具体 或者 不太具体 的类型版本，此规则可防止不可能的强制转换：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&quot;coderwhy&quot;</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>; <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&quot;coderwhy&quot;</span> <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>; <span class=\"comment\">//这样就可以</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非空类型断言\"><a class=\"markdownIt-Anchor\" href=\"#非空类型断言\">#</a> 非空类型断言  <code>!</code></h3>\n<p>当我们编写下面的代码时，在执行 ts 的编译阶段会报错，这是因为传入的 <code>message</code>  有可能是为 <code>undefined</code>  的，这个时候是不能执行方法的</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMessage</span>(<span class=\"params\">message?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">//error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printMessage</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是，我们确定传入的参数是有值的，这个时候我们可以使用非空类型断言 <code>!</code> ，表示可以<strong>确定某个标识符是有值的</strong>，跳过 ts 在编译阶段对它的检测</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMessage</span>(<span class=\"params\">message?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message!.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可选链\"><a class=\"markdownIt-Anchor\" href=\"#可选链\">#</a> 可选链 <code>?.</code></h3>\n<p>可选链事实上并不是 TypeScript 独有的特性，它是 ES11（ES2020）中增加的特性</p>\n<ul>\n<li>可选链使用可选链操作符  <code>?.</code></li>\n<li>它的作用是当对象的属性不存在时，会短路，直接返回 undefined，如果存在，那么才会继续执行</li>\n</ul>\n<h2 id=\"和的作用\"><a class=\"markdownIt-Anchor\" href=\"#和的作用\">#</a>  <code>??</code>  和 <code>!!</code>  的作用</h2>\n<ul>\n<li><code>!!</code>  操作符：<br>\n将一个其他类型转换成 <code>boolean</code>  类型，类似于 <code>Boolean(变量)</code>  的方式</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> flag1 = <span class=\"title class_\">Boolean</span>(message);</span><br><span class=\"line\"><span class=\"keyword\">let</span> flag2 = !!message;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>??</code>  操作符：<br>\n<strong>空值合并操作符</strong>（ <code>??</code> ）是一个逻辑操作符，当操作符的左侧是 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。（类似于三目运算符）</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&quot;321&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = message ?? <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br></pre></td></tr></table></figure>\n<p>一般结合可选链 <code>?.</code>  来使用:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a.<span class=\"property\">children</span>?.<span class=\"property\">length</span> ?? &#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">//&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"字面量类型\"><a class=\"markdownIt-Anchor\" href=\"#字面量类型\">#</a> 字面量类型</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">message</span>: <span class=\"string\">&quot;hello&quot;</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&quot;你好&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>默认情况下这么做是没有太大的意义的，但是我们可以将多个类型联合在一起:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Alignment</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;right&quot;</span> | <span class=\"string\">&quot;center&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeAlign</span>(<span class=\"params\">align: Alignment</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;修改方向：&quot;</span>, align);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">changeAlign</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型缩小\"><a class=\"markdownIt-Anchor\" href=\"#类型缩小\">#</a> 类型缩小</h3>\n<ul>\n<li>什么是类型缩小：<br>\n可以通过类似于  <code>typeof padding === &quot;number&quot;</code>  的判断语句，来改变 TypeScript 的执行路径，在给定的执行路径中，缩小比声明时更小的类型，这个过程称之为 类型缩小，而我们编写的  <code>typeof padding === &quot;number&quot;</code>  可以称之为 <strong>类型保护（type guards）</strong></li>\n<li>常见的类型保护有如下几种：</li>\n</ul>\n<ol>\n<li>typeof</li>\n<li>平等缩小（比如 ===、!==）</li>\n<li>instanceof</li>\n<li>in</li>\n</ol>\n<h4 id=\"typeof\"><a class=\"markdownIt-Anchor\" href=\"#typeof\">#</a>  <code>typeof</code></h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">ID</span> = <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: ID</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(id.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"平等缩小\"><a class=\"markdownIt-Anchor\" href=\"#平等缩小\">#</a> 平等缩小</h4>\n<p>我们可以使用 Switch 或者相等的一些运算符来表达相等性（比如 <code>===</code> ,  <code>!==</code> ,  <code>==</code> ,  <code>!=</code> ）：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Direction</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;right&quot;</span> | <span class=\"string\">&quot;center&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">turnDirection</span>(<span class=\"params\">direction: Direction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;left&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用left方法&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;right&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用right方法&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;center&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用center方法&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用默认方法&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\">#</a>  <code>instanceof</code></h4>\n<p>JavaScript 有一个运算符来检查一个值是否是另一个值的 “实例”：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printValue</span>(<span class=\"params\">date: <span class=\"built_in\">Date</span> | <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (date <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date.<span class=\"title function_\">toLocaleString</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"in\"><a class=\"markdownIt-Anchor\" href=\"#in\">#</a>  <code>in</code></h4>\n<p>Javascript 有一个运算符，用于确定对象是否具有带名称的属性： <code>in</code>  运算符。如果指定的属性在指定的对象或其原型链中，则 <code>in</code>  运算符返回 true；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fish</span> = &#123; <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = &#123; <span class=\"attr\">run</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\">animal: Fish | Dog</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;swim&quot;</span> <span class=\"keyword\">in</span> animal) &#123;</span><br><span class=\"line\">    animal.<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    animal.<span class=\"title function_\">run</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"typescript-函数类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-函数类型\">#</a> TypeScript 函数类型</h3>\n<p>在 JavaScript 开发中，函数是重要的组成部分，并且函数可以作为一等公民（可以作为参数，也可以作为返回值进<br>\n行传递）。<br>\nTS 在使用函数的过程中，函数也可以有自己的类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calc</span>(<span class=\"params\">fn: CalcFunc</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fn</span>(<span class=\"number\">20</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">calc</span>(sum);</span><br></pre></td></tr></table></figure>\n<h4 id=\"typescript-函数类型解析\"><a class=\"markdownIt-Anchor\" href=\"#typescript-函数类型解析\">#</a> TypeScript 函数类型解析</h4>\n<p>在上面的语法中  <code>(num1: number, num2: number) =&gt; void</code> ，代表的就是一个函数类型：</p>\n<ul>\n<li>接收两个参数的函数：num1 和 num2，并且都是 number 类型；</li>\n<li>并且这个函数是没有返回值的，所以是 void<br>\n 在某些语言中，可能参数名称 num1 和 num2 是可以省略，但是 TypeScript 是不可以的。</li>\n</ul>\n<h4 id=\"默认参数\"><a class=\"markdownIt-Anchor\" href=\"#默认参数\">#</a> 默认参数</h4>\n<p>从 ES6 开始，JavaScript 是支持默认参数的，TypeScript 也是支持默认参数的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span> = <span class=\"number\">6</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候 y 的类型其实是 undefined 和 number 类型的联合。</p>\n<h4 id=\"剩余参数\"><a class=\"markdownIt-Anchor\" href=\"#剩余参数\">#</a> 剩余参数</h4>\n<p>从 ES6 开始，JavaScript 也支持剩余参数，剩余参数语法允许我们将一个不定数量的参数放到一个数组中</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">...nums: <span class=\"built_in\">number</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">    total += num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = <span class=\"title function_\">sum</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = <span class=\"title function_\">sum</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"typescript-枚举类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-枚举类型\">#</a> TypeScript 枚举类型</h3>\n<p>枚举类型是为数不多的 TypeScript 特性有的特性之一：</p>\n<ul>\n<li>枚举其实就是将一组可能出现的值，一个个列举出来，定义在一个类型中，这个类型就是枚举类型</li>\n<li>枚举允许开发者定义一组命名常量，常量可以是数字、字符串类型</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">turnDirection</span>(<span class=\"params\">direction: Direction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">LEFT</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向左边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">RIGHT</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向右边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">TOP</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向上边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">BOTTOM</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向下边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">myDirection</span>: <span class=\"built_in\">never</span> = direction;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举类型的值\"><a class=\"markdownIt-Anchor\" href=\"#枚举类型的值\">#</a> 枚举类型的值</h4>\n<p>枚举类型默认是有值的，比如上面的枚举，默认值是这样的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，我们也可以给枚举其他值，这个时候会从 100 进行递增：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span> = <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以给他们赋值其他的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span> = <span class=\"string\">&quot;TOP&quot;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span> = <span class=\"string\">&quot;BOTTOM&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ts-中的-this\"><a class=\"markdownIt-Anchor\" href=\"#ts-中的-this\">#</a> TS 中的 this</h3>\n<h4 id=\"可推导的-this-类型\"><a class=\"markdownIt-Anchor\" href=\"#可推导的-this-类型\">#</a> 可推导的 this 类型</h4>\n<p><a href=\"https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA\">https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> info = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">info.<span class=\"title function_\">sayHello</span>();</span><br></pre></td></tr></table></figure>\n<p>上面的代码是可以正常运行的，TypeScript 认为函数 sayHello 有一个对应的 this 的外部对象 info，所以在使用时，就会把 this 当做该对象</p>\n<h4 id=\"不确定的-this-类型\"><a class=\"markdownIt-Anchor\" href=\"#不确定的-this-类型\">#</a> 不确定的 this 类型</h4>\n<p>但是对于某些情况来说，我们并不知道 this 到底是什么:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> info = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  sayHello,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">info.<span class=\"title function_\">sayHello</span>();</span><br></pre></td></tr></table></figure>\n<p>这段代码运行会报错的：这里对于 sayHello 的调用来说，我们虽然将其放到了 info 中，通过 info 去调用，this 依然是指向 info 对象的；但是对于 TypeScript 编译器来说，这个代码是非常不安全的，因为我们也有可能直接调用函数，或者通过别的对象来调用函数</p>\n<h4 id=\"指定-this-的类型\"><a class=\"markdownIt-Anchor\" href=\"#指定-this-的类型\">#</a> 指定 this 的类型</h4>\n<p>这个时候，通常 TypeScript 会要求我们明确的指定 this 的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameType</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"><span class=\"variable language_\">this</span>: NameType</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数的重载\"><a class=\"markdownIt-Anchor\" href=\"#函数的重载\">#</a> 函数的重载</h1>\n<p>在 TypeScript 中，如果我们编写了一个 add 函数，希望可以对字符串和数字类型进行相加，应该如何编写呢？<br>\n我们可能会这样来编写，但是其实是错误的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>, a2: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a1 + a2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 TypeScript 中，我们可以去编写不同的重载签名（overload signatures）来表示函数可以以不同的方式进行调用<br>\n一般是编写两个或者以上的重载签名，再去编写一个通用的函数以及实现</p>\n<h2 id=\"sum-函数的重载\"><a class=\"markdownIt-Anchor\" href=\"#sum-函数的重载\">#</a> sum 函数的重载</h2>\n<p>我们对 add 函数进行重构，在我们调用 add 的时候，它会根据我们传入的参数类型来决定执行函数体时，到底执行哪一个函数的重载签名</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">number</span>, a2: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">string</span>, a2: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">any</span>, a2: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a1 + a2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">20</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合类型和重载\"><a class=\"markdownIt-Anchor\" href=\"#联合类型和重载\">#</a> 联合类型和重载</h2>\n<p>我们现在有一个需求：定义一个函数，可以传入字符串或者数组，获取它们的长度<br>\n这里有两种实现方案：</p>\n<ol>\n<li>使用联合类型来实现</li>\n<li>实现函数重载来实现</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">string</span> | <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">any</span>[]</span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在开发中一般使用联合类型</p>\n<h1 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h1>\n<h2 id=\"类的定义\"><a class=\"markdownIt-Anchor\" href=\"#类的定义\">#</a> 类的定义</h2>\n<p>定义一个<strong> Person</strong> 类：</p>\n<ul>\n<li>如果类型没有声明，那么它们默认是 any 的</li>\n<li>也可以给属性设置初始化值</li>\n<li>类可以有自己的构造函数 constructor，当我们通过 new 关键字创建一个实例时，构造函数会被调用</li>\n<li>构造函数不需要返回任何值，默认返回当前创建出来的实例</li>\n<li>如果我们在 strictPropertyInitialization 模式下确实不希望给属性初始化，可以使用  <code>name!: string</code>  语法</li>\n<li>类中可以有自己的函数，定义的函数称之为方法</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">eating</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;eating&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的继承\"><a class=\"markdownIt-Anchor\" href=\"#类的继承\">#</a> 类的继承</h2>\n<p>面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提。<br>\n我们使用 extends 关键字来实现继承，子类中使用 super 来访问父类<br>\n在构造函数中，我们可以通过 super 来调用父类的构造方法，对父类中的属性进行初始化</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sno</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span>, sno: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name, age);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sno</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">studying</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;studying&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的成员修饰符\"><a class=\"markdownIt-Anchor\" href=\"#类的成员修饰符\">#</a> 类的成员修饰符</h2>\n<p>在 TypeScript 中，类的属性和方法支持三种修饰符：  <code>public</code> 、 <code>private</code> 、 <code>protected</code></p>\n<ul>\n<li><code>public</code> : 修饰的是在任何地方可见、公有的属性或方法，默认编写的属性就是 public 的</li>\n<li><code>private</code> : 修饰的是仅在同一类中可见、私有的属性或方法</li>\n<li><code>protected</code> : 修饰的是仅在类自身及子类中可见、受保护的属性或方法</li>\n</ul>\n<p><code>public</code>  是默认的修饰符，也是可以直接访问的，我们这里来演示一下 <code>protected</code>  和 <code>private</code> :</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"只读属性-readonly\"><a class=\"markdownIt-Anchor\" href=\"#只读属性-readonly\">#</a> 只读属性 readonly</h2>\n<p>如果有一个属性我们不希望外界可以任意的修改，只希望确定值后直接使用，那么可以使用 <code>readonly</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getterssetters\"><a class=\"markdownIt-Anchor\" href=\"#getterssetters\">#</a> getters/setters</h2>\n<p>在前面一些私有属性我们是不能直接访问的，或者某些属性我们想要监听它的 ** 获取 (getter)<strong> 和</strong>设置 (setter)** 的过程，这个时候我们可以使用存取器。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">newName</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = newName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>(<span class=\"params\">newName</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\">p.<span class=\"property\">name</span> = <span class=\"string\">&quot;coderwhy&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态成员\"><a class=\"markdownIt-Anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<p>前面我们在类中定义的成员和方法都属于对象级别的，在开发中，我们有时候也需要定义类级别的成员和方法：通过关键字 <code>static</code>  来定义:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">time</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;20:00&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">attendClass</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;去上课&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Student</span>.<span class=\"property\">time</span>);</span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"title function_\">attendClass</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽象类-abstract\"><a class=\"markdownIt-Anchor\" href=\"#抽象类-abstract\">#</a> 抽象类 abstract</h2>\n<p>众<sub>所</sub>周<sub>知</sub>，继承是多态使用的前提：</p>\n<ul>\n<li>所以在定义很多通用的调用接口时，我们通常会让调用者传入父类，通过多态来实现更加灵活的调用方式。</li>\n<li>但是，父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法，，我们可以定义为抽象方法。<br>\n什么是抽象方法？在 TypeScript 中没有具体实现的方法 (没有方法体)，就是抽象方法。</li>\n<li>抽象方法，必须存在于抽象类中</li>\n<li>抽象类是使用 abstract 声明的类</li>\n</ul>\n<p>抽象类有如下的特点：</p>\n<ul>\n<li>抽象类是不能被实例的话（也就是不能通过 new 创建）</li>\n<li>抽象方法必须被子类实现，否则该类必须是一个抽象类</li>\n</ul>\n<h3 id=\"抽象类演练\"><a class=\"markdownIt-Anchor\" href=\"#抽象类演练\">#</a> 抽象类演练</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">getArea</span>(): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">r</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">r: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> = r;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getArea</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> * <span class=\"number\">3.14</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">width</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">height</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">width: <span class=\"built_in\">number</span>, height: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">width</span> = width;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getArea</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">width</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> circle = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rectangle = <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>(<span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calcArea</span>(<span class=\"params\">shape: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(shape.<span class=\"title function_\">getArea</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">calcArea</span>(circle);</span><br><span class=\"line\"><span class=\"title function_\">calcArea</span>(rectangle);</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的类型\"><a class=\"markdownIt-Anchor\" href=\"#类的类型\">#</a> 类的类型</h2>\n<p>类本身也是可以作为一种数据类型的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">Person</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p2</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;kobe&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"接口的声明\"><a class=\"markdownIt-Anchor\" href=\"#接口的声明\">#</a> 接口的声明</h1>\n<p>在前面我们通过 type 可以用来声明一个对象类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对象的另外一种声明方式就是通过接口来声明：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"attr\">y</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的可选属性\"><a class=\"markdownIt-Anchor\" href=\"#接口的可选属性\">#</a> 接口的可选属性</h2>\n<p>接口中我们也可以定义可选属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  age?:<span class=\"built_in\">number</span></span><br><span class=\"line\">  friend?:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">friend</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;kobe&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">friend</span>?.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的只读属性\"><a class=\"markdownIt-Anchor\" href=\"#接口的只读属性\">#</a> 接口的只读属性</h2>\n<p>接口中也可以定义只读属性，这样就意味着我们再初始化之后，这个值是不可以被修改的:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  age?:<span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> friend?:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">friend</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;kobe&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&quot;coderwhy&quot;</span>  <span class=\"comment\">//不可以设置</span></span><br><span class=\"line\">person.<span class=\"property\">friend</span> = &#123;&#125;  <span class=\"comment\">//不可以设置</span></span><br><span class=\"line\"><span class=\"comment\">//下面的代码是可以执行的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(person.<span class=\"property\">friend</span>) &#123;</span><br><span class=\"line\">  person.<span class=\"property\">friend</span>.<span class=\"property\">name</span> = ‘<span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的索引类型\"><a class=\"markdownIt-Anchor\" href=\"#接口的索引类型\">#</a> 接口的索引类型</h2>\n<p>前面我们使用 interface 来定义对象类型，这个时候其中的属性名、类型、方法都是确定的，但是有时候我们会遇到类似下面的对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">FrontLanguage</span> = &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>:<span class=\"built_in\">number</span>]:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">frontend</span>:<span class=\"title class_\">FrontLanguage</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>:<span class=\"string\">&quot;HTML&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>:<span class=\"string\">&quot;CSS&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">3</span>:<span class=\"string\">&quot;JavaScript&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LanguageBirth</span> = &#123;</span><br><span class=\"line\">  [<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>]:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"title class_\">Java</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">lanuage</span>:<span class=\"title class_\">LanguageBirth</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Java&quot;</span>:<span class=\"number\">1995</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;JavaScript&quot;</span>:<span class=\"number\">1996</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;C&quot;</span>:<span class=\"number\">1972</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的函数类型\"><a class=\"markdownIt-Anchor\" href=\"#接口的函数类型\">#</a> 接口的函数类型</h2>\n<p>前面我们都是通过 interface 来定义对象中普通的属性和方法的，实际上它也可以用来定义函数类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CalcFunc</span> = &#123;</span><br><span class=\"line\">  (<span class=\"attr\">num1</span>:<span class=\"built_in\">number</span>,<span class=\"attr\">num2</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">add</span>:<span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">sub</span>:<span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 - num2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，除非特别的情况，还是推荐大家使用类型别名来定义函数：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口继承\"><a class=\"markdownIt-Anchor\" href=\"#接口继承\">#</a> 接口继承</h2>\n<p>接口和类一样是可以进行继承的，也是使用 extends 关键字，并且接口是支持多继承的（类不支持多继承）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>, <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sno</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">stu</span>: <span class=\"title class_\">Student</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">sno</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的实现\"><a class=\"markdownIt-Anchor\" href=\"#接口的实现\">#</a> 接口的实现</h2>\n<p>接口定义后，也是可以被类实现的：<br>\n如果被一个类实现，那么在之后需要传入接口的地方，都可以将这个类传入，这就是面向接口开发</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ISwim</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">swimming</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IRun</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ISwim</span>, <span class=\"title class_\">IRun</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">swimming</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;swimming&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">swim</span>(<span class=\"params\">swimmer: ISwim</span>) &#123;</span><br><span class=\"line\">  swimmer.<span class=\"title function_\">swimming</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"title function_\">swim</span>(p);</span><br></pre></td></tr></table></figure>\n<h2 id=\"交叉类型\"><a class=\"markdownIt-Anchor\" href=\"#交叉类型\">#</a> 交叉类型</h2>\n<p>前面我们学习了联合类型，表示多个类型中的一个即可：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Alignment</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;right&quot;</span> | <span class=\"string\">&quot;center&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>还有一种类型合并，称之为<strong>交叉类型</strong></p>\n<ul>\n<li>交叉类型表示需要满足多个条件</li>\n<li>交叉类型使用 <code>&amp;</code>  符号<br>\n我们看下面的例子：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span> = <span class=\"built_in\">number</span> &amp; <span class=\"built_in\">string</span>;</span><br></pre></td></tr></table></figure>\n<p>这表示的含义是是 number 和 string 要同时满足，但其实并没有一个值同时满足是一个 number 又是一个 string，所以 MyType 其实是一个 never 类型</p>\n<h3 id=\"交叉类型的应用\"><a class=\"markdownIt-Anchor\" href=\"#交叉类型的应用\">#</a> 交叉类型的应用</h3>\n<p>在开发中，我们进行交叉时，通常是对对象类型进行交叉的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Colorful</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IRun</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"title class_\">Colorful</span> &amp; <span class=\"title class_\">IRun</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">obj</span>: <span class=\"title class_\">NewType</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"type和interface\"><a class=\"markdownIt-Anchor\" href=\"#type和interface\">#</a>  <code>type</code>  和 <code>interface</code></h1>\n<ul>\n<li>共同点：</li>\n</ul>\n<ol>\n<li>都可以定义一个对象或函数</li>\n<li>都允许继承（extends）</li>\n</ol>\n<ul>\n<li>不同点：</li>\n</ul>\n<ol>\n<li>type 可以声明基本类型、联合类型、交叉类型、元组，interface 不行</li>\n<li>interface 可以合并重复声明，type 不行</li>\n</ol>\n<ul>\n<li>\n<p>小结<br>\n interface 是接口，用于描述一个对象。<br>\ntype 是类型别名，用于给各种类型定义别名，让 TS 写起来更简洁、清晰。</p>\n</li>\n<li>\n<p>平时开发中，如果要定义一个非对象类型，或者需要使用组合或者交叉类型的时候，用 type；如果要定义一个对象类型，或者要用类的 extends 或 implements 时，用 interface。<br>\n前端给后端返回数据，后端给前端返回的数据时，一般用 interface 对数据类型进行约束</p>\n</li>\n</ul>\n<h3 id=\"字面量赋值\"><a class=\"markdownIt-Anchor\" href=\"#字面量赋值\">#</a> 字面量赋值</h3>\n<p>我们来看下面的代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p</span>:<span class=\"title class_\">IPerson</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span> <span class=\"comment\">//报错：&#x27;age&#x27; does not exist</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是因为 TypeScript 在字面量直接赋值的过程中，为了进行类型推导会进行严格的类型限制。<br>\n但是之后如果我们是将一个 变量标识符 赋值给其他的变量时，会进行 freshness 擦除操作：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p</span>:<span class=\"title class_\">IPerson</span> = obj</span><br></pre></td></tr></table></figure>\n<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<p>泛型 ==&gt; 形参</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数泛型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> fun&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&quot;你好&quot;</span>);</span><br><span class=\"line\">fun&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<p>这块代码中，可以将 <code>T</code>  看做形参， <code>string</code>  和 <code>number</code>  看做实参</p>\n<hr>\n<p>软件工程的主要目的是构建不仅仅明确和一致的 API，还要让你的代码具有很强的可重用性：比如我们可以通过函数来封装一些 API，通过传入不同的函数参数，让函数帮助我们完成不同的操作；但是对于参数的类型是否也可以参数化呢？</p>\n<p>什么是类型的参数化？</p>\n<ul>\n<li>我们来提一个需求：封装一个函数，传入一个参数，并且返回这个参数</li>\n<li>如果我们是 TypeScript 的思维方式，要考虑这个参数和返回值的类型需要一致：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">arg: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上面的代码虽然实现了，但是不适用于其他类型，比如 string、boolean、Person 等类型：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">arg: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>泛型就是类型变量，在 ts 中可以用来定义一些通用的类型，比如数组、函数、类等。泛型可以让你写出更灵活和可复用的代码，而不用担心类型错误<br>\n泛型适合一些需要根据不同的输入类型返回不同的输出类型的应用场景，在这些场景中，如果不用泛型，就需要为每种可能的输入类型写一个重载或者断言，这样会增加代码的复杂度和冗余。而用了泛型，就可以用一个类型参数来表示输入类型，并根据它推断出输出类型，这样就可以写出更简洁和通用的代码。</p>\n<h2 id=\"泛型实现类型参数化\"><a class=\"markdownIt-Anchor\" href=\"#泛型实现类型参数化\">#</a> 泛型实现类型参数化</h2>\n<p>对于刚才的问题，虽然 any 是可以的，但是定义为 any 的时候，我们其实已经丢失了类型信息：</p>\n<ul>\n<li>比如我们传入的是一个 number，那么我们希望返回的可不是 any 类型，而是 number 类型；</li>\n<li>所以，我们需要在函数中可以捕获到参数的类型是 number，并且同时使用它来作为返回值的类型；<br>\n我们需要在这里使用一种特性的变量 ——<strong> 类型变量（type variable）</strong>，它作用于类型，而不是值：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> foo&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arg</span>: <span class=\"title class_\">Type</span>): <span class=\"title class_\">Type</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们可以使用两种方式来调用它：</p>\n<ol>\n<li>通过 <code>&lt;类型&gt;</code>  的方式将类型传递给函数；</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">foo&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过类型推到，自动推到出我们传入变量的类型：在这里会推导出它们是 字面量类型的，因为字面量类型对于我们的函数也是适用的</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型的基本补充\"><a class=\"markdownIt-Anchor\" href=\"#泛型的基本补充\">#</a> 泛型的基本补充</h2>\n<p>当然我们也可以传入多个类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> foo&lt;T，E&gt;(<span class=\"attr\">a1</span>: T,<span class=\"attr\">a2</span>:E): <span class=\"title class_\">Tyepe</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>平时在开发中我们可能会看到一些常用的名称：</p>\n<ul>\n<li><code>T</code> ：Type 的缩写，类型</li>\n<li><code>K</code> 、 <code>V</code> ：key 和 value 的缩写，键值对</li>\n<li><code>E</code> ：Element 的缩写，元素</li>\n<li><code>O</code> ：Object 的缩写，对象</li>\n</ul>\n<p>这些名称都是标识符，可以写成任何的东西</p>\n<h2 id=\"泛型接口\"><a class=\"markdownIt-Anchor\" href=\"#泛型接口\">#</a> 泛型接口</h2>\n<p>在定义接口的时候我们也可以使用泛型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title class_\">IFoo</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">initialValue</span>:T,</span><br><span class=\"line\">  <span class=\"attr\">valueList</span>:T[],</span><br><span class=\"line\">  <span class=\"attr\">handleValue</span>:<span class=\"function\">(<span class=\"params\">value:T</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">foo</span>:<span class=\"title class_\">IFoo</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">initialValue</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">valueList</span>:[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  <span class=\"attr\">handleValue</span>:<span class=\"keyword\">function</span>(<span class=\"params\">value:<span class=\"built_in\">number</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型类\"><a class=\"markdownIt-Anchor\" href=\"#泛型类\">#</a> 泛型类</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>:T,</span><br><span class=\"line\">  <span class=\"attr\">y</span>:T</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">x:T,y:T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p3</span>:<span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型约束\"><a class=\"markdownIt-Anchor\" href=\"#泛型约束\">#</a> 泛型约束</h2>\n<p>有时候我们希望传入的类型有某些共性，但是这些共性可能不是在同一种类型中：<br>\n比如 string 和 array 都是有 length 的，或者某些对象也是会有 length 属性的，那么只要是拥有 length 的属性都可以作为我们的参数类型，那么应该如何操作呢？</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ILength</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> getLength&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">ILength</span>&gt;(<span class=\"attr\">arg</span>: T) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getLength</span>(<span class=\"string\">&quot;abc&quot;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getLength</span>([<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>]));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getLength</span>(&#123; <span class=\"attr\">length</span>: <span class=\"number\">100</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span> &#125;));</span><br></pre></td></tr></table></figure>\n<h1 id=\"泛型-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型-2\">#</a> 泛型 2</h1>\n<ul>\n<li>泛型：可以理解为 【不确定】的【类型】</li>\n<li>使用场景：复用性</li>\n<li>好处：</li>\n</ul>\n<p>先看下面两段代码，分别是求数组和字符串的最小值：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMinArray</span>(<span class=\"params\">arr: <span class=\"built_in\">number</span>[]</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">      min = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMinArray</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">36</span>]));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMinString</span>(<span class=\"params\">arr: <span class=\"built_in\">string</span>[]</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">      min = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMinArray</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;cccc&quot;</span>, <span class=\"string\">&quot;ddddd&quot;</span>]));</span><br></pre></td></tr></table></figure>\n<p>以上两段代码都有一个共通的特性：内容相同，唯一不同的是参数类型。这时候就可以用</p>\n<h2 id=\"泛型函数语法格式\"><a class=\"markdownIt-Anchor\" href=\"#泛型函数语法格式\">#</a> 泛型函数语法格式：</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 名称&lt;T&gt;(参数: T): T &#123;&#125;</span><br><span class=\"line\">名称();</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用泛型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> getMin&lt;T&gt;(<span class=\"attr\">arr</span>: T[]): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">      min = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMin</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">36</span>]));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMin</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;cccc&quot;</span>, <span class=\"string\">&quot;ddddd&quot;</span>]));</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型函数的类型和非泛型函数的类型有什么不同\"><a class=\"markdownIt-Anchor\" href=\"#泛型函数的类型和非泛型函数的类型有什么不同\">#</a> 泛型函数的 “类型” 和非泛型函数的类型有什么不同？</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非泛型函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn1</span> = fn1; <span class=\"comment\">// let Fn1:(arg:any) =&gt; any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//泛型函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> fn2&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn2</span> = fn2; <span class=\"comment\">//// let Fn2:&lt;T&gt;(arg:T) =&gt; T</span></span><br></pre></td></tr></table></figure>\n<p>泛型函数类型前面有一个类型参数 (T)</p>\n<h2 id=\"泛型接口-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型接口-2\">#</a> 泛型接口</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> fnInter&lt;T&gt; &#123;</span><br><span class=\"line\">  (<span class=\"attr\">arg</span>: T): T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型类-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型类-2\">#</a> 泛型类</h2>\n<p>语法格式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> 名称&lt;T&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> 名称&lt;类型&gt;();</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GetMin</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">arr</span>: T[] = [];</span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">el: T</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">min</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">        min = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">GetMin</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">obj.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">min</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型约束-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型约束-2\">#</a> 泛型约束</h2>\n<ul>\n<li>泛型约束可以通过  <code>接口+extends</code>  来实现约束<br>\n为什么要有类型约束呢？我们先看下面一段代码：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> fn&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn</span> = <span class=\"title function_\">fn</span>(<span class=\"string\">&quot;abcd&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这个代码会报错，按理说传入的 <code>&quot;abcd&quot;</code>  是字符串，应该是具有 <code>length</code>  属性的，为什么还会报错呢？<br>\n这是因为这个函数不仅可以传入字符串，还能传入其他东西，如 <code>number</code> , <code>undefined</code>  等，这些是没有 <code>length</code>  属性的。<br>\n这时候我们就可以加入类型约束：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Len</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> fn&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Len</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn</span> = <span class=\"title function_\">fn</span>(<span class=\"string\">&quot;abcd&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面多出的代码就是对 <code>T</code>  类型做了一个约束，即必须有 <code>length</code>  属性才可以</p>\n<h1 id=\"作用域控制\"><a class=\"markdownIt-Anchor\" href=\"#作用域控制\">#</a> 作用域控制</h1>\n<p>TypeScript 支持两种方式来控制我们的作用域：</p>\n<ol>\n<li>模块化：每个文件可以是一个独立的模块，支持 ES Module，也支持 CommonJS；</li>\n<li>命名空间：通过 <code>namespace</code>  来声明一个命名空间</li>\n</ol>\n<h2 id=\"模块化开发\"><a class=\"markdownIt-Anchor\" href=\"#模块化开发\">#</a> 模块化开发</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sub</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名空间-namespace\"><a class=\"markdownIt-Anchor\" href=\"#命名空间-namespace\">#</a> 命名空间 namespace</h2>\n<p>命名空间在 TypeScript 早期时，称之为内部模块，主要目的是将一个模块内部再进行作用域的划分，防止一些命名冲突的问题。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> <span class=\"title class_\">Time</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">format</span>(<span class=\"params\">time: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;2022-02-22&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> <span class=\"title class_\">Price</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">format</span>(<span class=\"params\">price: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;222.22&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"类型的查找\"><a class=\"markdownIt-Anchor\" href=\"#类型的查找\">#</a> 类型的查找</h1>\n<p>之前我们所有的 typescript 中的类型，几乎都是我们自己编写的，但是我们也有用到一些其他的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imageEl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;image&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLImageElement</span>;</span><br></pre></td></tr></table></figure>\n<p>大家是否会奇怪，我们的 HTMLImageElement 类型来自哪里呢？甚至是 document 为什么可以有 getElementById 的方法呢？其实这里就涉及到 typescript 对类型的管理和查找规则了。</p>\n<ul>\n<li>\n<p>这里先介绍另外的一种 typescript 文件： <code>.d.ts</code>  文件<br>\n之前编写的 typescript 文件都是 .ts 文件，这些文件最终会输出 .js 文件，还有另外一种文件  <code>.d.ts</code>  文件，它是用来做类型的声明 ( <code>declare</code> )。 它仅仅用来做类型检测，告知 typescript 我们有哪些类型</p>\n</li>\n<li>\n<p>那么 typescript 会在哪里查找我们的类型声明呢？</p>\n</li>\n</ul>\n<ol>\n<li>内置类型声明</li>\n<li>外部定义类型声明</li>\n<li>自己定义类型声明</li>\n</ol>\n<h2 id=\"内置类型声明\"><a class=\"markdownIt-Anchor\" href=\"#内置类型声明\">#</a> 内置类型声明</h2>\n<p>内置类型声明是 typescript 自带的、帮助我们内置了 JavaScript 运行时的一些标准化 API 的声明文件，包括比如 Math、Date 等内置类型，也包括 DOM API，比如 Window、Document 等。内置类型声明通常在我们安装 typescript 的环境中会带有的</p>\n<h2 id=\"外部定义类型声明\"><a class=\"markdownIt-Anchor\" href=\"#外部定义类型声明\">#</a> 外部定义类型声明</h2>\n<p>外部类型声明通常是我们使用一些库（比如第三方库）时，需要的一些类型声明。这些库通常有两种类型声明方式：</p>\n<ol>\n<li>在自己库中进行类型声明（编写.d.ts 文件），比如 axios</li>\n<li>通过社区的一个公有库 DefinitelyTyped 存放类型声明文件</li>\n</ol>\n<h2 id=\"自己定义类型声明\"><a class=\"markdownIt-Anchor\" href=\"#自己定义类型声明\">#</a> 自己定义类型声明</h2>\n<p>什么情况下需要自己来定义声明文件呢？</p>\n<ol>\n<li>情况一：我们使用的第三方库是一个纯的 JavaScript 库，没有对应的声明文件；比如 lodash</li>\n<li>情况二：我们给自己的代码中声明一些类型，方便在其他地方直接进行使用；</li>\n</ol>\n<h3 id=\"声明变量-函数-类\"><a class=\"markdownIt-Anchor\" href=\"#声明变量-函数-类\">#</a> 声明变量 - 函数 - 类</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wName = <span class=\"string\">&quot;coderwhy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wAge = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wHeight = <span class=\"number\">1.88</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wFoo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;wFoo&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wBar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;wBar&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">let</span> <span class=\"attr\">wName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">let</span> <span class=\"attr\">wAge</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">let</span> <span class=\"attr\">wHeight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wFoo</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wBar</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明模块\"><a class=\"markdownIt-Anchor\" href=\"#声明模块\">#</a> 声明模块</h3>\n<p>我们也可以声明模块，比如 lodash 模块默认不能使用的情况，可以自己来声明这个模块：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;lodash&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">join</span>(<span class=\"params\">args: <span class=\"built_in\">any</span>[]</span>): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>声明模块的语法:  <code>declare module '模块名' &#123;&#125;</code> <br>\n 在声明模块的内部，我们可以通过 export 导出对应库的类、函数等</li>\n</ul>\n<h3 id=\"declare-文件\"><a class=\"markdownIt-Anchor\" href=\"#declare-文件\">#</a> declare 文件</h3>\n<p>在某些情况下，我们也可以声明文件：</p>\n<ul>\n<li>比如在开发 vue 的过程中，默认是不识别我们的.vue 文件的，那么我们就需要对其进行文件的声明</li>\n<li>比如在开发中我们使用了 jpg 这类图片文件，默认 typescript 也是不支持的，也需要对其进行声明</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> modele <span class=\"string\">&#x27;*.vue&#x27;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123;<span class=\"title class_\">DefineComponent</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">component</span>:<span class=\"title class_\">DefineComponent</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> modele <span class=\"string\">&#x27;*.jpg&#x27;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">src</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> src</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"declare-命名空间\"><a class=\"markdownIt-Anchor\" href=\"#declare-命名空间\">#</a> declare 命名空间</h3>\n<p>比如我们在 index.html 中直接引入了 jQuery, 我们可以进行命名空间的声明：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">namespace</span> $ &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">ajax</span>(<span class=\"params\">settings: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 main.ts 中就可以使用了：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">success</span>:<span class=\"function\">(<span class=\"params\">res:<span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器\"><a class=\"markdownIt-Anchor\" href=\"#装饰器\">#</a> 装饰器</h1>\n<ul>\n<li>如果要使用装饰器，必须在 tsconfig.json 中进行配置： <code>&quot;experimentalDecorators&quot;:true</code></li>\n</ul>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\">target:<span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">  target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">userName</span> = <span class=\"string\">&#x27;张三&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@fun1</span>  <span class=\"comment\">// 等同于fun1(Person1)</span></span><br><span class=\"line\">clsaa = <span class=\"title class_\">Person1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person1</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1.<span class=\"property\">userName</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "TypeScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/24/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%EF%BC%9AVite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "url": "https://eucli.top/2023/03/24/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%EF%BC%9AVite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "title": "快速搭建：Vite + Vue3 + Typescript + Pinia + Vueuse项目",
            "date_published": "2023-03-24T10:01:34.000Z",
            "content_html": "<h1 id=\"vite-vue3-typescript-pinia-vueuse\"><a class=\"markdownIt-Anchor\" href=\"#vite-vue3-typescript-pinia-vueuse\">#</a> Vite + Vue3 + Typescript + Pinia + Vueuse</h1>\n<blockquote>\n<h2 id=\"一个大厂企业级前端项目\"><a class=\"markdownIt-Anchor\" href=\"#一个大厂企业级前端项目\">#</a> 一个大厂企业级前端项目</h2>\n</blockquote>\n<h1 id=\"通过这篇文章你可以学到\"><a class=\"markdownIt-Anchor\" href=\"#通过这篇文章你可以学到\">#</a> 通过这篇文章你可以学到</h1>\n<ul>\n<li>如何使用使用 Vite 搭建项目</li>\n<li>如何在 Vite 中集成  <code>typescript</code></li>\n<li>如何在 Vite 中集成  <code>vue-router4</code>  和  <code>pinia</code></li>\n<li>如何使用 vue3 的伴侣  <code>vueuse</code></li>\n<li>如何在项目中集成  <code>eslint</code>  和  <code>prettier</code>  保证代码质量</li>\n<li>如何规范化  <code>git</code>  提交信息</li>\n<li>如何为团队开发 <code>专属的项目模板</code></li>\n</ul>\n<h1 id=\"环境依赖版本\"><a class=\"markdownIt-Anchor\" href=\"#环境依赖版本\">#</a> 环境依赖版本</h1>\n<ul>\n<li><a href=\"https://github.com/nodejs/node\">node</a>：v14.15.4</li>\n<li><a href=\"https://github.com/vitejs/vite\">vite</a>：^2.8.0</li>\n<li><a href=\"https://github.com/vuejs/vue\">vue</a>：^3.2.25</li>\n<li><a href=\"https://github.com/microsoft/TypeScript\">typescript</a>：^4.5.4</li>\n<li><a href=\"https://github.com/vuejs/pinia\">pinia</a>：^2.0.12</li>\n<li><a href=\"https://github.com/vuejs/router\">vue-router</a>：^4.0.14</li>\n<li><a href=\"https://github.com/vueuse/vueuse\">vueuse</a>：^8.2.0</li>\n<li><a href=\"https://github.com/eslint/eslint\">eslint</a>：^8.12.0</li>\n<li><a href=\"https://github.com/prettier/prettier\">prettier</a>：^2.6.1</li>\n<li><a href=\"https://github.com/commitizen/cz-cli\">commitizen</a>：^4.2.4</li>\n<li><a href=\"https://github.com/typicode/husky\">husky</a>：^7.0.4</li>\n</ul>\n<p><strong>长话短说，直接开干～</strong></p>\n<h1 id=\"1-初始化项目\"><a class=\"markdownIt-Anchor\" href=\"#1-初始化项目\">#</a> 1. 初始化项目</h1>\n<h2 id=\"按步骤提示初始化\"><a class=\"markdownIt-Anchor\" href=\"#按步骤提示初始化\">#</a> 按步骤提示初始化：</h2>\n<ol>\n<li>使用 vite-cli 命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">pnpm create vite</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\">npm init vite@latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn create vite</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>输入项目名：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? Project name:  vite-vue3-ts-pinia</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>选择一个框架（vue）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? Select a framework: » - Use arrow-keys. Return to submit.</span><br><span class=\"line\">     vanilla // 原生js</span><br><span class=\"line\"> &gt;   vue     // 默认就是 vue3</span><br><span class=\"line\">     react   // react</span><br><span class=\"line\">     preact  // 轻量化react框架</span><br><span class=\"line\">     lit     // 轻量级web组件</span><br><span class=\"line\">     svelte  // svelte框架</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>使用 typescript</li>\n</ol>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? <span class=\"keyword\">Select</span> a variant: › - <span class=\"keyword\">Use</span> arrow-<span class=\"keyword\">keys</span>. <span class=\"keyword\">Return</span> <span class=\"keyword\">to</span> submit.</span><br><span class=\"line\">     vue</span><br><span class=\"line\"> ❯   vue-ts</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>启动项目</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vite-vue3-ts-pinia &amp;&amp; pnpm install &amp;&amp; pnpm run dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速初始化建议使用\"><a class=\"markdownIt-Anchor\" href=\"#快速初始化建议使用\">#</a> 快速初始化（建议使用）：</h2>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">pnpm <span class=\"built_in\">create</span> vite project-name <span class=\"comment\">-- --template vue-ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm 6.x</span></span><br><span class=\"line\">npm init vite@latest project-name <span class=\"comment\">--template vue-ts</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># npm 7+, 需要额外的双横线：</span></span><br><span class=\"line\">npm init vite@latest project-name <span class=\"comment\">-- --template vue-ts</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn <span class=\"built_in\">create</span> vite project-name <span class=\"comment\">--template vue-ts</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"集成配置\"><a class=\"markdownIt-Anchor\" href=\"#集成配置\">#</a> 集成配置</h2>\n<ol>\n<li>为保证 node 的使用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i @types/node --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改  <code>tsconfig.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typeRoots&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node_modules/@types&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">      <span class=\"string\">&quot;src/types&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;preserve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dom&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/**/*.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.d.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.tsx&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> path <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置别名</span></span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@&quot;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">  <span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span>, <span class=\"comment\">//启动端口</span></span><br><span class=\"line\">    <span class=\"attr\">hmr</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 设置 https 代理</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;/api&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&quot;your https address&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">rewrite</span>: <span class=\"function\">(<span class=\"params\">path: <span class=\"built_in\">string</span></span>) =&gt;</span> path.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\/api/</span>, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-代码质量风格的统一\"><a class=\"markdownIt-Anchor\" href=\"#2-代码质量风格的统一\">#</a> 2. 代码质量风格的统一</h1>\n<h2 id=\"集成-eslint\"><a class=\"markdownIt-Anchor\" href=\"#集成-eslint\">#</a> 集成  <code>eslint</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i eslint eslint-plugin-vue --save-dev</span><br></pre></td></tr></table></figure>\n<p>由于 ESLint 默认使用  <a href=\"https://github.com/eslint/espree\">Espree</a>  进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装  <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\"> <code>@typescript-eslint/parser</code> </a> 替代掉默认的解析器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install @typescript-eslint/parser --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装对应的插件  <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin\">@typescript-eslint/eslint-plugin</a>  它作为 eslint 默认规则的补充，提供了一些额外的适用于 ts 语法的规则。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install @typescript-eslint/eslint-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建配置文件：  <code>.eslintrc.js</code>   或   <code>.eslintrc.json</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">parser</span>: <span class=\"string\">&quot;vue-eslint-parser&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">parser</span>: <span class=\"string\">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">    <span class=\"attr\">sourceType</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ecmaFeatures</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">jsx</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;plugin:vue/vue3-recommended&quot;</span>, <span class=\"string\">&quot;plugin:@typescript-eslint/recommended&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// override/add rules settings here, such as:</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建忽略文件： <code>.eslintignore</code></li>\n</ol>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules/</span><br><span class=\"line\">dist/</span><br><span class=\"line\"><span class=\"keyword\">index</span>.html</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"attr\">&quot;eslint:comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;使用 ESLint 检查并自动修复 src 目录下所有扩展名为 .js 和 .vue 的文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --ext .js,.vue --ignore-path .gitignore --fix src&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"集成-prettier\"><a class=\"markdownIt-Anchor\" href=\"#集成-prettier\">#</a> 集成  <code>prettier</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i prettier eslint-config-prettier eslint-plugin-prettier --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建配置文件：  <code>prettier.config.js</code>  或  <code>.prettierrc.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一行最多 80 字符</span></span><br><span class=\"line\">  <span class=\"attr\">printWidth</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 使用 4 个空格缩进</span></span><br><span class=\"line\">  <span class=\"attr\">tabWidth</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 不使用 tab 缩进，而使用空格</span></span><br><span class=\"line\">  <span class=\"attr\">useTabs</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 行尾需要有分号</span></span><br><span class=\"line\">  <span class=\"attr\">semi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 使用单引号代替双引号</span></span><br><span class=\"line\">  <span class=\"attr\">singleQuote</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 对象的 key 仅在必要时用引号</span></span><br><span class=\"line\">  <span class=\"attr\">quoteProps</span>: <span class=\"string\">&quot;as-needed&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// jsx 不使用单引号，而使用双引号</span></span><br><span class=\"line\">  <span class=\"attr\">jsxSingleQuote</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 末尾使用逗号</span></span><br><span class=\"line\">  <span class=\"attr\">trailingComma</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 大括号内的首尾需要空格 &#123; foo: bar &#125;</span></span><br><span class=\"line\">  <span class=\"attr\">bracketSpacing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// jsx 标签的反尖括号需要换行</span></span><br><span class=\"line\">  <span class=\"attr\">jsxBracketSameLine</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 箭头函数，只有一个参数的时候，也需要括号</span></span><br><span class=\"line\">  <span class=\"attr\">arrowParens</span>: <span class=\"string\">&quot;always&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class=\"line\">  <span class=\"attr\">rangeStart</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">rangeEnd</span>: <span class=\"title class_\">Infinity</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 不需要写文件开头的 @prettier</span></span><br><span class=\"line\">  <span class=\"attr\">requirePragma</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 不需要自动在文件开头插入 @prettier</span></span><br><span class=\"line\">  <span class=\"attr\">insertPragma</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 使用默认的折行标准</span></span><br><span class=\"line\">  <span class=\"attr\">proseWrap</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 根据显示样式决定 html 要不要折行</span></span><br><span class=\"line\">  <span class=\"attr\">htmlWhitespaceSensitivity</span>: <span class=\"string\">&quot;css&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 换行符使用 lf</span></span><br><span class=\"line\">  <span class=\"attr\">endOfLine</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改  <code>.eslintrc.js</code>  配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">extends</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;prettier&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:prettier/recommended&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"attr\">&quot;prettier:comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;自动格式化当前目录下的所有文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier --write&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-集成-pinia\"><a class=\"markdownIt-Anchor\" href=\"#3-集成-pinia\">#</a> 3. 集成  <code>pinia</code></h1>\n<p><code>Pinia</code>  读音：['piːnə]，是 Vue 官方团队推荐代替 <code>Vuex</code>  的一款轻量级状态管理库。</p>\n<p><strong>Pinia 有如下特点：</strong></p>\n<ul>\n<li>完整的 typescript 的支持；</li>\n<li>足够轻量，压缩后的体积只有 1.6kb;</li>\n<li>去除 mutations，只有 state，getters，actions（这是我最喜欢的一个特点）；</li>\n<li>actions 支持同步和异步；</li>\n<li>没有模块嵌套，只有 store 的概念，store 之间可以自由使用，更好的代码分割；</li>\n<li>无需手动添加 store，store 一旦创建便会自动添加；</li>\n</ul>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm <span class=\"selector-tag\">i</span> pinia <span class=\"attr\">--save</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h2>\n<ol>\n<li>新建 src/store 目录并在其下面创建 index.ts，导出 store</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createPinia</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>; <span class=\"comment\">// 创建vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>); <span class=\"comment\">// 挂载pinia</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(store); <span class=\"comment\">// 挂载实例</span></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>定义 State：</strong> 在 src/store 下面创建一个 user.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useUserStore = <span class=\"title function_\">defineStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"comment\">// id必填，且需要唯一</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">updateName</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><strong>获取 State：</strong> 在 src/components/usePinia.vue 中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; userStore.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> <span class=\"keyword\">import</span> &#123; useUserStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store/user&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> <span class=\"keyword\">const</span> userStore = <span class=\"title function_\">useUserStore</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><strong>修改 State：</strong></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 1. 直接修改 state （不建议）</span></span><br><span class=\"line\"> userStore.<span class=\"property\">name</span> = <span class=\"string\">&#x27;李四&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 2. 通过 actions 去修改</span></span><br><span class=\"line\"> &lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"> <span class=\"keyword\">import</span> &#123; useUserStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store/user&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> userStore = <span class=\"title function_\">useUserStore</span>()</span><br><span class=\"line\"> userStore.<span class=\"title function_\">updateName</span>(<span class=\"string\">&#x27;李四&#x27;</span>)</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更详细上手指南：<a href=\"https://juejin.cn/post/7049196967770980389\">链接</a> 官方文档：<a href=\"https://pinia.vuejs.org/introduction.html\">链接</a></p>\n</blockquote>\n<h1 id=\"4-集成-vue-router4\"><a class=\"markdownIt-Anchor\" href=\"#4-集成-vue-router4\">#</a> 4. 集成  <code>vue-router4</code></h1>\n<h2 id=\"安装-2\"><a class=\"markdownIt-Anchor\" href=\"#安装-2\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm i vue-router --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-2\"><a class=\"markdownIt-Anchor\" href=\"#使用-2\">#</a> 使用</h2>\n<ol>\n<li>新建 src/router 目录并在其下面创建 index.ts，导出 router</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, <span class=\"title class_\">RouteRecordRaw</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecordRaw</span>&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;登录&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requireAuth</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/login.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Index&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;首页&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requireAuth</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/index.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHistory</span>(),</span><br><span class=\"line\">  routes,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/router&quot;</span>; <span class=\"comment\">// 创建vue实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router); <span class=\"comment\">// 挂载实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 App.vue</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">     <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">RouterView</span> /&gt;</span></span> </span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-集成-vueuse\"><a class=\"markdownIt-Anchor\" href=\"#5-集成-vueuse\">#</a> 5. 集成  <code>vueuse</code></h1>\n<p><code>VueUse</code>  是一个基于   <code>Composition API</code>  的实用函数集合。</p>\n<h2 id=\"安装-3\"><a class=\"markdownIt-Anchor\" href=\"#安装-3\">#</a> 安装</h2>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm <span class=\"selector-tag\">i</span> <span class=\"keyword\">@vueuse</span>/core</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-3\"><a class=\"markdownIt-Anchor\" href=\"#使用-3\">#</a> 使用</h2>\n<ol>\n<li>创建一个新的 src/page/vueUse.vue 页面来做一个简单的 demo</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span> 测试 vueUse 的鼠标坐标 <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Mouse: &#123;&#123;x&#125;&#125; x &#123;&#123;y&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     <span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     <span class=\"keyword\">import</span> &#123; useMouse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vueuse/core&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;VueUse&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">         <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           <span class=\"keyword\">const</span> &#123; x, y &#125; = <span class=\"title function_\">useMouse</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">             x, y</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">         &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>useMouse 只是 vueuse 的一个最基本的函数库，还有许多，总会有一个适合你；</p>\n<p>更多函数官方文档：<a href=\"https://vueuse.org/\">链接</a></p>\n<h1 id=\"6-css-的集成\"><a class=\"markdownIt-Anchor\" href=\"#6-css-的集成\">#</a> 6. CSS 的集成</h1>\n<h2 id=\"方案一原生-css-variable-新特性\"><a class=\"markdownIt-Anchor\" href=\"#方案一原生-css-variable-新特性\">#</a> 方案一：原生 css variable 新特性：</h2>\n<p>原生支持，不需要第三方插件，具体使用文档可 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/var\">查看</a></p>\n<ol>\n<li>新建文件 src/styles/index.css</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">   <span class=\"attr\">--main-bg-color</span>: pink;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--main-bg-color);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>注：还可以增加 PostCSS 配置，(任何受  <a href=\"https://github.com/postcss/postcss-load-config\">postcss-load-config</a> 支持的格式，例如   <code>postcss.config.js</code>  )，它将会自动应用于所有已导入的 CSS。</p>\n<h2 id=\"方案二scss-或-less\"><a class=\"markdownIt-Anchor\" href=\"#方案二scss-或-less\">#</a> 方案二：scss 或 less：</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># .scss and .sass</span></span><br><span class=\"line\"> pnpm add -D sass</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># .less</span></span><br><span class=\"line\"> pnpm add -D less</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用在 .vue 文件模板中</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .scss</span></span><br><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">     <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>欢迎使用 scss<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   .root &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .less</span></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>欢迎使用 less<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   .root &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-集成-axios\"><a class=\"markdownIt-Anchor\" href=\"#7-集成-axios\">#</a> 7. 集成  <code>axios</code></h1>\n<p><code>axios</code>  是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>\n<h2 id=\"安装-4\"><a class=\"markdownIt-Anchor\" href=\"#安装-4\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm i axios</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-4\"><a class=\"markdownIt-Anchor\" href=\"#使用-4\">#</a> 使用：</h2>\n<ol>\n<li>新建 src/utils/axios.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; <span class=\"title class_\">AxiosResponse</span>, <span class=\"title class_\">AxiosRequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.<span class=\"title function_\">create</span>(); <span class=\"comment\">// Request interceptors</span></span><br><span class=\"line\"></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">); <span class=\"comment\">// Response interceptors</span></span><br><span class=\"line\"></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"keyword\">async</span> (<span class=\"attr\">response</span>: <span class=\"title class_\">AxiosResponse</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> service;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在页面中使用即可</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/axios&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">requestRes</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/xxx&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"封装请求参数和响应数据的所有-api-可选项\"><a class=\"markdownIt-Anchor\" href=\"#封装请求参数和响应数据的所有-api-可选项\">#</a> 封装请求参数和响应数据的所有 api (可选项)</h2>\n<ol>\n<li>新建  <code>src/api/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> login <span class=\"keyword\">from</span> <span class=\"string\">&quot;./module/login&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> index <span class=\"keyword\">from</span> <span class=\"string\">&quot;./module/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, login, index);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新建  <code>src/api/module/login.ts</code>  和  <code>src/api/module/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/axios&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登录</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IResponseType</span>&lt;P = &#123;&#125;&gt; &#123;</span><br><span class=\"line\">  code?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">msg</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ILogin</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">token</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">expires</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">login</span> = (<span class=\"params\">username: <span class=\"built_in\">string</span>, password: <span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request&lt;<span class=\"title class_\">IResponseType</span>&lt;<span class=\"title class_\">ILogin</span>&gt;&gt;(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;/api/auth/login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      username,</span><br><span class=\"line\">      password,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>由于使用了 typescript，所以需新增  <code>src/types/shims-axios.d.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AxiosRequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义扩展axios模块</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">Maybe</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;axios&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AxiosInstance</span> &#123;</span><br><span class=\"line\">    &lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">config</span>: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    request&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">config</span>: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    get&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    head&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    post&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    put&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    patch&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在  <code>src/pages/request.vue</code>  页面中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> <span class=\"variable constant_\">API</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">requestRes</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"variable constant_\">API</span>.<span class=\"title function_\">login</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"8-css-的-ui-样式库\"><a class=\"markdownIt-Anchor\" href=\"#8-css-的-ui-样式库\">#</a> 8. css 的 UI 样式库</h1>\n<blockquote>\n<p>可选很多，根据自己项目的需求去进行选择即可</p>\n</blockquote>\n<p><strong>注意：UI 库一般需要按需引入（下面以  <code>element-plus</code>  为例）</strong></p>\n<ol>\n<li>安装  <code>vite-plugin-style-import</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i vite-plugin-style-import --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> styleImport <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite-plugin-style-import&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">styleImport</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">libs</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">libraryName</span>: <span class=\"string\">&#x27;element-plus&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">esModule</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">resolveStyle</span>: <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"string\">`element-plus/lib/theme-chalk/<span class=\"subst\">$&#123;name&#125;</span>.css`</span>;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"attr\">ensureStyleFile</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 忽略文件是否存在, 导入不存在的CSS文件时防止错误。</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"9-使用-commitizen-规范-git-提交\"><a class=\"markdownIt-Anchor\" href=\"#9-使用-commitizen-规范-git-提交\">#</a> 9. 使用 <a href=\"https://github.com/commitizen/cz-cli\">commitizen</a> 规范 git 提交</h1>\n<p>为了使团队多人协作更加的规范，所以需要每次在 git 提交的时候，做一次硬性规范提交，规范 git 的提交信息</p>\n<h2 id=\"安装-commitizen-交互式提交-自定义提示文案-commit-规范\"><a class=\"markdownIt-Anchor\" href=\"#安装-commitizen-交互式提交-自定义提示文案-commit-规范\">#</a> 安装  <code>commitizen</code>  (交互式提交 + 自定义提示文案 + Commit 规范)</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install -D commitizen cz-conventional-changelog @commitlint/config-conventional @commitlint/cli commitlint-config-cz cz-customizable</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commit:comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;引导设置规范化的提交信息&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;git-cz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node_modules/cz-customizable&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增配置  <code>commitlint.config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;@commitlint/config-conventional&quot;</span>, <span class=\"string\">&quot;cz&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type-enum&quot;</span>: [</span><br><span class=\"line\">      <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;always&quot;</span>,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">&quot;feature&quot;</span>, <span class=\"comment\">// 新功能（feature）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;bug&quot;</span>, <span class=\"comment\">// 此项特别针对bug号，用于向测试反馈bug列表的bug修改情况</span></span><br><span class=\"line\">        <span class=\"string\">&quot;fix&quot;</span>, <span class=\"comment\">// 修补bug</span></span><br><span class=\"line\">        <span class=\"string\">&quot;ui&quot;</span>, <span class=\"comment\">// 更新 ui</span></span><br><span class=\"line\">        <span class=\"string\">&quot;docs&quot;</span>, <span class=\"comment\">// 文档（documentation）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;style&quot;</span>, <span class=\"comment\">// 格式（不影响代码运行的变动）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;perf&quot;</span>, <span class=\"comment\">// 性能优化</span></span><br><span class=\"line\">        <span class=\"string\">&quot;release&quot;</span>, <span class=\"comment\">// 发布</span></span><br><span class=\"line\">        <span class=\"string\">&quot;deploy&quot;</span>, <span class=\"comment\">// 部署</span></span><br><span class=\"line\">        <span class=\"string\">&quot;refactor&quot;</span>, <span class=\"comment\">// 重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;test&quot;</span>, <span class=\"comment\">// 增加测试</span></span><br><span class=\"line\">        <span class=\"string\">&quot;chore&quot;</span>, <span class=\"comment\">// 构建过程或辅助工具的变动</span></span><br><span class=\"line\">        <span class=\"string\">&quot;revert&quot;</span>, <span class=\"comment\">// feat(pencil): add ‘graphiteWidth’ option (撤销之前的commit)</span></span><br><span class=\"line\">        <span class=\"string\">&quot;merge&quot;</span>, <span class=\"comment\">// 合并分支， 例如： merge（前端页面）： feature-xxxx修改线程地址</span></span><br><span class=\"line\">        <span class=\"string\">&quot;build&quot;</span>, <span class=\"comment\">// 打包</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;type&gt; 格式 小写</span></span><br><span class=\"line\">    <span class=\"string\">&quot;type-case&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>, <span class=\"string\">&quot;lower-case&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;type&gt; 不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;type-empty&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;scope&gt; 范围不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;scope-empty&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;scope&gt; 范围格式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;scope-case&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;subject&gt; 主要 message 不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;subject-empty&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;subject&gt; 以什么为结束标志，禁用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;subject-full-stop&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;subject&gt; 格式，禁用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;subject-case&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;body&gt; 以空行开头</span></span><br><span class=\"line\">    <span class=\"string\">&quot;body-leading-blank&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;always&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;header-max-length&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>自定义提示则添加  <code>.cz-config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">types</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;feature&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;feature:  增加新功能&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;bug&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;bug:      测试反馈bug列表中的bug号&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;fix&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;fix:      修复bug&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;ui&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;ui:       更新UI&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;docs&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;docs:     文档变更&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;style&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;style:    代码格式(不影响代码运行的变动)&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;perf&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;perf:     性能优化&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;refactor&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;refactor: 重构(既不是增加feature，也不是修复bug)&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;release&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;release:  发布&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;deploy&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;deploy:   部署&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;test&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;test:     增加测试&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;chore&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;chore:    构建过程或辅助工具的变动(更改配置文件)&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;revert&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;revert:   回退&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;build&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;build:    打包&quot;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// override the messages, defaults are as follows</span></span><br><span class=\"line\">  <span class=\"attr\">messages</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;请选择提交类型:&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">customScope</span>: <span class=\"string\">&quot;请输入您修改的范围(可选):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">subject</span>: <span class=\"string\">&quot;请简要描述提交 message (必填):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&quot;请输入详细描述(可选，待优化去除，跳过即可):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">footer</span>: <span class=\"string\">&quot;请输入要关闭的issue(待优化去除，跳过即可):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">confirmCommit</span>: <span class=\"string\">&quot;确认使用以上信息提交？(y/n/e/h)&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">allowCustomScopes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">skipQuestions</span>: [<span class=\"string\">&quot;body&quot;</span>, <span class=\"string\">&quot;footer&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">subjectLimit</span>: <span class=\"number\">72</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>交互界面测试</li>\n</ol>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2be96b13d3c427e919b11e5bc5404e4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"carbon.png\"></p>\n<ul>\n<li>到目前只是规范了 git 的提交信息，我们对提交前代码的检查还没有做到位，例如 ESLint、Prettier，毕竟谁都会有疏忽的时候，</li>\n<li>那么现在我们的 husky 就闪亮登场了</li>\n</ul>\n<h2 id=\"安装-husky\"><a class=\"markdownIt-Anchor\" href=\"#安装-husky\">#</a> 安装 husky</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.安装</span></span><br><span class=\"line\">pnpm i husky lint-staged -D</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.生成 .husky 的文件夹</span></span><br><span class=\"line\">npx husky install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.添加 hooks，会在 .husky 目录下生成一个 pre-commit 脚本文件</span></span><br><span class=\"line\">npx husky add .husky/pre-commit <span class=\"string\">&quot;npx --no-install lint-staged&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.添加 commit-msg</span></span><br><span class=\"line\">npx husky add .husky/commit-msg <span class=\"string\">&#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 使用 `git commit -m &quot;message&quot;` 就会看到 hook 生效了。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    \t<span class=\"attr\">&quot;*.&#123;js,ts&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;npm run eslint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"string\">&quot;npm run prettier&quot;</span></span><br><span class=\"line\">    \t<span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提交日志可选\"><a class=\"markdownIt-Anchor\" href=\"#提交日志可选\">#</a> 提交日志（可选）</h2>\n<ul>\n<li><a href=\"https://github.com/conventional-changelog/standard-version\">standard-version</a> 或者 <a href=\"https://github.com/conventional-changelog/conventional-changelog\">conventional-changelog</a></li>\n</ul>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>该系列会是一个持续更新系列，关于整个《Vite 从入门到精通》，我主要会从如下图几个方面讲解，请大家拭目以待吧！！！</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52ee2485e3484e8e8d995fbbb7e86835~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?\" alt=\"Untitled.png\"></p>\n<p><code>靓仔靓女们</code> ，都看到这里了，要不点个赞再走呗 🌹🌹🌹</p>\n",
            "tags": [
                "前端开发",
                "项目实战",
                "TypeScript",
                "vue3",
                "pinia",
                "vite",
                "VueUse"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/15/Vue3%E8%A7%82%E5%AF%9F%E7%AC%94%E8%AE%B0/",
            "url": "https://eucli.top/2023/03/15/Vue3%E8%A7%82%E5%AF%9F%E7%AC%94%E8%AE%B0/",
            "title": "Vue3观察笔记",
            "date_published": "2023-03-15T10:20:34.000Z",
            "content_html": "<h1 id=\"介绍-vue\"><a class=\"markdownIt-Anchor\" href=\"#介绍-vue\">#</a> 介绍 vue</h1>\n<p>Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<ul>\n<li>MVVM（Model-View-ViewModel）架构</li>\n</ul>\n<ol>\n<li>View：视图层（UI 用户界面）</li>\n<li>ViewModel：业务逻辑层（一切 js 可视为业务逻辑）</li>\n<li>Model：数据层（存储数据及对数据的处理如增删改查）</li>\n</ol>\n<h1 id=\"vue3-新特性介绍\"><a class=\"markdownIt-Anchor\" href=\"#vue3-新特性介绍\">#</a> Vue3 新特性介绍</h1>\n<h2 id=\"一-重写双向绑定\"><a class=\"markdownIt-Anchor\" href=\"#一-重写双向绑定\">#</a> 一、重写双向绑定</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue2</span><br><span class=\"line\">基于<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>()实现</span><br><span class=\"line\"></span><br><span class=\"line\">vue3 基于<span class=\"title class_\">Proxy</span></span><br><span class=\"line\">proxy与<span class=\"title class_\">Object</span>.<span class=\"title function_\">defineProperty</span>(obj, prop, desc)方式相比有以下优势：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//丢掉麻烦的备份数据</span></span><br><span class=\"line\"><span class=\"comment\">//省去for in 循环</span></span><br><span class=\"line\"><span class=\"comment\">//可以监听数组变化</span></span><br><span class=\"line\"><span class=\"comment\">//代码更简化</span></span><br><span class=\"line\"><span class=\"comment\">//可以监听动态新增的属性；</span></span><br><span class=\"line\"><span class=\"comment\">//可以监听删除的属性 ；</span></span><br><span class=\"line\"><span class=\"comment\">//可以监听数组的索引和 length 属性；</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> proxyObj = <span class=\"keyword\">new</span> <span class=\"title class_\">Proxy</span>(obj,&#123;</span><br><span class=\"line\">        get : <span class=\"keyword\">function</span> (<span class=\"params\">target,prop</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> prop <span class=\"keyword\">in</span> target ? target[prop] : <span class=\"number\">0</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set : <span class=\"keyword\">function</span> (<span class=\"params\">target,prop,value</span>) &#123;</span><br><span class=\"line\">            target[prop] = <span class=\"number\">888</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-vue3-优化-vdom\"><a class=\"markdownIt-Anchor\" href=\"#二-vue3-优化-vdom\">#</a> 二、Vue3 优化 Vdom</h2>\n<p>在 Vue2 中，每次更新 diff, 都是全量对比，Vue3 则只对比带有标记的，这样大大减少了非动态内容的对比消耗</p>\n<h3 id=\"patch-flag-优化静态树\"><a class=\"markdownIt-Anchor\" href=\"#patch-flag-优化静态树\">#</a> patch flag 优化静态树</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello world!<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>Hello world! <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>Vue3 编译后的 Vdom 是这个样子的:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">render</span>(<span class=\"params\">_ctx，_cache，$props，$setup，$data，$options</span>)&#123;<span class=\"keyword\">return</span> (<span class=\"title function_\">_openBlock</span>(),<span class=\"title function_\">_createBlock</span>(_Fragment,<span class=\"literal\">null</span>，[</span><br><span class=\"line\"><span class=\"title function_\">_createvNode</span>( <span class=\"string\">&quot;span&quot;</span>, <span class=\"literal\">null</span>,<span class=\"string\">&quot;Hello world ! &quot;</span>),</span><br><span class=\"line\"><span class=\"title function_\">_createvNode</span>( <span class=\"string\">&quot;span&quot;</span>,<span class=\"literal\">null</span>，<span class=\"string\">&quot;Hello world! &quot;</span>),</span><br><span class=\"line\"><span class=\"title function_\">_createvNode</span>( <span class=\"string\">&quot;span&quot;</span>，<span class=\"literal\">null</span>，<span class=\"string\">&quot;Hello world! &quot;</span>),</span><br><span class=\"line\"><span class=\"title function_\">_createvNode</span>( <span class=\"string\">&quot;span&quot;</span>, <span class=\"literal\">null</span>，<span class=\"string\">&quot;Hello world! &quot;</span>),</span><br><span class=\"line\"><span class=\"title function_\">_createVNode</span>(<span class=\"string\">&quot;span&quot;</span>, <span class=\"literal\">null</span>，<span class=\"title function_\">_toDisplaystring</span>(_ctx.<span class=\"property\">msg</span>)，<span class=\"number\">1</span><span class=\"comment\">/* TEXT */</span>)，</span><br><span class=\"line\"><span class=\"title function_\">_createvNode</span>( <span class=\"string\">&quot;span&quot;</span>, <span class=\"literal\">null</span>，<span class=\"string\">&quot;Hello world! &quot;</span>),</span><br><span class=\"line\"><span class=\"title function_\">_createvNode</span>( <span class=\"string\">&quot;span&quot;</span>, <span class=\"literal\">null</span>，<span class=\"string\">&quot;Hello world! &quot;</span>)]，<span class=\"number\">64</span><span class=\"comment\">/*STABLE_FRAGMENT */</span>))</span><br></pre></td></tr></table></figure>\n<p>新增了 patch flag 标记</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">TEXT</span> = <span class=\"number\">1</span> <span class=\"comment\">// 动态文本节点</span></span><br><span class=\"line\"><span class=\"variable constant_\">CLASS</span>=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">1</span>,<span class=\"number\">1</span> <span class=\"comment\">// 2//动态class</span></span><br><span class=\"line\"><span class=\"variable constant_\">STYLE</span>=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">2</span>，<span class=\"comment\">// 4 //动态style</span></span><br><span class=\"line\"><span class=\"variable constant_\">PROPS</span>=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">3</span>,<span class=\"comment\">// 8 //动态属性，但不包含类名和样式</span></span><br><span class=\"line\"><span class=\"title class_\">FULLPR0PS</span>=<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">4</span>,<span class=\"comment\">// 16 //具有动态key属性，当key改变时，需要进行完整的diff比较。</span></span><br><span class=\"line\"><span class=\"variable constant_\">HYDRATE_</span> <span class=\"variable constant_\">EVENTS</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">5</span>，<span class=\"comment\">// 32 //带有监听事件的节点</span></span><br><span class=\"line\"><span class=\"variable constant_\">STABLE</span> <span class=\"variable constant_\">FRAGMENT</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">6</span>, <span class=\"comment\">// 64 //一个不会改变子节点顺序的fragment</span></span><br><span class=\"line\"><span class=\"variable constant_\">KEYED_</span> <span class=\"variable constant_\">FRAGMENT</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">7</span>, <span class=\"comment\">// 128 //带有key属性的fragment 或部分子字节有key</span></span><br><span class=\"line\"><span class=\"variable constant_\">UNKEYED</span> <span class=\"variable constant_\">FRAGMENT</span> = <span class=\"number\">1</span>&lt;&lt; <span class=\"number\">8</span>, <span class=\"comment\">// 256 //子节点没有key 的fragment</span></span><br><span class=\"line\"><span class=\"variable constant_\">NEED</span> <span class=\"variable constant_\">PATCH</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">9</span>, <span class=\"comment\">// 512 //一个节点只会进行非props比较</span></span><br><span class=\"line\"><span class=\"variable constant_\">DYNAMIC_SLOTS</span> = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span> <span class=\"comment\">// 1024 // 动态slot</span></span><br><span class=\"line\"><span class=\"variable constant_\">HOISTED</span> = -<span class=\"number\">1</span> <span class=\"comment\">// 静态节点</span></span><br><span class=\"line\"><span class=\"variable constant_\">BALL</span> = -<span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<p>我们发现创建动态 dom 元素的时候，Vdom 除了模拟出来了它的基本信息之外，还给它加了一个标记： 1 /_ TEXT _/</p>\n<p>这个标记就叫做 patch flag（补丁标记）</p>\n<p>patch flag 的强大之处在于，当你的 diff 算法走到 _createBlock 函数的时候，会忽略所有的静态节点，只对有标记的动态节点进行对比，而且在多层的嵌套下依然有效。</p>\n<p>尽管 JavaScript 做 Vdom 的对比已经非常的快，但是 patch flag 的出现还是让 Vue3 的 Vdom 的性能得到了很大的提升，尤其是在针对大组件的时候。</p>\n<h2 id=\"三-vue3-fragment\"><a class=\"markdownIt-Anchor\" href=\"#三-vue3-fragment\">#</a> 三、Vue3 Fragment</h2>\n<p>vue3 允许我们支持多个根节点:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;12&lt;/div&gt;</span><br><span class=\"line\">  &lt;div&gt;23&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<p>同时支持 render JSX 写法:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;this.visable ? (</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.obj.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                ) : (</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;this.obj.price&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&#123;this.val&#125;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;[1, 2, 3].map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                   return <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;v&#125;-----<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">                &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>同时新增了 Suspense teleport 和 多 v-model 用法</p>\n<h2 id=\"四-vue3-tree-shaking\"><a class=\"markdownIt-Anchor\" href=\"#四-vue3-tree-shaking\">#</a> 四、Vue3 Tree shaking</h2>\n<p>简单来讲，就是在保持代码运行结果不变的前提下，去除无用的代码</p>\n<p>在 Vue2 中，无论我们使用什么功能，它们最终都会出现在生产代码中。主要原因是 Vue 实例在项目中是单例的，捆绑程序无法检测到该对象的哪些属性在代码中被使用到</p>\n<p>而 Vue3 源码引入 tree shaking 特性，将全局 API 进行分块。如果你不使用其某些功能，它们将不会包含在你的基础包中</p>\n<p>就是比如你要用 watch 就是 import {watch} from ‘vue’ 其他的 computed 没用到就不会给你打包减少体积</p>\n<h2 id=\"五-vue-3-composition-api\"><a class=\"markdownIt-Anchor\" href=\"#五-vue-3-composition-api\">#</a> 五、Vue 3 Composition Api</h2>\n<h1 id=\"vite-目录-vue-单文件组件-npm-run-dev-详解\"><a class=\"markdownIt-Anchor\" href=\"#vite-目录-vue-单文件组件-npm-run-dev-详解\">#</a> Vite 目录 &amp; Vue 单文件组件 &amp; npm run dev 详解</h1>\n<h2 id=\"vite-目录\"><a class=\"markdownIt-Anchor\" href=\"#vite-目录\">#</a> Vite 目录</h2>\n<ul>\n<li>\n<p>publicL: 下面的不会被编译 可以存放静态资源</p>\n</li>\n<li>\n<p>assets: 下面可以存放可编译的静态资源</p>\n</li>\n<li>\n<p>components: 下面用来存放我们的组件</p>\n</li>\n<li>\n<p>App.vue: 是全局组件</p>\n</li>\n<li>\n<p>main.ts: 全局的 ts 文件</p>\n</li>\n<li>\n<p>index.html: 非常重要的入口文件 （webpack，rollup 他们的入口文件都是 enrty input 是一个 js 文件 而 Vite 的入口文件是一个 html 文件，他刚开始不会编译这些 js 文件 只有当你用到的时候 如 script src=“xxxxx.js” 会发起一个请求被 vite 拦截这时候才会解析 js 文件）</p>\n</li>\n<li>\n<p>vite.config.ts: 这是 vite 的配置文件具体配置项</p>\n</li>\n</ul>\n<h2 id=\"sfc-语法规范\"><a class=\"markdownIt-Anchor\" href=\"#sfc-语法规范\">#</a> SFC 语法规范</h2>\n<p><code>*.vue</code>  件都由三种类型的顶层语法块所组成： <code>&lt;template&gt;</code> 、 <code>&lt;script&gt;</code> 、 <code>&lt;style&gt;</code></p>\n<p><code>&lt;template&gt;</code> :</p>\n<ul>\n<li>每个  <code>*.vue</code>  文件最多可同时包含一个顶层  <code>&lt;template&gt;</code>  块。</li>\n<li>其中的内容会被提取出来并传递给 @vue/compiler-dom，预编译为 JavaScript 的渲染函数，并附属到导出的组件上作为其 render 选项。</li>\n</ul>\n<p><code>&lt;script&gt;</code> :</p>\n<ul>\n<li>\n<p>每一个  <code>*.vue </code> 文件可以有多个  <code>&lt;script&gt;</code>  块 (不包括 <code>&lt;script setup&gt;</code> )。</p>\n</li>\n<li>\n<p>该脚本将作为 ES Module 来执行。</p>\n</li>\n<li>\n<p>其默认导出的内容应该是 Vue 组件选项对象，它要么是一个普通的对象，要么是 defineComponent 的返回值。</p>\n</li>\n</ul>\n<p><code>&lt;script setup&gt;</code> :</p>\n<ul>\n<li>\n<p>每个  <code>*.vue </code> 文件最多只能有一个  <code>&lt;script setup&gt;</code>  块 (不包括常规的  <code>&lt;script&gt;</code> )</p>\n</li>\n<li>\n<p>该脚本会被预处理并作为组件的  <code>setup()</code>  函数使用，也就是说它会在每个组件实例中执行。 <code>&lt;script setup&gt;</code>  的顶层绑定会自动暴露给模板。</p>\n</li>\n</ul>\n<p><code>&lt;style&gt;</code> :<br>\n 一个 <code>*.vue</code>  文件可以包含多个  <code>&lt;style&gt;</code>  标签。</p>\n<p><code>&lt;style&gt;</code>  标签可以通过 scoped 或 module attribute (更多详情请查看 SFC 样式特性) 将样式封装在当前组件内。</p>\n<h2 id=\"npm-run-dev-详解\"><a class=\"markdownIt-Anchor\" href=\"#npm-run-dev-详解\">#</a> npm run dev 详解</h2>\n<p>在我们执行这个命令的时候会去找 package.json 的 scripts 然后执行对应的 dev 命令</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;dev&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite &quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;serve&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite --mode production&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-tsc &amp;&amp; vite build&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;preview&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vite preview&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>那为什么我们不直接执行 vite 命令不是更方便吗？因为在我们的电脑上面并没有配置过相关命令 所以无法直接执行</p>\n<p>其实在我们执行 npm install 的时候（包含 vite） 会在 node_modules/.bin/ 创建好可执行文件。 <code>.bin</code>  目录，这个目录不是任何一个 npm 包。目录下的文件，表示这是一个个软链接，打开文件可以看到文件顶部写着 #!/bin/sh ，表示这是一个脚本</p>\n<p>在我们执行 npm run xxx npm 会通过软连接 查找这个软连接存在于源码目录 node_modules/vite</p>\n<p>所以 npm run xxx 的时候，就会到 node_modules/bin 中找对应的映射文件，然后再找到相应的 js 文件来执行</p>\n<ol>\n<li>\n<p>查找规则是先从当前项目的 node_modlue /bin 去找，</p>\n</li>\n<li>\n<p>找不到去全局的 node_module/bin 去找</p>\n</li>\n<li>\n<p>再找不到 去环境变量去找</p>\n</li>\n</ol>\n<h1 id=\"vue-核心虚拟-dom-和-diff-算法\"><a class=\"markdownIt-Anchor\" href=\"#vue-核心虚拟-dom-和-diff-算法\">#</a> Vue 核心虚拟 Dom 和 diff 算法</h1>\n<p><a href=\"https://xiaoman.blog.csdn.net/article/details/122778560\">https://xiaoman.blog.csdn.net/article/details/122778560</a></p>\n<h1 id=\"vue3-新语法糖setup-script\"><a class=\"markdownIt-Anchor\" href=\"#vue3-新语法糖setup-script\">#</a> vue3 新语法糖 ——setup script</h1>\n<ol>\n<li>\n<p>自动注册子组件<br>\n在引入子组件后，不需要再在 components 中注册就可以直接使用</p>\n</li>\n<li>\n<p>属性和方法无需返回<br>\n不用写 <code>return</code>  了，好耶！</p>\n</li>\n<li>\n<p>支持 props、emit 和 context。setup script 语法糖提供了三个新的 API 来供我们使用：defineProps、defineEmit 和 useContext。</p>\n</li>\n</ol>\n<h1 id=\"ref和-reactive\"><a class=\"markdownIt-Anchor\" href=\"#ref和-reactive\">#</a> ref () 和 reactive ()</h1>\n<ul>\n<li>reactive () 只适用于对象或数组，一般用于表单</li>\n<li>ref () 可以接受任何类型，ref 会返回一个包裹对象，并在  <code>.value </code> 属性下暴露内部值。在模板中使用时不需要使用  <code>.value</code> ：它会被自动解包</li>\n</ul>\n<h1 id=\"v-model\"><a class=\"markdownIt-Anchor\" href=\"#v-model\">#</a> v-model</h1>\n<p>使用范围：input、select、表单元素、自定义组件<br>\n v-model 其实是一个语法糖 通过 props 和 emit 组合而成的</p>\n<h1 id=\"自定义指令\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令\">#</a> 自定义指令</h1>\n<h1 id=\"自定义-hooks\"><a class=\"markdownIt-Anchor\" href=\"#自定义-hooks\">#</a> 自定义 Hooks</h1>\n<p>主要用来处理复用代码逻辑的一些封装<br>\n这个在 vue2 就已经有一个东西是 Mixins，mixins 就是将这些多个相同的逻辑抽离出来，各个组件只需要引入 mixins，就能实现一次写代码，多组件受益的效果。弊端就是会涉及到覆盖的问题。第二点就是 变量来源不明确（隐式传入），不利于阅读，使代码变得难以维护。<br>\nVue3 的自定义的 hook：</p>\n<ul>\n<li>Vue3 的 hook 函数 相当于 vue2 的 mixin, 不同在与 hooks 是函数</li>\n<li>Vue3 的 hook 函数 可以帮助我们提高代码的复用性，让我们能在不同的组件中都利用 hooks 函数</li>\n</ul>\n<p>案例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">Options</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: string;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">Return</span> = &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Baseurl</span>: string | <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">option: Options</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">Return</span>&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">file</span>: <span class=\"title class_\">HTMLImageElement</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelector</span>(option.<span class=\"property\">el</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLImageElement</span>;</span><br><span class=\"line\">      file.<span class=\"property\">onload</span> = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>(&#123;</span><br><span class=\"line\">          <span class=\"title class_\">Baseurl</span>: <span class=\"title function_\">toBase64</span>(file),</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> toBase64 = (<span class=\"attr\">el</span>: <span class=\"title class_\">HTMLImageElement</span>): <span class=\"function\"><span class=\"params\">string</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">canvas</span>: <span class=\"title class_\">HTMLCanvasElement</span> = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;canvas&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> ctx = canvas.<span class=\"title function_\">getContext</span>(<span class=\"string\">&quot;2d&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">CanvasRenderingContext2D</span>;</span><br><span class=\"line\">      canvas.<span class=\"property\">width</span> = el.<span class=\"property\">width</span>;</span><br><span class=\"line\">      canvas.<span class=\"property\">height</span> = el.<span class=\"property\">height</span>;</span><br><span class=\"line\">      ctx.<span class=\"title function_\">drawImage</span>(el, <span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.<span class=\"property\">width</span>, canvas.<span class=\"property\">height</span>);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(el.<span class=\"property\">width</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> canvas.<span class=\"title function_\">toDataURL</span>(<span class=\"string\">&quot;image/png&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>案例二：自定义指令 + hooks 双管齐下<br>\n实现一个监听元素变化的 hook<br>\n 主要会用到一个新的 API resizeObserver 兼容性一般 可以做 polyfill<br>\n 但是他可以监听元素的变化 执行回调函数 返回 contentRect 里面有变化之后的宽高。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">App</span>, defineComponent, onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">useResize</span>(<span class=\"params\">el: HTMLElement, callback: (cr: DOMRectReadOnly, resize: ResizeObserver) =&gt; <span class=\"keyword\">void</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"attr\">resize</span>: <span class=\"title class_\">ResizeObserver</span>;</span><br><span class=\"line\">  resize = <span class=\"keyword\">new</span> <span class=\"title class_\">ResizeObserver</span>(<span class=\"function\">(<span class=\"params\">entries</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> entry <span class=\"keyword\">of</span> entries) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> cr = entry.<span class=\"property\">contentRect</span>;</span><br><span class=\"line\">      <span class=\"title function_\">callback</span>(cr, resize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  resize.<span class=\"title function_\">observe</span>(el);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">install</span> = (<span class=\"params\">app: App</span>) =&gt; &#123;</span><br><span class=\"line\">  app.<span class=\"title function_\">directive</span>(<span class=\"string\">&quot;resize&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">mounted</span>(<span class=\"params\">el, binding</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">useResize</span>(el, binding.<span class=\"property\">value</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">useResize.<span class=\"property\">install</span> = install;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useResize;</span><br></pre></td></tr></table></figure>\n<h1 id=\"编写-vue3-插件\"><a class=\"markdownIt-Anchor\" href=\"#编写-vue3-插件\">#</a> 编写 Vue3 插件</h1>\n<p>插件是自包含的代码，通常向 Vue 添加全局级功能。你如果是一个对象需要有 install 方法 Vue 会帮你自动注入到 install 方法 你如果是 function 就直接当 install 方法去使用</p>\n<p>使用插件：在使用 createApp () 初始化 Vue 应用程序后，你可以通过调用 use () 方法将插件添加到你的应用程序中。</p>\n<ul>\n<li>案例：实现一个 Loading<br>\nLoading.Vue</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div v-if=&quot;isShow&quot; class=&quot;loading&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;loading-content&quot;&gt;Loading...&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">const isShow = ref(false); //定位loading 的开关</span><br><span class=\"line\"></span><br><span class=\"line\">const show = () =&gt; &#123;</span><br><span class=\"line\">  isShow.value = true;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">const hide = () =&gt; &#123;</span><br><span class=\"line\">  isShow.value = false;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">//对外暴露 当前组件的属性和方法</span><br><span class=\"line\">defineExpose(&#123;</span><br><span class=\"line\">  isShow,</span><br><span class=\"line\">  show,</span><br><span class=\"line\">  hide,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class=\"line\">.loading &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  inset: 0;</span><br><span class=\"line\">  background: rgba(0, 0, 0, 0.8);</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  justify-content: center;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">  &amp;-content &#123;</span><br><span class=\"line\">    font-size: 30px;</span><br><span class=\"line\">    color: #fff;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<p>Loading.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createVNode, render, <span class=\"title class_\">VNode</span>, <span class=\"title class_\">App</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Loading</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./index.vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">install</span>(<span class=\"params\">app: App</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//createVNode vue提供的底层方法 可以给我们组件创建一个虚拟DOM 也就是Vnode</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">vnode</span>: <span class=\"title class_\">VNode</span> = <span class=\"title function_\">createVNode</span>(<span class=\"title class_\">Loading</span>);</span><br><span class=\"line\">    <span class=\"comment\">//render 把我们的Vnode 生成真实DOM 并且挂载到指定节点</span></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(vnode, <span class=\"variable language_\">document</span>.<span class=\"property\">body</span>);</span><br><span class=\"line\">    <span class=\"comment\">// Vue 提供的全局配置 可以自定义</span></span><br><span class=\"line\">    app.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"property\">$loading</span> = &#123;</span><br><span class=\"line\">      <span class=\"attr\">show</span>: <span class=\"function\">() =&gt;</span> vnode.<span class=\"property\">component</span>?.<span class=\"property\">exposed</span>?.<span class=\"title function_\">show</span>(),</span><br><span class=\"line\">      <span class=\"attr\">hide</span>: <span class=\"function\">() =&gt;</span> vnode.<span class=\"property\">component</span>?.<span class=\"property\">exposed</span>?.<span class=\"title function_\">hide</span>(),</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>main.ts</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Loading</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./components/loading&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title class_\">Loading</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">type <span class=\"title class_\">Lod</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">show</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span>,</span><br><span class=\"line\">    <span class=\"attr\">hide</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//编写ts loading 声明文件放置报错 和 智能提示</span></span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;@vue/runtime-core&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> interface <span class=\"title class_\">ComponentCustomProperties</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">$loading</span>: <span class=\"title class_\">Lod</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; ref, reactive, getCurrentInstance &#125; from &quot;vue&quot;;</span><br><span class=\"line\">const instance = getCurrentInstance();</span><br><span class=\"line\">instance?.proxy?.$Loading.show();</span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">  instance?.proxy?.$Loading.hide();</span><br><span class=\"line\">&#125;, 5000);</span><br><span class=\"line\"></span><br><span class=\"line\">// console.log(instance)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">* &#123;</span><br><span class=\"line\">  padding: 0;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"computed-计算属性\"><a class=\"markdownIt-Anchor\" href=\"#computed-计算属性\">#</a> computed 计算属性</h1>\n<p>计算属性就是当依赖的属性的值发生变化的时候，才会触发他的更改，如果依赖的值，不发生变化的时候，使用的是缓存中的属性值。<br>\n计算属性会自动跟踪其计算中所使用的到的其他响应式状态，并将它们收集为自己的依赖。计算结果会被缓存，并只有在其依赖发生改变时才会被自动更新。</p>\n<ol>\n<li>函数形式</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; computed, reactive, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> price = <span class=\"title function_\">ref</span>(<span class=\"number\">0</span>); <span class=\"comment\">//$0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> m =</span><br><span class=\"line\">  computed &lt;</span><br><span class=\"line\">  string &gt;</span><br><span class=\"line\">  (<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`$`</span> + price.<span class=\"property\">value</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">price.<span class=\"property\">value</span> = <span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>对象形式</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;&#123;&#123; mul &#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div @click=&quot;mul = 100&quot;&gt;click&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">import &#123; computed, ref &#125; from &quot;vue&quot;;</span><br><span class=\"line\">let price = ref&lt;number | string&gt;(1); //$0</span><br><span class=\"line\">let mul = computed(&#123;</span><br><span class=\"line\">  get: () =&gt; &#123;</span><br><span class=\"line\">    return price.value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  set: (value) =&gt; &#123;</span><br><span class=\"line\">    price.value = &quot;set&quot; + value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>computed 购物车案例</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入名称&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;keyWord&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin-top:10px;&quot;</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;500&quot;</span> <span class=\"attr\">cellspacing</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">cellpadding</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"attr\">border</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>物品<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>单价<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>数量<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>总价<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in searchData&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>&#123;&#123; item.price &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;item.num &gt; 1 ? item.num-- : null&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;item.num&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;item.num &lt; 99 ? item.num++ : null&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>&#123;&#123; item.price * item.num &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;del(index)&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">colspan</span>=<span class=\"string\">&quot;5&quot;</span> <span class=\"attr\">align</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>总价：&#123;&#123; total &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">tfoot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; reactive, ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> keyWord = ref&lt;string&gt;(<span class=\"string\">&quot;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  interface <span class=\"title class_\">Data</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: string;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">price</span>: number;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">num</span>: number;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> data = reactive&lt;<span class=\"title class_\">Data</span>[]&gt;([</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;小满的绿帽子&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">price</span>: <span class=\"number\">100</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">num</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;小满的红衣服&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">price</span>: <span class=\"number\">200</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">num</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;小满的黑袜子&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">price</span>: <span class=\"number\">300</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">num</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  ]);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> searchData = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> data.<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> item.<span class=\"property\">name</span>.<span class=\"title function_\">includes</span>(keyWord.<span class=\"property\">value</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> total = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"keyword\">return</span> data.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">prev: number, next: Data</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> prev + next.<span class=\"property\">num</span> * next.<span class=\"property\">price</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;, <span class=\"number\">0</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">del</span> = (<span class=\"params\">index: number</span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    data.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"watch-侦听器\"><a class=\"markdownIt-Anchor\" href=\"#watch-侦听器\">#</a> watch 侦听器</h1>\n<p>watch 需要侦听特定的数据源，并在单独的回调函数中执行副作用<br>\n第一个参数监听源，<br>\n 第二个参数回调函数 cb（newVal,oldVal）,<br>\n 第三个参数一个 options 配置项是一个对象:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>; <span class=\"comment\">//是否立即调用一次</span></span><br><span class=\"line\">  <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>; <span class=\"comment\">//是否开启深度监听</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听 Ref 案例</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"title function_\">ref</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">nav</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">  message,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;新的值----&quot;</span>, newVal);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;旧的值----&quot;</span>, oldVal);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">immediate</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">deep</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听多个 ref 注意变成数组啦</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watch, reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> message2 = <span class=\"title function_\">ref</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>([message, message2], <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;新的值----&quot;</span>, newVal);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;旧的值----&quot;</span>, oldVal);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>监听 Reactive<br>\n 使用 reactive 监听深层对象开启和不开启 deep 效果一样</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watch, reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">nav</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">bar</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(message, <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;新的值----&quot;</span>, newVal);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;旧的值----&quot;</span>, oldVal);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>案例 2 监听 reactive 单一值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, watch, reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name2</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">watch</span>(</span><br><span class=\"line\">  <span class=\"function\">() =&gt;</span> message.<span class=\"property\">name</span>,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;新的值----&quot;</span>, newVal);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;旧的值----&quot;</span>, oldVal);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h1 id=\"watcheffect-高级侦听器\"><a class=\"markdownIt-Anchor\" href=\"#watcheffect-高级侦听器\">#</a> watchEffect 高级侦听器</h1>\n<p>立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</p>\n<p>如果用到 message 就只会监听 message 就是用到几个监听几个 而且是非惰性 会默认调用一次</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = ref &lt; string &gt; <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> message2 = ref &lt; string &gt; <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//console.log(&#x27;message&#x27;, message.value);</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;message2&quot;</span>, message2.<span class=\"property\">value</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>清除副作用<br>\n就是在触发监听之前会调用一个函数可以处理你的逻辑例如防抖</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; watchEffect, ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> message = ref &lt; string &gt; <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> message2 = ref &lt; string &gt; <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"title function_\">watchEffect</span>(<span class=\"function\">(<span class=\"params\">oninvalidate</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">//console.log(&#x27;message&#x27;, message.value);</span></span><br><span class=\"line\">  <span class=\"title function_\">oninvalidate</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;message2&quot;</span>, message2.<span class=\"property\">value</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>停止跟踪 watchEffect 返回一个函数 调用之后将停止更新</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> stop = <span class=\"title function_\">watchEffect</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">oninvalidate</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//console.log(&#x27;message&#x27;, message.value);</span></span><br><span class=\"line\">    <span class=\"title function_\">oninvalidate</span>(<span class=\"function\">() =&gt;</span> &#123;&#125;);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;message2&quot;</span>, message2.<span class=\"property\">value</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">flush</span>: <span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">onTrigger</span>(<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"title function_\">stop</span>();</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue3-定义全局函数和变量\"><a class=\"markdownIt-Anchor\" href=\"#vue3-定义全局函数和变量\">#</a> Vue3 定义全局函数和变量</h1>\n<ul>\n<li>globalProperties<br>\n 由于 Vue3 没有 Prototype 属性 使用 app.config.globalProperties 代替 然后去定义变量和函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 之前 (Vue 2.x)</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$http</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之后 (Vue 3.x)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(&#123;&#125;);</span><br><span class=\"line\">app.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"property\">$http</span> = <span class=\"function\">() =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>过滤器<br>\n在 Vue3 移除了，我们正好可以使用全局函数代替 Filters<br>\n 案例：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"property\">$filters</span> = &#123;</span><br><span class=\"line\">  format&lt;T <span class=\"keyword\">extends</span> any&gt;(<span class=\"attr\">str</span>: T): string &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`$<span class=\"subst\">$&#123;str&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明文件 不然 TS 无法正确类型推导</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type <span class=\"title class_\">Filter</span> = &#123;</span><br><span class=\"line\">    format&lt;T&gt;(<span class=\"attr\">str</span>: T): string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明要扩充@vue/runtime-core包的声明.</span></span><br><span class=\"line\"><span class=\"comment\">// 这里扩充&quot;ComponentCustomProperties&quot;接口, 因为他是vue3中实例的属性的类型.</span></span><br><span class=\"line\">declare <span class=\"variable language_\">module</span> <span class=\"string\">&#x27;vue&#x27;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">export</span> interface <span class=\"title class_\">ComponentCustomProperties</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">$filters</span>: <span class=\"title class_\">Filter</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>setup 读取值:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; getCurrentInstance, <span class=\"title class_\">ComponentInternalInstance</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; appContext &#125; = &lt;<span class=\"title class_\">ComponentInternalInstance</span>&gt;<span class=\"title function_\">getCurrentInstance</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(appContext.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"property\">$env</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">推荐第二种方式;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, reactive, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">getCurrentInstance</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(app?.<span class=\"property\">proxy</span>?.<span class=\"property\">$filters</span>.<span class=\"title function_\">format</span>(<span class=\"string\">&quot;js&quot;</span>));</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue3-生命周期\"><a class=\"markdownIt-Anchor\" href=\"#vue3-生命周期\">#</a> Vue3 生命周期</h1>\n<p>简单来说就是一个组件从创建 到 销毁的 过程 成为生命周期</p>\n<p>在我们使用 Vue3 组合式 API 是没有  <code>beforeCreate</code>  和  <code>created</code>  这两个生命周期的</p>\n<ul>\n<li><code>onBeforeMount()</code> : 在组件 DOM 实际渲染安装之前调用。在这一步中，根元素还不存在。</li>\n<li><code>onMounted()</code> : 在组件的第一次渲染后调用，该元素现在可用，允许直接 DOM 访问</li>\n<li><code>onBeforeUpdate()</code> : 数据更新时调用，发生在虚拟 DOM 打补丁之前。</li>\n<li><code>onUpdated()</code> :DOM 更新后，updated 的方法即会调用。</li>\n<li><code>onBeforeUnmount()</code> : 在卸载组件实例之前调用。在这个阶段，实例仍然是完全正常的。</li>\n<li><code>onUnmounted()</code> : 卸载组件实例后调用。调用此钩子时，组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。</li>\n</ul>\n<h1 id=\"详解-scoped-和样式穿透\"><a class=\"markdownIt-Anchor\" href=\"#详解-scoped-和样式穿透\">#</a> 详解 Scoped 和样式穿透</h1>\n<p>样式穿透：主要是用于修改很多 vue 常用的组件库（element, vant, AntDesigin），虽然配好了样式但是还是需要更改其他的样式就需要用到样式穿透</p>\n<p>Scoped: 实现组件的私有化，当前 style 属性只属于当前模块。在 DOM 结构中可以发现，vue 通过在 DOM 结构以及 css 样式上加了唯一标记，达到样式私有化，不污染全局的作用<br>\n vue 中的 scoped 通过在 DOM 结构以及 css 样式上加唯一不重复的标记:data-v-hash 的方式，以保证唯一（而这个工作是由过 PostCSS 转译实现的），达到样式私有化模块化的目的。</p>\n<p>总结一下 scoped 三条渲染规则：</p>\n<ol>\n<li>给 HTML 的 DOM 节点加一个不重复 data 属性 (形如：data-v-123) 来表示他的唯一性</li>\n<li>在每句 css 选择器的末尾（编译后的生成的 css 语句）加一个当前组件的 data 属性选择器（如 [data-v-123]）来私有化样式</li>\n<li>如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的 data 属性<br>\n PostCSS 会给一个组件中的所有 dom 添加了一个独一无二的动态属性 data-v-xxxx，然后，给 CSS 选择器额外添加一个对应的属性选择器来选择该组件中 dom，这种做法使得样式只作用于含有该属性的 dom—— 组件内部 dom, 从而达到了’样式模块化’的效果.</li>\n</ol>\n<ul>\n<li>案例：修改 Element ui Input 样式，发现没有生效，如果不写 Scoped 就没问题</li>\n</ul>\n<p>原因就是 Scoped 搞的鬼 他在进行 PostCss 转化的时候把元素选择器默认放在了最后<br>\n Vue 提供了样式穿透:deep () 他的作用就是用来改变 属性选择器的位置</p>\n<h3 id=\"bem-架构\"><a class=\"markdownIt-Anchor\" href=\"#bem-架构\">#</a> bem 架构</h3>\n<p>他是一种 css 架构 oocss 实现的一种 （面向对象 css） ，BEM 实际上是 block、element、modifier 的缩写，分别为块层、元素层、修饰符层，element UI 也使用的是这种架构<br>\n BEM 命名约定的模式是：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.block</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block__element</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.block--modifier</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"列表渲染v-for\"><a class=\"markdownIt-Anchor\" href=\"#列表渲染v-for\">#</a> 列表渲染：v-for</h1>\n<p>我们可以使用 <code>v-for</code>  指令来渲染一个基于源数组的列表：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;todo in todos&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;todo.id&quot;</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里的 todo 是一个局部变量，表示当前正在迭代的数组元素。它只能在  <code>v-for</code>  所绑定的元素上或是其内部访问，就像函数的作用域一样。</p>\n<p>更新列表有两种方式：</p>\n<ol>\n<li>在源数组上调用变更方法：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todos.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(newTodo);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用新的数组替代原数组：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todos.<span class=\"property\">value</span> = todos.<span class=\"property\">value</span>.<span class=\"title function_\">filter</span>(<span class=\"comment\">/* ... */</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"模板引用\"><a class=\"markdownIt-Anchor\" href=\"#模板引用\">#</a> 模板引用</h1>\n<p>需要手动操纵 DOM 时要用到 <code>模板引用</code>  ———— 也就是指向模板中一个 DOM 元素的 ref，通过这个 <code>ref</code> attribute 来实现模板引用:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;p&quot;</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>要访问该引用，我们需要声明一个同名的 ref。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>注意这个 ref 使用 null 值来初始化。这是因为当  <code>&lt;script setup&gt; </code> 执行时，DOM 元素还不存在。模板引用 ref 只能在组件挂载后访问。</p>\n<p>要在挂载之后执行代码，我们可以使用  <code>onMounted()</code>  函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时组件已经挂载。</span></span><br><span class=\"line\">  p.<span class=\"property\">value</span>.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;mounted!&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"组件间通信\"><a class=\"markdownIt-Anchor\" href=\"#组件间通信\">#</a> 组件间通信</h1>\n<h2 id=\"父传子\"><a class=\"markdownIt-Anchor\" href=\"#父传子\">#</a> 父传子</h2>\n<p>vue3 父传子主要有两种方式： <code>props</code>  和 <code>slot</code> :<br>\n <code>props</code>  是一种单向数据流，父组件通过在  <code>HTML</code>  内容传入不同数据来控制子组件的渲染，但是这样会增加父子组件之间的耦合度，而且 <code>props</code>  只能传递静态的数据，不能传递动态的内容。</p>\n<p><code>slot</code>  是一种内容分发机制，父组件可以通过 <code>slot</code>  标签来插入任意的内容到子组件中，这样可以增加组件的灵活性和复用性，而且 <code> slot</code>  可以传递动态的内容，比如表达式和指令。 <code>slot</code>  还可以接收插槽  <code>props</code>  ，也就是子组件传递给父组件的数据，这样可以实现双向数据流。</p>\n<ul>\n<li>总之， <code>props</code>  和  <code>slot</code>  都是父传子的方式，但是  <code>props </code> 更适合传递简单的数据，而  <code>slot</code>  更适合传递复杂的内容。</li>\n</ul>\n<h3 id=\"父传子props\"><a class=\"markdownIt-Anchor\" href=\"#父传子props\">#</a> 父传子：props</h3>\n<p>子组件可以通过  <code>props</code>  从父组件接受动态数据。</p>\n<ol>\n<li>父组件传递 <code>props</code> ：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;greeting&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>子组件使用 <code>defineProps() </code> ，声明子组件所接受的  <code>props</code> ：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ChildComp.vue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  msg: string,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">//然后直接使用<span class=\"code\">`msg`</span>即可</span><br></pre></td></tr></table></figure>\n<p>下面是 ts 写法：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&#x27;ts&#x27;</span>&gt;</span></span></span><br><span class=\"line\">const props = defineProps&lt;&#123;</span><br><span class=\"line\">  msg: string,</span><br><span class=\"line\">&#125;&gt;();</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">//然后直接使用<span class=\"code\">`msg`</span>即可</span><br></pre></td></tr></table></figure>\n<h3 id=\"父传子slot-插槽\"><a class=\"markdownIt-Anchor\" href=\"#父传子slot-插槽\">#</a> 父传子：slot 插槽</h3>\n<p>匿名插槽、具名插槽、作用于插槽、动态插槽</p>\n<p>我们已经了解到组件能够接收任意类型的  <code>JavaScript </code> 值作为  <code>props</code> ，但组件要如何接收模板内容呢？在某些场景中，我们可能想要为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。<br>\n插槽内容可以是任意合法的模板内容，不局限于文本，可以传入多个元素，甚至是组件。<br>\n通过使用插槽，子组件更加灵活和具有可复用性。现在组件可以用在不同的地方渲染各异的内容，但同时还保证都具有相同的样式。</p>\n<ol>\n<li>父组件中：在<strong>子组件标签</strong>中直接写要传递的内容：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ChildComp&gt;</span><br><span class=\"line\">  插槽内容</span><br><span class=\"line\">&lt;/ChildComp&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>子组件中：写一个 <code>&lt;slot&gt;</code> ，它是一个<strong>插槽出口</strong>，标示了父元素提供的<strong>插槽内容</strong>将在哪里被渲染。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>&lt;/slot</span><br><span class=\"line\">  &gt;<span class=\"comment\">&lt;!-- 插槽出口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最终渲染出的 DOM 是这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>插槽内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"渲染作用域\"><a class=\"markdownIt-Anchor\" href=\"#渲染作用域\">#</a> 渲染作用域</h4>\n<p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。举例来说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;ChildComp&gt;&#123;&#123; message &#125;&#125;&lt;/ChildComp&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的两个  <code>&#123;&#123; message &#125;&#125;</code>  插值表达式渲染的内容都是一样的。</p>\n<ul>\n<li>注意：插槽内容无法访问子组件的数据。父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域。</li>\n</ul>\n<h4 id=\"默认内容\"><a class=\"markdownIt-Anchor\" href=\"#默认内容\">#</a> 默认内容</h4>\n<p>在外部没有提供任何内容的情况下，可以为插槽指定默认内容。比如子组件中有这样一个内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果我们想在父组件没有提供任何插槽内容时在子组件的 <code>&lt;div&gt;</code>  内渲染一些元素，只需要将其写在  <code>&lt;slot&gt;</code>  标签之间来作为默认内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>默认内容<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>只要父组件没有向这个子组件提供任何插槽内容，“默认内容” 将会被作为默认内容渲染，但如果父组件提供了插槽内容，那么被显式提供的内容会取代默认内容。</p>\n<h4 id=\"具名插槽\"><a class=\"markdownIt-Anchor\" href=\"#具名插槽\">#</a> 具名插槽</h4>\n<p>有时会在一个组件中使用多个<strong>插槽出口</strong>，比如某个子组件中有如下模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 标题内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 主要内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 底部内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于这种场景， <code>&lt;slot&gt;</code>  元素可以有一个特殊的 <code>name</code> ，用来给各个插槽分配唯一的 ID，以确定每一处要渲染的内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这类带  <code>name</code>  的插槽被称为<strong>具名插槽</strong> 没有提供  <code>name</code>  的  <code>&lt;slot&gt; </code> 出口会隐式地命名为 “default”。</p>\n<p>这种情况下，父组件在使用这个子组件的时候就需要使用一个含  <code>v-slot</code>  指令的  <code>&lt;template&gt;</code>  元素为具名插槽传入内容，并将目标插槽的名字传给该指令: <code>&lt;template v-slot:header&gt;</code> , 而 <code>v-slot</code>  有对应的简写  <code>#</code> ，因此  <code>&lt;template v-slot:header&gt;</code>  可以简写为  <code>&lt;template #header&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ChildComp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非  <code>&lt;template&gt;</code>  节点都被隐式地视为默认插槽的内容。所以上面也可以写成：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 隐式的默认插槽 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ChildComp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"作用域插槽\"><a class=\"markdownIt-Anchor\" href=\"#作用域插槽\">#</a> 作用域插槽</h4>\n<p>插槽的内容无法访问到子组件的状态，然而在某些场景下插槽的内容可能想要同时使用父组件域内和子组件域内的数据。要做到这一点，我们需要一种方法来让子组件在渲染时将一部分数据提供给插槽。</p>\n<p>方法：可以像对组件传递  <code>props</code>  那样，向一个插槽的出口上传递 attributes：<br>\n————————————————————————————————————</p>\n<h3 id=\"简单使用父传子\"><a class=\"markdownIt-Anchor\" href=\"#简单使用父传子\">#</a> 简单使用<strong>父传子</strong></h3>\n<h4 id=\"props\"><a class=\"markdownIt-Anchor\" href=\"#props\">#</a>  <code>props</code></h4>\n<ul>\n<li>父组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;greeting&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>子组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  msg: String,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"slot-插槽\"><a class=\"markdownIt-Anchor\" href=\"#slot-插槽\">#</a>  <code>slot</code>  插槽</h4>\n<ul>\n<li>父组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span></span><br><span class=\"line\">  插槽内容</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">ChildComp</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>子组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><span class=\"language-xml\">&lt;/slot</span></span><br><span class=\"line\"><span class=\"language-xml\">  &gt;</span>&lt;!-- 插槽出口 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"具名插槽-2\"><a class=\"markdownIt-Anchor\" href=\"#具名插槽-2\">#</a> 具名插槽</h4>\n<ul>\n<li>父组件:</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">hello</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/ChildComp&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>子组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>————————————————————————————————————</p>\n<h2 id=\"子给父之一emits\"><a class=\"markdownIt-Anchor\" href=\"#子给父之一emits\">#</a> 子给父之一：Emits</h2>\n<p>除了接收  <code>props</code> ，子组件还可以向父组件触发事件.</p>\n<ol>\n<li>子组件触发</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;send&quot;</span>&gt;</span></span>给父组件传值<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">  // 声明触发的事件</span><br><span class=\"line\">  const emit = defineEmits([&quot;on-click&quot;]);</span><br><span class=\"line\">  // 带参数触发</span><br><span class=\"line\">const send = () =&gt; [</span><br><span class=\"line\"><span class=\"code\">    emit(&quot;on-click&quot;);</span></span><br><span class=\"line\"><span class=\"code\">]</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>父组件接收</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> @<span class=\"attr\">on-click</span>=<span class=\"string\">&quot;getName&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&#x27;ts&#x27;</span>&gt;</span></span></span><br><span class=\"line\">import ChildComp from &#x27;./<span class=\"strong\">****</span>&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">let name = &#x27;小满&#x27;,</span><br><span class=\"line\">const getName = (name:string) =&gt; &#123;</span><br><span class=\"line\">  console.log(name,&#x27;======&gt;我是父组件&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><code>emit()</code>  的第一个参数是事件的名称。其他所有参数都将传递给事件监听器。<br>\n父组件可以使用 <code>v-on</code>  监听子组件触发的事件 —— 这里的处理函数接收了子组件触发事件时的额外参数并将它赋值给了本地状态：</p>\n<h2 id=\"子给父之二defineexpose\"><a class=\"markdownIt-Anchor\" href=\"#子给父之二defineexpose\">#</a> 子给父之二：defineExpose</h2>\n<p>子组件可以通过 <code>defineExpose</code>  暴露属性或方法给父组件，父组件通过子组件标签内使用 ref 来接收。element plus 表单多用这种方式暴露方法和属性</p>\n<ol>\n<li>子组件暴露</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">defineExpose(&#123;</span><br><span class=\"line\">  name:&#x27;小满&#x27;,</span><br><span class=\"line\">  open:() =&gt; console.log(1)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>父组件接收</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#x27;childcomp&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&#x27;ts&#x27;</span>&gt;</span></span></span><br><span class=\"line\">import ChildComp from &#x27;./<span class=\"strong\">****</span>&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const childcomp = ref<span class=\"language-xml\"><span class=\"language-javascript\">&lt;<span class=\"title class_\">InstanceType</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"title class_\">ChildComp</span>&gt;</span></span>&gt;()</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"父子组件双向数据props-emits-v-model\"><a class=\"markdownIt-Anchor\" href=\"#父子组件双向数据props-emits-v-model\">#</a> 父子组件双向数据：props + emits + v-model</h2>\n<h2 id=\"兄弟组件间通信\"><a class=\"markdownIt-Anchor\" href=\"#兄弟组件间通信\">#</a> 兄弟组件间通信</h2>\n<p>方式极多</p>\n<h3 id=\"mitt-插件方式实现兄弟组件间通信\"><a class=\"markdownIt-Anchor\" href=\"#mitt-插件方式实现兄弟组件间通信\">#</a> mitt 插件方式实现兄弟组件间通信</h3>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mitt -S</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>src/plugins/Bus.js</code>  或 <code>src/utils/Bus.js</code> ：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&quot;mitt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">mitt</span>();</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用</li>\n</ol>\n<ul>\n<li>A 组件发送</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import mitt from &#x27;../utils/Bus.js&#x27;</span><br><span class=\"line\">let str = ref(&#x27;这是A组件的数据&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const btn = ()=&gt; &#123;</span><br><span class=\"line\">  //emit(自定义事件名称,参数,……)</span><br><span class=\"line\">  mitt.emit(&#x27;fn&#x27;,str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;h1&gt;A组件&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;button @click = &quot;btn&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>B 组件接收</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import mitt from &#x27;../utils/Bus.js&#x27;</span><br><span class=\"line\">let s = ref(&#x27;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">onBeforeMount(()=&gt;&#123;</span><br><span class=\"line\">  //emit(自定义事件名称,回调函数) 如果要接收多个事件，就把<span class=\"code\">`自定义事件名称`</span>换成<span class=\"code\">`*`</span></span><br><span class=\"line\">  mitt.on(&#x27;fn&#x27;,e =&gt; &#123;</span><br><span class=\"line\"><span class=\"code\">    s.value = e.value</span></span><br><span class=\"line\"><span class=\"code\">  &#125;)</span></span><br><span class=\"line\"><span class=\"code\">&#125;)</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;h1&gt;B组件&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &#123;&#123;s&#125;&#125;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"label-标签\"><a class=\"markdownIt-Anchor\" href=\"#label-标签\">#</a> label 标签</h1>\n<p><code>&lt;label&gt; </code> 标签为 input 元素定义标注（标记）。</p>\n<p>label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p>\n<p><code>&lt;label&gt; </code> 标签的 for 属性应当与相关元素的 id 属性相同。</p>\n<p>注释：“for” 属性可把 label 绑定到另外一个元素。请把 “for” 属性的值设置为相关元素的 id 属性的值。<br>\n就是一个文本提示标签，不过在 label 标签中加入 for 属性可以与相应的选项框进行捆绑，也就是说，在这种情况下你点击这个文本框就会活的点击选项框的效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;lable&gt;男&lt;/lable&gt;</span><br><span class=\"line\">&lt;input style=&quot;checkbox&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"h-函数\"><a class=\"markdownIt-Anchor\" href=\"#h-函数\">#</a> h 函数</h1>\n<p>Vue 推荐在绝大数情况下使用模板来创建你的 HTML，然后一些特殊的场景，你真的需要 JavaScript 的完全编程的<br>\n能力，这个时候你可以使用 渲染函数 ，它比模板更接近编译器；<br>\nVue 在生成真实的 DOM 之前，会将我们的节点转换成 VNode，而 VNode 组合在一起形成一颗树结构，就是虚<br>\n拟 DOM（VDOM）；<br>\n事实上，我们之前编写的 template 中的 HTML 最终也是使用渲染函数生成对应的 VNode；<br>\n那么，如果你想充分的利用 JavaScript 的编程能力，我们可以自己来编写 createVNode 函数，生成对应的<br>\n VNode；</p>\n<ul>\n<li>h () 函数是一个用于创建 vnode 的一个函数；其实更准备的命名是 createVNode () 函数，但是为了简便在 Vue 将之简化为 h () 函数</li>\n<li>h () 函数 如何使用呢？<br>\n它接受三个参数：第一个参数【type】既可以是一个字符串 (用于原生元素) 也可以是一个 Vue 组件定义。第二个参数【props】是要传递的 prop，第三个参数【children】是子节点。<br>\n除了 type 外，其他参数都是可选的。如果没有 props，那么通常可以将 children 作为第二个参数传入；如果会产生歧义，可以将 null 作为第二个参数传入，将 children 作为第三个参数传入</li>\n<li>h 函数的基本使用<br>\n h 函数可以在两个地方使用：</li>\n</ul>\n<ol>\n<li>render 函数选项中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, &#123; <span class=\"attr\">class</span>: <span class=\"string\">&quot;app&quot;</span> &#125;, <span class=\"string\">&quot;Hello App&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>setup 函数选项中（setup 本身需要是一个函数类型，函数再返回 h 函数创建的 VNode:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setuo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, &#123; <span class=\"attr\">class</span>: <span class=\"string\">&quot;app&quot;</span> &#125;, <span class=\"string\">&quot;Hello App&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自定义指令-2\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令-2\">#</a> 自定义指令</h1>\n<p>在 Vue 的模板语法中我们学习过各种各样的指令： <code>v-show</code> 、 <code>v-for</code> 、 <code>v-model</code>  等等，除了使用这些指令之外，Vue<br>\n 也允许我们来自定义自己的指令<br>\n注意：在 Vue 中，代码的复用和抽象主要还是通过组件<br>\n通常在某些情况下，你需要对 DOM 元素进行底层操作，这个时候就会用到自定义指令</p>\n<ul>\n<li>自定义指令分为两种：</li>\n</ul>\n<ol>\n<li>自定义局部指令：组件中通过  <code>directives</code>  选项，只能在当前组件中使用</li>\n<li>自定义全局指令：app 的  <code>directive</code>  方法，可以在任意组件中被使用</li>\n</ol>\n<p>eg. 比如我们来做一个非常简单的案例：当某个元素挂载完成后可以自定获取焦点</p>\n<ul>\n<li>自定义一个  <code>v-focus</code>  的局部指令；<br>\n这个自定义指令实现非常简单，我们只需要在组件选项中使用  <code>directives</code>  即可<br>\n它是一个对象，在对象中编写我们自定义指令的名称（注意：这里不需要加 <code>v-</code> ）<br>\n自定义指令有一个生命周期，是在组件挂载后调用的  <code>mounted</code> ，我们可以在其中完成操作</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\">    focus: &#123;</span><br><span class=\"line\">      mounted(el) &#123;</span><br><span class=\"line\">        el.focus();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自定义一个  <code>v-focus</code>  的全局指令；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">directives</span>(<span class=\"string\">&quot;focus&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\">el</span>) &#123;</span><br><span class=\"line\">    el.<span class=\"title function_\">focus</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"指令的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#指令的生命周期\">#</a> 指令的生命周期</h2>\n<p>一个指令定义的对象，Vue 提供了如下的几个钩子函数<br>\n <code>created</code> ：在绑定元素的 attribute 或事件监听器被应用之前调用<br>\n <code>beforeMount</code> ：当指令第一次绑定到元素并且在挂载父组件之前调用<br>\n <code>mounted</code> ：在绑定元素的父组件被挂载后调用<br>\n <code>beforeUpdate</code> ：在更新包含组件的 VNode 之前调用<br>\n <code>updated</code> ：在包含组件的 VNode 及其子组件的 VNode 更新后调用<br>\n <code>beforeUnmount</code> ：在卸载绑定元素的父组件之前调用<br>\n <code>unmounted</code> ：当指令与元素解除绑定且父组件已卸载时，只调用一次</p>\n<h2 id=\"自定义指令练习时间戳\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令练习时间戳\">#</a> 自定义指令练习；时间戳</h2>\n<p>来实现一个可以自动对时间格式化的指令 <code>v-format-time</code> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dayjs <span class=\"keyword\">from</span> <span class=\"string\">&quot;dayjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> format = <span class=\"string\">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>;</span><br><span class=\"line\">  app.<span class=\"title function_\">directive</span>(<span class=\"string\">&quot;format-time&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">created</span>(<span class=\"params\">el, bingings</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bingings.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">        format = bingings.<span class=\"property\">value</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">mounted</span>(<span class=\"params\">el</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> textContent = el.<span class=\"property\">textContent</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timestamp = <span class=\"built_in\">parseInt</span>(el.<span class=\"property\">textContent</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (textContent.<span class=\"property\">length</span> === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        timestamp = timestamp * <span class=\"number\">1000</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp);</span><br><span class=\"line\">      el.<span class=\"property\">textContent</span> = <span class=\"title function_\">dayjs</span>(timestamp).<span class=\"title function_\">format</span>(format);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue-插件\"><a class=\"markdownIt-Anchor\" href=\"#vue-插件\">#</a> Vue 插件</h1>\n<p>通常我们向 Vue 全局添加一些功能时，会采用插件的模式，它有两种编写方式：</p>\n<ol>\n<li>对象类型：一个对象，但是必须包含一个 install 的函数，该函数会在安装插件时执行</li>\n<li>函数类型：一个 function，这个函数会在安装插件时自动执行<br>\n插件可以完成的功能没有限制，比如下面的几种都是可以的：</li>\n</ol>\n<ul>\n<li>添加全局方法或者  <code>property</code> ，通过把它们添加到  <code>config.globalProperties</code>  上实现；</li>\n<li>添加全局资源：指令 / 过滤器 / 过渡等；</li>\n<li>通过全局  <code>mixin</code>  来添加一些组件选项；</li>\n<li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能</li>\n</ul>\n<h2 id=\"插件的编写方式\"><a class=\"markdownIt-Anchor\" href=\"#插件的编写方式\">#</a> 插件的编写方式</h2>\n<p>对象类型写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">install</span>(<span class=\"params\">app, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;插件被安装:&quot;</span>, app, options);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>函数类型的写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">app, options</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;插件被安装:&quot;</span>, app, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue3-如何注册全局组件方法替代-vue2-的-vueprototype\"><a class=\"markdownIt-Anchor\" href=\"#vue3-如何注册全局组件方法替代-vue2-的-vueprototype\">#</a> vue3 如何注册全局组件 / 方法（替代 vue2 的 Vue.prototype）</h1>\n<ol>\n<li>provide /inject （推荐）<br>\nmain.js 中：通过 provide 将组件或者方法、变量挂载在全局：封装了一个函数，在首页中我们只需要调用这个函数并且传入 app 即可</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(store);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载全局方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">globalFunc</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;要挂载在全局的方法&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 将globalFunc方法挂载在全局</span></span><br><span class=\"line\">app.<span class=\"title function_\">provide</span>(<span class=\"string\">&quot;globalFunc&quot;</span>, globalFunc);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把vue实例挂载在window.vm,方便使用vue的实例</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">vm</span> = app;</span><br></pre></td></tr></table></figure>\n<p>组件中：通过 inject 获取全局方法并调用:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>组件中通过inject获取全局方法并调用<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; defineComponent, onMounted, inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;JobDetail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 注册组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Header</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">testFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> testFunc = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> <span class=\"attr\">globalFunc</span>: any = <span class=\"title function_\">inject</span>(<span class=\"string\">&quot;globalFunc&quot;</span>); <span class=\"comment\">// 通过inject获取挂载在全局的globalFunc方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">globalFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        testFunc,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>app.config.globalProperties（不推荐）</li>\n</ol>\n<p>main.js 中：通过  <code>app.config.globalProperties</code>  将组件或者方法、变量挂载在全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(store);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载全局方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">globalFunc</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;要挂载在全局的方法&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 将globalFunc方法挂载在全局</span></span><br><span class=\"line\">app.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"property\">globalFunc</span> = globalFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把vue实例挂载在window.vm,方便使用vue的实例</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">vm</span> = app;</span><br></pre></td></tr></table></figure>\n<p>组件中：通过  <code>getCurrentInstance().appContext.config.globalProperties</code>  获取全局方法并调用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>组件中通过inject获取全局方法并调用<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; defineComponent, onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;JobDetail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 注册组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Header</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">testFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> testFunc = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> <span class=\"attr\">internalInstance</span>: any = <span class=\"title function_\">getCurrentInstance</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(internalInstance.<span class=\"property\">appContext</span>.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 通过getCurrentInstance().appContext.config.globalProperties获取全局方法并调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        internalInstance.<span class=\"property\">appContext</span>.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"title function_\">globalFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        testFunc,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>import _ as 是什么？<br>\n如果你想一次性全部导入模块的所有变量就可以使用 _ as 代表全部</p>\n<h1 id=\"过渡动画-transition\"><a class=\"markdownIt-Anchor\" href=\"#过渡动画-transition\">#</a> 过渡动画 transition</h1>\n<p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加进入 / 离开过渡:</p>\n</li>\n<li>\n<p>条件渲染 (使用 v-if)</p>\n</li>\n<li>\n<p>条件展示 (使用 v-show)</p>\n</li>\n<li>\n<p>动态组件</p>\n</li>\n<li>\n<p>组件根节点<br>\n自定义 transition 过度效果，你需要对 transition 组件的 name 属性自定义。并在 css 中写入对应的样式</p>\n</li>\n</ul>\n<ol>\n<li>过渡的类名<br>\n在进入 / 离开的过渡中，会有 6 个 class 切换。</li>\n</ol>\n<ul>\n<li><code>v-enter-from</code> ：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除</li>\n<li><code>v-enter-active</code> ：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡 / 动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</li>\n<li><code>v-enter-to</code> ：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡 / 动画完成之后移除。</li>\n<li><code>v-leave-from</code> ：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</li>\n<li><code>v-leave-active</code> ：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡 / 动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</li>\n<li><code>v-leave-to</code> ：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被删除)，在过渡 / 动画完成之后移除。</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;flag = !flag&quot;</span>&gt;</span>切换<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fade&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;flag&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//开始过度</span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter-from</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//开始过度了</span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">2.5s</span> linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//过度完成</span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//离开的过度</span><br><span class=\"line\"><span class=\"selector-class\">.fade-leave-from</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//离开中过度</span><br><span class=\"line\"><span class=\"selector-class\">.fade-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">1s</span> linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//离开完成</span><br><span class=\"line\"><span class=\"selector-class\">.fade-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>自定义过渡 class 类名</li>\n</ol>\n<ul>\n<li>enter-from-class</li>\n<li>enter-active-class</li>\n<li>enter-to-class</li>\n<li>leave-from-class</li>\n<li>leave-active-class</li>\n<li>leave-to-class<br>\n 通过自定义 class 结合 css 动画库 animate css:</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition leave-active-class=&quot;animate__animated animate__bounceInLeft&quot; enter-active-class=&quot;animate__animated animate__bounceInRight&quot;&gt;</span><br><span class=\"line\">    &lt;div v-if=&quot;flag&quot; class=&quot;box&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>自定义过度时间 单位毫秒，你也可以分别指定进入和离开的持续时间：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;transition :duration=&quot;1000&quot;&gt;...&lt;/transition&gt;</span><br><span class=\"line\">&lt;transition :duration=&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;...&lt;/transition&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>3.transition 生命周期 8 个</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@before-enter=<span class=\"string\">&quot;beforeEnter&quot;</span> <span class=\"comment\">//对应enter-from</span></span><br><span class=\"line\">@enter=<span class=\"string\">&quot;enter&quot;</span><span class=\"comment\">//对应enter-active</span></span><br><span class=\"line\">@after-enter=<span class=\"string\">&quot;afterEnter&quot;</span><span class=\"comment\">//对应enter-to</span></span><br><span class=\"line\">@enter-cancelled=<span class=\"string\">&quot;enterCancelled&quot;</span><span class=\"comment\">//显示过度打断</span></span><br><span class=\"line\">@before-leave=<span class=\"string\">&quot;beforeLeave&quot;</span><span class=\"comment\">//对应leave-from</span></span><br><span class=\"line\">@leave=<span class=\"string\">&quot;leave&quot;</span><span class=\"comment\">//对应enter-active</span></span><br><span class=\"line\">@after-leave=<span class=\"string\">&quot;afterLeave&quot;</span><span class=\"comment\">//对应leave-to</span></span><br><span class=\"line\">@leave-cancelled=<span class=\"string\">&quot;leaveCancelled&quot;</span><span class=\"comment\">//离开过度打断</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>appear</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appear-active-class=&quot;&quot;</span><br><span class=\"line\">appear-<span class=\"selector-tag\">from</span>-class=&quot;&quot;</span><br><span class=\"line\">appear-<span class=\"selector-tag\">to</span>-class=&quot;&quot;</span><br><span class=\"line\">appear</span><br></pre></td></tr></table></figure>\n<p>class 的 name 命名规则如下：</p>\n<ol>\n<li>如果我们使用的是一个没有 name 的 transition，那么所有的 class 是以 v- 作为默认前缀</li>\n<li>如果我们添加了一个 name 属性，比如 <transtion name=\"why\">，那么所有的 class 会以 why- 开头；</li>\n</ol>\n<h1 id=\"transition-group-过渡列表\"><a class=\"markdownIt-Anchor\" href=\"#transition-group-过渡列表\">#</a> transition-group 过渡列表</h1>\n<ul>\n<li>单个节点</li>\n<li>多个节点，每次只渲染一个<br>\n那么怎么同时渲染整个列表，比如使用 v-for？在这种场景下，我们会使用  <code>&lt;transition-group&gt;</code>  组件。在我们深入例子之前，先了解关于这个组件的几个特点：</li>\n</ul>\n<p>默认情况下，它不会渲染一个包裹元素，但是你可以通过  <code>tag</code>  attribute 指定渲染一个元素。<br>\n过渡模式不可用，因为我们不再相互切换特有的元素。<br>\n内部元素总是需要提供唯一的  <code>key</code>  attribute 值。<br>\nCSS 过渡的类将会应用在内部的元素中，而不是这个组 / 容器本身。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition-group</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;margin: 10px;&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in list&quot;</span>&gt;</span>&#123;&#123; item &#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = reactive&lt;number[]&gt;([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Push</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    list.<span class=\"title function_\">push</span>(<span class=\"number\">123</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Pop</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    list.<span class=\"title function_\">pop</span>()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>列表的移动过渡<br>\n <code>&lt;transition-group&gt;</code>  组件还有一个特殊之处。除了进入和离开，它还可以为定位的改变添加动画。只需了解新增的 v-move 类就可以使用这个新功能，它会应用在元素改变定位的过程中。像之前的类名一样，它的前缀可以通过 name attribute 来自定义，也可以通过 move-class attribute 手动设置</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wraps&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;mmm&quot;</span> <span class=\"attr\">tag</span>=<span class=\"string\">&quot;ul&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cell&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in items&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span>&gt;</span>&#123;&#123; item.number &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">&quot;lodash&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">let</span> items = <span class=\"title function_\">ref</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title class_\">Array</span>.<span class=\"title function_\">apply</span>(<span class=\"literal\">null</span>, &#123; <span class=\"attr\">length</span>: <span class=\"number\">81</span> &#125; <span class=\"keyword\">as</span> number[]).<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">_, index</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">id</span>: index,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">number</span>: (index % <span class=\"number\">9</span>) + <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\">  );</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> <span class=\"title function_\">shuffle</span> = (<span class=\"params\"></span>) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    items.<span class=\"property\">value</span> = _.<span class=\"title function_\">shuffle</span>(items.<span class=\"property\">value</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.wraps</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(<span class=\"number\">25px</span> * <span class=\"number\">10</span> + <span class=\"number\">9px</span>);</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-class\">.cell</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">width</span>: <span class=\"number\">25px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">height</span>: <span class=\"number\">25px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">list-style-type</span>: none;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">justify-content</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">align-items</span>: center;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-class\">.mmm-move</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">transition</span>: transform <span class=\"number\">0.8s</span> ease;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>状态过渡<br>\n Vue 也同样可以给数字 Svg 背景颜色等添加过度动画 今天演示数字变化</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">step</span>=<span class=\"string\">&quot;20&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;num.current&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;number&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; num.tweenedNumber.toFixed(0) &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; reactive, watch &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> gsap <span class=\"keyword\">from</span> <span class=\"string\">&quot;gsap&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> num = <span class=\"title function_\">reactive</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">tweenedNumber</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">current</span>: <span class=\"number\">0</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"title function_\">watch</span>(</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"function\">() =&gt;</span> num.<span class=\"property\">current</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"function\">(<span class=\"params\">newVal</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      gsap.<span class=\"title function_\">to</span>(num, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">duration</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">tweenedNumber</span>: newVal,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  );</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"tsx\"><a class=\"markdownIt-Anchor\" href=\"#tsx\">#</a> TSX</h1>\n<p>我们之前呢是使用 Template 去写我们模板。现在可以扩展另一种风格 TSX 风格<br>\n vue2 的时候就已经支持 jsx 写法，只不过不是很友好，随着 vue3 对 typescript 的支持度，tsx 写法越来越被接受</p>\n<ol>\n<li>安装插件</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @vitejs/plugin-vue-jsx -D</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置</li>\n</ol>\n<ul>\n<li>vite.config.ts 配置:</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vueJsx <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue-jsx&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>(), <span class=\"title function_\">vueJsx</span>()],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改 tsconfig.json 配置文件</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;preserve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;jsxFactory&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;h&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"attr\">&quot;jsxFragmentFactory&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Fragment&quot;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在目录新建一个 xxxxxx.tsx 文件，开始使用 TSX<br>\ntips：tsx 不会自动解包使用 ref 加.vlaue ! ! !</li>\n</ol>\n<ul>\n<li>tsx 支持 v-model 的使用</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> v = ref &lt; string &gt; <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">renderDom</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&#123;v.value&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;v.value&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> renderDom;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>v-show</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> flag = <span class=\"title function_\">ref</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">renderDom</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&#123;flag.value&#125;</span>&gt;</span>景天<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&#123;!flag.value&#125;</span>&gt;</span>雪见<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> renderDom;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>v-if 是不支持的<br>\n所以需要改变风格</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> flag = <span class=\"title function_\">ref</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">renderDom</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span>&#123;flag.value ? <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>景天<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> : <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>雪见<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&#125;<span class=\"tag\">&lt;/&gt;</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> renderDom;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>v-for 也是不支持的<br>\n需要使用 Map</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">renderDom</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;arr.map((v) =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">        return <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>$&#123;v&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>;</span></span><br><span class=\"line\"><span class=\"language-xml\">      &#125;)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> renderDom;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vuex-的状态管理\"><a class=\"markdownIt-Anchor\" href=\"#vuex-的状态管理\">#</a> Vuex 的状态管理</h1>\n<ul>\n<li>\n<p>管理不断变化的 state 本身是非常困难的<br>\n状态之间相互会存在依赖，一个状态的变化会引起另一个状态的变化，View 页面也有可能会引起状态的变化。当应用程序复杂时，state 在什么时候，因为什么原因而发生了变化，发生了怎么样的变化，会变得非常难以控制和追踪</p>\n</li>\n<li>\n<p>因此，我们是否可以考虑将组件的内部状态抽离出来，以一个全局单例的方式来管理呢？<br>\n在这种模式下，我们的组件树构成了一个巨大的 “视图 View”, 不管在树的哪个位置，任何组件都能获取状态或者触发行为<br>\n通过定义和隔离状态管理中的各个概念，并通过强制性的规则来维护视图和状态间的独立性，我们的代码边会变得更加结构化和易于维护、跟踪；<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/93Q@8VN8%60V_I72$62UDA~1A.png\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"store-仓库\"><a class=\"markdownIt-Anchor\" href=\"#store-仓库\">#</a> Store 仓库</h2>\n<p>每一个 Vuex 应用的核心就是 store（仓库）：store 本质上是一个 <code>容器</code> ，它包含着你的应用中大部分的状态（ <code>state</code> ）</p>\n<ul>\n<li>Vuex 和单纯的全局对象有什么区别呢？</li>\n</ul>\n<ol>\n<li>Vuex 的状态存储是响应式的：当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会被更新</li>\n<li>你不能直接改变 store 中的状态：改变 store 中的状态的唯一途径就显示提交 ( <code>commit</code> ) mutation, 这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够通过一些工具帮助我们更好的管理应用的状态</li>\n<li>使用步骤：创建 Store 对象，在 app 中通过插件安装</li>\n</ol>\n<h3 id=\"组件中使用-store\"><a class=\"markdownIt-Anchor\" href=\"#组件中使用-store\">#</a> 组件中使用 store</h3>\n<p>组件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123; $store.state.counter &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;App&quot;,</span><br><span class=\"line\">  data() &#123;&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    increment() &#123;</span><br><span class=\"line\">      this.$store.commit(&quot;increment&quot;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>store 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store <span class=\"title function_\">createStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">state</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">counter</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">      <span class=\"title function_\">increment</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">        state.<span class=\"property\">counter</span>++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n<h3 id=\"单一状态树\"><a class=\"markdownIt-Anchor\" href=\"#单一状态树\">#</a> 单一状态树</h3>\n<p>Vuex 使用单一状态树，用一个对象就包含了全部的应用层级的状态，这也意味着，<strong>每个应用将仅仅包含一个 store 实例</strong><br>\n单状态树和模块化并不冲突，后面我们会讲到 module 的概念</p>\n<ul>\n<li>单一状态树的优势：<br>\n如果你的状态信息是保存到多个 Store 对象中的，那么之后的管理和维护等等都会变得特别困难，所以 Vuex 也使用了单一状态树来管理应用层级的全部状态；单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护</li>\n</ul>\n<h3 id=\"组件获取状态\"><a class=\"markdownIt-Anchor\" href=\"#组件获取状态\">#</a> 组件获取状态</h3>\n<p>在前面我们已经学习过如何在组件中获取状态了 ( <code>$store.state.counter</code> ), 如果觉得那种方式有点繁琐（表达式过长），我们可以使用计算属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">counter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">counter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们有很多个状态都需要获取，可以使用 <code>mapState</code>  的辅助函数:<br>\nmapState 的方式一：对象类型<br>\n mapState 的方式二：数组类型<br>\n也可以使用展开运算符和来原有的 computed 混合在一起</p>\n<h4 id=\"在-setup-中使用-mapstate\"><a class=\"markdownIt-Anchor\" href=\"#在-setup-中使用-mapstate\">#</a> 在 setup 中使用 mapState</h4>\n<p>通过 useStore 拿到 store 后去获取某个状态即可</p>\n<h4 id=\"getters-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#getters-的基本使用\">#</a> getters 的基本使用</h4>\n<p>某些属性我们可能需要经过变化后来使用，这个时候可以使用 getters：</p>\n<h3 id=\"mutation-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#mutation-基本使用\">#</a> Mutation 基本使用</h3>\n<p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">increment</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">counter</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Mutation 携带数据<br>\n很多时候我们在提交 mutation 的时候，会携带一些数据，这个时候我们可以使用参数：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">addNumber</span>(<span class=\"params\">state,payload</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">counter</span> += payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>payload 为对象类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addNumber</span>(<span class=\"params\">state,payload</span>) &#123;</span><br><span class=\"line\">  state.<span class=\"property\">counter</span> += payload.<span class=\"property\">count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象风格的提交方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$store.<span class=\"title function_\">commit</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;addNumber&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">count</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapmutations-辅助函数\"><a class=\"markdownIt-Anchor\" href=\"#mapmutations-辅助函数\">#</a> mapMutations 辅助函数</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = <span class=\"title function_\">mapMutations</span>([<span class=\"string\">&quot;increment&quot;</span>, <span class=\"string\">&quot;decrement&quot;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations2 = <span class=\"title function_\">mapMutations</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">addNumber</span>: <span class=\"variable constant_\">ADD_NUMBER</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>mutation 重要原则一条重要的原则就是要记住  <code>mutation</code>  必须是<strong>同步</strong>函数</p>\n<h3 id=\"actions-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#actions-的基本使用\">#</a> actions 的基本使用</h3>\n<p>Action 类似于 mutation，不同在于 Action 提交的是 mutation，而不是直接变更状态<br>\n<strong> Action 可以包含异步操作</strong></p>\n<ul>\n<li>这里有一个非常重要的参数 <code>context</code> ：<br>\n <code>context</code>  是一个和 store 实例均有相同方法和属性的 context 对象，所以我们可以从其中获取到 commit 方法来提交一个 mutation，或者通过 context.state 和 context.getters 来<br>\n获取 state 和 getters</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">increment</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">counter</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">increment</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    context.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;increment&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"actions-的分发操作\"><a class=\"markdownIt-Anchor\" href=\"#actions-的分发操作\">#</a> actions 的分发操作</h4>\n<p>如何使用 action 呢？<br>\n进行 action 的分发：分发使用的是 store 上的 <code>dispatch</code>  函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;increment&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的，它也可以携带我们的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;increment&quot;</span>,&#123;<span class=\"attr\">count</span>:<span class=\"number\">100</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以以对象的形式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&quot;increment&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">count</span>:<span class=\"number\">100</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"actions-的辅助函数\"><a class=\"markdownIt-Anchor\" href=\"#actions-的辅助函数\">#</a> actions 的辅助函数</h4>\n<p>action 也有对应的辅助函数：<br>\n对象类型的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&quot;increment&quot;</span>,<span class=\"string\">&quot;decrement&quot;</span>]),</span><br><span class=\"line\">  ...<span class=\"title function_\">mapActions</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"string\">&quot;increment&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sub</span>:<span class=\"string\">&quot;decrement&quot;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"actions-的异步操作\"><a class=\"markdownIt-Anchor\" href=\"#actions-的异步操作\">#</a> actions 的异步操作</h4>\n<h3 id=\"module-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#module-的基本使用\">#</a> module 的基本使用</h3>\n<p>什么是 Module？<br>\n由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store 对象就有可<br>\n能变得相当臃肿<br>\n为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: moduleB,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">a</span>; <span class=\"comment\">// =&gt; moduleA的状态</span></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">b</span>; <span class=\"comment\">// =&gt; moduleB的状态</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>module 的命名空间<br>\n默认情况下，模块内部的 action 和 mutation 仍然是注册在<strong>全局的命名空间</strong>中的。这样使得多个模块能够对同一个 action 或 mutation 作出响应，Getter 同样也默认注册在全局命名空间<br>\n如果我们希望模块具有更高的封装度和复用性，可以添加  <code>namespaced: true</code>  的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">namespaced</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">state</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.88</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">changeName</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">name</span> = <span class=\"string\">&quot;coderwhy&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">getters； &#123;</span><br><span class=\"line\">  <span class=\"title function_\">info</span>(<span class=\"params\">state,getters,rootState,rootGetters</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`name:<span class=\"subst\">$&#123;state.name&#125;</span> age:<span class=\"subst\">$&#123;state.age&#125;</span> height:<span class=\"subst\">$&#123;state.height&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">changeNameAction</span>(<span class=\"params\">&#123;commit,dispatch,state,rootState,getters,rootGetters&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;changeName&quot;</span>,<span class=\"string\">&quot;kobe&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nexttick\"><a class=\"markdownIt-Anchor\" href=\"#nexttick\">#</a> nextTick</h1>\n<p>(一个 api)<br>\n 官方解释：将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。<br>\n比如我们有下面的需求：点击一个按钮，我们会修改在 h2 中显示的 message；message 被修改后，获取 h2 的高度</p>\n<p>实现上面的案例我们有三种方式：</p>\n<ol>\n<li>在点击按钮后立即获取到 h2 的高度（错误的做法）</li>\n<li>在 updated 生命周期函数中获取 h2 的高度（但是其他数据更新，也会执行该操作）</li>\n<li>使用 nextTick 函数</li>\n</ol>\n<h1 id=\"definecomponent\"><a class=\"markdownIt-Anchor\" href=\"#definecomponent\">#</a> defineComponent</h1>\n<p>vue3 中，新增了  <code>defineComponent</code>  ，它并没有实现任何的逻辑，只是把接收的 Object 直接返回，它的存在是完全让传入的整个对象获得对应的类型，它的存在就是完全为了服务 TypeScript 而存在的。<br>\n(ps. 读到 &quot;它的存在就是完全为了服务 TypeScript 而存在的&quot; 时莫名其妙觉得好浪漫～)<br>\n 我们都知道普通的组件就是一个普通的对象，既然是一个普通的对象，那自然就不会获得自动的提示:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;Home&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup, <span class=\"comment\">// 没有该有的提示，这非常的不友好</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component;</span><br></pre></td></tr></table></figure>\n<p>但是当我们加上 defineComponent（） 之后，就完全不一样了，可以获得自动提示，vue2、vue3 的自动提示都有:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup（props, context）&#123;<span class=\"comment\">// setup 可接受两个参数，一个props，和 context</span></span><br><span class=\"line\">    <span class=\"comment\">// props.data</span></span><br><span class=\"line\">    <span class=\"comment\">// context.attrs    context.slots    context.emit</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component</span><br></pre></td></tr></table></figure>\n<p>接下来看看 setup 中的两个参数  <code>props</code>  与  <code>context</code>  ,<br>\n <code>props</code>  指组件传递来的参数，并且 ts 可以推论出 <code>props</code>  的类型. <code>props</code>  也就是 vue2 中组件中的  <code>props</code> <br>\n <code>context</code>  有三个属性  <code>attrs</code>   <code>slots</code>   <code>emit</code>  分别对应 vue2 中的 <code>attrs</code>  属性、 <code>slots</code>  插槽、 <code>$emit</code>  发送事件</p>\n<ul>\n<li><code>defineComponent</code>  函数，只是对 setup 函数进行封装，返回 <code>options</code>  的对象；</li>\n<li><code>defineComponent</code>  最重要的是：在 TypeScript 下，给予了组件 正确的参数类型推断。</li>\n</ul>\n<h1 id=\"teleport-传送组件\"><a class=\"markdownIt-Anchor\" href=\"#teleport-传送组件\">#</a> Teleport 传送组件</h1>\n<p>在组件化开发中，我们封装一个组件 A，在另外一个组件 B 中使用，那么组件 A 中 template 的元素，会被挂载到组件 B 中 template 的某个位置最终我们的应用程序会形成一颗 DOM 树结构<br>\n但是某些情况下，我们希望组件不是挂载在这个组件树上的，可能是移动到 Vue app 之外的其他位置。比如移动到 body 元素上，或者我们有其他的 div#app 之外的元素上。这个时候我们就可以通过 teleport 来完成</p>\n<p>假如在父组件中引用了一个子组件，那么渲染成页面后这个子组件 HTML 也是必然被父组件 HTML 包含的。</p>\n<p>但是如果把子组件放置到了 teleport 组件中，那么我们就可以指定该子组件渲染到父组件之外的其它 DOM 节点下，比如 body 或者其它的 DOM 等等。这就有点类似与 “传送” 了.</p>\n<p>Teleport Vue 3.0 新特性之一。</p>\n<p>Teleport 是一种能够将我们的模板渲染至指定 DOM 节点，不受父级 style、v-show 等属性影响，但 data、prop 数据依旧能够共用的技术；类似于 React 的 Portal。</p>\n<p>主要解决的问题 因为 Teleport 节点挂载在其他指定的 DOM 节点下，完全不受父级 style 样式影响</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;要传送的地方&#x27;</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  …………</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">teleport</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：传送之前要先有 dom 【顺序】</li>\n<li>使用场景：假如有非常多的弹窗，那么如何管理它们的 z-index 呢，也就是同时弹窗时的层级关系，如果每个弹窗都在各自的父组件中，那么我们是没法控制的，所有有必要把它们都拧出来，放在同一个父元素下面，这样就可以方便的设置层级关系了</li>\n</ul>\n<h1 id=\"keep-alive-缓存组件\"><a class=\"markdownIt-Anchor\" href=\"#keep-alive-缓存组件\">#</a> keep-alive 缓存组件</h1>\n<p>有时候我们不希望组件被重新渲染影响使用体验；或者处于性能考虑，避免多次重复渲染降低性能。而是希望组件可以缓存下来，维持当前的状态。这时候就需要用到 <code>keep-alive</code>  组件。</p>\n<h3 id=\"开启-keep-alive-生命周期的变化\"><a class=\"markdownIt-Anchor\" href=\"#开启-keep-alive-生命周期的变化\">#</a> 开启 keep-alive 生命周期的变化</h3>\n<ul>\n<li>初次进入时： onMounted&gt; onActivated</li>\n<li>退出后触发 deactivated</li>\n<li>再次进入：只会触发 onActivated</li>\n<li>事件挂载的方法等，只执行一次的放在 onMounted 中；组件每次进去执行的方法放在 onActivated 中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 基本 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;view&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 多个条件判断的子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-a</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;a &gt; 1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">comp-b</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">comp-b</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 和 `&lt;transition&gt;` 一起使用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;view&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"include-和-exclude\"><a class=\"markdownIt-Anchor\" href=\"#include-和-exclude\">#</a> include 和 exclude</h3>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span> <span class=\"attr\">:include</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">:exclude</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">:max</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"component-动态组件\"><a class=\"markdownIt-Anchor\" href=\"#component-动态组件\">#</a> Component 动态组件</h1>\n<p><code>component</code>  是 vue 内置组件，主要作用为动态渲染组件，进行动态组件切换</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;要动态绑定的组件&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>若是数据需要动态渲染，组件切换之后会导致之前获得的数据丢失，这个时候，若我们想要在组件切换过程中保持这些组件的状态，以避免重复渲染导致性能问题，则可以在动态组件上使用 <code>keep-alive</code>  来缓存组件中的数据:</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;要动态绑定的组件&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 <code>keep-alive</code>  会增加两个生命周期： <code>onActivated</code> , <code>onDeactivated</code> <br>\n 每次切换组件的行为都会分别进行这两个生命周期</li>\n</ul>\n<h1 id=\"异步组件\"><a class=\"markdownIt-Anchor\" href=\"#异步组件\">#</a> 异步组件</h1>\n<p>在大型应用中，我们可能需要将应用分割成小一些的代码块 并且减少主包的体积</p>\n<p>这时候就可以使用异步组件</p>\n<h2 id=\"顶层-await-技术\"><a class=\"markdownIt-Anchor\" href=\"#顶层-await-技术\">#</a> 顶层 await 技术</h2>\n<p>在 setup 语法糖里面 使用方法</p>\n<p><code>&lt;script setup&gt;</code>  中可以使用顶层 await。结果代码会被编译成  <code>async setup()</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">const</span> post = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(<span class=\"string\">`/api/post/1`</span>).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.<span class=\"title function_\">json</span>())</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>父组件引用子组件 通过 defineAsyncComponent 加载异步配合 import 函数模式便可以分包:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123; reactive, ref, markRaw, toRaw, defineAsyncComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"title class_\">Dialog</span> = <span class=\"title function_\">defineAsyncComponent</span>(<span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../../components/Dialog/index.vue&#x27;</span>))</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"comment\">//完整写法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">const</span> <span class=\"title class_\">AsyncComp</span> = <span class=\"title function_\">defineAsyncComponent</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 加载函数</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">loader</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;./Foo.vue&#x27;</span>),</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 加载异步组件时使用的组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">loadingComponent</span>: <span class=\"title class_\">LoadingComponent</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 展示加载组件前的延迟时间，默认为 200ms</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">delay</span>: <span class=\"number\">200</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 加载失败后展示的组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">errorComponent</span>: <span class=\"title class_\">ErrorComponent</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 如果提供了一个 timeout 时间限制，并超时了</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"comment\">// 也会显示这里配置的报错组件，默认值是：Infinity</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">timeout</span>: <span class=\"number\">3000</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">&#125;)</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"suspense\"><a class=\"markdownIt-Anchor\" href=\"#suspense\">#</a> suspense</h2>\n<p><code>&lt;suspense&gt;</code>  组件有两个插槽。它们都只接收一个直接子节点。default 插槽里的节点会尽可能展示出来。如果不能，则展示 fallback 插槽里的节点。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Suspense</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dialog</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我在哪儿<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dialog</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">fallback</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>loading...<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Suspense</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"场景一\"><a class=\"markdownIt-Anchor\" href=\"#场景一\">#</a> 场景一</h2>\n<p>在开发 Vue 项目时，大多数人都会用到组件。在父组件中，子组件的加载一般是按照先后顺序加载的，子组件加载后才会加载父组件<br>\n如果一个页面的子组件很多，由于会先加载子组件，那么父组件可能会出现比较长的白屏等待时间。我们想让某些子组件异步加载应该怎么办呢？Vue3 提供了一个新增的 <code>defineAsyncComponent</code>  方法来实现异步组件。</p>\n<ul>\n<li>函数方式创建</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">  import &#123; onMounted, defineAsyncComponent &#125; from &quot;vue&quot;;</span><br><span class=\"line\">  const AsyncChild = defineAsyncComponent(() =&gt; import(&quot;./child.vue&quot;));</span><br><span class=\"line\">  onMounted(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&quot;父组件先运行了&quot;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">//异步组件必须在&lt;Suspense&gt;标签内使用</span><br><span class=\"line\">  &lt;Suspense&gt;</span><br><span class=\"line\">    //展示异步组件</span><br><span class=\"line\">    &lt;template #default&gt;</span><br><span class=\"line\">      &lt;AsyncChild /&gt;</span><br><span class=\"line\">  &lt;!-- 这个&lt;AsyncChild /&gt;是自己在 &lt;script setup&gt;中定义的名字 --&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    //加载过程中展示的内容</span><br><span class=\"line\">    &lt;template #fallback&gt;</span><br><span class=\"line\">    &lt;/template&gt;</span><br><span class=\"line\">  &lt;/Suspense&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>对象的方式创建</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AsyncComp</span> = <span class=\"title function_\">defineAsyncComponent</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加载函数，需要返回一个Promise，可以使用动态import的方式，也可以自己new Promise()</span></span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;./Foo.vue&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载异步组件时使用的组件，该组件会在异步组件加载时显示，如果异步组件加载很快，可能不会出现loading组件</span></span><br><span class=\"line\">  <span class=\"attr\">loadingComponent</span>: <span class=\"title class_\">LoadingComponent</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 展示加载组件前的延迟时间，默认为 200ms</span></span><br><span class=\"line\">  <span class=\"attr\">delay</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载失败后展示的组件，可以通过Promise的reject来测试</span></span><br><span class=\"line\">  <span class=\"attr\">errorComponent</span>: <span class=\"title class_\">ErrorComponent</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 如果提供了一个 timeout 时间限制，并超时了</span></span><br><span class=\"line\">  <span class=\"comment\">// 也会显示这里配置的报错组件，默认值是：Infinity</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"场景二\"><a class=\"markdownIt-Anchor\" href=\"#场景二\">#</a> 场景二</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Suspense</span> #<span class=\"attr\">default</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">A</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">A</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">fallback</span>&gt;</span></span></span><br><span class=\"line\">  加载中...</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">Suspense</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">const A = defineAsyncComponent(()=&gt;</span><br><span class=\"line\">import(../components/A.vue))</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>打包的时候分包，会将异步组件单独打包</p>\n<h1 id=\"mixin-混入\"><a class=\"markdownIt-Anchor\" href=\"#mixin-混入\">#</a> Mixin 混入</h1>\n<ul>\n<li>解释：将组件的公共逻辑或者配置提取出来，哪个组件需要用到时，直接将提取的这部分混入到组件内部即可。</li>\n<li>注意：提取的是逻辑或配置，而不是 HTML 代码和 CSS 代码。其实大家也可以换一种想法，mixin 就是组件中的组件，Vue 组件化让我们的代码复用性更高，那么组件与组件之间还有重复部分，我们使用 Mixin 在抽离一遍。</li>\n</ul>\n<h2 id=\"mixin-和-vuex-的区别\"><a class=\"markdownIt-Anchor\" href=\"#mixin-和-vuex-的区别\">#</a> Mixin 和 Vuex 的区别？</h2>\n<p>上面一点说 Mixin 就是一个抽离公共部分的作用。在 Vue 中，Vuex 状态管理似乎也是做的这一件事，它也是将组件之间可能共享的数据抽离出来。两者看似一样，实则还是有细微的区别，区别如下：</p>\n<ol>\n<li>Vuex 公共状态管理，如果在一个组件中更改了 Vuex 中的某个数据，那么其它所有引用了 Vuex 中该数据的组件也会跟着变化。</li>\n<li>Mixin 中的数据和方法都是独立的，组件之间使用后是互相不影响的。</li>\n</ol>\n<h2 id=\"优缺点\"><a class=\"markdownIt-Anchor\" href=\"#优缺点\">#</a> 优缺点</h2>\n<h3 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h3>\n<ol>\n<li>提高代码复用性</li>\n<li>无需传递状态</li>\n<li>维护方便，只需要修改一个地方即可</li>\n</ol>\n<h3 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<ol>\n<li>命名冲突</li>\n<li>滥用的话后期很难维护</li>\n<li>不好追溯源，排查问题稍显麻烦</li>\n<li>不能轻易的重复代码</li>\n</ol>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h2>\n<ol>\n<li><code>src/mixin/index.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//抽取的公共逻辑或配置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"title function_\">ref</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">Btn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    num.<span class=\"property\">value</span> += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  retuen &#123;</span><br><span class=\"line\">    num,</span><br><span class=\"line\">    fBtn</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在组件中使用：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">&#123;&#123;num&#125;&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span> = <span class=\"string\">&quot;Btn&quot;</span>&gt;</span></span>点击<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import mixin from &#x27;地址&#x27;</span><br><span class=\"line\">//可以把mixin中的东西解构出来,解构出来就能直接用了</span><br><span class=\"line\">let &#123;num,Btn&#125; = mixin()</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"provide-和-inject-依赖注入\"><a class=\"markdownIt-Anchor\" href=\"#provide-和-inject-依赖注入\">#</a> Provide 和 Inject 依赖注入</h1>\n<p>父组件和孙子辈间进行组件通信<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.jpg\" alt=\"依赖注入\"></p>\n<ul>\n<li>父组件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; provide &#125; from &quot;vue&quot;;</span><br><span class=\"line\">import Child from &quot;url&quot;;</span><br><span class=\"line\">let num = ref(100);</span><br><span class=\"line\">provide(&quot;changeNum&quot;, num);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>后代组件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; inject &#125; from &quot;vue&quot;;</span><br><span class=\"line\">const aNum = inject(&quot;changeNum&quot;);</span><br><span class=\"line\">console.log(aNum);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vuex\"><a class=\"markdownIt-Anchor\" href=\"#vuex\">#</a> vuex</h1>\n<p><code>state</code>  值要用 <code>computed()</code>  去接： <code>let num = computed( ()=&gt; store.state.num )</code>  不然不是响应的数据<br>\n <code>mutations</code>  里面的方法用 <code>commit()</code>  调用<br>\n <code>actions</code>  里面的方法用 <code>dispatch()</code>  调用</p>\n<ul>\n<li>注意：vuex 修改数据只能用 <code>mutations</code>  提交来修改</li>\n</ul>\n<h2 id=\"vuex-持久化存储插件实现\"><a class=\"markdownIt-Anchor\" href=\"#vuex-持久化存储插件实现\">#</a> vuex 持久化存储【插件实现】</h2>\n<p>可以用 localStorage，也可以用插件： <code>vuex-persistedstate</code></p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add vuex-persistedstate -S</span><br></pre></td></tr></table></figure>\n<p>2. <code> src/store/index.js</code>  中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> persistedState <span class=\"keyword\">from</span> <span class=\"string\">`vuex-persistedstate `</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:[<span class=\"title function_\">persistedState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//浏览器中的名字</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>:[], <span class=\"comment\">//需要存储起来的参数模块</span></span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"pinia\"><a class=\"markdownIt-Anchor\" href=\"#pinia\">#</a> Pinia</h1>\n<h2 id=\"pinia-和-vuex-的区别\"><a class=\"markdownIt-Anchor\" href=\"#pinia-和-vuex-的区别\">#</a> pinia 和 vuex 的区别：</h2>\n<ol>\n<li>pinia 没有 mutations，只有：state、getters、actions</li>\n<li>pinia 分模块不需要 modules（vuex 需要）</li>\n<li>ts 支持更好</li>\n<li>自动化代码拆分</li>\n<li>pinia 体积更小（性能更好）</li>\n<li>可以直接修改 state 数据（vuex 只能通过 mutations 提交来修改），但是不能直接解构，应该要用换种解构方式 storeToRefs</li>\n</ol>\n<h2 id=\"pinia-使用\"><a class=\"markdownIt-Anchor\" href=\"#pinia-使用\">#</a> pinia 使用</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add pinia</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>src/main.js</code> : 创建一个 pinia（根存储）并将其传递给应用程序：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">createPinia</span>());</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>src/store/index.js</code>  中使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 定义容器并导出</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数一: 容器ID, 唯一, 将来 Pinia 会把所有的容器挂载到根容器</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数二: 选项对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值: 函数, 调用的时候要空参调用, 返回容器实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&quot;storeId&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类似组件的 data, 用于存储全局的的状态</span></span><br><span class=\"line\"><span class=\"comment\">   * 注意:</span></span><br><span class=\"line\"><span class=\"comment\">   *    1.必须是函数, 为了在服务端渲染的时候避免交叉请求导致的数据交叉污染</span></span><br><span class=\"line\"><span class=\"comment\">   *    2.必须是箭头函数, 为了更好的 TS 类型推导</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">num</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类似组件的 computed, 用来封装计算属性, 具有缓存特性</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类似组件的 methods, 封装业务逻辑, 修改state</span></span><br><span class=\"line\"><span class=\"comment\">   * 注意: 里面的函数不能定义成箭头函数(函数体中会用到this)</span></span><br><span class=\"line\"><span class=\"comment\">   * actions 可以是异步的，您可以在其中await 任何 API 调用甚至其他操作！</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在组件中使用：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123;useStore&#125; from &#x27;../store&#x27;</span><br><span class=\"line\">const store = useStore()</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;name,num&#125; = store</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">&#123;&#123;num&#125;&#125;</span><br><span class=\"line\">&#123;&#123;name&#125;&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组件修改-pinia-的-state-数据storetorefs\"><a class=\"markdownIt-Anchor\" href=\"#组件修改-pinia-的-state-数据storetorefs\">#</a> 组件修改 pinia 的 state 数据: <code>storeToRefs</code></h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123;useStore&#125; from &#x27;../store&#x27;</span><br><span class=\"line\">import &#123;storeToRefs&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">const store = useStore()</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;name,num&#125; = storeToRefs(store)</span><br><span class=\"line\">const btn = () =&gt; &#123;</span><br><span class=\"line\">  name.value = &#x27;李四&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span></span></span><br><span class=\"line\">  &#123;&#123;name&#125;&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span></span></span></span>修改名称<span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"批量修改\"><a class=\"markdownIt-Anchor\" href=\"#批量修改\">#</a> 批量修改</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">.....</span><br><span class=\"line\">store.$patch(state =&gt; &#123;</span><br><span class=\"line\">  state.num++,</span><br><span class=\"line\">  state.name = &#x27;王五&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"pinia-分模块\"><a class=\"markdownIt-Anchor\" href=\"#pinia-分模块\">#</a> pinia 分模块</h2>\n<h2 id=\"pinia-持久化存储插件实现\"><a class=\"markdownIt-Anchor\" href=\"#pinia-持久化存储插件实现\">#</a> pinia 持久化存储 [插件实现]</h2>\n<p>可以用 localStorage，也可以用插件： <code>pinia-plugin-persist</code></p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add pinia-plugin-persist --save</span><br></pre></td></tr></table></figure>\n<p>2. <code>src/store/index.js</code>  中使用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入pinia持久化存储插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> piniaPluginPersist <span class=\"keyword\">from</span> <span class=\"string\">`pinia-plugin-persist`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&quot;storeId&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">num</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//开启数据缓存</span></span><br><span class=\"line\">  <span class=\"attr\">persist</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">strategies</span>:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">key</span>:<span class=\"string\">&#x27;my_user&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">storage</span>:<span class=\"variable language_\">localStorage</span>,<span class=\"comment\">//默认是sessionStorage：刷新页面会缓存，但关掉页面就会清理掉缓存</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>:[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>],<span class=\"comment\">//来决定state中的哪些数据需要持久化存储</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用插件</span></span><br><span class=\"line\">useStore.<span class=\"title function_\">use</span>(piniaPluginPersist)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useStore</span><br></pre></td></tr></table></figure>\n<h1 id=\"图片懒加载\"><a class=\"markdownIt-Anchor\" href=\"#图片懒加载\">#</a> 图片懒加载</h1>\n<p>引入所有图片：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** glob是懒加载模式</span></span><br><span class=\"line\"><span class=\"comment\"> * globEager 静态加载</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> imgList = <span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"title function_\">globEager</span>(<span class=\"string\">&quot;./assets/images/*.*&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"event-loop-和-nexttick\"><a class=\"markdownIt-Anchor\" href=\"#event-loop-和-nexttick\">#</a> event loop 和 nextTick</h1>\n<ul>\n<li>JS 执行机制<br>\n在我们学 js 的时候都知道 js 是单线程的，如果是多线程的话会引发一个问题 —— 在同一时间同时操作 DOM 一个增加一个删除 JS 就不知道到底要干嘛了。但是随着 HTML5 到来 js 也支持了多线程 webWorker ，但是也是不允许操作 DOM</li>\n</ul>\n<p>单线程就意味着所有的任务都需要排队，后面的任务需要等前面的任务执行完才能执行，如果前面的任务耗时过长，后面的任务就需要一直等，一些从用户角度上不需要等待的任务就会一直等待，这个从体验角度上来讲是不可接受的，所以 JS 中就出现了异步的概念。</p>\n<ul>\n<li>同步任务：同步任务</li>\n<li>异步任务</li>\n</ul>\n<ol>\n<li>宏任务<br>\n script (整体代码)、setTimeout、setInterval、UI 交互事件、postMessage、Ajax</li>\n<li>微任务<br>\n Promise.then catch finally、MutaionObserver、process.nextTick (Node.js 环境)</li>\n</ol>\n<ul>\n<li>运行机制</li>\n</ul>\n<p>所有的同步任务都是在主进程执行的形成一个执行栈，主线程之外，还存在一个 &quot;任务队列&quot;，异步任务执行队列中先执行宏任务，然后清空当次宏任务中的所有微任务，然后进行下一个 tick 如此形成循环。</p>\n<p>nextTick 就是创建一个异步任务，那么它自然要等到同步任务执行完成后才执行。</p>\n<h1 id=\"docker-碰撞-vue3\"><a class=\"markdownIt-Anchor\" href=\"#docker-碰撞-vue3\">#</a> docker 碰撞 vue3</h1>\n<p>领导要求你维护四个项目，每个项目 node 版本不同，框架不同，是不是非常头疼？docker 可以帮你解决这个问题<br>\n<a href=\"https://xiaoman.blog.csdn.net/article/details/126375948\"> https://xiaoman.blog.csdn.net/article/details/126375948</a></p>\n<h1 id=\"环境变量\"><a class=\"markdownIt-Anchor\" href=\"#环境变量\">#</a> 环境变量</h1>\n<p><a href=\"https://xiaoman.blog.csdn.net/article/details/126375974\">https://xiaoman.blog.csdn.net/article/details/126375974</a><br>\n 环境变量：他的主要作用就是让开发者区分不同的运行环境，来实现 兼容开发和生产<br>\n例如 npm run dev 就是开发环境  npm run build 就是生产环境等等<br>\n Vite 在一个特殊的 import.meta.env 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;BASE_URL&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;/&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//部署时的URL前缀</span></span><br><span class=\"line\"><span class=\"attr\">&quot;MODE&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;development&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">//运行模式</span></span><br><span class=\"line\"><span class=\"attr\">&quot;DEV&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span><span class=\"string\">&quot;  //是否在dev环境</span></span><br><span class=\"line\"><span class=\"string\">PROD&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span> <span class=\"comment\">//是否是build 环境</span></span><br><span class=\"line\"><span class=\"attr\">&quot;SSR&quot;</span><span class=\"punctuation\">:</span><span class=\"literal\"><span class=\"keyword\">false</span></span> <span class=\"comment\">//是否是SSR 服务端渲染模式</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>需要注意的一点就是这个环境变量不能使用动态赋值 import.meta.env [key] 应为这些环境变量在打包的时候是会被硬编码的通过 JSON.stringify 注入浏览器的</p>\n<ul>\n<li>配置额外的环境变量<br>\n在根目录新建 env 文件 <a href=\"http://xn--env-i68dk7a64ltvdqwozjn.xxx\">可以创建多个 env.xxx</a></li>\n</ul>\n<h1 id=\"vue3-性能优化\"><a class=\"markdownIt-Anchor\" href=\"#vue3-性能优化\">#</a> Vue3 性能优化</h1>\n<p><a href=\"https://xiaoman.blog.csdn.net/article/details/126811832\">https://xiaoman.blog.csdn.net/article/details/126811832</a></p>\n<h1 id=\"跨域\"><a class=\"markdownIt-Anchor\" href=\"#跨域\">#</a> 跨域</h1>\n<ol>\n<li>首先我们先了解一下什么是跨域<br>\n主要是出于浏览器的同源策略限制，它是浏览器最核心也最基本的安全功能。</li>\n</ol>\n<p>当一个请求 url 的 协议、域名、端口 三者之间任意一个与当前页面 url 不同即为跨域。</p>\n<p>例如 <a href=\"http://xxxx.com\">xxxx.com</a> -&gt; <a href=\"http://xxxx.com\">xxxx.com</a> 存在跨域 协议不同</p>\n<p>例如 127.x.x.x:8001 -&gt; 127.x.x.x:8002 存在跨域 端口不同</p>\n<p>例如 <a href=\"http://www.xxxx.com\">www.xxxx.com</a> -&gt; <a href=\"http://www.yyyy.com\">www.yyyy.com</a> 存在跨域 域名不同</p>\n<ol start=\"2\">\n<li>如何解决跨域<br>\n vite.config.js/ts ：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">  <span class=\"attr\">server</span>:&#123;</span><br><span class=\"line\">     <span class=\"attr\">proxy</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;/api&#x27;</span>:&#123;</span><br><span class=\"line\">            <span class=\"attr\">target</span>:<span class=\"string\">&quot;http://localhost:9001/&quot;</span>, <span class=\"comment\">//跨域地址</span></span><br><span class=\"line\">            <span class=\"attr\">changeOrigin</span>:<span class=\"literal\">true</span>, <span class=\"comment\">//支持跨域</span></span><br><span class=\"line\">            <span class=\"attr\">rewrite</span>:<span class=\"function\">(<span class=\"params\">path</span>) =&gt;</span> path.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\/api/</span>, <span class=\"string\">&quot;&quot;</span>)<span class=\"comment\">//重写路径,替换/api</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>fetch 替换 /api 他会截取 /api 替换成 target 地址</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">import</span> &#123;ref,reactive &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"title function_\">fetch</span>(<span class=\"string\">&#x27;/api/xm&#x27;</span>)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "vue3"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/10/%E6%8B%9B%E7%94%9F%E6%8F%90%E6%8A%A5%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/",
            "url": "https://eucli.top/2023/03/10/%E6%8B%9B%E7%94%9F%E6%8F%90%E6%8A%A5%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/",
            "title": "招生提报系统",
            "date_published": "2023-03-10T10:45:34.000Z",
            "content_html": "<p>在开发组混了那么久，本菜狗终于要参与项目了吗，虽然只是蹭项目，虽然这次的技术栈我一个也不熟悉，但是扑街就是蜜汁自信嗷 ┗|｀ O′|┛ ~~<br>\n 希望能在这次的项目开发中学到些东西吧，毕竟都大二下学期了，天天被卷的焦虑，再不好好学就真的要去搬砖廖～</p>\n<h1 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\">#</a> Day1</h1>\n<p>跟着大佬学习才知道在进行一个项目的开发前还需要写产品文档和技术文档，感觉有必要记录一下：</p>\n<h2 id=\"开发文档\"><a class=\"markdownIt-Anchor\" href=\"#开发文档\">#</a> 开发文档</h2>\n<ol>\n<li>需求背景 先把要做的事情铺垫下背景，上下文交代清楚，谁来看都明白要给谁做</li>\n<li>现状、预期目标和收益 把做之前和做之后做个对比</li>\n<li>产品调研（就是相关产品都是咋做的，实在没有可以不写）</li>\n<li>产品整体功能设计 这里就可以拆大概的功能模块了<br>\n ps. 技术栈和稍微偏技术一些的分析就不用单独拉个模块了，可以穿插在文档里，甚至直接不写。整体设计里面如果想拆的更细一点也可以把详细设计都加上，每个模块每个页面给个原型图和大概的交互逻辑，然后有异常处理之类的</li>\n</ol>\n<h2 id=\"技术文档\"><a class=\"markdownIt-Anchor\" href=\"#技术文档\">#</a> 技术文档</h2>\n<p>技术文档首先是需求反讲，然后是详细模块方案，接口方案，兼容性与异常兜底方案等等，然后是方案初筛检查，备选方案列表，功能开关，自测用例表，性能测试表，排期</p>\n<ul>\n<li>还有就是飞书原来那么强大，功能特别丰富，能画流程图、甘特图，还能在文档里导入各种东西，实在是太方便辣！之前一直只是听说过，看来真的有必要重视起来嗷。还用到了 sourcetree、apifox，基本都是第一次听说过，之前更是用都没用过，我平时只是看 b 站的视频来学习，缺少实战，有很多问题都解决不了。</li>\n</ul>\n<p>因为讨论出来大体流程后已经挺晚的了，加上这次项目只有三个人（两个前端一个后端），还有一个学后端的大三学长提供场外支援，项目要的不是很急，要到八月份，所以理论上事件还是很充足的，不过考虑到两个前端中有我这个菜狗在拖后腿，究竟能多块也不好说。</p>\n<p>我现在的任务是做招生提报系统的登录页面，直接 CV 了之前橙果官网的登录页，但因为橙果用的是 vue2，新项目全特喵是新技术（Vue3、TypeScript、Element Plus、Pinia 和 Vite ），当然一个登录页用不到这么多东西，但是对于本菜狗来说搬运起来还是很痛苦的.</p>\n<h1 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\">#</a> Day2</h1>\n<p>耗费了整整一天，而且基本还是在大佬的帮助下才堪堪完成了登录页面，在 sourcetree 上提交分支并合并，过程可谓是折磨，因为自己不会的太多而别人会的太多而焦虑自我损耗，老玻璃心了嗷。全称基本不是在 CV 就是在面向搜索引擎，气死偶咧！<br>\n但好歹是把登录页面给弄出来了，还是记录一下吧 ┭┮﹏┭┮……</p>\n<ol>\n<li><code>App.vue</code>  中 <code>&lt;template&gt;&lt;/template&gt;</code>  里写：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class=\"line\">    &lt;transition&gt;</span><br><span class=\"line\">      &lt;component :is=&quot;Component&quot; /&gt;</span><br><span class=\"line\">    &lt;/transition&gt;</span><br><span class=\"line\">  &lt;/router-view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 pages 文件夹下创建 <code>Login.vue</code> ，cv 过来的，就个表单，用的是 element-plus，很方便，别人封装好的就是好看又好用！<br>\nelement-plus 有专门的 Form 表单组件，而且自定义性非常的高，可以设置行内表单（一行内显示），对齐方式。<br>\n而且还能够进行表单校验，来验证用户输入是否符合规范，只需要为 <code>rules</code>  属性传入约定的验证规则，并将 <code>form-Item</code>  的 <code>prop</code>  属性设置为需要验证的特殊值就好了！就比如 <code>&lt;el-form&gt;</code>  中有 <code>&lt;el-form ref=&quot;ruleFormRef&quot; :model=&quot;ruleForm&quot; :model=&quot;ruleForm&quot;&gt;</code> ，该标签包含:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item label=<span class=\"string\">&quot;Activity name&quot;</span> prop=<span class=\"string\">&quot;name&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.name&quot;</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Activity zone&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;region&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.region&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Activity zone&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-option</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Zone one&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;shanghai&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-option</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Zone two&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;beijing&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>name</code>  和 <code>region</code>  作为 <code>prop</code>  是 <code>:model</code>  的键名，写验证的时候就可以:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ruleFormRef = ref&lt;<span class=\"title class_\">FormInstance</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ruleForm = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">region</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rules = reactive&lt;<span class=\"title class_\">FormRules</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Please input Activity name&#x27;</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">min</span>: <span class=\"number\">3</span>, <span class=\"attr\">max</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Length should be 3 to 5&#x27;</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">region</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Please select Activity zone&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;change&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>还可以对表单进行尺寸控制，设置 <code>size</code>  属性。</p>\n<h3 id=\"form-attributes\"><a class=\"markdownIt-Anchor\" href=\"#form-attributes\">#</a> Form Attributes：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">model</td>\n<td style=\"text-align:left\">表单数据对象</td>\n<td style=\"text-align:left\"><code>object</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rules</td>\n<td style=\"text-align:left\">表单验证规则</td>\n<td style=\"text-align:left\"><code>object</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inline</td>\n<td style=\"text-align:left\">行内表单模式</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-position</td>\n<td style=\"text-align:left\">表单域标签的位置， 当设置为  <code>left</code>  或  <code>right</code>  时，则也需要设置  <code>label-width</code>  属性</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">right</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-width</td>\n<td style=\"text-align:left\">标签的长度，例如  <code>'50px'</code> 。 作为 Form 直接子元素的 form-item 会继承该值。 可以使用  <code>auto</code> 。</td>\n<td style=\"text-align:left\"><code>string</code>  /  <code>number</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-suffix</td>\n<td style=\"text-align:left\">表单域标签的后缀</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hide-required-asterisk</td>\n<td style=\"text-align:left\">是否隐藏必填字段标签旁边的红色星号。</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">require-asterisk-position</td>\n<td style=\"text-align:left\">星号的位置。</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">left</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show-message</td>\n<td style=\"text-align:left\">是否显示校验错误信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inline-message</td>\n<td style=\"text-align:left\">是否以行内形式展示校验信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">status-icon</td>\n<td style=\"text-align:left\">是否在输入框中显示校验结果反馈图标</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validate-on-rule-change</td>\n<td style=\"text-align:left\">是否在  <code>rules</code>  属性改变后立即触发一次验证</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">用于控制该表单内组件的尺寸</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">disabled</td>\n<td style=\"text-align:left\">是否禁用该表单内的所有组件。 如果设置为  <code>true</code> , 它将覆盖内部组件的  <code>disabled</code>  属性</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scroll-to-error</td>\n<td style=\"text-align:left\">当校验失败时，滚动到第一个错误表单项</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"form-methods\"><a class=\"markdownIt-Anchor\" href=\"#form-methods\">#</a> Form Methods：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>validate</code></td>\n<td style=\"text-align:left\">对整个表单的内容进行验证。 接收一个回调函数，或返回  <code>Promise</code> 。</td>\n<td style=\"text-align:left\"><code>(callback?: (isValid: boolean, invalidFields?: ValidateFieldsError) =&gt; void) =&gt; Promise&lt;boolean&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>validateField</code></td>\n<td style=\"text-align:left\">验证具体的某个字段。</td>\n<td style=\"text-align:left\"><code>(props?: Arrayable&lt;FormItemProp&gt;, callback?: (isValid: boolean, invalidFields?: ValidateFieldsError) =&gt; void) =&gt; Promise&lt;void&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>resetFields</code></td>\n<td style=\"text-align:left\">重置该表单项，将其值重置为初始值，并移除校验结果</td>\n<td style=\"text-align:left\"><code>(props?: Arrayable&lt;FormItemProp&gt;) =&gt; void</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>scrollToField</code></td>\n<td style=\"text-align:left\">滚动到指定的字段</td>\n<td style=\"text-align:left\"><code>(prop: FormItemProp) =&gt; void</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clearValidate</code></td>\n<td style=\"text-align:left\">清理某个字段的表单验证信息。</td>\n<td style=\"text-align:left\"><code>(props?: Arrayable&lt;FormItemProp&gt;) =&gt; void</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"form-methods-2\"><a class=\"markdownIt-Anchor\" href=\"#form-methods-2\">#</a> Form Methods：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">事件名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">validate</td>\n<td style=\"text-align:left\">任一表单项被校验后触发</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"form-methods-3\"><a class=\"markdownIt-Anchor\" href=\"#form-methods-3\">#</a> Form Methods：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">validate</td>\n<td style=\"text-align:left\">对整个表单的内容进行验证。 接收一个回调函数，或返回  <code>Promise</code> 。</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validateField</td>\n<td style=\"text-align:left\">验证具体的某个字段。</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">resetFields</td>\n<td style=\"text-align:left\">重置该表单项，将其值重置为初始值，并移除校验结果</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scrollToField</td>\n<td style=\"text-align:left\">滚动到指定的字段</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clearValidate</td>\n<td style=\"text-align:left\">清理某个字段的表单验证信息。</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"formitem-attributes\"><a class=\"markdownIt-Anchor\" href=\"#formitem-attributes\">#</a> FormItem Attributes：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">prop</td>\n<td style=\"text-align:left\"><code>model</code>  的键名。 它可以是一个路径数组 (例如  <code>['a', 'b', 0]</code> )。 在定义了  <code>validate</code> 、 <code>resetFields</code>  的方法时，该属性是必填的</td>\n<td style=\"text-align:left\"><code>string</code>  /  <code>string[]</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label</td>\n<td style=\"text-align:left\">标签文本</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-width</td>\n<td style=\"text-align:left\">标签宽度，例如  <code>'50px'</code> 。 可以使用  <code>auto</code> 。</td>\n<td style=\"text-align:left\"><code>string</code>  /  <code>number</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">required</td>\n<td style=\"text-align:left\">是否为必填项，如不设置，则会根据校验规则确认</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rules</td>\n<td style=\"text-align:left\">表单验证规则，具体配置见<a href=\"https://element-plus.gitee.io/zh-CN/component/form.html#formitemrule\">下表</a>，更多内容可以参考<a href=\"https://github.com/yiminghe/async-validator\"> async-validator</a></td>\n<td style=\"text-align:left\"><code>object</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">error</td>\n<td style=\"text-align:left\">表单域验证错误时的提示信息。设置该值会导致表单验证状态变为 error，并显示该错误信息。</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show-message</td>\n<td style=\"text-align:left\">是否显示校验错误信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inline-message</td>\n<td style=\"text-align:left\">是否在行内显示校验信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">用于控制该表单域下组件的默认尺寸</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">default</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">for</td>\n<td style=\"text-align:left\">和原生标签相同能力</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validate-status</td>\n<td style=\"text-align:left\">formitem 校验的状态</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"formitemrule\"><a class=\"markdownIt-Anchor\" href=\"#formitemrule\">#</a> FormItemRule：</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">插槽名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">默认</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">trigger</td>\n<td style=\"text-align:left\">验证逻辑的触发方式</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"formitem-slots\"><a class=\"markdownIt-Anchor\" href=\"#formitem-slots\">#</a> FormItem Slots：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">default</td>\n<td style=\"text-align:left\">表单的内容。</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label</td>\n<td style=\"text-align:left\">标签位置显示的内容</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">error</td>\n<td style=\"text-align:left\">验证错误信息的显示内容</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"formitem-exposes\"><a class=\"markdownIt-Anchor\" href=\"#formitem-exposes\">#</a> FormItem Exposes：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">表单项大小</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validateMessage</td>\n<td style=\"text-align:left\">校验消息</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validateState</td>\n<td style=\"text-align:left\">校验状态</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validate</td>\n<td style=\"text-align:left\">验证表单项</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">resetField</td>\n<td style=\"text-align:left\">对该表单项进行重置，将其值重置为初始值并移除校验结果</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clearValidate</td>\n<td style=\"text-align:left\">移除该表单项的校验结果</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>因为登录页用到了 element plus，所以要在 main.ts 中导入：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ElementPlus</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;element-plus/dist/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title class_\">ElementPlus</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>因为登录页点了 “登录” 之后要想服务器发请求，所以要从 api 文件夹中引入，我看大佬是把 axios 的二次封装写成 <code>requset.js</code>  放在 utils 文件夹下，然后 api 文件夹中的文件再引入 <code>requset.js</code> 。<br>\naxios 封装如下：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; <span class=\"title class_\">AxiosRequestConfig</span>, <span class=\"title class_\">AxiosResponse</span>, <span class=\"title class_\">AxiosInstance</span>, <span class=\"title class_\">AxiosError</span>, <span class=\"title class_\">InternalAxiosRequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElLoadingService</span>, <span class=\"title class_\">ElMessage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义请求响应参数，不含data</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">msg</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求响应参数，包含data</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ResultData</span>&lt;T = <span class=\"built_in\">any</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">  data?: T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"property\">env</span>.<span class=\"property\">VITE_BASE_URL</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: (<span class=\"number\">10</span> * <span class=\"number\">1000</span>) <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>, <span class=\"comment\">// 请求超时时间</span></span><br><span class=\"line\">  <span class=\"attr\">withCredentials</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 跨域时候允许携带凭证</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">loading</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">ReturnType</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"title class_\">ElLoadingService</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestHttp</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">service</span>: <span class=\"title class_\">AxiosInstance</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">config: AxiosRequestConfig</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">service</span> = axios.<span class=\"title function_\">create</span>(config);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// request拦截器</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">config: InternalAxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!config.<span class=\"property\">headers</span>) <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">        config.<span class=\"property\">headers</span>.<span class=\"property\">Authorization</span> = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;sessionStorage.getItem(<span class=\"string\">&quot;token&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">        config.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>] = <span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>;</span><br><span class=\"line\">        loading = <span class=\"title class_\">ElLoadingService</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">lock</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">&quot;加载中&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">background</span>: <span class=\"string\">&quot;rgba(0, 0, 0, 0.7)&quot;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">error: AxiosError</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">        <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// response 拦截器</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = response.<span class=\"property\">data</span>;</span><br><span class=\"line\">        loading?.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">error: AxiosError</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;err&quot;</span> + error);</span><br><span class=\"line\">        loading?.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">        <span class=\"title class_\">ElMessage</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">message</span>: <span class=\"string\">`网络超时，没有请求到数据`</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"number\">3</span> * <span class=\"number\">1000</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 常用方法封装</span></span><br><span class=\"line\">  get&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">get</span>(url, &#123; params &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">post</span>(url, params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  put&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">put</span>(url, params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span>&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">delete</span>(url, &#123; params &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RequestHttp</span>(config);</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>api 文件夹下 <code>user.ts</code>  代码如下：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/request&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">login</span> = (<span class=\"params\">data: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/&quot;</span>, data);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>用这个暴露方式是因为大佬已经在 <code>request.ts</code>  中封装好了形式，这么用就可以</p>\n<ol start=\"6\">\n<li>sourecetree 的问题<br>\n xs，根本不会用好吧</li>\n</ol>\n<p>晚上回去前突然发现写的代码消失了，离谱！</p>\n<h1 id=\"day3\"><a class=\"markdownIt-Anchor\" href=\"#day3\">#</a> Day3</h1>\n<p>早上来用 vscode 自带的时间线挨个把代码恢复了，后来听同学说好像是提交合并分支的时候的问题，sourcetree 不会用，准确来说我对 git 的命令就不太会嗷。</p>\n<p>今天有点摆烂，没做什么活，和同学（大佬）分析了下提报系统后台管理页面的涉及，飞书真的强大啊，太帅了！<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/whiteboard_exported_image.png\" alt=\"\"></p>\n<h1 id=\"day4\"><a class=\"markdownIt-Anchor\" href=\"#day4\">#</a> Day4</h1>\n<p>整体的草图基本上已经画完了，开工项目，拉了个 <code>feature/navbar</code>  的分支，是主页（home）的子组件（侧边栏），cv 了极橙大后台的侧边栏，不过那是用 vue2 写的，在试着用 vue3 改。</p>\n<h1 id=\"day5\"><a class=\"markdownIt-Anchor\" href=\"#day5\">#</a> Day5</h1>\n<p>今日摆烂</p>\n<h1 id=\"day6\"><a class=\"markdownIt-Anchor\" href=\"#day6\">#</a> Day6</h1>\n<p>今天算是搞懂了 ref () 和 reactive () 了，我真棒。</p>\n<ul>\n<li>reactive () 只适用于对象或数组，一般用于表单</li>\n<li>ref () 可以接受任何类型，但需要.value，用于插值语法中不用（会自动解包）</li>\n</ul>\n<p>晚上的时候同学把 <code>home</code>  分支推了上来，合并到了我这边。<br>\n开发过程中遇到了几个问题和收获，这里记录下：</p>\n<ol>\n<li>vue 报错： <router-view> can no longer be used directly inside <transition> or <keep-alive></li>\n</ol>\n<ul>\n<li>解决：之前是<transition>包裹 <router-view>，改成 <router-view>包裹<transition></li>\n</ul>\n<ol start=\"2\">\n<li><el-submenu>报错，因为 element plus 变了，改成<el-sub-menu></li>\n<li>vue3 里面 <code>this</code>  基本上不用了，而是 <code>ref()</code>  绑定响应式之后用 <code>.value</code> ，<br>\n如： <code>this.menu</code>  改成 <code>menu.value</code> , <code>this.isCollapse</code>  改成 <code>isCollapse.value</code></li>\n<li>vue3 没有 <code>computed</code>  生命周期，但有 <code>computed</code>  函数，不过使用前不要忘了引入 <code>import &#123; computed &#125; from &quot;vue&quot;;</code></li>\n<li>vue3 使用子组件不需要再注册，import 引入了就能用。</li>\n<li>路由配置必须要有一个 <code>/</code>  路径，一般对应 <code>home</code>  组件，如果有子组件写在 <code>children()&#123;&#125;</code>  中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;home&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">auth</span>: <span class=\"string\">&quot;universal&quot;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/home.vue&quot;</span>),</span><br><span class=\"line\">  <span class=\"comment\">//children: &#123;&#125;,</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"day7\"><a class=\"markdownIt-Anchor\" href=\"#day7\">#</a> Day7</h1>\n<p>今日摆烂<br>\n哦，把橙果的 logo 换成学校的了，当时脑子抽了竟然直接用了橙果的 logo</p>\n<h1 id=\"day8\"><a class=\"markdownIt-Anchor\" href=\"#day8\">#</a> Day8</h1>\n<p>摆烂，但和老师们开了几个会，算是说明了需求，突然发现原来开发不仅仅是写好代码，弄好文档能和甲方解释清楚也是非常的重要</p>\n<h1 id=\"day9\"><a class=\"markdownIt-Anchor\" href=\"#day9\">#</a> Day9</h1>\n<p>接着摆</p>\n<h1 id=\"day10\"><a class=\"markdownIt-Anchor\" href=\"#day10\">#</a> Day10</h1>\n<p>emmm，太罪恶了。。</p>\n<h1 id=\"day11\"><a class=\"markdownIt-Anchor\" href=\"#day11\">#</a> Day11</h1>\n<p><code>navbar</code>  组件修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getNavBar</span>().<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      menu = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      $store.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;msgAlert&quot;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&quot;服务器繁忙, 请求失败&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>api/index.js</code>  修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/request&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getNavBar</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/getNavBar&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; getNavBar &#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"day12\"><a class=\"markdownIt-Anchor\" href=\"#day12\">#</a> Day12</h1>\n<p>分到两个服务器，一个测试用一个上线了用，同学在配服务器，正在部署？<br>\n <code>navbar.vue</code>  的语言一改成 ts 之后好多地方都报错了：</p>\n<ol>\n<li>变量后面报错，因为没写类型，暂时都改成了 <code>any</code>  类型</li>\n<li><code>$store</code>  和 <code>$router</code>  报错 <code> $store is not defined</code> 。因为 vue2 和 vue3 写法不一样了。<br>\n解决：import 引入， <code>import router from '@/routes'</code>  和 <code>import mainStore from '@/store'</code> , 并将 <code>$store</code> ， <code>$router</code>  分别替换成 <code>store</code> ， <code>mainStore</code></li>\n<li><code>&lt;template&gt;</code>  标签中链式调用报错，提示 <code>类型“never”上不存在属性“key”</code> , 好像 <code>.</code>  前面要加 <code>?</code> ，即 <code>?.</code> ，但不能直接加，好像要引入 <code>interface</code></li>\n</ol>\n<h1 id=\"day13\"><a class=\"markdownIt-Anchor\" href=\"#day13\">#</a> Day13</h1>\n<ol>\n<li>导入时如果那个导入的文件时默认导出的（ <code>export default</code> ），就不用加大括号，如果不是默认导出，就要用一个大括号括起来。如： <code>import &#123; mainStore &#125; from &quot;@/store&quot;;</code></li>\n<li>store 仓库使用 pinia，即 vuex5，没有了 mutations, 这意味着可以直接更新状态，不用再注册 Commit。语法上更加贴近 Composition Api.</li>\n<li>因为用了 pinia，所以 commit 不能用了，navbar 中 <code>store.commit(&quot;msgAlert&quot;, &#123;&#125;</code>  需要换一种写法<br>\n解决：直接 <code>.</code> , 函数调用， <code>store.msgAlert(&quot;服务器繁忙, 请求失败&quot;,&quot;error&quot;)</code> , <code>()</code>  里面直接传参数值，不是写参数名。其中 store 文件夹下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 顶部居中消息弹窗</span></span><br><span class=\"line\">  <span class=\"title function_\">msgAlert</span>(<span class=\"params\">message: string, type: <span class=\"string\">&quot;info&quot;</span> | <span class=\"string\">&quot;success&quot;</span> | <span class=\"string\">&quot;warning&quot;</span> | <span class=\"string\">&quot;error&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * message: 必须 string</span></span><br><span class=\"line\"><span class=\"comment\">     * type: info | success | warning | error</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"title class_\">ElMessage</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: message,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: type,</span><br><span class=\"line\">      <span class=\"attr\">center</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">duration</span>: <span class=\"number\">1500</span>, <span class=\"comment\">// 持续时长(毫秒)</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"day14\"><a class=\"markdownIt-Anchor\" href=\"#day14\">#</a> Day14</h1>\n<h3 id=\"sourecetree\"><a class=\"markdownIt-Anchor\" href=\"#sourecetree\">#</a> soureceTree</h3>\n<p>git 有一个远端仓库，有一个本地仓库，【提交】和【获取】、【拉取】都是由本地仓库针对远端仓库进行的</p>\n<ul>\n<li>提交：<br>\n【提交】</li>\n</ul>\n<ol>\n<li>提交 - 暂存所有 - “feature/fix” - 提交</li>\n<li>推送</li>\n</ol>\n<ul>\n<li>拉:<br>\n【获取】：“没有” 变 “有”。（没有这个分支，所以要获取分支）</li>\n</ul>\n<ol>\n<li>获取</li>\n<li>远程 - 检出</li>\n</ol>\n<p>【拉取】：“有” 变 “新”。（有这个分支，但与远端仓库相比落后了版本，所以要更新）<br>\n拉取不成功是因为有不一样的代码</p>\n<h1 id=\"day15\"><a class=\"markdownIt-Anchor\" href=\"#day15\">#</a> Day15</h1>\n<p>周六摆烂 ing…</p>\n<h1 id=\"day16\"><a class=\"markdownIt-Anchor\" href=\"#day16\">#</a> Day16</h1>\n<p>摆烂，打八方旅人</p>\n<h1 id=\"day17\"><a class=\"markdownIt-Anchor\" href=\"#day17\">#</a> Day17</h1>\n<p>无事可干</p>\n<h1 id=\"day18\"><a class=\"markdownIt-Anchor\" href=\"#day18\">#</a> Day18</h1>\n<p>摆</p>\n<h1 id=\"day19\"><a class=\"markdownIt-Anchor\" href=\"#day19\">#</a> Day19</h1>\n<p>。</p>\n<h1 id=\"day20\"><a class=\"markdownIt-Anchor\" href=\"#day20\">#</a> Day20</h1>\n<p>这个项目好像已经不需要我了。。。</p>\n<h1 id=\"day21\"><a class=\"markdownIt-Anchor\" href=\"#day21\">#</a> Day21</h1>\n<p>无事</p>\n<h1 id=\"day22\"><a class=\"markdownIt-Anchor\" href=\"#day22\">#</a> Day22</h1>\n<p>周六摆，打弹丸论破</p>\n<h1 id=\"day23\"><a class=\"markdownIt-Anchor\" href=\"#day23\">#</a> Day23</h1>\n<p>周日摆</p>\n<h1 id=\"day24\"><a class=\"markdownIt-Anchor\" href=\"#day24\">#</a> Day24</h1>\n<p>在疯狂的学 ts……</p>\n<h1 id=\"day25\"><a class=\"markdownIt-Anchor\" href=\"#day25\">#</a> Day25</h1>\n<p>开始做项目的 <code>发起年度考核</code> 页面</p>\n<h1 id=\"day26\"><a class=\"markdownIt-Anchor\" href=\"#day26\">#</a> Day26</h1>\n<p>有个问题，用 <code>el-upload</code>  组件，想把自动上传换成手动上传，可是一取消自动 <code>:auto-upload=&quot;false&quot;</code> ，那么之前设置的那些有关文件类型、大小的验证全都不管用了，甚至 <code>console.log</code>  打印个东西都不行；而且手动上传调用了后也没有反应，头大。</p>\n<h1 id=\"day27\"><a class=\"markdownIt-Anchor\" href=\"#day27\">#</a> Day27</h1>\n<p>去超算参观，并不像印象里的国企那样保守，反而感觉很有活力，而且正在做好多东西， 老师还知道 chatgpt (doge</p>\n<h1 id=\"day28\"><a class=\"markdownIt-Anchor\" href=\"#day28\">#</a> Day28</h1>\n<p><code>el-upload</code>  手动提交出的问题还是没有解决，愁人</p>\n<h1 id=\"day29\"><a class=\"markdownIt-Anchor\" href=\"#day29\">#</a> Day29</h1>\n<p>四月八号了，不知不觉已经干了一个月了，还是学到了很多东西的。<br>\n今天，周六，想把博客从 hexo 迁移到 vuepress2 上，但是这玩意太难用了，明明是按文档来的为啥不显示？头疼中……</p>\n<h1 id=\"day30\"><a class=\"markdownIt-Anchor\" href=\"#day30\">#</a> Day30</h1>\n<p>放弃 vuepress 了，真难用啊，还是 hexo 舒服，顺便换了个主题，不过又出了问题，这玩意在本地能显示图片，一上传到 github 再打开就寄了，离谱</p>\n<h1 id=\"day31\"><a class=\"markdownIt-Anchor\" href=\"#day31\">#</a> Day31</h1>\n<ul>\n<li><code>el-upload</code>  手动提交不成功的问题终于解决了，把 <code>:file-list=&quot;fileList&quot;</code>  去掉就好了，用  <code>ref=&quot;uploadRef&quot;</code>  即可，两个都有就会不生效。</li>\n<li>另外 get 到了一个小知识，在定义 <code>const uploadRef = ref&lt;UploadInstance&gt;()</code>  时会报错说找不到 <code>UploadInstance</code> ，这时候把鼠标移上去点一下快捷修复就好了。</li>\n<li>Alt + 箭头上下可以整体移动选中的代码，丝糕诶！</li>\n</ul>\n<h1 id=\"day32\"><a class=\"markdownIt-Anchor\" href=\"#day32\">#</a> Day32</h1>\n<p>发起考核模块搞完了，明天开组会，后天找老师再开会。好诶！</p>\n<h1 id=\"day33\"><a class=\"markdownIt-Anchor\" href=\"#day33\">#</a> Day33</h1>\n<p>过</p>\n<h1 id=\"day34\"><a class=\"markdownIt-Anchor\" href=\"#day34\">#</a> Day34</h1>\n<p>写 style 的时候别忘了写 scope，不然会样式污染！</p>\n<h1 id=\"day35\"><a class=\"markdownIt-Anchor\" href=\"#day35\">#</a> Day35</h1>\n<p>第一阶段初步告终</p>\n<h1 id=\"4-月-18-日\"><a class=\"markdownIt-Anchor\" href=\"#4-月-18-日\">#</a> 4 月 18 日</h1>\n<p>搞了下把后端传过来的 excel 文件转成 json 格式，封装 axios 时是  <code>responseType: 'blob'</code> , 不能取消，取消会影响正常下载，刚开始只能解析出来乱码，并报错说是非法的 json，后来研究了一会儿才发现还要安装 xlsx 的依赖，总算解决了，贴一下代码：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span></span></span><br><span class=\"line\">import &#123; mainStore &#125; from &quot;@/store/index&quot;;</span><br><span class=\"line\">import &#123; read, utils &#125; from &quot;xlsx&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; getAssessmentModel &#125; from &quot;@/api/user&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123; assessment &#125; = mainStore();</span><br><span class=\"line\"></span><br><span class=\"line\">const btn = () =&gt; &#123;</span><br><span class=\"line\">  getAssessmentModel().then((res: any) =&gt; &#123;</span><br><span class=\"line\"><span class=\"code\">    const reader: any = new FileReader();</span></span><br><span class=\"line\"><span class=\"code\">    reader.readAsArrayBuffer(res);</span></span><br><span class=\"line\"><span class=\"code\">    reader.onload = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">      const data = new Uint8Array(reader.result);</span></span><br><span class=\"line\"><span class=\"code\">      const workbook = read(data, &#123; type: &quot;array&quot; &#125;);</span></span><br><span class=\"line\"><span class=\"code\">      const sheetName = workbook.SheetNames[0];</span></span><br><span class=\"line\"><span class=\"code\">      const sheet = workbook.Sheets[sheetName];</span></span><br><span class=\"line\"><span class=\"code\">      const json = utils.sheet_to_json(sheet);</span></span><br><span class=\"line\"><span class=\"code\">      assessment = json;</span></span><br><span class=\"line\"><span class=\"code\">      console.log(assessment);</span></span><br><span class=\"line\"><span class=\"code\">    &#125;;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;);</span></span><br><span class=\"line\"><span class=\"code\">&#125;;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span></span></span><br><span class=\"line\">  test页面 <span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span></span></span></span>点我发送请求<span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span></span></span><br><span class=\"line\">  &#123;&#123; assessment &#125;&#125;<span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span></span></span><br></pre></td></tr></table></figure>\n<p>不过还有个问题，就是想要将数据存储到 pinia 仓库的话还要引入 <code>import &#123;storeToRefs&#125; from 'pinia'</code> ，把要存储的数据用 <code>storeToRefs()</code>  包裹起来，但是因为是用 ts 写的，这样做会报错，目前不知道该怎么解决</p>\n<h1 id=\"4-月-22-日\"><a class=\"markdownIt-Anchor\" href=\"#4-月-22-日\">#</a> 4 月 22 日</h1>\n<p>因为项目中有多处需要用到文件上传功能，所以将其被封装成了公共组件，并提供了许多配置，可根据不同需求修改配置。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123; UploadFilled &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">import &#123; ElMessageBox, UploadInstance &#125; from &#x27;element-plus&#x27;</span><br><span class=\"line\">import &#123; getToken &#125; from &quot;@/utils/token&quot;</span><br><span class=\"line\">import type &#123; UploadProps, UploadUserFile &#125; from &#x27;element-plus&#x27;</span><br><span class=\"line\">import &#123; mainStore &#125; from &quot;@/store&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const baseUrl = import.meta.env.VITE<span class=\"emphasis\">_BASE_</span>URL + &quot;/api&quot;;</span><br><span class=\"line\">const headers = &#123; Authorization: getToken() &#125;</span><br><span class=\"line\">let fileList = ref<span class=\"language-xml\">&lt;UploadUserFile[]&gt;</span>([])</span><br><span class=\"line\"></span><br><span class=\"line\">const props = defineProps([&quot;limitation&quot;, &quot;uploadFilesUrl&quot;, &quot;type&quot;])</span><br><span class=\"line\">const uploadFilesUrl = props.uploadFilesUrl;</span><br><span class=\"line\">const limitation = props.limitation;</span><br><span class=\"line\">const type = props.type;</span><br><span class=\"line\"></span><br><span class=\"line\">let flag = &quot;remove&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">const beforeRemove: UploadProps[&#x27;beforeRemove&#x27;] = async (uploadFile, uploadFiles) =&gt; &#123;</span><br><span class=\"line\">  if (flag === &quot;remove&quot;) &#123;</span><br><span class=\"line\"><span class=\"code\">    return ElMessageBox.confirm(</span></span><br><span class=\"line\"><span class=\"code\">      `是否删除此文件 $&#123;uploadFile.name&#125; ?`, &#123;</span></span><br><span class=\"line\"><span class=\"code\">      confirmButtonText: &quot;确定&quot;,</span></span><br><span class=\"line\"><span class=\"code\">      cancelButtonText: &quot;取消&quot;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;).then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">      mainStore().msgAlert(&quot;删除成功&quot;, &quot;success&quot;);</span></span><br><span class=\"line\"><span class=\"code\">      return true;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;).catch(() =&gt; false);</span></span><br><span class=\"line\"><span class=\"code\">  &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"code\">    return true;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">const handlePreview: UploadProps[&#x27;onPreview&#x27;] = (uploadFile) =&gt; &#123;</span><br><span class=\"line\">  console.log(uploadFile)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const onSuccess: UploadProps[&#x27;onSuccess&#x27;] = (res, uploadFile, uploadFiles) =&gt; &#123;</span><br><span class=\"line\">  fileList.value = [];</span><br><span class=\"line\">  mainStore().msgAlert(&quot;上传成功&quot;, &quot;success&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const onError: UploadProps[&#x27;onError&#x27;] = (res, uploadFile, uploadFiles) =&gt; &#123;</span><br><span class=\"line\">  mainStore().msgAlert(&quot;上传失败&quot;, &quot;error&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const beforeUpload: UploadProps[&#x27;beforeUpload&#x27;] = (rawFile) =&gt; &#123;</span><br><span class=\"line\">  if (type.includes(rawFile.type)) return true;</span><br><span class=\"line\">  else &#123;</span><br><span class=\"line\"><span class=\"code\">    mainStore().msgAlert(&quot;请上传指定类型的文件&quot;, &quot;error&quot;);</span></span><br><span class=\"line\"><span class=\"code\">    flag = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"code\">    return false;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">// 手动上传</span></span><br><span class=\"line\"><span class=\"code\">const uploadRef = ref&lt;UploadInstance&gt;()</span></span><br><span class=\"line\"><span class=\"code\">const submitUpload = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">  uploadRef.value!.submit()</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">// 暴露方法</span><br><span class=\"line\">defineExpose(&#123;</span><br><span class=\"line\">  submitUpload</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;el-upload :file-list=&quot;fileList&quot; ref=&quot;uploadRef&quot; class=&quot;upload-demo&quot; name=&quot;file&quot; method=&quot;post&quot; drag</span></span><br><span class=\"line\"><span class=\"code\">      :action=&quot;baseUrl + uploadFilesUrl&quot; show-file-list :headers=&quot;headers&quot; :auto-upload=&quot;false&quot;</span></span><br><span class=\"line\"><span class=\"code\">      :on-preview=&quot;handlePreview&quot; :before-remove=&quot;beforeRemove&quot; :on-success=&quot;onSuccess&quot; :on-error=&quot;onError&quot;</span></span><br><span class=\"line\"><span class=\"code\">      :before-upload=&quot;beforeUpload&quot;&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;el-icon class=&quot;el-icon--upload&quot;&gt;&lt;upload-filled /&gt;&lt;/el-icon&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;div class=&quot;el-upload__text&quot;&gt;</span></span><br><span class=\"line\"><span class=\"code\">        拖动文件到此处或 &lt;em&gt;点击我上传&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;template #tip&gt;</span></span><br><span class=\"line\"><span class=\"code\">        &lt;div class=&quot;el-upload__tip&quot;&gt;</span></span><br><span class=\"line\"><span class=\"code\">          &#123;&#123; props.limitation ? props.limitation : &quot;&quot; &#125;&#125;</span></span><br><span class=\"line\"><span class=\"code\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;/el-upload&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"5-月-9-日\"><a class=\"markdownIt-Anchor\" href=\"#5-月-9-日\">#</a> 5 月 9 日</h1>\n<p>element 的属性可以前面加 <code>:</code>  绑定函数调用，而自带的方法前面要用 <code>@</code></p>\n<h1 id=\"5月16日\"><a class=\"markdownIt-Anchor\" href=\"#5月16日\">#</a> 5 月 16 日</h1>\n<p>前端部分好像大体搞完了……</p>\n",
            "tags": [
                "前端开发",
                "项目实战",
                "橙果工作室开发组",
                "TypeScript",
                "Element Plus",
                "vue3",
                "pinia",
                "vite"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/",
            "url": "https://eucli.top/2023/03/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/",
            "title": "微信小程序项目实战",
            "date_published": "2023-03-05T00:15:34.000Z",
            "content_html": "<h1 id=\"认识小程序\"><a class=\"markdownIt-Anchor\" href=\"#认识小程序\">#</a> 认识小程序</h1>\n<ul>\n<li>小程序与普通网页开发的区别</li>\n</ul>\n<ol>\n<li>运行环境不同<br>\n网页运行在浏览器环境中，小程序运行在微信环境中</li>\n<li>API 不同<br>\n由于运行环境不同，所以小程序中无法调用 DOM 和 BOM 的 API，但是可以调用微信环境提供的各种 API，如：地理定位，扫码，支付</li>\n<li>开发模式不同<br>\n网页开发模式：浏览器 + 代码编辑器<br>\n小程序：申请小程序开发账号，安装小程序开发者工具，创建和配置小程序项目</li>\n</ol>\n<ul>\n<li>\n<p>注册小程序账号，获取小程序的 AppID<br>\nwx40e49b099125edca</p>\n</li>\n<li>\n<p>开发者工具 不建议使用 vscode，官方提供的功能更多</p>\n</li>\n<li>\n<p>设置代理 — 不适用代理，直连</p>\n</li>\n<li>\n<p>常用功能<br>\n帮助 — 开发者文档<br>\n工具 — 构建 npm<br>\n 详情 — 本地设置</p>\n</li>\n<li>\n<p>小程序代码的构成<br>\n！[](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/8KSE\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/8KSE</a>([I`L5(HI<sub>JE@$E]</sub>7C.png)</p>\n</li>\n</ul>\n",
            "tags": [
                "前端开发",
                "项目实战",
                "小程序",
                "uni-app"
            ]
        },
        {
            "id": "https://eucli.top/2023/01/04/%E7%8E%A9%E6%9C%BA%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E4%B8%80%EF%BC%9A%E8%A7%A3%E9%94%81BL/",
            "url": "https://eucli.top/2023/01/04/%E7%8E%A9%E6%9C%BA%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E4%B8%80%EF%BC%9A%E8%A7%A3%E9%94%81BL/",
            "title": "玩机那些事之一：解锁BL",
            "date_published": "2023-01-04T12:49:45.000Z",
            "content_html": "<p>我们在刷到一些安卓手机玩机魔改类的视频中，可能有些朋友听的一头雾水，什么 “root”“bootloader”“recovery”“内核”“面具”“三清、四清” 之类的，往往对此感到不明觉厉，本系列博客就是结合博主自身的玩机教程，带大家科普一下玩机领域的基本概念和一些操作。<br>\n前排提示：玩机需谨慎，一不小心手机可能变砖！</p>\n<p>众所周知，一部手机出厂搭载的官方系统，其首要目标便是安全稳定，具有纯净（广告眼花缭乱）、功能（找不到功能）、美观（丑土乱）、流畅（卡顿不跟手）、稳定（闪退死机）、安全（密码泄露）等诸多优点，因此厂家希望用户不要乱搞，所有出厂的系统用户权限比较低，很多修改都做不了，如果我们要想玩机，第一步就是提高权限。</p>\n<ul>\n<li>在安卓系统中一共有三种权限，第一种是软件权限（这里指的是第三方软件），它们的权限都是最低的，使用的时候会先向用户发送请求，需要经过用户同意才能使用。</li>\n<li>第二种是用户权限，比如设定锁屏密码，重启手机，卸载第三方软件等操作，这些操作是普通软件做不到的，因此用户权限比第三方软件权限高。</li>\n<li>第三种权限，也是最高的权限，便是超级用户权限，我们通常也称之为 ROOT 权限。拥有这类权限便可以完全控制手机，去实现手机系统本不开放的功能，比如修改手机型号，卸载系统软件，甚至实现对硬件的控制（修改 CPU 调度、对 GPU 超频）。<br>\n因此，如果我们想要解除官方系统的种种限制，真正的成为手机的主人，首先就要获取 ROOT 权限。</li>\n</ul>\n<p>安卓手机的存储中包含了数个分区，其中有一个分区叫做 boot 分区，存放有启动和引导文件，包含了操作系统的 Kernel（内核）和 Ramdisk（虚拟内存）。而安卓 root 的操作就是修改 boot 分区。<br>\n在此之前，我们首先需要介绍一下 bootloader。我们简单翻译一下，bootloader 顾名思义就是引导加载器，在你长按电源键开机的那一刻起，bootloader 就开始工作了，这段时间会初始化硬件设备，引导操作系统内核（boot 分区）。在引导后期我们可以选择进入一个叫 fastboot 的阶段，也即很多玩机发烧友说的 “刷机模式”，</p>\n",
            "tags": [
                "搞机",
                "ROOT"
            ]
        },
        {
            "id": "https://eucli.top/2022/10/31/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/",
            "url": "https://eucli.top/2022/10/31/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/",
            "title": "一些小技巧",
            "date_published": "2022-10-31T01:13:45.000Z",
            "content_html": "<ul>\n<li>一些快捷键\n<ul>\n<li>ctrl + d 快速复制该行代码到下一行</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "日常记录",
                "小技巧"
            ]
        }
    ]
}