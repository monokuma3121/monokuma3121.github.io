{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucli の小窝",
    "subtitle": null,
    "icon": "https://eucli.top/images/favicon.ico",
    "description": "真不是二次元",
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/04/17/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "url": "https://eucli.top/2023/04/17/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "title": "前端自动化",
            "date_published": "2023-04-17T04:35:00.000Z",
            "content_html": "<h1 id=\"自动化插件\"><a class=\"markdownIt-Anchor\" href=\"#自动化插件\">#</a> 自动化插件</h1>\n<h2 id=\"unplugin-auto-import\"><a class=\"markdownIt-Anchor\" href=\"#unplugin-auto-import\">#</a>  <code>unplugin-auto-import</code></h2>\n<p>自动导入 Api, 支持 Vite, Webpack, Rollup and esbuild。<br>\n适用于 &quot;vue&quot;, “vue-router”, &quot;axios&quot; 等库的 api。</p>\n<ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add unplugin-auto-import -D</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改配置文件 <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@name</span> <span class=\"variable\">AutoImportDeps</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span> <span class=\"variable\">auto</span>-import lib</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">AutoImport</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-auto-import/vite&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">AutoImportDeps</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">imports</span>: [<span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;vue-router&quot;</span>, <span class=\"string\">&quot;axios&quot;</span>, <span class=\"string\">&quot;@vueuse/core&quot;</span>, <span class=\"string\">&quot;@pureadmin/utils&quot;</span>],</span><br><span class=\"line\">    <span class=\"attr\">include</span>: [<span class=\"regexp\">/\\.[tj]sx?$/</span>, <span class=\"regexp\">/\\.vue$/</span>, <span class=\"regexp\">/\\.vue\\?vue/</span>, <span class=\"regexp\">/\\.md$/</span>],</span><br><span class=\"line\">    <span class=\"comment\">// eslint报错解决</span></span><br><span class=\"line\">    <span class=\"attr\">eslintrc</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">enabled</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// Default `false`</span></span><br><span class=\"line\">      <span class=\"attr\">filepath</span>: <span class=\"string\">&quot;./.eslintrc-auto-import.json&quot;</span>, <span class=\"comment\">// Default `./.eslintrc-auto-import.json`</span></span><br><span class=\"line\">      <span class=\"attr\">globalsPropValue</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// Default `true`, (true | false | &#x27;readonly&#x27; | &#x27;readable&#x27; | &#x27;writable&#x27; | &#x27;writeable&#x27;)</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">dts</span>: <span class=\"string\">&quot;src/auto-imports.d.ts&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"unplugin-vue-components\"><a class=\"markdownIt-Anchor\" href=\"#unplugin-vue-components\">#</a>  <code>unplugin-vue-components</code></h2>\n<p>为 Vue 自动按需导入组件，既不需要导入也不需要声明<br>\n支持： Vite, Webpack, Vue CLI, Rollup, esbuild 等</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add unplugin-vue-components -D</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改配置文件 <code>vite.config.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Components</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;unplugin-vue-components/vite&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 要搜索组件的目录的相对路径</span></span><br><span class=\"line\">      <span class=\"attr\">dirs</span>: [<span class=\"string\">&quot;src/components&quot;</span>],</span><br><span class=\"line\">      <span class=\"comment\">// 组件的有效文件扩展名</span></span><br><span class=\"line\">      <span class=\"attr\">extensions</span>: [<span class=\"string\">&quot;vue&quot;</span>],</span><br><span class=\"line\">      <span class=\"comment\">// 配置文件生成位置</span></span><br><span class=\"line\">      <span class=\"comment\">// 也接受自定义文件名的路径</span></span><br><span class=\"line\">      <span class=\"attr\">dts</span>: <span class=\"string\">&quot;src/components.d.ts&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>其实也能自动导入 ui 库，但 bug 比较多，所以放弃</p>\n",
            "tags": [
                "前端开发",
                "自动化"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/16/20%E4%B8%AAJavaScript%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/",
            "url": "https://eucli.top/2023/04/16/20%E4%B8%AAJavaScript%E7%BB%8F%E5%85%B8%E6%A1%88%E4%BE%8B/",
            "title": "20个JavaScript经典案例",
            "date_published": "2023-04-16T13:44:34.000Z",
            "content_html": "",
            "tags": [
                "前端开发",
                "JavaScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/16/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://eucli.top/2023/04/16/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "【案例】泛型封装数据库",
            "date_published": "2023-04-16T13:44:34.000Z",
            "content_html": "<p>功能：定义一个操作数据库的库，支持 mysql、mongoDB<br>\n 要求：mysql、mongoDB 功能是一样的，都有增删改查（insert delete update select）方法<br>\n注意：约束统一的规范、代码复用<br>\n规范：interface<br>\n 复用：泛型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//增删改查（insert delete update select）方法 ==&gt; 规范：interface</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Db</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"attr\">data</span>:T):<span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span></span><br><span class=\"line\">  <span class=\"title function_\">select</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">any</span>[]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Sql</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Db</span>&lt;T&gt; &#123; <span class=\"comment\">//类实现接口用implements，接口实现接口用extends</span></span><br><span class=\"line\">  <span class=\"title function_\">insert</span>(<span class=\"attr\">data</span>:T):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">delete</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">update</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">boolean</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">select</span>(<span class=\"attr\">data</span>:T,<span class=\"attr\">id</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">any</span>[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">userName</span>:<span class=\"built_in\">string</span>,</span><br><span class=\"line\">  <span class=\"attr\">userPwd</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> mySql = <span class=\"keyword\">new</span> <span class=\"title class_\">Sql</span>&lt;<span class=\"title class_\">User</span>&gt;()</span><br><span class=\"line\">mySql.<span class=\"title function_\">insert</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">userName</span>:<span class=\"string\">&#x27;admin&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">userPwd</span>:<span class=\"string\">&#x27;123&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "TypeScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/14/VueRouter/",
            "url": "https://eucli.top/2023/04/14/VueRouter/",
            "title": "VueRouter",
            "date_published": "2023-04-14T12:58:34.000Z",
            "content_html": "<h1 id=\"vue-router\"><a class=\"markdownIt-Anchor\" href=\"#vue-router\">#</a> Vue Router</h1>\n<h2 id=\"带参数的动态路由匹配\"><a class=\"markdownIt-Anchor\" href=\"#带参数的动态路由匹配\">#</a> 带参数的动态路由匹配</h2>\n<p>我们可能有一个 User 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数 ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这些都会传递给 `createRouter`</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  <span class=\"comment\">// 动态字段以冒号开始</span></span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/users/:id&quot;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">User</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>现在像 <code> /users/johnny</code>  和 <code> /users/jolyne</code>  这样的 URL 都会映射到同一个路由。<br>\n路径参数 用冒号 <code> :</code>  表示</p>\n<ul>\n<li>使用带有参数的路由时需要注意的是，当用户从  <code>/users/johnny </code> 导航到 <code>/users/jolyne</code>  时，相同的组件实例将被重复使用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会被调用。</li>\n</ul>\n<h2 id=\"sensitive-与-strict-路由配置\"><a class=\"markdownIt-Anchor\" href=\"#sensitive-与-strict-路由配置\">#</a> Sensitive 与 strict 路由配置</h2>\n<p>默认情况下，所有路由是不区分大小写的，并且能匹配带有或不带有尾部斜线的路由。例如，路由 <code>/users</code>  将匹配  <code>/users</code> 、 <code>/users/</code> 、甚至 <code> /Users/</code> 。可以通过 <code> strict</code>  和  <code>sensitive </code> 选项来修改:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHistory</span>(),</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    <span class=\"comment\">// 将匹配 /users/posva 而非：</span></span><br><span class=\"line\">    <span class=\"comment\">// - /users/posva/ 当 strict: true</span></span><br><span class=\"line\">    <span class=\"comment\">// - /Users/posva 当 sensitive: true</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:id&#x27;</span>, <span class=\"attr\">sensitive</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 将匹配 /users, /Users, 以及 /users/42 而非 /users/ 或 /users/42/</span></span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/users/:id?&#x27;</span> &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">  <span class=\"attr\">strict</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// applies to all routes</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"可选参数\"><a class=\"markdownIt-Anchor\" href=\"#可选参数\">#</a> 可选参数</h2>\n<p>可以通过使用？修饰符 (0 个或 1 个) 将一个参数标记为可选：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  <span class=\"comment\">// 匹配 /users 和 /users/posva</span></span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/users/:userId?&quot;</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<h2 id=\"嵌套路由\"><a class=\"markdownIt-Anchor\" href=\"#嵌套路由\">#</a> 嵌套路由</h2>\n<p>需要在路由中配置  <code>children</code> , 不写 <code>/</code></p>\n<h2 id=\"编程式导航\"><a class=\"markdownIt-Anchor\" href=\"#编程式导航\">#</a> 编程式导航</h2>\n<ul>\n<li>想要导航到不同的 URL，可以使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。<br>\n当你点击 <code>&lt;router-link&gt;</code>  时，内部会调用这个方法，所以点击  <code>&lt;router-link :to=&quot;...&quot;&gt; </code> (声明式) 相当于调用 <code>router.push(...)</code> (编程式).</li>\n</ul>\n<h2 id=\"命名路由\"><a class=\"markdownIt-Anchor\" href=\"#命名路由\">#</a> 命名路由</h2>\n<p>除了 path 之外，你还可以为任何路由提供 name。这有以下优点：</p>\n<ol>\n<li>没有硬编码的 URL</li>\n<li>params 的自动编码 / 解码。</li>\n<li>防止你在 url 中出现打字错误。</li>\n<li>绕过路径排序（如显示一个）</li>\n</ol>\n<h2 id=\"命名视图\"><a class=\"markdownIt-Anchor\" href=\"#命名视图\">#</a> 命名视图</h2>\n<p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有  <code>sidebar </code> (侧导航) 和  <code>main </code> (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果  <code>router-view </code> 没有设置名字，那么默认为 default。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view left-sidebar&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LeftSidebar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view main-content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view right-sidebar&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;RightSidebar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHashHistory</span>(),</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">default</span>: <span class=\"title class_\">Home</span>,</span><br><span class=\"line\">        <span class=\"comment\">// LeftSidebar: LeftSidebar 的缩写</span></span><br><span class=\"line\">        <span class=\"title class_\">LeftSidebar</span>,</span><br><span class=\"line\">        <span class=\"comment\">// 它们与 `&lt;router-view&gt;` 上的 `name` 属性匹配</span></span><br><span class=\"line\">        <span class=\"title class_\">RightSidebar</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"重定向和别名\"><a class=\"markdownIt-Anchor\" href=\"#重定向和别名\">#</a> 重定向和别名</h2>\n<ul>\n<li>重定向也是通过 routes 配置来完成，下面例子是从 <code> /home</code>  重定向到  <code>/</code> ：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/&quot;</span> &#125;];</span><br></pre></td></tr></table></figure>\n<p>重定向的目标也可以是一个命名的路由：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">redirect</span>: &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;homepage&quot;</span> &#125; &#125;];</span><br></pre></td></tr></table></figure>\n<p>请注意，导航守卫并没有应用在跳转路由上，而仅仅应用在其目标上。在上面的例子中，在  <code>/home</code>  路由中添加  <code>beforeEnter </code> 守卫不会有任何效果。</p>\n<p>在写  <code>redirect </code> 的时候，可以省略  <code>component</code>  配置，因为它从来没有被直接访问过，所以没有组件要渲染。唯一的例外是嵌套路由：如果一个路由记录有  <code>children</code>  和  <code>redirect</code>  属性，它也应该有 <code> component</code>  属性。</p>\n<ul>\n<li>别名<br>\n重定向是指当用户访问  <code>/home</code>  时，URL 会被  <code>/</code>  替换，然后匹配成  <code>/</code> 。那么什么是别名呢？<br>\n将  <code>/</code>  别名为  <code>/home</code> ，意味着当用户访问  <code>/home</code>  时，URL 仍然是  <code>/home</code> ，但会被匹配为用户正在访问  <code>/</code> 。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">Homepage</span>, <span class=\"attr\">alias</span>: <span class=\"string\">&quot;/home&quot;</span> &#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由组件传参\"><a class=\"markdownIt-Anchor\" href=\"#路由组件传参\">#</a> 路由组件传参</h2>\n<ul>\n<li>\n<p>将  <code>props</code>  传递给路由组件</p>\n</li>\n<li>\n<p>命名视图<br>\n对于有命名视图的路由，你必须为每个命名视图定义  <code>props</code>  配置：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/user/:id&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">components</span>: &#123; <span class=\"attr\">default</span>: <span class=\"title class_\">User</span>, <span class=\"attr\">sidebar</span>: <span class=\"title class_\">Sidebar</span> &#125;,</span><br><span class=\"line\">    <span class=\"attr\">props</span>: &#123; <span class=\"attr\">default</span>: <span class=\"literal\">true</span>, <span class=\"attr\">sidebar</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>布尔模式</li>\n<li>对象模式</li>\n<li>函数模式</li>\n</ul>\n<h2 id=\"路由的默认路径\"><a class=\"markdownIt-Anchor\" href=\"#路由的默认路径\">#</a> 路由的默认路径</h2>\n<p>默认情况下，进入网站的首页，我们希望 <code>&lt;router-view&gt;</code>  渲染首页的内容，但是我们的实现中，默认没有显示首页组件，必须让用户点击才可以。如何可以让路径默认跳到到首页，并且 <code>&lt;router-view&gt;</code>  渲染首页组件呢？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>, <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/home&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">Home</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/about&quot;</span>, <span class=\"attr\">component</span>: <span class=\"title class_\">About</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>在 routes 中再配置一个映射， <code>path</code>  配置的是根路径:  <code>/</code> , <code>redirect</code>  是重定向，也就是我们将根路径重定向到 <code>/home</code>  的路径下，这样就可以得到我们想要的结果了</p>\n<h2 id=\"history-模式\"><a class=\"markdownIt-Anchor\" href=\"#history-模式\">#</a> history 模式</h2>\n<h2 id=\"路由懒加载\"><a class=\"markdownIt-Anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h2>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。<br>\n <code>component</code>  可以传入一个组件，也可以接收一个函数，该函数需要放回一个 Promise. 而 <code>import</code>  函数就是返回一个 Promise</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123; <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>, <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;../pages/Home.vue&quot;</span>) &#125;];</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由的其他属性\"><a class=\"markdownIt-Anchor\" href=\"#路由的其他属性\">#</a> 路由的其他属性</h2>\n<p><code>name</code>  属性：路由记录独一无二的名称<br>\n <code>meta</code>  属性：自定义的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/about&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;about-router&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/About.vue&#x27;</span>),</span><br><span class=\"line\">  <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&#x27;why&#x27;</span>,</span><br><span class=\"line\">    age；<span class=\"number\">18</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态路由基本匹配\"><a class=\"markdownIt-Anchor\" href=\"#动态路由基本匹配\">#</a> 动态路由基本匹配</h2>\n<p>很多时候我们需要将给定匹配模式的路由映射到同一个组件，例如，我们可能有一个 User 组件，它应该对所有用户进行渲染，但是用户的 ID 是不同的，在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/user/:id&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/User.vue&#x27;</span>),</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 router-link 中进行如下跳转：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/user/123&quot;&gt;用户：123&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>获取动态路由的值<br>\n在 setup 中，我们要使用 vue-router 库给我们提供的一个 hook：  <code>useRoute</code> . 该 Hook 会返回一个 Route 对象，对象中保存着当前路由相关的值；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">userRoute</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(route.<span class=\"property\">params</span>.<span class=\"property\">id</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"notfound\"><a class=\"markdownIt-Anchor\" href=\"#notfound\">#</a> NotFound</h3>\n<p>对于没有匹配到的路由，我们通常会匹配到固定的某个页面，比如 NotFound 的错误页面中，这个时候我们可编写一个动态路由用于匹配所有的页面；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/:pathMatch(.*)&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/NotFound.vue&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"路由的嵌套\"><a class=\"markdownIt-Anchor\" href=\"#路由的嵌套\">#</a> 路由的嵌套</h2>\n<p>什么是路由的嵌套？<br>\n目前我们匹配的 Home、About、User 等都属于底层路由，我们在它们之间可以来回进行切换。但是，我们 Home 页面本身，也可能会在多个组件之间来回切换：比如 Home 中包括 Product、Message，它们可以在 Home 内部来回切换。<br>\n这个时候我们就需要使用嵌套路由，在 Home 中也使用 router-view 来占位之后需要渲染的组件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"attr\">path</span>:<span class=\"string\">&#x27;/home&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span><span class=\"keyword\">import</span>(<span class=\"string\">&#x27;.../pages/Home.vue&#x27;</span>)</span><br><span class=\"line\"><span class=\"attr\">children</span>: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirect</span>:<span class=\"string\">&#x27;/home/product&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;product&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeProduct.vue&#x27;</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;message&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>:<span class=\"function\">()=&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&#x27;../pages/HomeMessage.vue&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>query 方式的参数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;useRouter&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue-rourer&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> route = <span class=\"title function_\">useRouter</span>()</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">jumpToHome</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  router.<span class=\"title function_\">push</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>:<span class=\"string\">&#x27;/profile&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">quert</span>: &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;why&#x27;</span>,age：<span class=\"number\">18</span>&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"router-link-的-v-slot\"><a class=\"markdownIt-Anchor\" href=\"#router-link-的-v-slot\">#</a> router-link 的 v-slot</h3>\n<h3 id=\"router-view-的-v-slot\"><a class=\"markdownIt-Anchor\" href=\"#router-view-的-v-slot\">#</a> router-view 的 v-slot</h3>\n<p><code>router-view</code>  也提供给我们一个插槽，可以用于  <code>&lt;transition&gt;</code>  和  <code>&lt;keep-alive&gt;</code>  组件来包裹你的路由组件：</p>\n<ul>\n<li><code>Component</code> ：要渲染的组件</li>\n<li><code>route</code> ：解析出的标准化路由对象</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class=\"line\">  &lt;transition name=&quot;why&quot;&gt;</span><br><span class=\"line\">    &lt;keep-alive&gt;</span><br><span class=\"line\">      &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;</span><br><span class=\"line\">    &lt;/keep-alive&gt;</span><br><span class=\"line\">  &lt;/transition&gt;</span><br><span class=\"line\">&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"动态添加路由\"><a class=\"markdownIt-Anchor\" href=\"#动态添加路由\">#</a> 动态添加路由</h2>\n<p>某些情况下我们可能需要动态的来添加路由：比如根据用户不同的权限，注册不同的路由。这个时候我们可以使用一个方法  <code>addRoute</code></p>\n<ul>\n<li>添加顶级路由：<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/P%25I_0((DM%60ITK%25DRPCF2COO.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/P%I_0((DM`ITK%DRPCF2COO.png)</a></li>\n<li>添加二级路由对象<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/1RB3VFZZHORS82DD%60FO_C5C.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"动态删除路由\"><a class=\"markdownIt-Anchor\" href=\"#动态删除路由\">#</a> 动态删除路由</h2>\n<ol>\n<li>添加一个 name 相同的路由</li>\n<li>通过 removeRoute 方法，传入路由的名称</li>\n<li>通过 addRoute 方法的返回值回调<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/OJLWP%5DY@S80JCYCDWFNM81Z.png\" alt=\"\"><br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/H%5DFZO@8N@%5BW_D%5DYEU5E5S0K.png\" alt=\"\"><br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/I$OQ6ZJH$_Q%5BI%5BJ%7B6%60MLIPJ.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"路由导航守卫\"><a class=\"markdownIt-Anchor\" href=\"#路由导航守卫\">#</a> 路由导航守卫</h2>\n<p>全局的前置守卫 <code>beforeEach</code>  是在导航触发时会被回调的，它有两个参数：</p>\n<ul>\n<li><code>to</code> ：即将进入的路由 Route 对象</li>\n<li><code>from</code> ：即将离开的路由 Route 对象<br>\n它有返回值：</li>\n<li>false：取消当前导航</li>\n<li>不返回或者 undefined：进行默认导航</li>\n<li>返回一个路由地址：可以是一个 string 类型的路径；可以是一个对象，对象中包含 path、query、params 等信息<br>\n可选的第三个参数： <code>next</code></li>\n<li>在 Vue2 中我们是通过 next 函数来决定如何进行跳转的，但是在 Vue3 中我们是通过返回值来控制的，不再推荐使用 next 函数，这是因为开发中很容易调用多次 next<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/XV_VGX$9\" alt=\"\">HB5AE8SG943NS9.png)</li>\n</ul>\n<h2 id=\"登录守卫功能\"><a class=\"markdownIt-Anchor\" href=\"#登录守卫功能\">#</a> 登录守卫功能</h2>\n<p>比如我们完成一个功能，只有登录后才能看到其他页面：<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/4%606%60HY%60G8ABQ2R_B\" alt=\"\">T)UFO1.png)<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/6U0\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/6U0</a>{1(~VVLP7IR99W5WGRHU.png)</p>\n<h1 id=\"vuex-状态管理\"><a class=\"markdownIt-Anchor\" href=\"#vuex-状态管理\">#</a> Vuex 状态管理</h1>\n<ul>\n<li>\n<p>什么是状态管理？<br>\n在开发中，应用程序需要处理各种各样的数据，这些<br>\n数据需要保存在我们应用程序中的某一个位置，对于这些数据<br>\n的管理我们就称之为是 状态管理</p>\n</li>\n<li>\n<p>在前面我们是如何管理自己的状态呢？<br>\n在 Vue 开发中，我们使用组件化的开发方式，而在组件中我们定义 <code>data</code>  或者在 <code>setup</code>  中返回使用的数据，这些数据我们称之为 <code>state</code> <br>\n 在模块 <code>template</code>  中我们可以使用这些数据，模块最终会被渲染成 DOM，我们称之为 <code>View</code> <br>\n 在模块中我们会产生一些行为事件，处理这些行为事件时，<br>\n有可能会修改 state，这些行为事件我们称之为 <code>actions</code> <br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%25MA5OURUF\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%MA5OURUF</a>}(PO5C%MNS6{AM.png)</p>\n</li>\n<li>\n<p>复杂的状态管理<br>\n JavaScript 需要管理的状态越来越多，越来越复杂，这些状态包括服务器返回的数据、缓存数据、用户操作产生的数据等等，也包括一些 UI 的状态，比如某些元素是否被选中，是否显示加载动效，当前分页；<br>\n 当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏；<br>\n 对于一些简单的状态，确实可以通过 props 的传递或者 Provide 的方式来共享状态，但是对于复杂的状态管理来说，显然单纯通过传递和共享的方式是不足以解决问题的，比如兄弟组件如何共享数据呢？</p>\n</li>\n</ul>\n",
            "tags": [
                "前端开发",
                "VueRouter",
                "路由"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/14/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "url": "https://eucli.top/2023/04/14/axios%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/",
            "title": "axios二次封装",
            "date_published": "2023-04-14T12:58:34.000Z",
            "content_html": "<h1 id=\"前端-后端-数据库间的数据传输\"><a class=\"markdownIt-Anchor\" href=\"#前端-后端-数据库间的数据传输\">#</a> 前端 - 后端 - 数据库间的数据传输</h1>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%95%B0%E6%8D%AE%E4%BA%A4%E4%BA%92.png\" alt=\"(数据交互)\"></p>\n<h1 id=\"前端请求流程\"><a class=\"markdownIt-Anchor\" href=\"#前端请求流程\">#</a> 前端请求流程</h1>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E6%8B%BF%E5%88%B0%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3.png\" alt=\"(前端请求流程)\"></p>\n<h1 id=\"不进行封装直接使用-axios-一般有两种方式\"><a class=\"markdownIt-Anchor\" href=\"#不进行封装直接使用-axios-一般有两种方式\">#</a> 不进行封装直接使用 axios 一般有两种方式：</h1>\n<h2 id=\"1-axiosget-axiospost\"><a class=\"markdownIt-Anchor\" href=\"#1-axiosget-axiospost\">#</a> 1.  <code>axios.get()</code> 、 <code>axios.post()</code></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;url?参数1=值&amp;参数2=值&quot;</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios.<span class=\"title function_\">post</span>(<span class=\"string\">&#x27;url&#x27;</span>,&#123;</span><br><span class=\"line\">  参数<span class=\"number\">1</span>:值，</span><br><span class=\"line\">  参数<span class=\"number\">2</span>:值</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-axios\"><a class=\"markdownIt-Anchor\" href=\"#2-axios\">#</a> 2.  <code>axios(&#123;&#125;)</code></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">axios</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;请求的路径&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&quot;请求的方式，默认是get&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;&#125;, <span class=\"comment\">//get请求方式：前端给后端传递的数据</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;&#125;, <span class=\"comment\">//post请求方式：前端给后端传递的数据</span></span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;&#125;, <span class=\"comment\">//自定义请求头</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>, <span class=\"comment\">//如果请求超过timeout的值，请求会中断</span></span><br><span class=\"line\">  <span class=\"attr\">responseType</span>: <span class=\"string\">&quot;默认是json&quot;</span>, <span class=\"comment\">// 表示浏览器将要响应的数据类型</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-实际开发情况下的网络请求\"><a class=\"markdownIt-Anchor\" href=\"#2-实际开发情况下的网络请求\">#</a> 2. 实际开发情况下的网络请求</h1>\n<h1 id=\"实际开发中前端请求接口会出现跨域\"><a class=\"markdownIt-Anchor\" href=\"#实际开发中前端请求接口会出现跨域\">#</a> 实际开发中，前端请求接口会出现跨域</h1>\n<p>控制台打印 <code>CORS   &quot;NO 'Access-Control-Allow-Origin' ……&quot;</code></p>\n<h2 id=\"解决跨域前端解决-设置代理\"><a class=\"markdownIt-Anchor\" href=\"#解决跨域前端解决-设置代理\">#</a> 解决跨域：前端解决 ——&gt; 设置代理</h2>\n<p>vue 项目，在  <code>vue.config.js</code>  中配置  <code>devServer</code> <br>\n 配置参考：<a href=\"https://cli.vuejs.org/zh/config\">https://cli.vuejs.org/zh/config</a><br>\n 说明：如果你的前端应用和后端 API 服务器没有运行在同一个主机上，你需要在 <code>开发环境下</code> 将 API 请求代理到 API 服务器<br>\n具体配置，在  <code>vue.config.js</code>  文件中加入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">devServer</span>: &#123;</span><br><span class=\"line\">  <span class=\"attr\">proxy</span>: <span class=\"string\">&quot;http://localhost:4000&quot;</span>; <span class=\"comment\">//后端API服务器地址</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>代理之后  <code>axios</code>  请求的时候就不用写地址全拼了，直接写代理地址后面的就行</li>\n</ul>\n<h1 id=\"主要的文件\"><a class=\"markdownIt-Anchor\" href=\"#主要的文件\">#</a> 主要的文件</h1>\n<ul>\n<li><code>src/utils/request.js</code>  `：用于二次封装 axios</li>\n<li><code>src/api</code>  ：用于统一管理接口</li>\n<li><code>src/.env.development</code>  ：开发环境</li>\n<li><code>src/.env.production</code>  ：生产环境</li>\n<li><code>vite.config.js</code> ：配置代理</li>\n</ul>\n<h2 id=\"前端请求接口的封装axios-二次封装\"><a class=\"markdownIt-Anchor\" href=\"#前端请求接口的封装axios-二次封装\">#</a> 前端请求接口的封装 (axios 二次封装)</h2>\n<p>在  <code>src/utils/request.js:</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**1.引入axios */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> axios <span class=\"keyword\">from</span> <span class=\"string\">&#x27;axios&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**2.创建axios实例 */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> instance = axios.<span class=\"title function_\">create</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"string\">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">1000</span>,</span><br><span class=\"line\">  <span class=\"attr\">headers</span>: &#123;<span class=\"string\">&#x27;X-Custom-Header&#x27;</span>: <span class=\"string\">&#x27;foobar&#x27;</span>&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**3.请求拦截器 */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建请求拦截  前端给后端的东西(没有到后端)</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">config</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**在发送请求之前做些什么==&gt; 判断用户登录状态 */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**4.响应拦截器 */</span></span><br><span class=\"line\"><span class=\"comment\">// 创建响应拦截  后端给前端的东西</span></span><br><span class=\"line\">instance.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 处理自己的业务逻辑，比如判断 token 是否过期等等 request</span></span><br><span class=\"line\">    <span class=\"comment\">// 代码块</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(message);</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> instance;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"api-接口统一管理\"><a class=\"markdownIt-Anchor\" href=\"#api-接口统一管理\">#</a> api 接口统一管理</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/request&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询课程接口</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> courseSearch = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>:<span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">    data <span class=\"comment\">//因为不同的页面对参数配置的值的需求不一样，所以作为形参让用户自己传过来 get请求是params，post请求是data</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用请求\"><a class=\"markdownIt-Anchor\" href=\"#使用请求\">#</a> 使用请求</h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//某个需要用到“查询课程接口”的vue文件</span></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;courseSearch&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api/course.js&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">……</span><br><span class=\"line\"><span class=\"title function_\">courseSearch</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//传入需求的参数的值</span></span><br><span class=\"line\">  <span class=\"attr\">pageNum</span>:<span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">pageSize</span>:<span class=\"number\">10</span></span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">……</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "axios二次封装"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/12/TypeScript%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/",
            "url": "https://eucli.top/2023/04/12/TypeScript%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/",
            "title": "TypeScript中文文档",
            "date_published": "2023-04-12T10:32:23.000Z",
            "content_html": "<h1 id=\"中文手册\"><a class=\"markdownIt-Anchor\" href=\"#中文手册\">#</a> <strong>中文手册</strong></h1>\n<h1 id=\"基础类型\"><a class=\"markdownIt-Anchor\" href=\"#基础类型\">#</a> 基础类型</h1>\n<p>大多类型都和 js 一样，不一一列举了，就记录几个 ts 特有的：</p>\n<h2 id=\"数组-number\"><a class=\"markdownIt-Anchor\" href=\"#数组-number\">#</a> 数组 number</h2>\n<p>TypeScript 有两种方式可以定义数组。<br>\n第一种，可以在元素类型后面接上 <code>[]</code> ，表示由此类型元素组成的一个数组：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<p>第二种方式是使用数组泛型， <code>Array&lt;元素类型&gt;</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">list</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组-tuple\"><a class=\"markdownIt-Anchor\" href=\"#元组-tuple\">#</a> 元组 Tuple</h2>\n<p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为 <code>string</code>  和 <code>number</code>  类型的元组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个元组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br><span class=\"line\"><span class=\"comment\">// 初始化这个元组</span></span><br><span class=\"line\">x = [<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">10</span>]; <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"comment\">// 初始化不正确</span></span><br><span class=\"line\">x = [<span class=\"number\">10</span>, <span class=\"string\">&quot;hello&quot;</span>]; <span class=\"comment\">// Error</span></span><br></pre></td></tr></table></figure>\n<p>当访问一个已知索引的元素，会得到正确的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">0</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">1</span>].<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)); <span class=\"comment\">// Error, &#x27;number&#x27; does not have &#x27;substr&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>当访问一个越界的元素，会使用联合类型替代：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">3</span>] = <span class=\"string\">&quot;world&quot;</span>; <span class=\"comment\">// OK, 字符串可以赋值给(string | number)类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x[<span class=\"number\">5</span>].<span class=\"title function_\">toString</span>()); <span class=\"comment\">// OK, &#x27;string&#x27; 和 &#x27;number&#x27; 都有 toString</span></span><br><span class=\"line\"></span><br><span class=\"line\">x[<span class=\"number\">6</span>] = <span class=\"literal\">true</span>; <span class=\"comment\">// Error, 布尔不是(string | number)类型</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"枚举-enum\"><a class=\"markdownIt-Anchor\" href=\"#枚举-enum\">#</a> 枚举 enum</h2>\n<p><code>enum</code>  类型是对 JavaScript 标准数据类型的一个补充。 像 C# 等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Red</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Green</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Blue</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>;</span><br></pre></td></tr></table></figure>\n<p>默认情况下，从 <code>0</code>  开始为元素编号。 你也可以手动的指定成员的数值:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Red</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Green</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Blue</span> = <span class=\"number\">4</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"title class_\">Color</span> = <span class=\"title class_\">Color</span>.<span class=\"property\">Green</span>;</span><br></pre></td></tr></table></figure>\n<p>枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为 2，但是不确定它映射到 Color 里的哪个名字，我们可以查找相应的名字：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Color</span> &#123;</span><br><span class=\"line\">  <span class=\"title class_\">Red</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Green</span>,</span><br><span class=\"line\">  <span class=\"title class_\">Blue</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">colorName</span>: <span class=\"built_in\">string</span> = <span class=\"title class_\">Color</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">alert</span>(colorName); <span class=\"comment\">// 显示&#x27;Green&#x27;因为上面代码里它的值是2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"任意值-any\"><a class=\"markdownIt-Anchor\" href=\"#任意值-any\">#</a> 任意值 any</h2>\n<p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用 <code>any</code>  类型来标记这些变量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">notSure</span>: <span class=\"built_in\">any</span> = <span class=\"number\">4</span>;</span><br><span class=\"line\">notSure = <span class=\"string\">&quot;maybe a string instead&quot;</span>;</span><br><span class=\"line\">notSure = <span class=\"literal\">false</span>; <span class=\"comment\">// 变成了布尔值</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"空值-void\"><a class=\"markdownIt-Anchor\" href=\"#空值-void\">#</a> 空值 void</h2>\n<p>某种程度上来说， <code>void</code>  类型像是与 <code>any</code>  类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是 <code>void</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">warnUser</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">alert</span>(<span class=\"string\">&quot;This is my warning message&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>声明一个 <code>void</code>  类型的变量没有什么大用，因为你只能为它赋予 <code>undefined</code>  和 <code>null</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">unusable</span>: <span class=\"built_in\">void</span> = <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"null-和-undefined\"><a class=\"markdownIt-Anchor\" href=\"#null-和-undefined\">#</a> Null 和 Undefined</h2>\n<p>TypeScript 里， <code>undefined</code>  和 <code>null</code>  两者各自有自己的类型分别叫做 <code>undefined</code>  和 <code>null</code> 。 和 <code>void</code>  相似，它们的本身的类型用处不是很大。<br>\n默认情况下 <code>null</code>  和 <code>undefined</code>  是所有类型的子类型。 就是说你可以把 <code>null</code>  和 <code>undefined</code>  赋值给 <code>number</code>  类型的变量。<br>\n然而，当你指定了 <code>--strictNullChecks</code>  标记， <code>null</code>  和 <code>undefined</code>  只能赋值给 <code>void</code>  和它们各自。 这能避免很多常见的问题。 也许在某处你想传入一个 <code>string</code>  或 <code>null</code>  或 <code>undefined</code> ，你可以使用联合类型 <code>string | null | undefined</code> 。</p>\n<ul>\n<li>注意：我们鼓励尽可能地使用 <code>--strictNullChecks</code> ，但在本手册里我们假设这个标记是关闭的。</li>\n</ul>\n<h2 id=\"never\"><a class=\"markdownIt-Anchor\" href=\"#never\">#</a> Never</h2>\n<p><code>never</code>  类型表示的是那些永不存在的值的类型。 例如， <code>never</code>  类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never 类型，当它们被永不为真的类型保护所约束时。</p>\n<p><code>never</code>  类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是 <code>never</code>  的子类型或可以赋值给 <code>never</code>  类型（除了 <code>never</code>  本身之外）。 即使 <code>any</code>  也不可以赋值给 <code>never</code> 。</p>\n<p>下面是一些返回 <code>never</code>  类型的函数：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">error</span>(<span class=\"params\">message: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 推断的返回值类型为never</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fail</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">error</span>(<span class=\"string\">&quot;Something failed&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回never的函数必须存在无法达到的终点</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">infiniteLoop</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型断言\"><a class=\"markdownIt-Anchor\" href=\"#类型断言\">#</a> 类型断言</h2>\n<p>有时候你会遇到这样的情况，你会比 TypeScript 更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。</p>\n<p>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。<br>\n类型断言有两种形式。<br>\n其一是 “尖括号” 语法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>另一个为  <code>as </code> 语法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>: <span class=\"built_in\">any</span> = <span class=\"string\">&quot;this is a string&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>: <span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span>;</span><br></pre></td></tr></table></figure>\n<p>两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在 TypeScript 里使用 JSX 时，只有  <code>as</code>  语法断言是被允许的。</p>\n<h1 id=\"变量声明\"><a class=\"markdownIt-Anchor\" href=\"#变量声明\">#</a> 变量声明</h1>\n<h2 id=\"let-声明\"><a class=\"markdownIt-Anchor\" href=\"#let-声明\">#</a> let 声明</h2>\n<h3 id=\"块作用域\"><a class=\"markdownIt-Anchor\" href=\"#块作用域\">#</a> 块作用域</h3>\n<p>当用 <code>let</code>  声明一个变量，它使用的是词法作用域或块作用域。 不同于使用 <code>var</code>  声明的变量那样可以在包含它们的函数外访问，块作用域变量在包含它们的块或 <code>for</code>  循环之外是<strong>不能访问的</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">input: <span class=\"built_in\">boolean</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (input) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 仍然可以引用 &#x27;a&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = a + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Error: &#x27;b&#x27; 在这里不存在</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们定义了 2 个变量 <code>a</code>  和 <code>b</code> 。  <code>a</code>  的作用域是 <code>f</code>  函数体内，而 b 的作用域是 <code>if</code>  语句块里。</p>\n<p>在 <code>catch</code>  语句里声明的变量也具有同样的作用域规则:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">&quot;oh no!&quot;</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Oh well.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Error: &#x27;e&#x27; 在这里不存在</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(e);</span><br></pre></td></tr></table></figure>\n<p>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终 “存在” 于它们的作用域里，但在直到声明它的代码之前的区域都属于暂时性死区。<br>\n它只是用来说明我们不能在 <code>let</code>  语句之前访问它们，幸运的是 TypeScript 可以告诉我们这些信息:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a++; <span class=\"comment\">// illegal to use &#x27;a&#x27; before it&#x27;s declared;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a;</span><br></pre></td></tr></table></figure>\n<h2 id=\"const-声明\"><a class=\"markdownIt-Anchor\" href=\"#const-声明\">#</a> const 声明</h2>\n<p>const 声明是声明变量的另一种方式。它们与 let 声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let 相同的作用域规则，但是不能对它们重新赋值。</p>\n<h2 id=\"let-vs-const\"><a class=\"markdownIt-Anchor\" href=\"#let-vs-const\">#</a> let vs. const</h2>\n<p>现在我们有两种作用域相似的声明方式，我们自然会问到底应该使用哪个。 与大多数泛泛的问题一样，答案是：依情况而定。</p>\n<p>使用<strong>最小特权原则</strong>，所有变量除了你计划去修改的都应该使用  <code>const</code> 。 基本原则就是如果一个变量不需要对它写入，那么其它使用这些代码的人也不能够写入它们，并且要思考为什么会需要对这些变量重新赋值。 使用  <code>const</code>  也可以让我们更容易的推测数据的流动。</p>\n<p>另一方面，用户很喜欢  <code>let</code>  的简洁性。</p>\n<h2 id=\"解构\"><a class=\"markdownIt-Anchor\" href=\"#解构\">#</a> 解构</h2>\n<h3 id=\"解构数组\"><a class=\"markdownIt-Anchor\" href=\"#解构数组\">#</a> 解构数组</h3>\n<p>最简单的解构莫过于数组的解构赋值了：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> input = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second] = input;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first); <span class=\"comment\">//  1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second); <span class=\"comment\">//  2</span></span><br></pre></td></tr></table></figure>\n<p>这创建了 2 个命名变量  <code>first</code>  和  <code>second</code> 。 相当于使用了索引，但更为方便：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">first = input[<span class=\"number\">0</span>];</span><br><span class=\"line\">second = input[<span class=\"number\">1</span>];</span><br></pre></td></tr></table></figure>\n<p>作用于函数参数：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">[first, second]: [<span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>]</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(second);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(input);</span><br></pre></td></tr></table></figure>\n<p>你可以在数组里使用 <code>...</code>  语法创建剩余变量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(first); <span class=\"comment\">//  1</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(rest); <span class=\"comment\">//  [ 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"对象解构\"><a class=\"markdownIt-Anchor\" href=\"#对象解构\">#</a> 对象解构</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> o = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"string\">&quot;foo&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"string\">&quot;bar&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b &#125; = o;</span><br></pre></td></tr></table></figure>\n<p>这通过  <code>o.a</code>  and  <code>o.b</code>  创建了  <code>a</code>  和 <code>b</code>  。 注意，如果你不需要  <code>c</code>  你可以忽略它。</p>\n<p>就像数组解构，你可以用没有声明的赋值：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&#123; a, b &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;baz&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">101</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>注意，我们需要用括号将它括起来，因为 Javascript 通常会将以  <code>&#123;</code>  起始的语句解析为一个块。</p>\n<h3 id=\"函数声明\"><a class=\"markdownIt-Anchor\" href=\"#函数声明\">#</a> 函数声明</h3>\n<p>解构也能用于函数声明。 看以下简单的情况：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> C = &#123; <span class=\"attr\">a</span>: <span class=\"built_in\">string</span>; b?: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125;: C</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是，通常情况下更多的是指定默认值，解构默认值有些棘手。 首先，你需要在默认值之前设置其格式。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b &#125; = &#123; a: <span class=\"string\">&quot;&quot;</span>, b: <span class=\"number\">0</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(); <span class=\"comment\">// ok, default to &#123; a: &quot;&quot;, b: 0 &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>上面的代码是一个类型推断的例子，将在本手册后文介绍。</li>\n</ul>\n<p>其次，你需要知道在解构属性上给予一个默认或可选的属性用来替换主初始化列表。 要知道  <code>C </code> 的定义有一个  <code>b</code>  可选属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f</span>(<span class=\"params\">&#123; a, b = <span class=\"number\">0</span> &#125; = &#123; a: <span class=\"string\">&quot;&quot;</span> &#125;</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;yes&quot;</span> &#125;); <span class=\"comment\">// ok, 默认 b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(); <span class=\"comment\">// ok, 默认为&#123;a: &quot;&quot;&#125;，然后默认为b = 0</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>(&#123;&#125;); <span class=\"comment\">// error, 如果你提供一个参数，&#x27;a&#x27;是必需的</span></span><br></pre></td></tr></table></figure>\n<p>要小心使用解构。 从前面的例子可以看出，就算是最简单的解构表达式也是难以理解的。 尤其当存在深层嵌套解构的时候，就算这时没有堆叠在一起的重命名，默认值和类型注解，也是令人难以理解的。 解构表达式要尽量保持小而简单。 你自己也可以直接使用解构将会生成的赋值表达式。</p>\n<h2 id=\"展开\"><a class=\"markdownIt-Anchor\" href=\"#展开\">#</a> 展开</h2>\n<p>展开操作符正与解构相反。 它允许你将一个数组展开为另一个数组，或将一个对象展开为另一个对象。 例如：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> first = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> second = [<span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> bothPlus = [<span class=\"number\">0</span>, ...first, ...second, <span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<p>这会令 <code>bothPlus</code>  的值为 <code>[0, 1, 2, 3, 4, 5]</code> 。 展开操作创建了 <code>first</code>  和 <code>second</code>  的一份浅拷贝。 它们不会被展开操作所改变。<br>\n你还可以展开对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> defaults = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&quot;spicy&quot;</span>, <span class=\"attr\">price</span>: <span class=\"string\">&quot;$$&quot;</span>, <span class=\"attr\">ambiance</span>: <span class=\"string\">&quot;noisy&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> search = &#123; ...defaults, <span class=\"attr\">food</span>: <span class=\"string\">&quot;rich&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p><code>search</code>  的值为 <code>&#123; food: &quot;rich&quot;, price: &quot;$$&quot;, ambiance: &quot;noisy&quot; &#125;</code> 。 对象的展开比数组的展开要复杂的多。 像数组展开一样，它是从左至右进行处理，但结果仍为对象。<br>\n这就意味着<strong>出现在展开对象后面的属性会覆盖前面的属性</strong>。<br>\n因此，如果我们修改上面的例子，在结尾处进行展开的话:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> defaults = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&quot;spicy&quot;</span>, <span class=\"attr\">price</span>: <span class=\"string\">&quot;$$&quot;</span>, <span class=\"attr\">ambiance</span>: <span class=\"string\">&quot;noisy&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> search = &#123; <span class=\"attr\">food</span>: <span class=\"string\">&quot;rich&quot;</span>, ...defaults &#125;;</span><br></pre></td></tr></table></figure>\n<p>那么， <code>defaults</code>  里的 <code>food</code>  属性会把 <code>food: &quot;rich&quot;</code>  重写，在这里这并不是我们想要的结果。</p>\n<p>对象展开还有其它一些意想不到的限制。 首先，它仅包含对象 <strong>自身的可枚举属性</strong>。 大体上是说当你展开一个对象实例时，你会丢失其方法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> &#123;</span><br><span class=\"line\">  p = <span class=\"number\">12</span>;</span><br><span class=\"line\">  <span class=\"title function_\">m</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> clone = &#123; ...c &#125;;</span><br><span class=\"line\">clone.<span class=\"property\">p</span>; <span class=\"comment\">// ok</span></span><br><span class=\"line\">clone.<span class=\"title function_\">m</span>(); <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<p>其次，TypeScript 编译器不允许展开泛型函数上的类型参数。 这个特性会在 TypeScript 的未来版本中考虑实现。</p>\n<h1 id=\"接口interface\"><a class=\"markdownIt-Anchor\" href=\"#接口interface\">#</a> 接口 (interface)</h1>\n<p>TypeScript 的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做 “鸭式辨型法” 或 “结构性子类型化”。 在 TypeScript 里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</p>\n<h2 id=\"接口初探\"><a class=\"markdownIt-Anchor\" href=\"#接口初探\">#</a> 接口初探</h2>\n<p>下面通过一个简单示例来观察接口是如何工作的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printLabel</span>(<span class=\"params\">labelledObj: &#123; label: <span class=\"built_in\">string</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(labelledObj.<span class=\"property\">label</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123; <span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">printLabel</span>(myObj);</span><br></pre></td></tr></table></figure>\n<p>类型检查器会查看 <code>printLabel</code>  的调用。  <code>printLabel</code>  有一个参数，并要求这个对象参数有一个名为 l <code>abel</code>  类型为 <code>string</code>  的属性。 需要注意的是，我们传入的对象参数实际上会包含很多属性，但是编译器只会检查那些必需的属性是否存在，并且其类型是否匹配。 然而，有些时候 TypeScript 却并不会这么宽松，我们下面会稍做讲解。<br>\n下面我们重写上面的例子，这次使用接口来描述：必须包含一个 <code>label</code>  属性且类型为 <code>string</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LabelledValue</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">label</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printLabel</span>(<span class=\"params\">labelledObj: LabelledValue</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(labelledObj.<span class=\"property\">label</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myObj = &#123; <span class=\"attr\">size</span>: <span class=\"number\">10</span>, <span class=\"attr\">label</span>: <span class=\"string\">&quot;Size 10 Object&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"title function_\">printLabel</span>(myObj);</span><br></pre></td></tr></table></figure>\n<p><code>LabelledValue</code>  接口就好比一个名字，用来描述上面例子里的要求。 它代表了有一个 <code>label</code>  属性且类型为 <code>string</code>  的对象。 需要注意的是，我们在这里并不能像在其它语言里一样，说传给 <code>printLabel</code>  的对象实现了这个接口。我们只会去关注值的外形。 只要传入的对象满足上面提到的必要条件，那么它就是被允许的。</p>\n<p>还有一点值得提的是，类型检查器不会去检查属性的顺序，只要相应的属性存在并且类型也是对的就可以。</p>\n<h2 id=\"可选属性\"><a class=\"markdownIt-Anchor\" href=\"#可选属性\">#</a> 可选属性</h2>\n<p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用 “option bags” 模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p>\n<p>下面是应用了 “option bags” 的例子：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSquare</span>(<span class=\"params\">config: SquareConfig</span>): &#123; <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">area</span>: <span class=\"built_in\">number</span> &#125; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newSquare = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;white&quot;</span>, <span class=\"attr\">area</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">color</span>) &#123;</span><br><span class=\"line\">    newSquare.<span class=\"property\">color</span> = config.<span class=\"property\">color</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">width</span>) &#123;</span><br><span class=\"line\">    newSquare.<span class=\"property\">area</span> = config.<span class=\"property\">width</span> * config.<span class=\"property\">width</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newSquare;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个 <code>?</code>  符号。</p>\n<p>可选属性的好处之一是可以对可能存在的属性进行预定义，好处之二是可以捕获引用了不存在的属性时的错误。 比如，我们故意将 <code>createSquare</code>  里的 <code>color</code>  属性名拼错，就会得到一个错误提示：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SquareConfig</span> &#123;</span><br><span class=\"line\">  color?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  width?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">createSquare</span>(<span class=\"params\">config: SquareConfig</span>): &#123; <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">area</span>: <span class=\"built_in\">number</span> &#125; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newSquare = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;white&quot;</span>, <span class=\"attr\">area</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">color</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Error: Property &#x27;clor&#x27; does not exist on type &#x27;SquareConfig&#x27;</span></span><br><span class=\"line\">    newSquare.<span class=\"property\">color</span> = config.<span class=\"property\">clor</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.<span class=\"property\">width</span>) &#123;</span><br><span class=\"line\">    newSquare.<span class=\"property\">area</span> = config.<span class=\"property\">width</span> * config.<span class=\"property\">width</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newSquare;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mySquare = <span class=\"title function_\">createSquare</span>(&#123; <span class=\"attr\">color</span>: <span class=\"string\">&quot;black&quot;</span> &#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"只读属性\"><a class=\"markdownIt-Anchor\" href=\"#只读属性\">#</a> 只读属性</h2>\n<p>一些对象属性只能在对象刚刚创建的时候修改其值。 你可以在属性名前用 <code>readonly</code>  来指定只读属性:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你可以通过赋值一个对象字面量来构造一个 <code>Point</code> 。 赋值后， <code>x</code>  和 <code>y</code>  再也不能被改变了。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">Point</span> = &#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">20</span> &#125;;</span><br><span class=\"line\">p1.<span class=\"property\">x</span> = <span class=\"number\">5</span>; <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<p>TypeScript 具有 <code>ReadonlyArray&lt;T&gt;</code>  类型，它与 <code>Array&lt;T&gt;</code>  相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>[] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">ro</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = a;</span><br><span class=\"line\">ro[<span class=\"number\">0</span>] = <span class=\"number\">12</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"title function_\">push</span>(<span class=\"number\">5</span>); <span class=\"comment\">// error!</span></span><br><span class=\"line\">ro.<span class=\"property\">length</span> = <span class=\"number\">100</span>; <span class=\"comment\">// error!</span></span><br><span class=\"line\">a = ro; <span class=\"comment\">// error!</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的最后一行，可以看到就算把整个 <code>ReadonlyArray</code>  赋值到一个普通数组也是不可以的。 但是你可以用类型断言重写：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = ro <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>[];</span><br></pre></td></tr></table></figure>\n<h3 id=\"readonly-vs-const\"><a class=\"markdownIt-Anchor\" href=\"#readonly-vs-const\">#</a> readonly vs const</h3>\n<p>最简单判断该用 <code>readonly</code>  还是 <code>const</code>  的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 <code>const</code> ，若做为属性则使用 <code>readonly</code> 。</p>\n<h2 id=\"函数类型\"><a class=\"markdownIt-Anchor\" href=\"#函数类型\">#</a> 函数类型</h2>\n<p>接口能够描述 JavaScript 中对象拥有的各种各样的外形。 除了描述带有属性的普通对象外，接口也可以描述函数类型。</p>\n<p>为了使用接口表示函数类型，我们需要给接口定义一个调用签名。 它就像是一个只有<strong>参数列表</strong>和<strong>返回值类型</strong>的函数定义。参数列表里的每个参数都需要名字和类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">SearchFunc</span> &#123;</span><br><span class=\"line\">  (<span class=\"attr\">source</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">subString</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样定义后，我们可以像使用其它接口一样使用这个函数类型的接口。 下例展示了如何创建一个函数类型的变量，并将一个同类型的函数赋值给这个变量。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">mySearch</span>: <span class=\"title class_\">SearchFunc</span>;</span><br><span class=\"line\">mySearch = <span class=\"keyword\">function</span> (<span class=\"params\">source: <span class=\"built_in\">string</span>, subString: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> result = source.<span class=\"title function_\">search</span>(subString);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result &gt; -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"可索引的类型\"><a class=\"markdownIt-Anchor\" href=\"#可索引的类型\">#</a> 可索引的类型</h2>\n<p>与使用接口描述函数类型差不多，我们也可以描述那些能够 “通过索引得到” 的类型，比如  <code>a[10]</code>  或  <code>ageMap[&quot;daniel&quot;]</code> 。 可索引类型具有一个<strong>索引签名</strong>，它描述了对象索引的类型，还有相应的索引返回值类型。 让我们看一个例子：</p>\n<h2 id=\"类类型\"><a class=\"markdownIt-Anchor\" href=\"#类类型\">#</a> 类类型</h2>\n<h3 id=\"实现接口\"><a class=\"markdownIt-Anchor\" href=\"#实现接口\">#</a> 实现接口</h3>\n<h2 id=\"继承接口\"><a class=\"markdownIt-Anchor\" href=\"#继承接口\">#</a> 继承接口</h2>\n<h1 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h1>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<h1 id=\"枚举\"><a class=\"markdownIt-Anchor\" href=\"#枚举\">#</a> 枚举</h1>\n<h1 id=\"类型推论\"><a class=\"markdownIt-Anchor\" href=\"#类型推论\">#</a> 类型推论</h1>\n<h1 id=\"类型兼容性\"><a class=\"markdownIt-Anchor\" href=\"#类型兼容性\">#</a> 类型兼容性</h1>\n<h1 id=\"高级类型\"><a class=\"markdownIt-Anchor\" href=\"#高级类型\">#</a> 高级类型</h1>\n<h1 id=\"symbols\"><a class=\"markdownIt-Anchor\" href=\"#symbols\">#</a> Symbols</h1>\n<h1 id=\"iterators-和-generators\"><a class=\"markdownIt-Anchor\" href=\"#iterators-和-generators\">#</a> Iterators 和 Generators</h1>\n<h1 id=\"模块\"><a class=\"markdownIt-Anchor\" href=\"#模块\">#</a> 模块</h1>\n<h1 id=\"命名空间\"><a class=\"markdownIt-Anchor\" href=\"#命名空间\">#</a> 命名空间</h1>\n<h1 id=\"命名空间和模块\"><a class=\"markdownIt-Anchor\" href=\"#命名空间和模块\">#</a> 命名空间和模块</h1>\n<h1 id=\"模块解析\"><a class=\"markdownIt-Anchor\" href=\"#模块解析\">#</a> 模块解析</h1>\n<h1 id=\"声明合并\"><a class=\"markdownIt-Anchor\" href=\"#声明合并\">#</a> 声明合并</h1>\n<h1 id=\"书写dts-文件\"><a class=\"markdownIt-Anchor\" href=\"#书写dts-文件\">#</a> 书写.d.ts 文件</h1>\n<h1 id=\"jsx\"><a class=\"markdownIt-Anchor\" href=\"#jsx\">#</a> JSX</h1>\n<h1 id=\"decorators\"><a class=\"markdownIt-Anchor\" href=\"#decorators\">#</a> Decorators</h1>\n<h1 id=\"混入\"><a class=\"markdownIt-Anchor\" href=\"#混入\">#</a> 混入</h1>\n<h1 id=\"三斜线指令\"><a class=\"markdownIt-Anchor\" href=\"#三斜线指令\">#</a> 三斜线指令</h1>\n<h1 id=\"javascript-文件里的类型检查\"><a class=\"markdownIt-Anchor\" href=\"#javascript-文件里的类型检查\">#</a> JavaScript 文件里的类型检查</h1>\n<p>——————————————————————————————————————————————————————————————</p>\n<h1 id=\"如何书写声明文件\"><a class=\"markdownIt-Anchor\" href=\"#如何书写声明文件\">#</a> <strong>如何书写声明文件</strong></h1>\n<h1 id=\"简介\"><a class=\"markdownIt-Anchor\" href=\"#简介\">#</a> 简介</h1>\n<h1 id=\"结构\"><a class=\"markdownIt-Anchor\" href=\"#结构\">#</a> 结构</h1>\n<h1 id=\"规范\"><a class=\"markdownIt-Anchor\" href=\"#规范\">#</a> 规范</h1>\n<h1 id=\"举例\"><a class=\"markdownIt-Anchor\" href=\"#举例\">#</a> 举例</h1>\n<h1 id=\"深入\"><a class=\"markdownIt-Anchor\" href=\"#深入\">#</a> 深入</h1>\n<h1 id=\"发布\"><a class=\"markdownIt-Anchor\" href=\"#发布\">#</a> 发布</h1>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>——————————————————————————————————————————————————————————————</p>\n<h1 id=\"工程配置\"><a class=\"markdownIt-Anchor\" href=\"#工程配置\">#</a> <strong>工程配置</strong></h1>\n<h1 id=\"tsconfigjson\"><a class=\"markdownIt-Anchor\" href=\"#tsconfigjson\">#</a> tsconfig.json</h1>\n<h1 id=\"npm-包的类型\"><a class=\"markdownIt-Anchor\" href=\"#npm-包的类型\">#</a> NPM 包的类型</h1>\n<h1 id=\"编译选项\"><a class=\"markdownIt-Anchor\" href=\"#编译选项\">#</a> 编译选项</h1>\n<h1 id=\"在-msbuild-里使用编译选项\"><a class=\"markdownIt-Anchor\" href=\"#在-msbuild-里使用编译选项\">#</a> 在 MSBuild 里使用编译选项</h1>\n<h1 id=\"与其他构建工具整合\"><a class=\"markdownIt-Anchor\" href=\"#与其他构建工具整合\">#</a> 与其他构建工具整合</h1>\n<h1 id=\"使用-typescript-的每日构建版本\"><a class=\"markdownIt-Anchor\" href=\"#使用-typescript-的每日构建版本\">#</a> 使用 TypeScript 的每日构建版本</h1>\n",
            "tags": [
                "前端开发",
                "TypeScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/12/MATLAB/",
            "url": "https://eucli.top/2023/04/12/MATLAB/",
            "title": "MATLAB",
            "date_published": "2023-04-12T02:16:34.000Z",
            "content_html": "",
            "tags": [
                "数学建模",
                "MATLAB"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/09/%E5%B7%A5%E5%A4%A7%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/",
            "url": "https://eucli.top/2023/04/09/%E5%B7%A5%E5%A4%A7%E7%94%9F%E5%AD%98%E6%89%8B%E5%86%8C/",
            "title": "",
            "date_published": "2023-04-09T08:04:57.680Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://eucli.top/2023/04/04/%E4%BC%98%E9%9B%85%E7%9A%84%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/",
            "url": "https://eucli.top/2023/04/04/%E4%BC%98%E9%9B%85%E7%9A%84%E5%8D%95%E8%A1%8C%E4%BB%A3%E7%A0%81/",
            "title": "优雅的单行代码",
            "date_published": "2023-04-04T04:20:34.000Z",
            "content_html": "<h2 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> <strong>数组去重</strong></h2>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">uniqueArr</span> = (<span class=\"params\">arr</span>) =&gt; [...<span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>(arr)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">uniqueArr</span>([<span class=\"string\">&quot;前端&quot;</span>, <span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;html&quot;</span>, <span class=\"string\">&quot;js&quot;</span>, <span class=\"string\">&quot;css&quot;</span>, <span class=\"string\">&quot;html&quot;</span>]));</span><br><span class=\"line\"><span class=\"comment\">//[&#x27;前端&#x27;,&#x27;js&#x27;,&#x27;html&#x27;,&#x27;css&#x27;]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"从-url-获取参数并转为对象\"><a class=\"markdownIt-Anchor\" href=\"#从-url-获取参数并转为对象\">#</a> <strong>从 url 获取参数并转为对象</strong></h2>\n<p>网页路径经常是： <code>www.baidu.com?search=js&amp;xxx=kkk</code>  这种形式的，我们是经常需要取参数的，可以使用第三方的 qs 包实现，如果你只是要实现去参数，这一句代码就可以实现，不用再引入 qs 了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getParameters</span> = (<span class=\"params\">URL</span>) =&gt; <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(<span class=\"string\">`&#123;&quot;<span class=\"subst\">$&#123;decodeURL(URL.split(<span class=\"string\">&quot;?&quot;</span>)[<span class=\"number\">1</span>]).replace(/<span class=\"string\">&quot;/g, &#x27;\\\\&quot;</span><span class=\"string\">&#x27;).replace(/&amp;/g, &#x27;</span><span class=\"string\">&quot;,&quot;</span><span class=\"string\">&#x27;).replace(/=/g, &#x27;</span><span class=\"string\">&quot;:&quot;</span><span class=\"string\">&#x27;)&#125;&quot;&#125;`);</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\"></span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">getParameters(&quot;https://www.google.com.hk/search?q=js+md&amp;newwinodw=1&quot;);</span></span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\"><span class=\"string\">// &#123;q: &#x27;</span>js+md<span class=\"string\">&#x27;, newwinodw: &#x27;</span><span class=\"number\">1</span><span class=\"string\">&#x27;&#125;</span></span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查对象是否为空\"><a class=\"markdownIt-Anchor\" href=\"#检查对象是否为空\">#</a> <strong>检查对象是否为空</strong></h2>\n<p>检查对象是否为空，实际上并不那么简单，即使对象为空，每次检查对象是否等于 {} 也会返回 false。<br>\n幸运的是，下面的单行代码正是我们想要的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isEmpty</span> = (<span class=\"params\">obj</span>) =&gt; <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj).<span class=\"property\">length</span> === <span class=\"number\">0</span> &amp;&amp; obj.<span class=\"property\">constructor</span> === <span class=\"title class_\">Object</span>;</span><br><span class=\"line\"><span class=\"title function_\">isEmpty</span>(&#123;&#125;); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"title function_\">isEmpty</span>(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;not empty&quot;</span> &#125;); <span class=\"comment\">//false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"反转字符串\"><a class=\"markdownIt-Anchor\" href=\"#反转字符串\">#</a> <strong>反转字符串</strong></h2>\n<p>反转字符串可以使用 <code>split</code>  结合 <code>reverse</code>  和 <code>join</code>  方法轻松实现。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">reverse</span> = (<span class=\"params\">str</span>) =&gt; str.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;&quot;</span>).<span class=\"title function_\">reverse</span>().<span class=\"title function_\">join</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">reverse</span>(<span class=\"string\">&quot;this is reverse&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// esrever si siht</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"生成随机十六进制\"><a class=\"markdownIt-Anchor\" href=\"#生成随机十六进制\">#</a> <strong>生成随机十六进制</strong></h2>\n<p>生成随机数相信你能信手拈来，那随机生成十六进制，例如生成十六进制颜色值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">randomHexColor</span> = (<span class=\"params\"></span>) =&gt;</span><br><span class=\"line\">  <span class=\"string\">`#<span class=\"subst\">$&#123;<span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * <span class=\"number\">0xffffff</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    .toString(<span class=\"number\">16</span>)</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    .padEnd(<span class=\"number\">6</span>, <span class=\"string\">&quot;0&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">randomHexColor</span>());</span><br><span class=\"line\"><span class=\"comment\">// #a2ce5b</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查当前选项卡是否在后台\"><a class=\"markdownIt-Anchor\" href=\"#检查当前选项卡是否在后台\">#</a> <strong>检查当前选项卡是否在后台</strong></h2>\n<p>浏览器使用选项卡式浏览，任何网页都有可能在后台，此时对用户来说是没有在浏览的，知道怎么快速检测到，你的网页对用户是隐藏还是可见吗？</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isTabActive</span> = (<span class=\"params\"></span>) =&gt; !<span class=\"variable language_\">document</span>.<span class=\"property\">hidden</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isTabActive</span>();</span><br><span class=\"line\"><span class=\"comment\">// true|false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检测元素是否处于焦点\"><a class=\"markdownIt-Anchor\" href=\"#检测元素是否处于焦点\">#</a> <strong>检测元素是否处于焦点</strong></h2>\n<p><code>activeElement</code>  属性返回文档中当前获得焦点的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">elementIsInFocus</span> = (<span class=\"params\">el</span>) =&gt; el === <span class=\"variable language_\">document</span>.<span class=\"property\">activeElement</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">elementIsInFocus</span>(anyElement);</span><br><span class=\"line\"><span class=\"comment\">// 元素处于焦点返回true，反之返回false</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"检查设备类型\"><a class=\"markdownIt-Anchor\" href=\"#检查设备类型\">#</a> <strong>检查设备类型</strong></h2>\n<p>使用 <code>navigator.userAgent</code>  判断是移动设备还是电脑设备：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">judgeDeviceType</span> = (<span class=\"params\"></span>) =&gt; (<span class=\"regexp\">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini/i</span>.<span class=\"title function_\">test</span>(navigator.<span class=\"property\">userAgent</span>) ? <span class=\"string\">&quot;Mobile&quot;</span> : <span class=\"string\">&quot;PC&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">judgeDeviceType</span>(); <span class=\"comment\">// PC | Mobile</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"文字复制到剪贴板\"><a class=\"markdownIt-Anchor\" href=\"#文字复制到剪贴板\">#</a> <strong>文字复制到剪贴板</strong></h2>\n<p><code>Clipboard API </code> 它的所有操作都是异步的，返回  <code>Promise </code> 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">copyText</span> = <span class=\"keyword\">async</span> (<span class=\"params\">text</span>) =&gt; <span class=\"keyword\">await</span> navigator.<span class=\"property\">clipboard</span>.<span class=\"title function_\">writeText</span>(text);</span><br><span class=\"line\"><span class=\"title function_\">copyText</span>(<span class=\"string\">&quot;单行代码 前端世界&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"获取选定的文本\"><a class=\"markdownIt-Anchor\" href=\"#获取选定的文本\">#</a> <strong>获取选定的文本</strong></h2>\n<p>使用内置的  <code>getSelection </code> 获取用户选择的文本:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getSelectedText</span> = (<span class=\"params\"></span>) =&gt; <span class=\"variable language_\">window</span>.<span class=\"title function_\">getSelection</span>().<span class=\"title function_\">toString</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getSelectedText</span>();</span><br><span class=\"line\"><span class=\"comment\">// 返回选中的内容</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查询某天是否为工作日\"><a class=\"markdownIt-Anchor\" href=\"#查询某天是否为工作日\">#</a> <strong>查询某天是否为工作日</strong></h2>\n<p>我们自己写日历组件时经常会用到，判断某个日期是否为工作日；周一至周五为工作日:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">isWeekday</span> = (<span class=\"params\">date</span>) =&gt; date.<span class=\"title function_\">getDay</span>() % <span class=\"number\">6</span> !== <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">isWeekday</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"number\">2022</span>, <span class=\"number\">03</span>, <span class=\"number\">11</span>));</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"转换华氏摄氏\"><a class=\"markdownIt-Anchor\" href=\"#转换华氏摄氏\">#</a> <strong>转换华氏 / 摄氏</strong></h2>\n<p>处理温度有时会晕头转向。这两个函数则能帮助大家将华氏温度转换为摄氏温度，以及将摄氏温度转换为华氏温度。</p>\n<ul>\n<li>将华氏温度转换为摄氏温度</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fahrenheitToCelsius</span> = (<span class=\"params\">fahrenheit</span>) =&gt; ((fahrenheit - <span class=\"number\">32</span>) * <span class=\"number\">5</span>) / <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fahrenheitToCelsius</span>(<span class=\"number\">50</span>);</span><br><span class=\"line\"><span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>将摄氏温度转华氏温度</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">celsiusToFahrenheit</span> = (<span class=\"params\">celsius</span>) =&gt; (celsius * <span class=\"number\">9</span>) / <span class=\"number\">5</span> + <span class=\"number\">32</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">celsiusToFahrenheit</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"comment\">// 212</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"两日期之间相差的天数\"><a class=\"markdownIt-Anchor\" href=\"#两日期之间相差的天数\">#</a> <strong>两日期之间相差的天数</strong></h2>\n<p>日常开发中经常遇到需要显示剩余天数， 一般我们就需要计算两日期之间相差天数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">dayDiff</span> = (<span class=\"params\">date1, date2</span>) =&gt; <span class=\"title class_\">Math</span>.<span class=\"title function_\">ceil</span>(<span class=\"title class_\">Math</span>.<span class=\"title function_\">abs</span>(date1.<span class=\"title function_\">getTime</span>() - date2.<span class=\"title function_\">getTime</span>()) / <span class=\"number\">86400000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">dayDiff</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2021-10-21&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(<span class=\"string\">&quot;2022-02-12&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">// Result: 114</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>将 RGB 转换为十六进制</strong></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">rgbToHex</span> = (<span class=\"params\">r, g, b</span>) =&gt; <span class=\"string\">&quot;#&quot;</span> + ((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">24</span>) + (r &lt;&lt; <span class=\"number\">16</span>) + (g &lt;&lt; <span class=\"number\">8</span>) + b).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>).<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">rgbToHex</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>);</span><br><span class=\"line\"><span class=\"comment\">//  #ffffff</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"计算数组平均值\"><a class=\"markdownIt-Anchor\" href=\"#计算数组平均值\">#</a> <strong>计算数组平均值</strong></h2>\n<p>计算平均值的方式很多，计算的逻辑都是一样的， 但是实现方式各不相同，一行代码简单实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">average</span> = (<span class=\"params\">arr</span>) =&gt; arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b) / arr.<span class=\"property\">length</span>;</span><br><span class=\"line\"><span class=\"title function_\">average</span>([<span class=\"number\">1</span>, <span class=\"number\">9</span>, <span class=\"number\">18</span>, <span class=\"number\">36</span>]); <span class=\"comment\">//16</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "优雅",
                "JavaScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/04/04/Nginx/",
            "url": "https://eucli.top/2023/04/04/Nginx/",
            "title": "Nginx学习",
            "date_published": "2023-04-04T02:16:34.000Z",
            "content_html": "",
            "tags": [
                "反向代理",
                "服务器",
                "Nginx"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/28/TS%E7%99%BE%E7%BB%83%E9%A3%9E%E5%8D%87/",
            "url": "https://eucli.top/2023/03/28/TS%E7%99%BE%E7%BB%83%E9%A3%9E%E5%8D%87/",
            "title": "TS百练飞升",
            "date_published": "2023-03-28T10:20:34.000Z",
            "content_html": "<ul>\n<li>类型断言<br>\n通过类型断言这种方式可以告诉编译器：“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响。TypeScript 会假设你已经进行了必须的检查。<br>\n断言类型有两种形式。其一是’‘尖括号’' 语法：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;this is a string&#x27;</span>；</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>:<span class=\"built_in\">number</span> = (&lt;<span class=\"built_in\">string</span>&gt;someValue).<span class=\"property\">length</span>；</span><br></pre></td></tr></table></figure>\n<p>另一个为 as 语法：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">someValue</span>:<span class=\"built_in\">any</span> = <span class=\"string\">&#x27;this is a string&#x27;</span>；</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strLength</span>:<span class=\"built_in\">number</span> = (someValue <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>).<span class=\"property\">length</span>；</span><br></pre></td></tr></table></figure>\n<p>两种形式是等价的。至于使用哪个大多数情况是凭个人爱好；然而，当你在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。</p>\n<p>——————————————————————————————————————————————————————————————————————————————————————————————————————————————</p>\n<h1 id=\"认识-typescript\"><a class=\"markdownIt-Anchor\" href=\"#认识-typescript\">#</a> 认识 TypeScript</h1>\n<ul>\n<li>\n<p>JavaScript 的痛点：<br>\nJavaScript 在类型检测上依然是毫无进展，而，编程开发中我们有一个共识：错误出现的越早越好。能在写代码的时候发现错误，就不要在代码编译时再发现；能在代码编译期间发现错误，就不要在代码运行期间再发现（类型检测就可以很好的帮助我们做到这一点）；能在开发阶段发现错误，就不要在测试期间发现错误，能在测试期间发现错误，就不要在上线后发现错误</p>\n</li>\n<li>\n<p>认识 TypeScript<br>\nTypeScript 是拥有类型的 JavaScript 超集。JavaScript 所拥有的特性，TypeScript 全部都是支持的，并且它紧随 ECMAScript 的标准，所以 ES6、ES7、ES8 等新语法标准，它都是支持的。<br>\n并且在语言层面上，不仅仅增加了类型约束，而且包括一些语法的扩展，比如枚举类型（Enum）、元组类型（Tuple）等<br>\n并且 TypeScript 最终会被编译成 JavaScript 代码，所以你并不需要担心它的兼容性问题，在编译时也不需要借助于 Babel 这样的工具</p>\n</li>\n</ul>\n<h1 id=\"类型\"><a class=\"markdownIt-Anchor\" href=\"#类型\">#</a> 类型</h1>\n<h2 id=\"变量的声明\"><a class=\"markdownIt-Anchor\" href=\"#变量的声明\">#</a> 变量的声明</h2>\n<p>在 TypeScript 中定义变量需要指定 <strong>标识符 (变量)</strong> 的类型，声明的类型可以称之为 <code>类型注解</code> <br>\n<strong> <code>var/let/const 标识符: 数据类型 = 赋值</code> </strong><br>\n比如我们声明一个 message，完整的写法如下:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">message</span>: string = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>如果给 message 赋值其他类型的值，那么就会报错。<br>\n(注意：这里的 <code>string</code>  是小写的，和 <code>String</code>  是有区别的。 <code>string</code>  是 TypeScript 中定义的字符串类型， <code>String</code>  是 ECMAScript 中定义的一个类)</p>\n<h2 id=\"声明变量的关键字\"><a class=\"markdownIt-Anchor\" href=\"#声明变量的关键字\">#</a> 声明变量的关键字</h2>\n<p>可以使用 <code>var</code> 、 <code>let</code> 、 <code>const</code> , 但不推荐使用 <code>var</code>  来声明变量，主要原因和 ES6 升级后 <code>let</code>  和 <code>var</code>  的区别是一样的， <code>var</code>  是没有块级作用域的，会引起很多的问题。</p>\n<h2 id=\"变量的类型推导推断\"><a class=\"markdownIt-Anchor\" href=\"#变量的类型推导推断\">#</a> 变量的类型推导（推断）</h2>\n<p>在开发中，有时候为了方便起见我们并不会在声明每一个变量时都写上对应的数据类型，我们更希望可以通过 TypeScript 本身的特性帮助我们推断出对应的变量类型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> message = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>如果这个时候再给 message 赋值 <code>123</code> , 就会报错，这是因为在一个变量第一次赋值时，会根据后面的赋值内容的类型，来推断出变量的类型。上面的 message 就是因为后面赋值的是一个 <code>string</code>  类型，所以 <code>message</code>  虽然没有明确的说明，但是依然是一个 <code>string</code>  类型。</p>\n<h3 id=\"javascript-和-typescript-类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-和-typescript-类型\">#</a> JavaScript 和 TypeScript 类型</h3>\n<h4 id=\"javascript-类型-number类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-number类型\">#</a> JavaScript 类型 –  <code>number</code>  类型</h4>\n<p>数字类型是我们开发中经常使用的类型，TypeScript 和 JavaScript 一样，不区分整数类型（int）和浮点型（double），统一为 <code>number</code>  类型。</p>\n<h4 id=\"javascript-类型-boolean类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-boolean类型\">#</a> JavaScript 类型 –  <code>boolean</code>  类型</h4>\n<p><code>boolean</code>  类型只有两个取值：true 和 false，非常简单</p>\n<h4 id=\"javascript-类型-string类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-string类型\">#</a> JavaScript 类型 –  <code>string</code>  类型</h4>\n<p><code>string</code>  类型是字符串类型，可以使用单引号或者双引号表示。<br>\n同时也支持 ES6 的模板字符串 `` 来拼接变量和字符串</p>\n<h4 id=\"javascript-类型-array类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-array类型\">#</a> JavaScript 类型 –  <code>Array</code>  类型</h4>\n<p>数组类型的定义有两种方式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">names</span>: <span class=\"built_in\">string</span>[] = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>, <span class=\"string\">&quot;cab&quot;</span>]; <span class=\"comment\">//方式一，推荐</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">names2</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt; = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>, <span class=\"string\">&quot;nab&quot;</span>]; <span class=\"comment\">//方式二，开发中不推荐使用，jsx有冲突，&lt;div&gt;&lt;/div&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">names.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\">names2.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>第二种方式中的 <code>&lt;string&gt;</code>  是泛型， <code>const names2: Array&lt;string&gt; = [&quot;abc&quot;, &quot;cba&quot;, &quot;nab&quot;]</code> ; 其中：</p>\n<ul>\n<li><code>Array</code>  ==&gt; 是一个 interface</li>\n<li><code>&lt;string&gt;</code>  ==&gt; 具体的某种类型：字符串类型</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names.<span class=\"title function_\">push</span>(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript-类型-object类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-object类型\">#</a> JavaScript 类型 –  <code>Object</code>  类型</h4>\n<p><strong>(写对象类型不要写类型注解，让其类型推导即可)</strong></p>\n<h4 id=\"javascript-类型-symbol-类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-symbol-类型\">#</a> JavaScript 类型 – Symbol 类型</h4>\n<p>在 ES5 中，如果我们是不可以在对象中添加相同的属性名称的，比如下面的做法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">identity</span>: <span class=\"string\">&quot;程序员&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">identity</span>: <span class=\"string\">&quot;老师&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通常我们的做法是定义两个不同的属性名字：比如 identity1 和 identity2<br>\n 但是我们也可以通过 <code>symbol</code>  来定义相同的名称，因为 <code>Symbol</code>  函数返回的是不同的值：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">s1</span>: <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;title&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">s2</span>: <span class=\"built_in\">symbol</span> = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;title&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  [s1]: <span class=\"string\">&quot;程序员&quot;</span>,</span><br><span class=\"line\">  [s2]: <span class=\"string\">&quot;老师&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"javascript-类型-null和undefined类型\"><a class=\"markdownIt-Anchor\" href=\"#javascript-类型-null和undefined类型\">#</a> JavaScript 类型 –  <code>null</code>  和 <code>undefined</code>  类型</h4>\n<h4 id=\"typescript-类型-any类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-any类型\">#</a> TypeScript 类型 -  <code>any</code>  类型</h4>\n<p>在某些情况下，我们确实无法确定一个变量的类型，并且可能它会发生一些变化，这个时候我们可以使用 <code>any</code>  类型<br>\n <code>any</code>  类型有点像一种讨巧的 TypeScript 手段：我们可以对 <code>any</code>  类型的变量进行任何的操作，包括获取不存在的属性、方法<br>\n如果对于某些情况的处理过于繁琐不希望添加规定的类型注解，或者在引入一些第三方库时，缺失了类型注解，这个时候我们可以使用 <code>any</code></p>\n<h4 id=\"typescript-类型-unknown类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-unknown类型\">#</a> TypeScript 类型 -  <code>unknown</code>  类型</h4>\n<p><code>unknown</code>  是 TypeScript 中比较特殊的一种类型，它用于描述类型不确定的变量 (防止在别的地方乱用，区别于 <code>any</code> )<br>\n 什么意思呢？我们来看下面的场景：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bar</span>(<span class=\"params\"></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">result</span>: <span class=\"built_in\">unknown</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (flag) &#123;</span><br><span class=\"line\">  result = <span class=\"title function_\">foo</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  result = <span class=\"title function_\">bar</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> result === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result.<span class=\"property\">length</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"typescript-类型-void类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-void类型\">#</a> TypeScript 类型 -  <code>void</code>  类型</h4>\n<p><code>void</code>  通常用来指定一个函数是没有返回值的，那么它的返回值就是 <code>void</code>  类型：<br>\n我们可以将 <code>null</code>  和 <code>undefined</code>  赋值给 <code>void</code>  类型，也就是函数可以返回 <code>null</code>  或者 <code>undefined</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1 + num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个函数我们没有写任何类型，那么它默认返回值类型就是 <code>void</code> ，我们也可以显示的来指定返回值是 <code>void</code> :</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(num1 + num2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在开发中一般是不写的</p>\n<h4 id=\"typescript-类型-never类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-never类型\">#</a> TypeScript 类型 -  <code>never</code>  类型</h4>\n<p><code>never</code>  表示永远不会发生值的类型，比如一个函数：如果一个函数中是一个死循环或者抛出一个异常，那么这个函数会返回东西吗？不会，那么写 <code>void</code>  类型或者其他类型作为返回值类型都不合适，我们就可以使用 <code>never</code>  类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loopFun</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;123&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">loopErr</span>(<span class=\"params\"></span>): <span class=\"built_in\">never</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>never</code>  有什么样的应用场景呢？这里我们举一个例子，但是它用到了联合类型，后面我们会讲到：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">handleMessage</span>(<span class=\"params\">message: <span class=\"built_in\">number</span> | strintg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (<span class=\"keyword\">typeof</span> message) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;string&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;foo&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;number&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;bar&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">check</span>: <span class=\"built_in\">never</span> = message;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"typescript-类型-tuple类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-类型-tuple类型\">#</a> TypeScript 类型 -  <code>tuple</code>  类型</h4>\n<p><code>tuple</code>  是元组类型，很多语言中也有这种数据类型，比如 Python、Swift 等。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tInfo</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&quot;why&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">1.88</span>]; <span class=\"comment\">//tuple的书写方式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">item1</span>: tInfo[<span class=\"number\">0</span>]; <span class=\"comment\">//why 并且知道类型是string类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">item1</span>: tInfo[<span class=\"number\">1</span>]; <span class=\"comment\">//18 并且知道类型是number类型</span></span><br></pre></td></tr></table></figure>\n<p>那么 <code>tuple</code>  和数组有什么区别呢？</p>\n<ol>\n<li>首先，数组中通常建议存放相同类型的元素，不同类型的元素是不推荐放在数组中。（可以放在对象或者元组中）</li>\n<li>其次，元组中每个元素都有自己特性的类型，根据索引值获取到的值可以确定对应的类型</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">info</span>: (<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>)[] = [<span class=\"string\">&quot;why&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">1.88</span>]; <span class=\"comment\">//数组书写方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> item1 = info[<span class=\"number\">0</span>]; <span class=\"comment\">//不能确定类型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">tInfo</span>: [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&quot;why&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">1.88</span>]; <span class=\"comment\">//tuple的书写方式</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">item2</span>: tInfo[<span class=\"number\">0</span>]; <span class=\"comment\">//一定是string类型</span></span><br></pre></td></tr></table></figure>\n<p>Tuples 的应用场景：tuple 通常可以作为返回的值，在使用的时候会非常的方便</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> useState&lt;T&gt;(<span class=\"attr\">state</span>: T): [T, [<span class=\"function\">(<span class=\"params\">newState:T</span>) =&gt;</span> <span class=\"built_in\">void</span>] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentState = state</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">changeState</span> = (<span class=\"params\">newState:T</span>) =&gt; &#123;</span><br><span class=\"line\">    currentState = newState</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> [currentState,changeState]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [counter,setCounter] = <span class=\"title function_\">useState</span>(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"函数的参数类型与返回值类型\"><a class=\"markdownIt-Anchor\" href=\"#函数的参数类型与返回值类型\">#</a> 函数的参数类型与返回值类型</h4>\n<p>函数是 JavaScript 非常重要的组成部分，TypeScript 允许我们<strong>指定函数的参数和返回值的类型</strong>。</p>\n<ul>\n<li>\n<p>参数的类型注解：声明函数时，可以在每个参数后添加类型注解，以声明函数接受的参数类型<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/9\" alt=\"\"> K4X1D1YO5 (SR] 5LBLCF%6.png)</p>\n</li>\n<li>\n<p>返回值的类型注解，这个注解出现在函数列表的后面：</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和变量的类型注解一样，我们通常情况下不需要返回类型注解，因为 TypeScript 会根据 return 返回值推断函数的返回类型<br>\n某些第三方库处于方便理解，会明确指定返回类型，但是这个看个人喜好</p>\n<h3 id=\"匿名函数的参数\"><a class=\"markdownIt-Anchor\" href=\"#匿名函数的参数\">#</a> 匿名函数的参数</h3>\n<p>匿名函数与函数声明会有一些不同：当一个函数出现在 TypeScript 可以确定该函数会被如何调用的地方时，该函数的参数会自动指定类型。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> names = [<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>, <span class=\"string\">&quot;nba&quot;</span>];</span><br><span class=\"line\">names.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>我们并没有指定 <code>item</code>  的类型，但是 <code>item</code>  是一个 string 类型：这是因为 TypeScript 会根据 <code>forEach</code>  函数的类型以及数组的类型推断出 <code>item</code>  的类型。这个过程称之为<strong>上下文类型（contextual typing）</strong>，因为函数执行的上下文可以帮助确定参数和返回值的类型</p>\n<h3 id=\"对象类型\"><a class=\"markdownIt-Anchor\" href=\"#对象类型\">#</a> 对象类型</h3>\n<p>如果我们希望限定一个函数接受的参数是一个对象，我们可以使用对象类型:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printCoordinate</span>(<span class=\"params\">point: &#123; x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;x坐标&quot;</span>, point.<span class=\"property\">x</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;y坐标&quot;</span>, point.<span class=\"property\">y</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>其中 <code>point</code>  是形参，而 <code>&#123; x: number; y: number &#125;</code>  是它的类型注解<br>\n我们使用了一个对象来作为类型，在对象我们可以添加属性，并且告知 TypeScript 该属性需要是什么类型；每个属性的类型部分也是可选的，如果不指定，那么就是 any 类型</p>\n<h3 id=\"可选类型\"><a class=\"markdownIt-Anchor\" href=\"#可选类型\">#</a> 可选类型</h3>\n<p>对象类型也可以指定哪些属性是可选的，可以在属性的后面添加一个 <code>?：</code></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printCoordinate</span>(<span class=\"params\">point: &#123; x: <span class=\"built_in\">number</span>; y: <span class=\"built_in\">number</span>; z?: <span class=\"built_in\">number</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;x坐标&quot;</span>, point.<span class=\"property\">x</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;y坐标&quot;</span>, point.<span class=\"property\">y</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (point.<span class=\"property\">z</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;z坐标&quot;</span>, point.<span class=\"property\">z</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;);</span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span>, <span class=\"attr\">z</span>: <span class=\"number\">40</span> &#125;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这个时候 x 和 y 依然是有类型的，它们的类型是： <code>number | undefined</code></li>\n<li>可选类型需要在必传参数的后面</li>\n</ul>\n<h3 id=\"联合类型\"><a class=\"markdownIt-Anchor\" href=\"#联合类型\">#</a> 联合类型</h3>\n<p>TypeScript 的类型系统允许我们使用多种运算符，从现有类型中构建新类型<br>\n第一种组合类型的方法：<strong>联合类型（Union Type）</strong></p>\n<ul>\n<li>联合类型是由两个或者多个其他类型组成的类型</li>\n<li>表示可以是这些类型中的任何一个值</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你的id是&quot;</span>, id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printId</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"title function_\">printId</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用联合类型\"><a class=\"markdownIt-Anchor\" href=\"#使用联合类型\">#</a> 使用联合类型</h4>\n<p>传入给一个联合类型的值是非常简单的，只要保证是联合类型中的某一个类型的值即可<br>\n但是我们拿到这个值之后，我们应该如何使用它呢？因为它可能是任何一种类型，比如我们拿到的值可能是 string 或者 number，我们就不能对其调用 string 上的一些方法</p>\n<ul>\n<li>我们需要使用<strong>缩小（narrow）联合</strong>，TypeScript 可以根据我们缩小的代码结构，推断出更加具体的类型；</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你的id是&quot;</span>, id.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;你的id是&quot;</span>, id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型别名\"><a class=\"markdownIt-Anchor\" href=\"#类型别名\">#</a> 类型别名</h3>\n<p>在前面，我们通过在类型注解中编写 对象类型 和 联合类型，但是当我们想要多次在其他地方使用时，就要编写多次，这时候可以给对象类型起一个别名</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printPoint</span>(<span class=\"params\">point: Point</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(point.<span class=\"property\">x</span>, point.<span class=\"property\">y</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoordinate</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">10</span>, <span class=\"attr\">y</span>: <span class=\"number\">30</span> &#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">ID</span> = <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: ID</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;您的id：&quot;</span>, id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型断言as\"><a class=\"markdownIt-Anchor\" href=\"#类型断言as\">#</a> 类型断言 <code>as</code></h3>\n<p>有时候 TypeScript 无法获取具体的类型信息，这个我们需要使用<strong>类型断言（Type Assertions）</strong></p>\n<ul>\n<li>我们通过  <code>document.getElementById</code>  去获得一个 dom，TypeScript 只知道该函数会返回 HTMLElement ，但并不知道它<br>\n具体的类型，这是就可以使用类型断言</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myEl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;my_img&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLImageElement</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">myEl.<span class=\"property\">src</span> = <span class=\"string\">&quot;图片地址&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：TypeScript 只允许类型断言转换为 更具体 或者 不太具体 的类型版本，此规则可防止不可能的强制转换：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&quot;coderwhy&quot;</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>; <span class=\"comment\">//报错</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&quot;coderwhy&quot;</span> <span class=\"keyword\">as</span> <span class=\"built_in\">unknown</span> <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>; <span class=\"comment\">//这样就可以</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"非空类型断言\"><a class=\"markdownIt-Anchor\" href=\"#非空类型断言\">#</a> 非空类型断言  <code>!</code></h3>\n<p>当我们编写下面的代码时，在执行 ts 的编译阶段会报错，这是因为传入的 <code>message</code>  有可能是为 <code>undefined</code>  的，这个时候是不能执行方法的</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMessage</span>(<span class=\"params\">message?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message.<span class=\"title function_\">toUpperCase</span>()); <span class=\"comment\">//error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printMessage</span>(<span class=\"string\">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>但是，我们确定传入的参数是有值的，这个时候我们可以使用非空类型断言 <code>!</code> ，表示可以<strong>确定某个标识符是有值的</strong>，跳过 ts 在编译阶段对它的检测</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printMessage</span>(<span class=\"params\">message?: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(message!.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"可选链\"><a class=\"markdownIt-Anchor\" href=\"#可选链\">#</a> 可选链 <code>?.</code></h3>\n<p>可选链事实上并不是 TypeScript 独有的特性，它是 ES11（ES2020）中增加的特性</p>\n<ul>\n<li>可选链使用可选链操作符  <code>?.</code></li>\n<li>它的作用是当对象的属性不存在时，会短路，直接返回 undefined，如果存在，那么才会继续执行</li>\n</ul>\n<h2 id=\"和的作用\"><a class=\"markdownIt-Anchor\" href=\"#和的作用\">#</a>  <code>??</code>  和 <code>!!</code>  的作用</h2>\n<ul>\n<li><code>!!</code>  操作符：<br>\n将一个其他类型转换成 <code>boolean</code>  类型，类似于 <code>Boolean(变量)</code>  的方式</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> flag1 = <span class=\"title class_\">Boolean</span>(message);</span><br><span class=\"line\"><span class=\"keyword\">let</span> flag2 = !!message;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>??</code>  操作符：<br>\n<strong>空值合并操作符</strong>（ <code>??</code> ）是一个逻辑操作符，当操作符的左侧是 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。（类似于三目运算符）</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message = <span class=\"string\">&quot;321&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> result = message ?? <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result);</span><br></pre></td></tr></table></figure>\n<h3 id=\"字面量类型\"><a class=\"markdownIt-Anchor\" href=\"#字面量类型\">#</a> 字面量类型</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">message</span>: <span class=\"string\">&quot;hello&quot;</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">message = <span class=\"string\">&quot;你好&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>默认情况下这么做是没有太大的意义的，但是我们可以将多个类型联合在一起:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Alignment</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;right&quot;</span> | <span class=\"string\">&quot;center&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">changeAlign</span>(<span class=\"params\">align: Alignment</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;修改方向：&quot;</span>, align);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">changeAlign</span>();</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型缩小\"><a class=\"markdownIt-Anchor\" href=\"#类型缩小\">#</a> 类型缩小</h3>\n<ul>\n<li>什么是类型缩小：<br>\n可以通过类似于  <code>typeof padding === &quot;number&quot;</code>  的判断语句，来改变 TypeScript 的执行路径，在给定的执行路径中，缩小比声明时更小的类型，这个过程称之为 类型缩小，而我们编写的  <code>typeof padding === &quot;number&quot;</code>  可以称之为 <strong>类型保护（type guards）</strong></li>\n<li>常见的类型保护有如下几种：</li>\n</ul>\n<ol>\n<li>typeof</li>\n<li>平等缩小（比如 ===、!==）</li>\n<li>instanceof</li>\n<li>in</li>\n</ol>\n<h4 id=\"typeof\"><a class=\"markdownIt-Anchor\" href=\"#typeof\">#</a>  <code>typeof</code></h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">ID</span> = <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printId</span>(<span class=\"params\">id: ID</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> id === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(id.<span class=\"title function_\">toUpperCase</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(id);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"平等缩小\"><a class=\"markdownIt-Anchor\" href=\"#平等缩小\">#</a> 平等缩小</h4>\n<p>我们可以使用 Switch 或者相等的一些运算符来表达相等性（比如 <code>===</code> ,  <code>!==</code> ,  <code>==</code> ,  <code>!=</code> ）：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Direction</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;right&quot;</span> | <span class=\"string\">&quot;center&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">turnDirection</span>(<span class=\"params\">direction: Direction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;left&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用left方法&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;right&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用right方法&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;center&quot;</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用center方法&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;调用默认方法&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"instanceof\"><a class=\"markdownIt-Anchor\" href=\"#instanceof\">#</a>  <code>instanceof</code></h4>\n<p>JavaScript 有一个运算符来检查一个值是否是另一个值的 “实例”：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printValue</span>(<span class=\"params\">date: <span class=\"built_in\">Date</span> | <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (date <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Date</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date.<span class=\"title function_\">toLocaleString</span>());</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(date);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"in\"><a class=\"markdownIt-Anchor\" href=\"#in\">#</a>  <code>in</code></h4>\n<p>Javascript 有一个运算符，用于确定对象是否具有带名称的属性： <code>in</code>  运算符。如果指定的属性在指定的对象或其原型链中，则 <code>in</code>  运算符返回 true；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fish</span> = &#123; <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = &#123; <span class=\"attr\">run</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">move</span>(<span class=\"params\">animal: Fish | Dog</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;swim&quot;</span> <span class=\"keyword\">in</span> animal) &#123;</span><br><span class=\"line\">    animal.<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    animal.<span class=\"title function_\">run</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"typescript-函数类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-函数类型\">#</a> TypeScript 函数类型</h3>\n<p>在 JavaScript 开发中，函数是重要的组成部分，并且函数可以作为一等公民（可以作为参数，也可以作为返回值进<br>\n行传递）。<br>\nTS 在使用函数的过程中，函数也可以有自己的类型</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calc</span>(<span class=\"params\">fn: CalcFunc</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">fn</span>(<span class=\"number\">20</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">calc</span>(sum);</span><br></pre></td></tr></table></figure>\n<h4 id=\"typescript-函数类型解析\"><a class=\"markdownIt-Anchor\" href=\"#typescript-函数类型解析\">#</a> TypeScript 函数类型解析</h4>\n<p>在上面的语法中  <code>(num1: number, num2: number) =&gt; void</code> ，代表的就是一个函数类型：</p>\n<ul>\n<li>接收两个参数的函数：num1 和 num2，并且都是 number 类型；</li>\n<li>并且这个函数是没有返回值的，所以是 void<br>\n 在某些语言中，可能参数名称 num1 和 num2 是可以省略，但是 TypeScript 是不可以的。</li>\n</ul>\n<h4 id=\"默认参数\"><a class=\"markdownIt-Anchor\" href=\"#默认参数\">#</a> 默认参数</h4>\n<p>从 ES6 开始，JavaScript 是支持默认参数的，TypeScript 也是支持默认参数的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">x: <span class=\"built_in\">number</span>, y: <span class=\"built_in\">number</span> = <span class=\"number\">6</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x, y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>这个时候 y 的类型其实是 undefined 和 number 类型的联合。</p>\n<h4 id=\"剩余参数\"><a class=\"markdownIt-Anchor\" href=\"#剩余参数\">#</a> 剩余参数</h4>\n<p>从 ES6 开始，JavaScript 也支持剩余参数，剩余参数语法允许我们将一个不定数量的参数放到一个数组中</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">...nums: <span class=\"built_in\">number</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> num <span class=\"keyword\">of</span> nums) &#123;</span><br><span class=\"line\">    total += num;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result1 = <span class=\"title function_\">sum</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> result2 = <span class=\"title function_\">sum</span>(<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">400</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(result2);</span><br></pre></td></tr></table></figure>\n<h3 id=\"typescript-枚举类型\"><a class=\"markdownIt-Anchor\" href=\"#typescript-枚举类型\">#</a> TypeScript 枚举类型</h3>\n<p>枚举类型是为数不多的 TypeScript 特性有的特性之一：</p>\n<ul>\n<li>枚举其实就是将一组可能出现的值，一个个列举出来，定义在一个类型中，这个类型就是枚举类型</li>\n<li>枚举允许开发者定义一组命名常量，常量可以是数字、字符串类型</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">turnDirection</span>(<span class=\"params\">direction: Direction</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (direction) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">LEFT</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向左边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">RIGHT</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向右边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">TOP</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向上边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"title class_\">Direction</span>.<span class=\"property\">BOTTOM</span>:</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;转向下边~&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"attr\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">const</span> <span class=\"attr\">myDirection</span>: <span class=\"built_in\">never</span> = direction;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举类型的值\"><a class=\"markdownIt-Anchor\" href=\"#枚举类型的值\">#</a> 枚举类型的值</h4>\n<p>枚举类型默认是有值的，比如上面的枚举，默认值是这样的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span> = <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span> = <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，我们也可以给枚举其他值，这个时候会从 100 进行递增：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span> = <span class=\"number\">100</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们也可以给他们赋值其他的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Direction</span> &#123;</span><br><span class=\"line\">  <span class=\"variable constant_\">LEFT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">RIGHT</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">TOP</span> = <span class=\"string\">&quot;TOP&quot;</span>,</span><br><span class=\"line\">  <span class=\"variable constant_\">BOTTOM</span> = <span class=\"string\">&quot;BOTTOM&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ts-中的-this\"><a class=\"markdownIt-Anchor\" href=\"#ts-中的-this\">#</a> TS 中的 this</h3>\n<h4 id=\"可推导的-this-类型\"><a class=\"markdownIt-Anchor\" href=\"#可推导的-this-类型\">#</a> 可推导的 this 类型</h4>\n<p><a href=\"https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA\">https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA</a></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> info = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">info.<span class=\"title function_\">sayHello</span>();</span><br></pre></td></tr></table></figure>\n<p>上面的代码是可以正常运行的，TypeScript 认为函数 sayHello 有一个对应的 this 的外部对象 info，所以在使用时，就会把 this 当做该对象</p>\n<h4 id=\"不确定的-this-类型\"><a class=\"markdownIt-Anchor\" href=\"#不确定的-this-类型\">#</a> 不确定的 this 类型</h4>\n<p>但是对于某些情况来说，我们并不知道 this 到底是什么:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> info = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  sayHello,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">info.<span class=\"title function_\">sayHello</span>();</span><br></pre></td></tr></table></figure>\n<p>这段代码运行会报错的：这里对于 sayHello 的调用来说，我们虽然将其放到了 info 中，通过 info 去调用，this 依然是指向 info 对象的；但是对于 TypeScript 编译器来说，这个代码是非常不安全的，因为我们也有可能直接调用函数，或者通过别的对象来调用函数</p>\n<h4 id=\"指定-this-的类型\"><a class=\"markdownIt-Anchor\" href=\"#指定-this-的类型\">#</a> 指定 this 的类型</h4>\n<p>这个时候，通常 TypeScript 会要求我们明确的指定 this 的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameType</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sayHello</span>(<span class=\"params\"><span class=\"variable language_\">this</span>: NameType</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数的重载\"><a class=\"markdownIt-Anchor\" href=\"#函数的重载\">#</a> 函数的重载</h1>\n<p>在 TypeScript 中，如果我们编写了一个 add 函数，希望可以对字符串和数字类型进行相加，应该如何编写呢？<br>\n我们可能会这样来编写，但是其实是错误的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>, a2: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a1 + a2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 TypeScript 中，我们可以去编写不同的重载签名（overload signatures）来表示函数可以以不同的方式进行调用<br>\n一般是编写两个或者以上的重载签名，再去编写一个通用的函数以及实现</p>\n<h2 id=\"sum-函数的重载\"><a class=\"markdownIt-Anchor\" href=\"#sum-函数的重载\">#</a> sum 函数的重载</h2>\n<p>我们对 add 函数进行重构，在我们调用 add 的时候，它会根据我们传入的参数类型来决定执行函数体时，到底执行哪一个函数的重载签名</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">number</span>, a2: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">string</span>, a2: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a1: <span class=\"built_in\">any</span>, a2: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a1 + a2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"number\">20</span>, <span class=\"number\">30</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">sum</span>(<span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"联合类型和重载\"><a class=\"markdownIt-Anchor\" href=\"#联合类型和重载\">#</a> 联合类型和重载</h2>\n<p>我们现在有一个需求：定义一个函数，可以传入字符串或者数组，获取它们的长度<br>\n这里有两种实现方案：</p>\n<ol>\n<li>使用联合类型来实现</li>\n<li>实现函数重载来实现</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">string</span> | <span class=\"built_in\">any</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">any</span>[]</span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getLength</span>(<span class=\"params\">a: <span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在开发中一般使用联合类型</p>\n<h1 id=\"类\"><a class=\"markdownIt-Anchor\" href=\"#类\">#</a> 类</h1>\n<h2 id=\"类的定义\"><a class=\"markdownIt-Anchor\" href=\"#类的定义\">#</a> 类的定义</h2>\n<p>定义一个<strong> Person</strong> 类：</p>\n<ul>\n<li>如果类型没有声明，那么它们默认是 any 的</li>\n<li>也可以给属性设置初始化值</li>\n<li>类可以有自己的构造函数 constructor，当我们通过 new 关键字创建一个实例时，构造函数会被调用</li>\n<li>构造函数不需要返回任何值，默认返回当前创建出来的实例</li>\n<li>如果我们在 strictPropertyInitialization 模式下确实不希望给属性初始化，可以使用  <code>name!: string</code>  语法</li>\n<li>类中可以有自己的函数，定义的函数称之为方法</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">eating</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;eating&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的继承\"><a class=\"markdownIt-Anchor\" href=\"#类的继承\">#</a> 类的继承</h2>\n<p>面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提。<br>\n我们使用 extends 关键字来实现继承，子类中使用 super 来访问父类<br>\n在构造函数中，我们可以通过 super 来调用父类的构造方法，对父类中的属性进行初始化</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sno</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span>, sno: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name, age);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">sno</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">studying</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;studying&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的成员修饰符\"><a class=\"markdownIt-Anchor\" href=\"#类的成员修饰符\">#</a> 类的成员修饰符</h2>\n<p>在 TypeScript 中，类的属性和方法支持三种修饰符：  <code>public</code> 、 <code>private</code> 、 <code>protected</code></p>\n<ul>\n<li><code>public</code> : 修饰的是在任何地方可见、公有的属性或方法，默认编写的属性就是 public 的</li>\n<li><code>private</code> : 修饰的是仅在同一类中可见、私有的属性或方法</li>\n<li><code>protected</code> : 修饰的是仅在类自身及子类中可见、受保护的属性或方法</li>\n</ul>\n<p><code>public</code>  是默认的修饰符，也是可以直接访问的，我们这里来演示一下 <code>protected</code>  和 <code>private</code> :</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"只读属性-readonly\"><a class=\"markdownIt-Anchor\" href=\"#只读属性-readonly\">#</a> 只读属性 readonly</h2>\n<p>如果有一个属性我们不希望外界可以任意的修改，只希望确定值后直接使用，那么可以使用 <code>readonly</code> ：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">name</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getterssetters\"><a class=\"markdownIt-Anchor\" href=\"#getterssetters\">#</a> getters/setters</h2>\n<p>在前面一些私有属性我们是不能直接访问的，或者某些属性我们想要监听它的 ** 获取 (getter)<strong> 和</strong>设置 (setter)** 的过程，这个时候我们可以使用存取器。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">newName</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = newName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>(<span class=\"params\">newName</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\">p.<span class=\"property\">name</span> = <span class=\"string\">&quot;coderwhy&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"静态成员\"><a class=\"markdownIt-Anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<p>前面我们在类中定义的成员和方法都属于对象级别的，在开发中，我们有时候也需要定义类级别的成员和方法：通过关键字 <code>static</code>  来定义:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">time</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;20:00&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">attendClass</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;去上课&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title class_\">Student</span>.<span class=\"property\">time</span>);</span><br><span class=\"line\"><span class=\"title class_\">Student</span>.<span class=\"title function_\">attendClass</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"抽象类-abstract\"><a class=\"markdownIt-Anchor\" href=\"#抽象类-abstract\">#</a> 抽象类 abstract</h2>\n<p>众<sub>所</sub>周<sub>知</sub>，继承是多态使用的前提：</p>\n<ul>\n<li>所以在定义很多通用的调用接口时，我们通常会让调用者传入父类，通过多态来实现更加灵活的调用方式。</li>\n<li>但是，父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法，，我们可以定义为抽象方法。<br>\n什么是抽象方法？在 TypeScript 中没有具体实现的方法 (没有方法体)，就是抽象方法。</li>\n<li>抽象方法，必须存在于抽象类中</li>\n<li>抽象类是使用 abstract 声明的类</li>\n</ul>\n<p>抽象类有如下的特点：</p>\n<ul>\n<li>抽象类是不能被实例的话（也就是不能通过 new 创建）</li>\n<li>抽象方法必须被子类实现，否则该类必须是一个抽象类</li>\n</ul>\n<h3 id=\"抽象类演练\"><a class=\"markdownIt-Anchor\" href=\"#抽象类演练\">#</a> 抽象类演练</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">getArea</span>(): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">r</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">r: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> = r;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getArea</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">r</span> * <span class=\"number\">3.14</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Rectangle</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">width</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">height</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">width: <span class=\"built_in\">number</span>, height: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">width</span> = width;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">height</span> = height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getArea</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">width</span> * <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> circle = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> rectangle = <span class=\"keyword\">new</span> <span class=\"title class_\">Rectangle</span>(<span class=\"number\">20</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">calcArea</span>(<span class=\"params\">shape: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(shape.<span class=\"title function_\">getArea</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">calcArea</span>(circle);</span><br><span class=\"line\"><span class=\"title function_\">calcArea</span>(rectangle);</span><br></pre></td></tr></table></figure>\n<h2 id=\"类的类型\"><a class=\"markdownIt-Anchor\" href=\"#类的类型\">#</a> 类的类型</h2>\n<p>类本身也是可以作为一种数据类型的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">Person</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;why&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p2</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;kobe&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span> + <span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"接口的声明\"><a class=\"markdownIt-Anchor\" href=\"#接口的声明\">#</a> 接口的声明</h1>\n<p>在前面我们通过 type 可以用来声明一个对象类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对象的另外一种声明方式就是通过接口来声明：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"attr\">y</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的可选属性\"><a class=\"markdownIt-Anchor\" href=\"#接口的可选属性\">#</a> 接口的可选属性</h2>\n<p>接口中我们也可以定义可选属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  age?:<span class=\"built_in\">number</span></span><br><span class=\"line\">  friend?:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">friend</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;kobe&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">name</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(person.<span class=\"property\">friend</span>?.<span class=\"property\">name</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的只读属性\"><a class=\"markdownIt-Anchor\" href=\"#接口的只读属性\">#</a> 接口的只读属性</h2>\n<p>接口中也可以定义只读属性，这样就意味着我们再初始化之后，这个值是不可以被修改的:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  age?:<span class=\"built_in\">number</span></span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> friend?:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">person</span>:<span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">friend</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"string\">&quot;kobe&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.<span class=\"property\">name</span> = <span class=\"string\">&quot;coderwhy&quot;</span>  <span class=\"comment\">//不可以设置</span></span><br><span class=\"line\">person.<span class=\"property\">friend</span> = &#123;&#125;  <span class=\"comment\">//不可以设置</span></span><br><span class=\"line\"><span class=\"comment\">//下面的代码是可以执行的</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(person.<span class=\"property\">friend</span>) &#123;</span><br><span class=\"line\">  person.<span class=\"property\">friend</span>.<span class=\"property\">name</span> = ‘<span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的索引类型\"><a class=\"markdownIt-Anchor\" href=\"#接口的索引类型\">#</a> 接口的索引类型</h2>\n<p>前面我们使用 interface 来定义对象类型，这个时候其中的属性名、类型、方法都是确定的，但是有时候我们会遇到类似下面的对象：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">FrontLanguage</span> = &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>:<span class=\"built_in\">number</span>]:<span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">frontend</span>:<span class=\"title class_\">FrontLanguage</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>:<span class=\"string\">&quot;HTML&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>:<span class=\"string\">&quot;CSS&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">3</span>:<span class=\"string\">&quot;JavaScript&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">LanguageBirth</span> = &#123;</span><br><span class=\"line\">  [<span class=\"attr\">name</span>:<span class=\"built_in\">string</span>]:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"title class_\">Java</span>:<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">lanuage</span>:<span class=\"title class_\">LanguageBirth</span> = &#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;Java&quot;</span>:<span class=\"number\">1995</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;JavaScript&quot;</span>:<span class=\"number\">1996</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;C&quot;</span>:<span class=\"number\">1972</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的函数类型\"><a class=\"markdownIt-Anchor\" href=\"#接口的函数类型\">#</a> 接口的函数类型</h2>\n<p>前面我们都是通过 interface 来定义对象中普通的属性和方法的，实际上它也可以用来定义函数类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CalcFunc</span> = &#123;</span><br><span class=\"line\">  (<span class=\"attr\">num1</span>:<span class=\"built_in\">number</span>,<span class=\"attr\">num2</span>:<span class=\"built_in\">number</span>):<span class=\"built_in\">number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">add</span>:<span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">sub</span>:<span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1,num2</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 - num2</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当然，除非特别的情况，还是推荐大家使用类型别名来定义函数：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">CalcFunc</span> = <span class=\"function\">(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">number</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口继承\"><a class=\"markdownIt-Anchor\" href=\"#接口继承\">#</a> 接口继承</h2>\n<p>接口和类一样是可以进行继承的，也是使用 extends 关键字，并且接口是支持多继承的（类不支持多继承）</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>, <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">sno</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">stu</span>: <span class=\"title class_\">Student</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">sno</span>: <span class=\"number\">110</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"接口的实现\"><a class=\"markdownIt-Anchor\" href=\"#接口的实现\">#</a> 接口的实现</h2>\n<p>接口定义后，也是可以被类实现的：<br>\n如果被一个类实现，那么在之后需要传入接口的地方，都可以将这个类传入，这就是面向接口开发</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ISwim</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">swimming</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IRun</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ISwim</span>, <span class=\"title class_\">IRun</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">swimming</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;swimming&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">running</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;running&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">swim</span>(<span class=\"params\">swimmer: ISwim</span>) &#123;</span><br><span class=\"line\">  swimmer.<span class=\"title function_\">swimming</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"title function_\">swim</span>(p);</span><br></pre></td></tr></table></figure>\n<h2 id=\"交叉类型\"><a class=\"markdownIt-Anchor\" href=\"#交叉类型\">#</a> 交叉类型</h2>\n<p>前面我们学习了联合类型，表示多个类型中的一个即可：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Alignment</span> = <span class=\"string\">&quot;left&quot;</span> | <span class=\"string\">&quot;right&quot;</span> | <span class=\"string\">&quot;center&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>还有一种类型合并，称之为<strong>交叉类型</strong></p>\n<ul>\n<li>交叉类型表示需要满足多个条件</li>\n<li>交叉类型使用 <code>&amp;</code>  符号<br>\n我们看下面的例子：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span> = <span class=\"built_in\">number</span> &amp; <span class=\"built_in\">string</span>;</span><br></pre></td></tr></table></figure>\n<p>这表示的含义是是 number 和 string 要同时满足，但其实并没有一个值同时满足是一个 number 又是一个 string，所以 MyType 其实是一个 never 类型</p>\n<h3 id=\"交叉类型的应用\"><a class=\"markdownIt-Anchor\" href=\"#交叉类型的应用\">#</a> 交叉类型的应用</h3>\n<p>在开发中，我们进行交叉时，通常是对对象类型进行交叉的：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Colorful</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IRun</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"title class_\">Colorful</span> &amp; <span class=\"title class_\">IRun</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">obj</span>: <span class=\"title class_\">NewType</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">running</span>: <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"type和interface\"><a class=\"markdownIt-Anchor\" href=\"#type和interface\">#</a>  <code>type</code>  和 <code>interface</code></h1>\n<ul>\n<li>共同点：</li>\n</ul>\n<ol>\n<li>都可以定义一个对象或函数</li>\n<li>都允许继承（extends）</li>\n</ol>\n<ul>\n<li>不同点：</li>\n</ul>\n<ol>\n<li>type 可以声明基本类型、联合类型、交叉类型、元组，interface 不行</li>\n<li>interface 可以合并重复声明，type 不行</li>\n</ol>\n<ul>\n<li>\n<p>小结<br>\n interface 是接口，用于描述一个对象。<br>\ntype 是类型别名，用于给各种类型定义别名，让 TS 写起来更简洁、清晰。</p>\n</li>\n<li>\n<p>平时开发中，如果要定义一个非对象类型，或者需要使用组合或者交叉类型的时候，用 type；如果要定义一个对象类型，或者要用类的 extends 或 implements 时，用 interface。<br>\n前端给后端返回数据，后端给前端返回的数据时，一般用 interface 对数据类型进行约束</p>\n</li>\n</ul>\n<h3 id=\"字面量赋值\"><a class=\"markdownIt-Anchor\" href=\"#字面量赋值\">#</a> 字面量赋值</h3>\n<p>我们来看下面的代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p</span>:<span class=\"title class_\">IPerson</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span> <span class=\"comment\">//报错：&#x27;age&#x27; does not exist</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是因为 TypeScript 在字面量直接赋值的过程中，为了进行类型推导会进行严格的类型限制。<br>\n但是之后如果我们是将一个 变量标识符 赋值给其他的变量时，会进行 freshness 擦除操作：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IPerson</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>:<span class=\"string\">&quot;why&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>:<span class=\"number\">18</span></span><br><span class=\"line\">  <span class=\"attr\">eating</span>:<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p</span>:<span class=\"title class_\">IPerson</span> = obj</span><br></pre></td></tr></table></figure>\n<h1 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<p>泛型 ==&gt; 形参</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//函数泛型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> fun&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fun&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&quot;你好&quot;</span>);</span><br><span class=\"line\">fun&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<p>这块代码中，可以将 <code>T</code>  看做形参， <code>string</code>  和 <code>number</code>  看做实参</p>\n<hr>\n<p>软件工程的主要目的是构建不仅仅明确和一致的 API，还要让你的代码具有很强的可重用性：比如我们可以通过函数来封装一些 API，通过传入不同的函数参数，让函数帮助我们完成不同的操作；但是对于参数的类型是否也可以参数化呢？</p>\n<p>什么是类型的参数化？</p>\n<ul>\n<li>我们来提一个需求：封装一个函数，传入一个参数，并且返回这个参数</li>\n<li>如果我们是 TypeScript 的思维方式，要考虑这个参数和返回值的类型需要一致：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">arg: <span class=\"built_in\">number</span></span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>上面的代码虽然实现了，但是不适用于其他类型，比如 string、boolean、Person 等类型：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">foo</span>(<span class=\"params\">arg: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">any</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>泛型就是类型变量，在 ts 中可以用来定义一些通用的类型，比如数组、函数、类等。泛型可以让你写出更灵活和可复用的代码，而不用担心类型错误<br>\n泛型适合一些需要根据不同的输入类型返回不同的输出类型的应用场景，在这些场景中，如果不用泛型，就需要为每种可能的输入类型写一个重载或者断言，这样会增加代码的复杂度和冗余。而用了泛型，就可以用一个类型参数来表示输入类型，并根据它推断出输出类型，这样就可以写出更简洁和通用的代码。</p>\n<h2 id=\"泛型实现类型参数化\"><a class=\"markdownIt-Anchor\" href=\"#泛型实现类型参数化\">#</a> 泛型实现类型参数化</h2>\n<p>对于刚才的问题，虽然 any 是可以的，但是定义为 any 的时候，我们其实已经丢失了类型信息：</p>\n<ul>\n<li>比如我们传入的是一个 number，那么我们希望返回的可不是 any 类型，而是 number 类型；</li>\n<li>所以，我们需要在函数中可以捕获到参数的类型是 number，并且同时使用它来作为返回值的类型；<br>\n我们需要在这里使用一种特性的变量 ——<strong> 类型变量（type variable）</strong>，它作用于类型，而不是值：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> foo&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arg</span>: <span class=\"title class_\">Type</span>): <span class=\"title class_\">Type</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里我们可以使用两种方式来调用它：</p>\n<ol>\n<li>通过 <code>&lt;类型&gt;</code>  的方式将类型传递给函数；</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo&lt;<span class=\"built_in\">string</span>&gt;(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\">foo&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>通过类型推到，自动推到出我们传入变量的类型：在这里会推导出它们是 字面量类型的，因为字面量类型对于我们的函数也是适用的</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"string\">&quot;abc&quot;</span>);</span><br><span class=\"line\"><span class=\"title function_\">foo</span>(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型的基本补充\"><a class=\"markdownIt-Anchor\" href=\"#泛型的基本补充\">#</a> 泛型的基本补充</h2>\n<p>当然我们也可以传入多个类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> foo&lt;T，E&gt;(<span class=\"attr\">a1</span>: T,<span class=\"attr\">a2</span>:E): <span class=\"title class_\">Tyepe</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>平时在开发中我们可能会看到一些常用的名称：</p>\n<ul>\n<li><code>T</code> ：Type 的缩写，类型</li>\n<li><code>K</code> 、 <code>V</code> ：key 和 value 的缩写，键值对</li>\n<li><code>E</code> ：Element 的缩写，元素</li>\n<li><code>O</code> ：Object 的缩写，对象</li>\n</ul>\n<p>这些名称都是标识符，可以写成任何的东西</p>\n<h2 id=\"泛型接口\"><a class=\"markdownIt-Anchor\" href=\"#泛型接口\">#</a> 泛型接口</h2>\n<p>在定义接口的时候我们也可以使用泛型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title class_\">IFoo</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">initialValue</span>:T,</span><br><span class=\"line\">  <span class=\"attr\">valueList</span>:T[],</span><br><span class=\"line\">  <span class=\"attr\">handleValue</span>:<span class=\"function\">(<span class=\"params\">value:T</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">foo</span>:<span class=\"title class_\">IFoo</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">initialValue</span>:<span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">valueList</span>:[<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>],</span><br><span class=\"line\">  <span class=\"attr\">handleValue</span>:<span class=\"keyword\">function</span>(<span class=\"params\">value:<span class=\"built_in\">number</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型类\"><a class=\"markdownIt-Anchor\" href=\"#泛型类\">#</a> 泛型类</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Point</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>:T,</span><br><span class=\"line\">  <span class=\"attr\">y</span>:T</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">x:T,y:T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">x</span> = x</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">y</span> = y</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt;(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">p3</span>:<span class=\"title class_\">Point</span>&lt;<span class=\"built_in\">number</span>&gt; = <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>(<span class=\"number\">10</span>,<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型约束\"><a class=\"markdownIt-Anchor\" href=\"#泛型约束\">#</a> 泛型约束</h2>\n<p>有时候我们希望传入的类型有某些共性，但是这些共性可能不是在同一种类型中：<br>\n比如 string 和 array 都是有 length 的，或者某些对象也是会有 length 属性的，那么只要是拥有 length 的属性都可以作为我们的参数类型，那么应该如何操作呢？</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ILength</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> getLength&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">ILength</span>&gt;(<span class=\"attr\">arg</span>: T) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> args.<span class=\"property\">length</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getLength</span>(<span class=\"string\">&quot;abc&quot;</span>));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getLength</span>([<span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;cba&quot;</span>]));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getLength</span>(&#123; <span class=\"attr\">length</span>: <span class=\"number\">100</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span> &#125;));</span><br></pre></td></tr></table></figure>\n<h1 id=\"泛型-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型-2\">#</a> 泛型 2</h1>\n<ul>\n<li>泛型：可以理解为 【不确定】的【类型】</li>\n<li>使用场景：复用性</li>\n<li>好处：</li>\n</ul>\n<p>先看下面两段代码，分别是求数组和字符串的最小值：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMinArray</span>(<span class=\"params\">arr: <span class=\"built_in\">number</span>[]</span>): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">      min = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMinArray</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">36</span>]));</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getMinString</span>(<span class=\"params\">arr: <span class=\"built_in\">string</span>[]</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">      min = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMinArray</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;cccc&quot;</span>, <span class=\"string\">&quot;ddddd&quot;</span>]));</span><br></pre></td></tr></table></figure>\n<p>以上两段代码都有一个共通的特性：内容相同，唯一不同的是参数类型。这时候就可以用</p>\n<h2 id=\"泛型函数语法格式\"><a class=\"markdownIt-Anchor\" href=\"#泛型函数语法格式\">#</a> 泛型函数语法格式：</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> 名称&lt;T&gt;(参数: T): T &#123;&#125;</span><br><span class=\"line\">名称();</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用泛型</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> getMin&lt;T&gt;(<span class=\"attr\">arr</span>: T[]): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">  arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">      min = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMin</span>([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>, <span class=\"number\">36</span>]));</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">getMin</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;aaa&quot;</span>, <span class=\"string\">&quot;bbb&quot;</span>, <span class=\"string\">&quot;cccc&quot;</span>, <span class=\"string\">&quot;ddddd&quot;</span>]));</span><br></pre></td></tr></table></figure>\n<h3 id=\"泛型函数的类型和非泛型函数的类型有什么不同\"><a class=\"markdownIt-Anchor\" href=\"#泛型函数的类型和非泛型函数的类型有什么不同\">#</a> 泛型函数的 “类型” 和非泛型函数的类型有什么不同？</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非泛型函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn1</span> = fn1; <span class=\"comment\">// let Fn1:(arg:any) =&gt; any</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//泛型函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> fn2&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn2</span> = fn2; <span class=\"comment\">//// let Fn2:&lt;T&gt;(arg:T) =&gt; T</span></span><br></pre></td></tr></table></figure>\n<p>泛型函数类型前面有一个类型参数 (T)</p>\n<h2 id=\"泛型接口-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型接口-2\">#</a> 泛型接口</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> fnInter&lt;T&gt; &#123;</span><br><span class=\"line\">  (<span class=\"attr\">arg</span>: T): T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型类-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型类-2\">#</a> 泛型类</h2>\n<p>语法格式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> 名称&lt;T&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> 名称&lt;类型&gt;();</span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GetMin</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">arr</span>: T[] = [];</span><br><span class=\"line\">  <span class=\"title function_\">add</span>(<span class=\"params\">el: T</span>) &#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">min</span>(): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> min = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">    arr.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (value &lt; min) &#123;</span><br><span class=\"line\">        min = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">GetMin</span>&lt;<span class=\"built_in\">number</span>&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">add</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">obj.<span class=\"title function_\">add</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">obj.<span class=\"title function_\">min</span>();</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型约束-2\"><a class=\"markdownIt-Anchor\" href=\"#泛型约束-2\">#</a> 泛型约束</h2>\n<ul>\n<li>泛型约束可以通过  <code>接口+extends</code>  来实现约束<br>\n为什么要有类型约束呢？我们先看下面一段代码：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> fn&lt;T&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn</span> = <span class=\"title function_\">fn</span>(<span class=\"string\">&quot;abcd&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>这个代码会报错，按理说传入的 <code>&quot;abcd&quot;</code>  是字符串，应该是具有 <code>length</code>  属性的，为什么还会报错呢？<br>\n这是因为这个函数不仅可以传入字符串，还能传入其他东西，如 <code>number</code> , <code>undefined</code>  等，这些是没有 <code>length</code>  属性的。<br>\n这时候我们就可以加入类型约束：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Len</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">length</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> fn&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Len</span>&gt;(<span class=\"attr\">arg</span>: T): T &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(arg.<span class=\"property\">length</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> arg;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title class_\">Fn</span> = <span class=\"title function_\">fn</span>(<span class=\"string\">&quot;abcd&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>上面多出的代码就是对 <code>T</code>  类型做了一个约束，即必须有 <code>length</code>  属性才可以</p>\n<h1 id=\"作用域控制\"><a class=\"markdownIt-Anchor\" href=\"#作用域控制\">#</a> 作用域控制</h1>\n<p>TypeScript 支持两种方式来控制我们的作用域：</p>\n<ol>\n<li>模块化：每个文件可以是一个独立的模块，支持 ES Module，也支持 CommonJS；</li>\n<li>命名空间：通过 <code>namespace</code>  来声明一个命名空间</li>\n</ol>\n<h2 id=\"模块化开发\"><a class=\"markdownIt-Anchor\" href=\"#模块化开发\">#</a> 模块化开发</h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 + num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">sub</span>(<span class=\"params\">num1: <span class=\"built_in\">number</span>, num2: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> num1 - num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"命名空间-namespace\"><a class=\"markdownIt-Anchor\" href=\"#命名空间-namespace\">#</a> 命名空间 namespace</h2>\n<p>命名空间在 TypeScript 早期时，称之为内部模块，主要目的是将一个模块内部再进行作用域的划分，防止一些命名冲突的问题。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> <span class=\"title class_\">Time</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">format</span>(<span class=\"params\">time: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;2022-02-22&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">namespace</span> <span class=\"title class_\">Price</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">format</span>(<span class=\"params\">price: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;222.22&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"类型的查找\"><a class=\"markdownIt-Anchor\" href=\"#类型的查找\">#</a> 类型的查找</h1>\n<p>之前我们所有的 typescript 中的类型，几乎都是我们自己编写的，但是我们也有用到一些其他的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> imageEl = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;image&quot;</span>) <span class=\"keyword\">as</span> <span class=\"title class_\">HTMLImageElement</span>;</span><br></pre></td></tr></table></figure>\n<p>大家是否会奇怪，我们的 HTMLImageElement 类型来自哪里呢？甚至是 document 为什么可以有 getElementById 的方法呢？其实这里就涉及到 typescript 对类型的管理和查找规则了。</p>\n<ul>\n<li>\n<p>这里先介绍另外的一种 typescript 文件： <code>.d.ts</code>  文件<br>\n之前编写的 typescript 文件都是 .ts 文件，这些文件最终会输出 .js 文件，还有另外一种文件  <code>.d.ts</code>  文件，它是用来做类型的声明 ( <code>declare</code> )。 它仅仅用来做类型检测，告知 typescript 我们有哪些类型</p>\n</li>\n<li>\n<p>那么 typescript 会在哪里查找我们的类型声明呢？</p>\n</li>\n</ul>\n<ol>\n<li>内置类型声明</li>\n<li>外部定义类型声明</li>\n<li>自己定义类型声明</li>\n</ol>\n<h2 id=\"内置类型声明\"><a class=\"markdownIt-Anchor\" href=\"#内置类型声明\">#</a> 内置类型声明</h2>\n<p>内置类型声明是 typescript 自带的、帮助我们内置了 JavaScript 运行时的一些标准化 API 的声明文件，包括比如 Math、Date 等内置类型，也包括 DOM API，比如 Window、Document 等。内置类型声明通常在我们安装 typescript 的环境中会带有的</p>\n<h2 id=\"外部定义类型声明\"><a class=\"markdownIt-Anchor\" href=\"#外部定义类型声明\">#</a> 外部定义类型声明</h2>\n<p>外部类型声明通常是我们使用一些库（比如第三方库）时，需要的一些类型声明。这些库通常有两种类型声明方式：</p>\n<ol>\n<li>在自己库中进行类型声明（编写.d.ts 文件），比如 axios</li>\n<li>通过社区的一个公有库 DefinitelyTyped 存放类型声明文件</li>\n</ol>\n<h2 id=\"自己定义类型声明\"><a class=\"markdownIt-Anchor\" href=\"#自己定义类型声明\">#</a> 自己定义类型声明</h2>\n<p>什么情况下需要自己来定义声明文件呢？</p>\n<ol>\n<li>情况一：我们使用的第三方库是一个纯的 JavaScript 库，没有对应的声明文件；比如 lodash</li>\n<li>情况二：我们给自己的代码中声明一些类型，方便在其他地方直接进行使用；</li>\n</ol>\n<h3 id=\"声明变量-函数-类\"><a class=\"markdownIt-Anchor\" href=\"#声明变量-函数-类\">#</a> 声明变量 - 函数 - 类</h3>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wName = <span class=\"string\">&quot;coderwhy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wAge = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> wHeight = <span class=\"number\">1.88</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wFoo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;wFoo&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">wBar</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;wBar&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">let</span> <span class=\"attr\">wName</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">let</span> <span class=\"attr\">wAge</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">let</span> <span class=\"attr\">wHeight</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wFoo</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">function</span> <span class=\"title function_\">wBar</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"声明模块\"><a class=\"markdownIt-Anchor\" href=\"#声明模块\">#</a> 声明模块</h3>\n<p>我们也可以声明模块，比如 lodash 模块默认不能使用的情况，可以自己来声明这个模块：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;lodash&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">join</span>(<span class=\"params\">args: <span class=\"built_in\">any</span>[]</span>): <span class=\"built_in\">any</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>声明模块的语法:  <code>declare module '模块名' &#123;&#125;</code> <br>\n 在声明模块的内部，我们可以通过 export 导出对应库的类、函数等</li>\n</ul>\n<h3 id=\"declare-文件\"><a class=\"markdownIt-Anchor\" href=\"#declare-文件\">#</a> declare 文件</h3>\n<p>在某些情况下，我们也可以声明文件：</p>\n<ul>\n<li>比如在开发 vue 的过程中，默认是不识别我们的.vue 文件的，那么我们就需要对其进行文件的声明</li>\n<li>比如在开发中我们使用了 jpg 这类图片文件，默认 typescript 也是不支持的，也需要对其进行声明</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> modele <span class=\"string\">&#x27;*.vue&#x27;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123;<span class=\"title class_\">DefineComponent</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">component</span>:<span class=\"title class_\">DefineComponent</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">declare</span> modele <span class=\"string\">&#x27;*.jpg&#x27;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"attr\">src</span>:<span class=\"built_in\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> src</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"declare-命名空间\"><a class=\"markdownIt-Anchor\" href=\"#declare-命名空间\">#</a> declare 命名空间</h3>\n<p>比如我们在 index.html 中直接引入了 jQuery, 我们可以进行命名空间的声明：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">namespace</span> $ &#123;</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">ajax</span>(<span class=\"params\">settings: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 main.ts 中就可以使用了：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.<span class=\"title function_\">ajax</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">success</span>:<span class=\"function\">(<span class=\"params\">res:<span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"装饰器\"><a class=\"markdownIt-Anchor\" href=\"#装饰器\">#</a> 装饰器</h1>\n<ul>\n<li>如果要使用装饰器，必须在 tsconfig.json 中进行配置： <code>&quot;experimentalDecorators&quot;:true</code></li>\n</ul>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fun1</span>(<span class=\"params\">target:<span class=\"built_in\">any</span></span>) &#123;</span><br><span class=\"line\">  target.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">userName</span> = <span class=\"string\">&#x27;张三&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@fun1</span>  <span class=\"comment\">// 等同于fun1(Person1)</span></span><br><span class=\"line\">clsaa = <span class=\"title class_\">Person1</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person1</span>()</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1.<span class=\"property\">userName</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "TypeScript"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/24/Vite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "url": "https://eucli.top/2023/03/24/Vite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "title": "Vite + Vue3 + Typescript + Pinia + Vueuse项目",
            "date_published": "2023-03-24T10:01:34.000Z",
            "content_html": "<h1 id=\"vite-vue3-typescript-pinia-vueuse\"><a class=\"markdownIt-Anchor\" href=\"#vite-vue3-typescript-pinia-vueuse\">#</a> Vite + Vue3 + Typescript + Pinia + Vueuse</h1>\n<blockquote>\n<h2 id=\"一个大厂企业级前端项目\"><a class=\"markdownIt-Anchor\" href=\"#一个大厂企业级前端项目\">#</a> 一个大厂企业级前端项目</h2>\n<h2 id=\"如果觉得项目模板不错的话欢迎-star-支持就好感谢大家\"><a class=\"markdownIt-Anchor\" href=\"#如果觉得项目模板不错的话欢迎-star-支持就好感谢大家\">#</a> 如果觉得项目模板不错的话，欢迎 Star 支持就好，感谢大家！</h2>\n</blockquote>\n<h1 id=\"通过这篇文章你可以学到\"><a class=\"markdownIt-Anchor\" href=\"#通过这篇文章你可以学到\">#</a> 通过这篇文章你可以学到</h1>\n<ul>\n<li>如何使用使用 Vite 搭建项目</li>\n<li>如何在 Vite 中集成  <code>typescript</code></li>\n<li>如何在 Vite 中集成  <code>vue-router4</code>  和  <code>pinia</code></li>\n<li>如何使用 vue3 的伴侣  <code>vueuse</code></li>\n<li>如何在项目中集成  <code>eslint</code>  和  <code>prettier</code>  保证代码质量</li>\n<li>如何规范化  <code>git</code>  提交信息</li>\n<li>如何为团队开发 <code>专属的项目模板</code></li>\n</ul>\n<h1 id=\"环境依赖版本\"><a class=\"markdownIt-Anchor\" href=\"#环境依赖版本\">#</a> 环境依赖版本</h1>\n<ul>\n<li><a href=\"https://github.com/nodejs/node\">node</a>：v14.15.4</li>\n<li><a href=\"https://github.com/vitejs/vite\">vite</a>：^2.8.0</li>\n<li><a href=\"https://github.com/vuejs/vue\">vue</a>：^3.2.25</li>\n<li><a href=\"https://github.com/microsoft/TypeScript\">typescript</a>：^4.5.4</li>\n<li><a href=\"https://github.com/vuejs/pinia\">pinia</a>：^2.0.12</li>\n<li><a href=\"https://github.com/vuejs/router\">vue-router</a>：^4.0.14</li>\n<li><a href=\"https://github.com/vueuse/vueuse\">vueuse</a>：^8.2.0</li>\n<li><a href=\"https://github.com/eslint/eslint\">eslint</a>：^8.12.0</li>\n<li><a href=\"https://github.com/prettier/prettier\">prettier</a>：^2.6.1</li>\n<li><a href=\"https://github.com/commitizen/cz-cli\">commitizen</a>：^4.2.4</li>\n<li><a href=\"https://github.com/typicode/husky\">husky</a>：^7.0.4</li>\n</ul>\n<p><strong>长话短说，直接开干～</strong></p>\n<h1 id=\"1-初始化项目\"><a class=\"markdownIt-Anchor\" href=\"#1-初始化项目\">#</a> 1. 初始化项目</h1>\n<h2 id=\"按步骤提示初始化\"><a class=\"markdownIt-Anchor\" href=\"#按步骤提示初始化\">#</a> 按步骤提示初始化：</h2>\n<ol>\n<li>使用 vite-cli 命令</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">pnpm create vite</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\">npm init vite@latest</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn create vite</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>输入项目名：</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? Project name:  vite-vue3-ts-pinia</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>选择一个框架（vue）</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? Select a framework: » - Use arrow-keys. Return to submit.</span><br><span class=\"line\">     vanilla // 原生js</span><br><span class=\"line\"> &gt;   vue     // 默认就是 vue3</span><br><span class=\"line\">     react   // react</span><br><span class=\"line\">     preact  // 轻量化react框架</span><br><span class=\"line\">     lit     // 轻量级web组件</span><br><span class=\"line\">     svelte  // svelte框架</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>使用 typescript</li>\n</ol>\n<figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">? <span class=\"keyword\">Select</span> a variant: › - <span class=\"keyword\">Use</span> arrow-<span class=\"keyword\">keys</span>. <span class=\"keyword\">Return</span> <span class=\"keyword\">to</span> submit.</span><br><span class=\"line\">     vue</span><br><span class=\"line\"> ❯   vue-ts</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>启动项目</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vite-vue3-ts-pinia &amp;&amp; pnpm install &amp;&amp; pnpm run dev</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速初始化建议使用\"><a class=\"markdownIt-Anchor\" href=\"#快速初始化建议使用\">#</a> 快速初始化（建议使用）：</h2>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">pnpm <span class=\"built_in\">create</span> vite project-name <span class=\"comment\">-- --template vue-ts</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm 6.x</span></span><br><span class=\"line\">npm init vite@latest project-name <span class=\"comment\">--template vue-ts</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># npm 7+, 需要额外的双横线：</span></span><br><span class=\"line\">npm init vite@latest project-name <span class=\"comment\">-- --template vue-ts</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn <span class=\"built_in\">create</span> vite project-name <span class=\"comment\">--template vue-ts</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"集成配置\"><a class=\"markdownIt-Anchor\" href=\"#集成配置\">#</a> 集成配置</h2>\n<ol>\n<li>为保证 node 的使用</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i @types/node --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改  <code>tsconfig.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;typeRoots&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">      <span class=\"string\">&quot;node_modules/@types&quot;</span><span class=\"punctuation\">,</span> <span class=\"comment\">// 默认值</span></span><br><span class=\"line\">      <span class=\"string\">&quot;src/types&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;useDefineForClassFields&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;moduleResolution&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;jsx&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;preserve&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sourceMap&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;resolveJsonModule&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;esModuleInterop&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;esnext&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;dom&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;baseUrl&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;paths&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;@/*&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/*&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;include&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;src/**/*.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.d.ts&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.tsx&quot;</span><span class=\"punctuation\">,</span> <span class=\"string\">&quot;src/**/*.vue&quot;</span><span class=\"punctuation\">]</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineConfig &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vite&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> vue <span class=\"keyword\">from</span> <span class=\"string\">&quot;@vitejs/plugin-vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> path <span class=\"keyword\">from</span> <span class=\"string\">&quot;path&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// https://vitejs.dev/config/</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">resolve</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//设置别名</span></span><br><span class=\"line\">    <span class=\"attr\">alias</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;@&quot;</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;src&quot;</span>),</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [<span class=\"title function_\">vue</span>()],</span><br><span class=\"line\">  <span class=\"attr\">server</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">8080</span>, <span class=\"comment\">//启动端口</span></span><br><span class=\"line\">    <span class=\"attr\">hmr</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">host</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">port</span>: <span class=\"number\">8080</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 设置 https 代理</span></span><br><span class=\"line\">    <span class=\"attr\">proxy</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;/api&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">target</span>: <span class=\"string\">&quot;your https address&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">changeOrigin</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">rewrite</span>: <span class=\"function\">(<span class=\"params\">path: <span class=\"built_in\">string</span></span>) =&gt;</span> path.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^\\/api/</span>, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"2-代码质量风格的统一\"><a class=\"markdownIt-Anchor\" href=\"#2-代码质量风格的统一\">#</a> 2. 代码质量风格的统一</h1>\n<h2 id=\"集成-eslint\"><a class=\"markdownIt-Anchor\" href=\"#集成-eslint\">#</a> 集成  <code>eslint</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i eslint eslint-plugin-vue --save-dev</span><br></pre></td></tr></table></figure>\n<p>由于 ESLint 默认使用  <a href=\"https://github.com/eslint/espree\">Espree</a>  进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装  <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\"> <code>@typescript-eslint/parser</code> </a> 替代掉默认的解析器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install @typescript-eslint/parser --save-dev</span><br></pre></td></tr></table></figure>\n<p>安装对应的插件  <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin\">@typescript-eslint/eslint-plugin</a>  它作为 eslint 默认规则的补充，提供了一些额外的适用于 ts 语法的规则。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install @typescript-eslint/eslint-plugin --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建配置文件：  <code>.eslintrc.js</code>   或   <code>.eslintrc.json</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">parser</span>: <span class=\"string\">&quot;vue-eslint-parser&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">parserOptions</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">parser</span>: <span class=\"string\">&quot;@typescript-eslint/parser&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ecmaVersion</span>: <span class=\"number\">2020</span>,</span><br><span class=\"line\">    <span class=\"attr\">sourceType</span>: <span class=\"string\">&quot;module&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">ecmaFeatures</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">jsx</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;plugin:vue/vue3-recommended&quot;</span>, <span class=\"string\">&quot;plugin:@typescript-eslint/recommended&quot;</span>],</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// override/add rules settings here, such as:</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>创建忽略文件： <code>.eslintignore</code></li>\n</ol>\n<figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node_modules/</span><br><span class=\"line\">dist/</span><br><span class=\"line\"><span class=\"keyword\">index</span>.html</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"attr\">&quot;eslint:comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;使用 ESLint 检查并自动修复 src 目录下所有扩展名为 .js 和 .vue 的文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;eslint&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;eslint --ext .js,.vue --ignore-path .gitignore --fix src&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"集成-prettier\"><a class=\"markdownIt-Anchor\" href=\"#集成-prettier\">#</a> 集成  <code>prettier</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i prettier eslint-config-prettier eslint-plugin-prettier --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>创建配置文件：  <code>prettier.config.js</code>  或  <code>.prettierrc.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 一行最多 80 字符</span></span><br><span class=\"line\">  <span class=\"attr\">printWidth</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 使用 4 个空格缩进</span></span><br><span class=\"line\">  <span class=\"attr\">tabWidth</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 不使用 tab 缩进，而使用空格</span></span><br><span class=\"line\">  <span class=\"attr\">useTabs</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 行尾需要有分号</span></span><br><span class=\"line\">  <span class=\"attr\">semi</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 使用单引号代替双引号</span></span><br><span class=\"line\">  <span class=\"attr\">singleQuote</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 对象的 key 仅在必要时用引号</span></span><br><span class=\"line\">  <span class=\"attr\">quoteProps</span>: <span class=\"string\">&quot;as-needed&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// jsx 不使用单引号，而使用双引号</span></span><br><span class=\"line\">  <span class=\"attr\">jsxSingleQuote</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 末尾使用逗号</span></span><br><span class=\"line\">  <span class=\"attr\">trailingComma</span>: <span class=\"string\">&quot;all&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 大括号内的首尾需要空格 &#123; foo: bar &#125;</span></span><br><span class=\"line\">  <span class=\"attr\">bracketSpacing</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// jsx 标签的反尖括号需要换行</span></span><br><span class=\"line\">  <span class=\"attr\">jsxBracketSameLine</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 箭头函数，只有一个参数的时候，也需要括号</span></span><br><span class=\"line\">  <span class=\"attr\">arrowParens</span>: <span class=\"string\">&quot;always&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 每个文件格式化的范围是文件的全部内容</span></span><br><span class=\"line\">  <span class=\"attr\">rangeStart</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">rangeEnd</span>: <span class=\"title class_\">Infinity</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 不需要写文件开头的 @prettier</span></span><br><span class=\"line\">  <span class=\"attr\">requirePragma</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 不需要自动在文件开头插入 @prettier</span></span><br><span class=\"line\">  <span class=\"attr\">insertPragma</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 使用默认的折行标准</span></span><br><span class=\"line\">  <span class=\"attr\">proseWrap</span>: <span class=\"string\">&quot;preserve&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 根据显示样式决定 html 要不要折行</span></span><br><span class=\"line\">  <span class=\"attr\">htmlWhitespaceSensitivity</span>: <span class=\"string\">&quot;css&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 换行符使用 lf</span></span><br><span class=\"line\">  <span class=\"attr\">endOfLine</span>: <span class=\"string\">&quot;auto&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改  <code>.eslintrc.js</code>  配置</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">extends</span>: [</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;prettier&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;plugin:prettier/recommended&#x27;</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\"></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"attr\">&quot;prettier:comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;自动格式化当前目录下的所有文件&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;prettier&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;prettier --write&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-集成-pinia\"><a class=\"markdownIt-Anchor\" href=\"#3-集成-pinia\">#</a> 3. 集成  <code>pinia</code></h1>\n<p><code>Pinia</code>  读音：['piːnə]，是 Vue 官方团队推荐代替 <code>Vuex</code>  的一款轻量级状态管理库。</p>\n<p><strong>Pinia 有如下特点：</strong></p>\n<ul>\n<li>完整的 typescript 的支持；</li>\n<li>足够轻量，压缩后的体积只有 1.6kb;</li>\n<li>去除 mutations，只有 state，getters，actions（这是我最喜欢的一个特点）；</li>\n<li>actions 支持同步和异步；</li>\n<li>没有模块嵌套，只有 store 的概念，store 之间可以自由使用，更好的代码分割；</li>\n<li>无需手动添加 store，store 一旦创建便会自动添加；</li>\n</ul>\n<h2 id=\"安装\"><a class=\"markdownIt-Anchor\" href=\"#安装\">#</a> 安装</h2>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm <span class=\"selector-tag\">i</span> pinia <span class=\"attr\">--save</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h2>\n<ol>\n<li>新建 src/store 目录并在其下面创建 index.ts，导出 store</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createPinia</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>; <span class=\"comment\">// 创建vue实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>); <span class=\"comment\">// 挂载pinia</span></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(store); <span class=\"comment\">// 挂载实例</span></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><strong>定义 State：</strong> 在 src/store 下面创建一个 user.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useUserStore = <span class=\"title function_\">defineStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"string\">&quot;user&quot;</span>, <span class=\"comment\">// id必填，且需要唯一</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"title function_\">updateName</span>(<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li><strong>获取 State：</strong> 在 src/components/usePinia.vue 中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123; userStore.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span> <span class=\"attr\">setup</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> <span class=\"keyword\">import</span> &#123; useUserStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store/user&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> <span class=\"keyword\">const</span> userStore = <span class=\"title function_\">useUserStore</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li><strong>修改 State：</strong></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 1. 直接修改 state （不建议）</span></span><br><span class=\"line\"> userStore.<span class=\"property\">name</span> = <span class=\"string\">&#x27;李四&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// 2. 通过 actions 去修改</span></span><br><span class=\"line\"> &lt;script lang=<span class=\"string\">&quot;ts&quot;</span> setup&gt;</span><br><span class=\"line\"> <span class=\"keyword\">import</span> &#123; useUserStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/store/user&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">const</span> userStore = <span class=\"title function_\">useUserStore</span>()</span><br><span class=\"line\"> userStore.<span class=\"title function_\">updateName</span>(<span class=\"string\">&#x27;李四&#x27;</span>)</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更详细上手指南：<a href=\"https://juejin.cn/post/7049196967770980389\">链接</a> 官方文档：<a href=\"https://pinia.vuejs.org/introduction.html\">链接</a></p>\n</blockquote>\n<h1 id=\"4-集成-vue-router4\"><a class=\"markdownIt-Anchor\" href=\"#4-集成-vue-router4\">#</a> 4. 集成  <code>vue-router4</code></h1>\n<h2 id=\"安装-2\"><a class=\"markdownIt-Anchor\" href=\"#安装-2\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm i vue-router --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-2\"><a class=\"markdownIt-Anchor\" href=\"#使用-2\">#</a> 使用</h2>\n<ol>\n<li>新建 src/router 目录并在其下面创建 index.ts，导出 router</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createRouter, createWebHistory, <span class=\"title class_\">RouteRecordRaw</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue-router&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">routes</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"title class_\">RouteRecordRaw</span>&gt; = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;登录&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requireAuth</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/login.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Index&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">title</span>: <span class=\"string\">&quot;首页&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">keepAlive</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">requireAuth</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/index.vue&quot;</span>),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"title function_\">createRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">history</span>: <span class=\"title function_\">createWebHistory</span>(),</span><br><span class=\"line\">  routes,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> router;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/router&quot;</span>; <span class=\"comment\">// 创建vue实例</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router); <span class=\"comment\">// 挂载实例</span></span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改 App.vue</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">     <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">RouterView</span> /&gt;</span></span> </span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"5-集成-vueuse\"><a class=\"markdownIt-Anchor\" href=\"#5-集成-vueuse\">#</a> 5. 集成  <code>vueuse</code></h1>\n<p><code>VueUse</code>  是一个基于   <code>Composition API</code>  的实用函数集合。</p>\n<h2 id=\"安装-3\"><a class=\"markdownIt-Anchor\" href=\"#安装-3\">#</a> 安装</h2>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm <span class=\"selector-tag\">i</span> <span class=\"keyword\">@vueuse</span>/core</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-3\"><a class=\"markdownIt-Anchor\" href=\"#使用-3\">#</a> 使用</h2>\n<ol>\n<li>创建一个新的 src/page/vueUse.vue 页面来做一个简单的 demo</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span> 测试 vueUse 的鼠标坐标 <span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">   <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>Mouse: &#123;&#123;x&#125;&#125; x &#123;&#123;y&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     <span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     <span class=\"keyword\">import</span> &#123; useMouse &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@vueuse/core&#x27;</span></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">         <span class=\"attr\">name</span>: <span class=\"string\">&#x27;VueUse&#x27;</span>,</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">         <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           <span class=\"keyword\">const</span> &#123; x, y &#125; = <span class=\"title function_\">useMouse</span>()</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"></span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           <span class=\"keyword\">return</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">             x, y</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">           &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">         &#125;</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\">     &#125;);</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"language-xml\"> </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>useMouse 只是 vueuse 的一个最基本的函数库，还有许多，总会有一个适合你；</p>\n<p>更多函数官方文档：<a href=\"https://vueuse.org/\">链接</a></p>\n<h1 id=\"6-css-的集成\"><a class=\"markdownIt-Anchor\" href=\"#6-css-的集成\">#</a> 6. CSS 的集成</h1>\n<h2 id=\"方案一原生-css-variable-新特性\"><a class=\"markdownIt-Anchor\" href=\"#方案一原生-css-variable-新特性\">#</a> 方案一：原生 css variable 新特性：</h2>\n<p>原生支持，不需要第三方插件，具体使用文档可 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/var\">查看</a></p>\n<ol>\n<li>新建文件 src/styles/index.css</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">   <span class=\"attr\">--main-bg-color</span>: pink;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> ​</span><br><span class=\"line\"> <span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--main-bg-color);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>注：还可以增加 PostCSS 配置，(任何受  <a href=\"https://github.com/postcss/postcss-load-config\">postcss-load-config</a> 支持的格式，例如   <code>postcss.config.js</code>  )，它将会自动应用于所有已导入的 CSS。</p>\n<h2 id=\"方案二scss-或-less\"><a class=\"markdownIt-Anchor\" href=\"#方案二scss-或-less\">#</a> 方案二：scss 或 less：</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># .scss and .sass</span></span><br><span class=\"line\"> pnpm add -D sass</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\"># .less</span></span><br><span class=\"line\"> pnpm add -D less</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用在 .vue 文件模板中</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// .scss</span></span><br><span class=\"line\"> &lt;template&gt;</span><br><span class=\"line\">     <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>欢迎使用 scss<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"> &lt;/template&gt;</span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;scss&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   .root &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// .less</span></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">         <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>欢迎使用 less<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;less&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">   .root &#123;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\"> <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-集成-axios\"><a class=\"markdownIt-Anchor\" href=\"#7-集成-axios\">#</a> 7. 集成  <code>axios</code></h1>\n<p><code>axios</code>  是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>\n<h2 id=\"安装-4\"><a class=\"markdownIt-Anchor\" href=\"#安装-4\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> pnpm i axios</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用-4\"><a class=\"markdownIt-Anchor\" href=\"#使用-4\">#</a> 使用：</h2>\n<ol>\n<li>新建 src/utils/axios.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; <span class=\"title class_\">AxiosResponse</span>, <span class=\"title class_\">AxiosRequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> service = axios.<span class=\"title function_\">create</span>(); <span class=\"comment\">// Request interceptors</span></span><br><span class=\"line\"></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">config: AxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">); <span class=\"comment\">// Response interceptors</span></span><br><span class=\"line\"></span><br><span class=\"line\">service.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">  <span class=\"keyword\">async</span> (<span class=\"attr\">response</span>: <span class=\"title class_\">AxiosResponse</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\">(<span class=\"params\">error: <span class=\"built_in\">any</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> service;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在页面中使用即可</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/utils/axios&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">requestRes</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">request</span>(&#123;</span><br><span class=\"line\">                    <span class=\"attr\">url</span>: <span class=\"string\">&#x27;/api/xxx&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">method</span>: <span class=\"string\">&#x27;get&#x27;</span></span><br><span class=\"line\">                  &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"封装请求参数和响应数据的所有-api-可选项\"><a class=\"markdownIt-Anchor\" href=\"#封装请求参数和响应数据的所有-api-可选项\">#</a> 封装请求参数和响应数据的所有 api (可选项)</h2>\n<ol>\n<li>新建  <code>src/api/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> login <span class=\"keyword\">from</span> <span class=\"string\">&quot;./module/login&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> index <span class=\"keyword\">from</span> <span class=\"string\">&quot;./module/index&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, login, index);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>新建  <code>src/api/module/login.ts</code>  和  <code>src/api/module/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/axios&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 登录</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IResponseType</span>&lt;P = &#123;&#125;&gt; &#123;</span><br><span class=\"line\">  code?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">status</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">msg</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: P;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ILogin</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">token</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">expires</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">login</span> = (<span class=\"params\">username: <span class=\"built_in\">string</span>, password: <span class=\"built_in\">string</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request&lt;<span class=\"title class_\">IResponseType</span>&lt;<span class=\"title class_\">ILogin</span>&gt;&gt;(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"string\">&quot;/api/auth/login&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"string\">&quot;post&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">      username,</span><br><span class=\"line\">      password,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>由于使用了 typescript，所以需新增  <code>src/types/shims-axios.d.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">AxiosRequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 自定义扩展axios模块</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> <span class=\"variable\">Maybe</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"variable language_\">module</span> <span class=\"string\">&quot;axios&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AxiosInstance</span> &#123;</span><br><span class=\"line\">    &lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">config</span>: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    request&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">config</span>: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    get&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span>&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    head&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    post&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    put&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">    patch&lt;T = <span class=\"built_in\">any</span>&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, data?: <span class=\"built_in\">any</span>, config?: <span class=\"title class_\">AxiosRequestConfig</span>): <span class=\"title class_\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在  <code>src/pages/request.vue</code>  页面中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script lang=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">import</span> <span class=\"variable constant_\">API</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/api&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"title function_\">requestRes</span> = <span class=\"keyword\">async</span> (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"variable constant_\">API</span>.<span class=\"title function_\">login</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>, <span class=\"string\">&#x27;123456&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"8-css-的-ui-样式库\"><a class=\"markdownIt-Anchor\" href=\"#8-css-的-ui-样式库\">#</a> 8. css 的 UI 样式库</h1>\n<blockquote>\n<p>可选很多，根据自己项目的需求去进行选择即可</p>\n</blockquote>\n<p><strong>注意：UI 库一般需要按需引入（下面以  <code>element-plus</code>  为例）</strong></p>\n<ol>\n<li>安装  <code>vite-plugin-style-import</code></li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm i vite-plugin-style-import --save-dev</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> styleImport <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vite-plugin-style-import&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineConfig</span>(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">        <span class=\"title function_\">vue</span>(),</span><br><span class=\"line\">        <span class=\"title function_\">styleImport</span>(&#123;</span><br><span class=\"line\">            <span class=\"attr\">libs</span>: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">libraryName</span>: <span class=\"string\">&#x27;element-plus&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">esModule</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">                    <span class=\"attr\">resolveStyle</span>: <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"string\">`element-plus/lib/theme-chalk/<span class=\"subst\">$&#123;name&#125;</span>.css`</span>;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    <span class=\"attr\">ensureStyleFile</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 忽略文件是否存在, 导入不存在的CSS文件时防止错误。</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"9-使用-commitizen-规范-git-提交\"><a class=\"markdownIt-Anchor\" href=\"#9-使用-commitizen-规范-git-提交\">#</a> 9. 使用 <a href=\"https://github.com/commitizen/cz-cli\">commitizen</a> 规范 git 提交</h1>\n<p>为了使团队多人协作更加的规范，所以需要每次在 git 提交的时候，做一次硬性规范提交，规范 git 的提交信息</p>\n<h2 id=\"安装-commitizen-交互式提交-自定义提示文案-commit-规范\"><a class=\"markdownIt-Anchor\" href=\"#安装-commitizen-交互式提交-自定义提示文案-commit-规范\">#</a> 安装  <code>commitizen</code>  (交互式提交 + 自定义提示文案 + Commit 规范)</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pnpm install -D commitizen cz-conventional-changelog @commitlint/config-conventional @commitlint/cli commitlint-config-cz cz-customizable</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commit:comment&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;引导设置规范化的提交信息&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;commit&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;git-cz&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">&quot;config&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;commitizen&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;path&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;node_modules/cz-customizable&quot;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>新增配置  <code>commitlint.config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">extends</span>: [<span class=\"string\">&quot;@commitlint/config-conventional&quot;</span>, <span class=\"string\">&quot;cz&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">rules</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;type-enum&quot;</span>: [</span><br><span class=\"line\">      <span class=\"number\">2</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;always&quot;</span>,</span><br><span class=\"line\">      [</span><br><span class=\"line\">        <span class=\"string\">&quot;feature&quot;</span>, <span class=\"comment\">// 新功能（feature）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;bug&quot;</span>, <span class=\"comment\">// 此项特别针对bug号，用于向测试反馈bug列表的bug修改情况</span></span><br><span class=\"line\">        <span class=\"string\">&quot;fix&quot;</span>, <span class=\"comment\">// 修补bug</span></span><br><span class=\"line\">        <span class=\"string\">&quot;ui&quot;</span>, <span class=\"comment\">// 更新 ui</span></span><br><span class=\"line\">        <span class=\"string\">&quot;docs&quot;</span>, <span class=\"comment\">// 文档（documentation）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;style&quot;</span>, <span class=\"comment\">// 格式（不影响代码运行的变动）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;perf&quot;</span>, <span class=\"comment\">// 性能优化</span></span><br><span class=\"line\">        <span class=\"string\">&quot;release&quot;</span>, <span class=\"comment\">// 发布</span></span><br><span class=\"line\">        <span class=\"string\">&quot;deploy&quot;</span>, <span class=\"comment\">// 部署</span></span><br><span class=\"line\">        <span class=\"string\">&quot;refactor&quot;</span>, <span class=\"comment\">// 重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class=\"line\">        <span class=\"string\">&quot;test&quot;</span>, <span class=\"comment\">// 增加测试</span></span><br><span class=\"line\">        <span class=\"string\">&quot;chore&quot;</span>, <span class=\"comment\">// 构建过程或辅助工具的变动</span></span><br><span class=\"line\">        <span class=\"string\">&quot;revert&quot;</span>, <span class=\"comment\">// feat(pencil): add ‘graphiteWidth’ option (撤销之前的commit)</span></span><br><span class=\"line\">        <span class=\"string\">&quot;merge&quot;</span>, <span class=\"comment\">// 合并分支， 例如： merge（前端页面）： feature-xxxx修改线程地址</span></span><br><span class=\"line\">        <span class=\"string\">&quot;build&quot;</span>, <span class=\"comment\">// 打包</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;type&gt; 格式 小写</span></span><br><span class=\"line\">    <span class=\"string\">&quot;type-case&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;always&quot;</span>, <span class=\"string\">&quot;lower-case&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;type&gt; 不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;type-empty&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;scope&gt; 范围不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;scope-empty&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;scope&gt; 范围格式</span></span><br><span class=\"line\">    <span class=\"string\">&quot;scope-case&quot;</span>: [<span class=\"number\">0</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;subject&gt; 主要 message 不能为空</span></span><br><span class=\"line\">    <span class=\"string\">&quot;subject-empty&quot;</span>: [<span class=\"number\">2</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;subject&gt; 以什么为结束标志，禁用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;subject-full-stop&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;subject&gt; 格式，禁用</span></span><br><span class=\"line\">    <span class=\"string\">&quot;subject-case&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;never&quot;</span>],</span><br><span class=\"line\">    <span class=\"comment\">// &lt;body&gt; 以空行开头</span></span><br><span class=\"line\">    <span class=\"string\">&quot;body-leading-blank&quot;</span>: [<span class=\"number\">1</span>, <span class=\"string\">&quot;always&quot;</span>],</span><br><span class=\"line\">    <span class=\"string\">&quot;header-max-length&quot;</span>: [<span class=\"number\">0</span>, <span class=\"string\">&quot;always&quot;</span>, <span class=\"number\">72</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>自定义提示则添加  <code>.cz-config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">types</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;feature&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;feature:  增加新功能&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;bug&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;bug:      测试反馈bug列表中的bug号&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;fix&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;fix:      修复bug&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;ui&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;ui:       更新UI&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;docs&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;docs:     文档变更&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;style&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;style:    代码格式(不影响代码运行的变动)&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;perf&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;perf:     性能优化&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;refactor&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;refactor: 重构(既不是增加feature，也不是修复bug)&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;release&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;release:  发布&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;deploy&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;deploy:   部署&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;test&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;test:     增加测试&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;chore&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;chore:    构建过程或辅助工具的变动(更改配置文件)&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;revert&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;revert:   回退&quot;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">value</span>: <span class=\"string\">&quot;build&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;build:    打包&quot;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"comment\">// override the messages, defaults are as follows</span></span><br><span class=\"line\">  <span class=\"attr\">messages</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;请选择提交类型:&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">customScope</span>: <span class=\"string\">&quot;请输入您修改的范围(可选):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">subject</span>: <span class=\"string\">&quot;请简要描述提交 message (必填):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: <span class=\"string\">&quot;请输入详细描述(可选，待优化去除，跳过即可):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">footer</span>: <span class=\"string\">&quot;请输入要关闭的issue(待优化去除，跳过即可):&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">confirmCommit</span>: <span class=\"string\">&quot;确认使用以上信息提交？(y/n/e/h)&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">allowCustomScopes</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">skipQuestions</span>: [<span class=\"string\">&quot;body&quot;</span>, <span class=\"string\">&quot;footer&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">subjectLimit</span>: <span class=\"number\">72</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>交互界面测试</li>\n</ol>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2be96b13d3c427e919b11e5bc5404e4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"carbon.png\"></p>\n<ul>\n<li>到目前只是规范了 git 的提交信息，我们对提交前代码的检查还没有做到位，例如 ESLint、Prettier，毕竟谁都会有疏忽的时候，</li>\n<li>那么现在我们的 husky 就闪亮登场了</li>\n</ul>\n<h2 id=\"安装-husky\"><a class=\"markdownIt-Anchor\" href=\"#安装-husky\">#</a> 安装 husky</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1.安装</span></span><br><span class=\"line\">pnpm i husky lint-staged -D</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 2.生成 .husky 的文件夹</span></span><br><span class=\"line\">npx husky install</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 3.添加 hooks，会在 .husky 目录下生成一个 pre-commit 脚本文件</span></span><br><span class=\"line\">npx husky add .husky/pre-commit <span class=\"string\">&quot;npx --no-install lint-staged&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 4.添加 commit-msg</span></span><br><span class=\"line\">npx husky add .husky/commit-msg <span class=\"string\">&#x27;npx --no-install commitlint --edit &quot;$1&quot;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 5. 使用 `git commit -m &quot;message&quot;` 就会看到 hook 生效了。</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>添加配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"attr\">&quot;lint-staged&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    \t<span class=\"attr\">&quot;*.&#123;js,ts&#125;&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"string\">&quot;npm run eslint&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"string\">&quot;npm run prettier&quot;</span></span><br><span class=\"line\">    \t<span class=\"punctuation\">]</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"提交日志可选\"><a class=\"markdownIt-Anchor\" href=\"#提交日志可选\">#</a> 提交日志（可选）</h2>\n<ul>\n<li><a href=\"https://github.com/conventional-changelog/standard-version\">standard-version</a> 或者 <a href=\"https://github.com/conventional-changelog/conventional-changelog\">conventional-changelog</a></li>\n</ul>\n<h1 id=\"最后\"><a class=\"markdownIt-Anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>该系列会是一个持续更新系列，关于整个《Vite 从入门到精通》，我主要会从如下图几个方面讲解，请大家拭目以待吧！！！</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52ee2485e3484e8e8d995fbbb7e86835~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp?\" alt=\"Untitled.png\"></p>\n<p><code>靓仔靓女们</code> ，都看到这里了，要不点个赞再走呗 🌹🌹🌹</p>\n",
            "tags": [
                "前端开发",
                "项目实战",
                "TypeScript",
                "vue3",
                "pinia",
                "vite",
                "VueUse"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/15/Vue3%E8%A7%82%E5%AF%9F%E7%AC%94%E8%AE%B0/",
            "url": "https://eucli.top/2023/03/15/Vue3%E8%A7%82%E5%AF%9F%E7%AC%94%E8%AE%B0/",
            "title": "Vue3观察笔记",
            "date_published": "2023-03-15T10:20:34.000Z",
            "content_html": "<h1 id=\"vue3-新语法糖setup-script\"><a class=\"markdownIt-Anchor\" href=\"#vue3-新语法糖setup-script\">#</a> vue3 新语法糖 ——setup script</h1>\n<ol>\n<li>\n<p>自动注册子组件<br>\n在引入子组件后，不需要再在 components 中注册就可以直接使用</p>\n</li>\n<li>\n<p>属性和方法无需返回<br>\n不用写 <code>return</code>  了，好耶！</p>\n</li>\n<li>\n<p>支持 props、emit 和 context。setup script 语法糖提供了三个新的 API 来供我们使用：defineProps、defineEmit 和 useContext。</p>\n</li>\n</ol>\n<h1 id=\"ref和-reactive\"><a class=\"markdownIt-Anchor\" href=\"#ref和-reactive\">#</a> ref () 和 reactive ()</h1>\n<ul>\n<li>reactive () 只适用于对象或数组，一般用于表单</li>\n<li>ref () 可以接受任何类型，ref 会返回一个包裹对象，并在  <code>.value </code> 属性下暴露内部值。在模板中使用时不需要使用  <code>.value</code> ：它会被自动解包</li>\n</ul>\n<h1 id=\"列表渲染v-for\"><a class=\"markdownIt-Anchor\" href=\"#列表渲染v-for\">#</a> 列表渲染：v-for</h1>\n<p>我们可以使用 <code>v-for</code>  指令来渲染一个基于源数组的列表：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;todo in todos&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;todo.id&quot;</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这里的 todo 是一个局部变量，表示当前正在迭代的数组元素。它只能在  <code>v-for</code>  所绑定的元素上或是其内部访问，就像函数的作用域一样。</p>\n<p>更新列表有两种方式：</p>\n<ol>\n<li>在源数组上调用变更方法：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todos.<span class=\"property\">value</span>.<span class=\"title function_\">push</span>(newTodo);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用新的数组替代原数组：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">todos.<span class=\"property\">value</span> = todos.<span class=\"property\">value</span>.<span class=\"title function_\">filter</span>(<span class=\"comment\">/* ... */</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"计算属性\"><a class=\"markdownIt-Anchor\" href=\"#计算属性\">#</a> 计算属性</h1>\n<p>计算属性会自动跟踪其计算中所使用的到的其他响应式状态，并将它们收集为自己的依赖。计算结果会被缓存，并只有在其依赖发生改变时才会被自动更新。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref, computed &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> hideCompleted = <span class=\"title function_\">ref</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> todos = <span class=\"title function_\">ref</span>([</span><br><span class=\"line\">  <span class=\"comment\">/* ... */</span></span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> filteredTodos = <span class=\"title function_\">computed</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 根据 `todos.value` &amp; `hideCompleted.value`</span></span><br><span class=\"line\">  <span class=\"comment\">// 返回过滤后的 todo 项目</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"模板引用\"><a class=\"markdownIt-Anchor\" href=\"#模板引用\">#</a> 模板引用</h1>\n<p>需要手动操纵 DOM 时要用到 <code>模板引用</code>  ———— 也就是指向模板中一个 DOM 元素的 ref，通过这个 <code>ref</code> attribute 来实现模板引用:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;p&quot;</span>&gt;</span>hello<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>要访问该引用，我们需要声明一个同名的 ref。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"title function_\">ref</span>(<span class=\"literal\">null</span>);</span><br></pre></td></tr></table></figure>\n<p>注意这个 ref 使用 null 值来初始化。这是因为当  <code>&lt;script setup&gt; </code> 执行时，DOM 元素还不存在。模板引用 ref 只能在组件挂载后访问。</p>\n<p>要在挂载之后执行代码，我们可以使用  <code>onMounted()</code>  函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; onMounted &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 此时组件已经挂载。</span></span><br><span class=\"line\">  p.<span class=\"property\">value</span>.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;mounted!&quot;</span>;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"侦听器\"><a class=\"markdownIt-Anchor\" href=\"#侦听器\">#</a> 侦听器</h1>\n<h1 id=\"组件间通信\"><a class=\"markdownIt-Anchor\" href=\"#组件间通信\">#</a> 组件间通信</h1>\n<h2 id=\"父传子\"><a class=\"markdownIt-Anchor\" href=\"#父传子\">#</a> 父传子</h2>\n<p>vue3 父传子主要有两种方式： <code>props</code>  和 <code>slot</code> :<br>\n <code>props</code>  是一种单向数据流，父组件通过在  <code>HTML</code>  内容传入不同数据来控制子组件的渲染，但是这样会增加父子组件之间的耦合度，而且 <code>props</code>  只能传递静态的数据，不能传递动态的内容。</p>\n<p><code>slot</code>  是一种内容分发机制，父组件可以通过 <code>slot</code>  标签来插入任意的内容到子组件中，这样可以增加组件的灵活性和复用性，而且 <code> slot</code>  可以传递动态的内容，比如表达式和指令。 <code>slot</code>  还可以接收插槽  <code>props</code>  ，也就是子组件传递给父组件的数据，这样可以实现双向数据流。</p>\n<ul>\n<li>总之， <code>props</code>  和  <code>slot</code>  都是父传子的方式，但是  <code>props </code> 更适合传递简单的数据，而  <code>slot</code>  更适合传递复杂的内容。</li>\n</ul>\n<h3 id=\"父传子props\"><a class=\"markdownIt-Anchor\" href=\"#父传子props\">#</a> 父传子：props</h3>\n<p>子组件可以通过  <code>props</code>  从父组件接受动态数据。</p>\n<ol>\n<li>父组件传递 <code>props</code> ：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;greeting&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>子组件使用 <code>defineProps() </code> ，声明子组件所接受的  <code>props</code> ：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//ChildComp.vue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  msg: String,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"父传子slot-插槽\"><a class=\"markdownIt-Anchor\" href=\"#父传子slot-插槽\">#</a> 父传子：slot 插槽</h3>\n<p>匿名插槽、具名插槽、作用于插槽、动态插槽</p>\n<p>我们已经了解到组件能够接收任意类型的  <code>JavaScript </code> 值作为  <code>props</code> ，但组件要如何接收模板内容呢？在某些场景中，我们可能想要为子组件传递一些模板片段，让子组件在它们的组件中渲染这些片段。<br>\n插槽内容可以是任意合法的模板内容，不局限于文本，可以传入多个元素，甚至是组件。<br>\n通过使用插槽，子组件更加灵活和具有可复用性。现在组件可以用在不同的地方渲染各异的内容，但同时还保证都具有相同的样式。</p>\n<ol>\n<li>父组件中：在<strong>子组件标签</strong>中直接写要传递的内容：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ChildComp&gt;</span><br><span class=\"line\">  插槽内容</span><br><span class=\"line\">&lt;/ChildComp&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>子组件中：写一个 <code>&lt;slot&gt;</code> ，它是一个<strong>插槽出口</strong>，标示了父元素提供的<strong>插槽内容</strong>将在哪里被渲染。</li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>&lt;/slot</span><br><span class=\"line\">  &gt;<span class=\"comment\">&lt;!-- 插槽出口 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>最终渲染出的 DOM 是这样：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>插槽内容<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"渲染作用域\"><a class=\"markdownIt-Anchor\" href=\"#渲染作用域\">#</a> 渲染作用域</h4>\n<p>插槽内容可以访问到父组件的数据作用域，因为插槽内容本身是在父组件模板中定义的。举例来说：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;ChildComp&gt;&#123;&#123; message &#125;&#125;&lt;/ChildComp&gt;</span><br></pre></td></tr></table></figure>\n<p>这里的两个  <code>&#123;&#123; message &#125;&#125;</code>  插值表达式渲染的内容都是一样的。</p>\n<ul>\n<li>注意：插槽内容无法访问子组件的数据。父组件模板中的表达式只能访问父组件的作用域；子组件模板中的表达式只能访问子组件的作用域。</li>\n</ul>\n<h4 id=\"默认内容\"><a class=\"markdownIt-Anchor\" href=\"#默认内容\">#</a> 默认内容</h4>\n<p>在外部没有提供任何内容的情况下，可以为插槽指定默认内容。比如子组件中有这样一个内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果我们想在父组件没有提供任何插槽内容时在子组件的 <code>&lt;div&gt;</code>  内渲染一些元素，只需要将其写在  <code>&lt;slot&gt;</code>  标签之间来作为默认内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span>默认内容<span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>只要父组件没有向这个子组件提供任何插槽内容，“默认内容” 将会被作为默认内容渲染，但如果父组件提供了插槽内容，那么被显式提供的内容会取代默认内容。</p>\n<h4 id=\"具名插槽\"><a class=\"markdownIt-Anchor\" href=\"#具名插槽\">#</a> 具名插槽</h4>\n<p>有时会在一个组件中使用多个<strong>插槽出口</strong>，比如某个子组件中有如下模板：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 标题内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 主要内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 底部内容放这里 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>对于这种场景， <code>&lt;slot&gt;</code>  元素可以有一个特殊的 <code>name</code> ，用来给各个插槽分配唯一的 ID，以确定每一处要渲染的内容：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">main</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这类带  <code>name</code>  的插槽被称为<strong>具名插槽</strong> 没有提供  <code>name</code>  的  <code>&lt;slot&gt; </code> 出口会隐式地命名为 “default”。</p>\n<p>这种情况下，父组件在使用这个子组件的时候就需要使用一个含  <code>v-slot</code>  指令的  <code>&lt;template&gt;</code>  元素为具名插槽传入内容，并将目标插槽的名字传给该指令: <code>&lt;template v-slot:header&gt;</code> , 而 <code>v-slot</code>  有对应的简写  <code>#</code> ，因此  <code>&lt;template v-slot:header&gt;</code>  可以简写为  <code>&lt;template #header&gt;</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">default</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ChildComp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>当一个组件同时接收默认插槽和具名插槽时，所有位于顶级的非  <code>&lt;template&gt;</code>  节点都被隐式地视为默认插槽的内容。所以上面也可以写成：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Here might be a page title<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 隐式的默认插槽 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>A paragraph for the main content.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>And another one.<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">footer</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>Here&#x27;s some contact info<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ChildComp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"作用域插槽\"><a class=\"markdownIt-Anchor\" href=\"#作用域插槽\">#</a> 作用域插槽</h4>\n<p>插槽的内容无法访问到子组件的状态，然而在某些场景下插槽的内容可能想要同时使用父组件域内和子组件域内的数据。要做到这一点，我们需要一种方法来让子组件在渲染时将一部分数据提供给插槽。</p>\n<p>方法：可以像对组件传递  <code>props</code>  那样，向一个插槽的出口上传递 attributes：<br>\n————————————————————————————————————</p>\n<h3 id=\"简单使用父传子\"><a class=\"markdownIt-Anchor\" href=\"#简单使用父传子\">#</a> 简单使用<strong>父传子</strong></h3>\n<h4 id=\"props\"><a class=\"markdownIt-Anchor\" href=\"#props\">#</a>  <code>props</code></h4>\n<ul>\n<li>父组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;greeting&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>子组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  msg: String,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"slot-插槽\"><a class=\"markdownIt-Anchor\" href=\"#slot-插槽\">#</a>  <code>slot</code>  插槽</h4>\n<ul>\n<li>父组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span></span><br><span class=\"line\">  插槽内容</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">ChildComp</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>子组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span></span><span class=\"language-xml\">&lt;/slot</span></span><br><span class=\"line\"><span class=\"language-xml\">  &gt;</span>&lt;!-- 插槽出口 --&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"具名插槽-2\"><a class=\"markdownIt-Anchor\" href=\"#具名插槽-2\">#</a> 具名插槽</h4>\n<ul>\n<li>父组件:</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">hello</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;h1&gt;Here might be a page title&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/ChildComp&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>子组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>————————————————————————————————————</p>\n<h2 id=\"子给父emits\"><a class=\"markdownIt-Anchor\" href=\"#子给父emits\">#</a> 子给父：Emits</h2>\n<p>除了接收  <code>props</code> ，子组件还可以向父组件触发事件.</p>\n<ol>\n<li>父组件</li>\n</ol>\n<ul>\n<li>父组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ChildComp</span> <span class=\"attr\">:msg</span>=<span class=\"string\">&quot;greeting&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>子组件：</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">const props = defineProps(&#123;</span><br><span class=\"line\">  msg: String,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>子组件触发</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">  // 声明触发的事件</span><br><span class=\"line\">  const emit = defineEmits([&quot;response&quot;]);</span><br><span class=\"line\">  // 带参数触发</span><br><span class=\"line\">  emit(&quot;response&quot;, &quot;hello from child&quot;);</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p><code>emit()</code>  的第一个参数是事件的名称。其他所有参数都将传递给事件监听器。<br>\n父组件可以使用 <code>v-on</code>  监听子组件触发的事件 —— 这里的处理函数接收了子组件触发事件时的额外参数并将它赋值给了本地状态：</p>\n<h2 id=\"父子组件双向数据props-emits-v-model\"><a class=\"markdownIt-Anchor\" href=\"#父子组件双向数据props-emits-v-model\">#</a> 父子组件双向数据：props + emits + v-model</h2>\n<h2 id=\"兄弟组件间通信\"><a class=\"markdownIt-Anchor\" href=\"#兄弟组件间通信\">#</a> 兄弟组件间通信</h2>\n<p>方式极多</p>\n<h3 id=\"mitt-插件\"><a class=\"markdownIt-Anchor\" href=\"#mitt-插件\">#</a> mitt 插件</h3>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add mitt -S</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>src/plugins/Bus.js</code>  或 <code>src/utils/Bus.js</code> ：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> mitt <span class=\"keyword\">from</span> <span class=\"string\">&quot;mitt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">mitt</span>();</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>使用</li>\n</ol>\n<ul>\n<li>A 组件发送</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import mitt from &#x27;../utils/Bus.js&#x27;</span><br><span class=\"line\">let str = ref(&#x27;这是A组件的数据&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">const btn = ()=&gt; &#123;</span><br><span class=\"line\">  mitt.emit(&#x27;fn&#x27;,str)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;h1&gt;A组件&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;button @click = &quot;btn&quot;&gt;按钮&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>B 组件接收</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import mitt from &#x27;../utils/Bus.js&#x27;</span><br><span class=\"line\">let s = ref(&#x27;&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">onBeforeMount(()=&gt;&#123;</span><br><span class=\"line\">  mitt.on(&#x27;fn&#x27;,e =&gt; &#123;</span><br><span class=\"line\"><span class=\"code\">    s.value = e.value</span></span><br><span class=\"line\"><span class=\"code\">  &#125;)</span></span><br><span class=\"line\"><span class=\"code\">&#125;)</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;h1&gt;B组件&lt;/h1&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &#123;&#123;s&#125;&#125;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"label-标签\"><a class=\"markdownIt-Anchor\" href=\"#label-标签\">#</a> label 标签</h1>\n<p><code>&lt;label&gt; </code> 标签为 input 元素定义标注（标记）。</p>\n<p>label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</p>\n<p><code>&lt;label&gt; </code> 标签的 for 属性应当与相关元素的 id 属性相同。</p>\n<p>注释：“for” 属性可把 label 绑定到另外一个元素。请把 “for” 属性的值设置为相关元素的 id 属性的值。<br>\n就是一个文本提示标签，不过在 label 标签中加入 for 属性可以与相应的选项框进行捆绑，也就是说，在这种情况下你点击这个文本框就会活的点击选项框的效果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;lable&gt;男&lt;/lable&gt;</span><br><span class=\"line\">&lt;input style=&quot;checkbox&quot; /&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"h-函数\"><a class=\"markdownIt-Anchor\" href=\"#h-函数\">#</a> h 函数</h1>\n<p>Vue 推荐在绝大数情况下使用模板来创建你的 HTML，然后一些特殊的场景，你真的需要 JavaScript 的完全编程的<br>\n能力，这个时候你可以使用 渲染函数 ，它比模板更接近编译器；<br>\nVue 在生成真实的 DOM 之前，会将我们的节点转换成 VNode，而 VNode 组合在一起形成一颗树结构，就是虚<br>\n拟 DOM（VDOM）；<br>\n事实上，我们之前编写的 template 中的 HTML 最终也是使用渲染函数生成对应的 VNode；<br>\n那么，如果你想充分的利用 JavaScript 的编程能力，我们可以自己来编写 createVNode 函数，生成对应的<br>\n VNode；</p>\n<ul>\n<li>h () 函数是一个用于创建 vnode 的一个函数；其实更准备的命名是 createVNode () 函数，但是为了简便在 Vue 将之简化为 h () 函数</li>\n<li>h () 函数 如何使用呢？<br>\n它接受三个参数：第一个参数【type】既可以是一个字符串 (用于原生元素) 也可以是一个 Vue 组件定义。第二个参数【props】是要传递的 prop，第三个参数【children】是子节点。<br>\n除了 type 外，其他参数都是可选的。如果没有 props，那么通常可以将 children 作为第二个参数传入；如果会产生歧义，可以将 null 作为第二个参数传入，将 children 作为第三个参数传入</li>\n<li>h 函数的基本使用<br>\n h 函数可以在两个地方使用：</li>\n</ul>\n<ol>\n<li>render 函数选项中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, &#123; <span class=\"attr\">class</span>: <span class=\"string\">&quot;app&quot;</span> &#125;, <span class=\"string\">&quot;Hello App&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>setup 函数选项中（setup 本身需要是一个函数类型，函数再返回 h 函数创建的 VNode:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; h &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setuo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">() =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"string\">&quot;div&quot;</span>, &#123; <span class=\"attr\">class</span>: <span class=\"string\">&quot;app&quot;</span> &#125;, <span class=\"string\">&quot;Hello App&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"自定义指令\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令\">#</a> 自定义指令</h1>\n<p>在 Vue 的模板语法中我们学习过各种各样的指令： <code>v-show</code> 、 <code>v-for</code> 、 <code>v-model</code>  等等，除了使用这些指令之外，Vue<br>\n 也允许我们来自定义自己的指令<br>\n注意：在 Vue 中，代码的复用和抽象主要还是通过组件<br>\n通常在某些情况下，你需要对 DOM 元素进行底层操作，这个时候就会用到自定义指令</p>\n<ul>\n<li>自定义指令分为两种：</li>\n</ul>\n<ol>\n<li>自定义局部指令：组件中通过  <code>directives</code>  选项，只能在当前组件中使用</li>\n<li>自定义全局指令：app 的  <code>directive</code>  方法，可以在任意组件中被使用</li>\n</ol>\n<p>eg. 比如我们来做一个非常简单的案例：当某个元素挂载完成后可以自定获取焦点</p>\n<ul>\n<li>自定义一个  <code>v-focus</code>  的局部指令；<br>\n这个自定义指令实现非常简单，我们只需要在组件选项中使用  <code>directives</code>  即可<br>\n它是一个对象，在对象中编写我们自定义指令的名称（注意：这里不需要加 <code>v-</code> ）<br>\n自定义指令有一个生命周期，是在组件挂载后调用的  <code>mounted</code> ，我们可以在其中完成操作</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  directives: &#123;</span><br><span class=\"line\">    focus: &#123;</span><br><span class=\"line\">      mounted(el) &#123;</span><br><span class=\"line\">        el.focus();</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>自定义一个  <code>v-focus</code>  的全局指令；</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.<span class=\"title function_\">directives</span>(<span class=\"string\">&quot;focus&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"title function_\">mounted</span>(<span class=\"params\">el</span>) &#123;</span><br><span class=\"line\">    el.<span class=\"title function_\">focus</span>();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"指令的生命周期\"><a class=\"markdownIt-Anchor\" href=\"#指令的生命周期\">#</a> 指令的生命周期</h2>\n<p>一个指令定义的对象，Vue 提供了如下的几个钩子函数<br>\n <code>created</code> ：在绑定元素的 attribute 或事件监听器被应用之前调用<br>\n <code>beforeMount</code> ：当指令第一次绑定到元素并且在挂载父组件之前调用<br>\n <code>mounted</code> ：在绑定元素的父组件被挂载后调用<br>\n <code>beforeUpdate</code> ：在更新包含组件的 VNode 之前调用<br>\n <code>updated</code> ：在包含组件的 VNode 及其子组件的 VNode 更新后调用<br>\n <code>beforeUnmount</code> ：在卸载绑定元素的父组件之前调用<br>\n <code>unmounted</code> ：当指令与元素解除绑定且父组件已卸载时，只调用一次</p>\n<h2 id=\"自定义指令练习时间戳\"><a class=\"markdownIt-Anchor\" href=\"#自定义指令练习时间戳\">#</a> 自定义指令练习；时间戳</h2>\n<p>来实现一个可以自动对时间格式化的指令 <code>v-format-time</code> ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dayjs <span class=\"keyword\">from</span> <span class=\"string\">&quot;dayjs&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">app</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> format = <span class=\"string\">&quot;YYYY-MM-DD HH:mm:ss&quot;</span>;</span><br><span class=\"line\">  app.<span class=\"title function_\">directive</span>(<span class=\"string\">&quot;format-time&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"title function_\">created</span>(<span class=\"params\">el, bingings</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (bingings.<span class=\"property\">value</span>) &#123;</span><br><span class=\"line\">        format = bingings.<span class=\"property\">value</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"title function_\">mounted</span>(<span class=\"params\">el</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> textContent = el.<span class=\"property\">textContent</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> timestamp = <span class=\"built_in\">parseInt</span>(el.<span class=\"property\">textContent</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (textContent.<span class=\"property\">length</span> === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">        timestamp = timestamp * <span class=\"number\">1000</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(timestamp);</span><br><span class=\"line\">      el.<span class=\"property\">textContent</span> = <span class=\"title function_\">dayjs</span>(timestamp).<span class=\"title function_\">format</span>(format);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"teleport\"><a class=\"markdownIt-Anchor\" href=\"#teleport\">#</a> Teleport</h1>\n<p>在组件化开发中，我们封装一个组件 A，在另外一个组件 B 中使用，那么组件 A 中 template 的元素，会被挂载到组件 B 中 template 的某个位置最终我们的应用程序会形成一颗 DOM 树结构<br>\n但是某些情况下，我们希望组件不是挂载在这个组件树上的，可能是移动到 Vue app 之外的其他位置。比如移动到 body 元素上，或者我们有其他的 div#app 之外的元素上。这个时候我们就可以通过 teleport 来完成</p>\n<h1 id=\"vue-插件\"><a class=\"markdownIt-Anchor\" href=\"#vue-插件\">#</a> Vue 插件</h1>\n<p>通常我们向 Vue 全局添加一些功能时，会采用插件的模式，它有两种编写方式：</p>\n<ol>\n<li>对象类型：一个对象，但是必须包含一个 install 的函数，该函数会在安装插件时执行</li>\n<li>函数类型：一个 function，这个函数会在安装插件时自动执行<br>\n插件可以完成的功能没有限制，比如下面的几种都是可以的：</li>\n</ol>\n<ul>\n<li>添加全局方法或者  <code>property</code> ，通过把它们添加到  <code>config.globalProperties</code>  上实现；</li>\n<li>添加全局资源：指令 / 过滤器 / 过渡等；</li>\n<li>通过全局  <code>mixin</code>  来添加一些组件选项；</li>\n<li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能</li>\n</ul>\n<h2 id=\"插件的编写方式\"><a class=\"markdownIt-Anchor\" href=\"#插件的编写方式\">#</a> 插件的编写方式</h2>\n<p>对象类型写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">install</span>(<span class=\"params\">app, options</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;插件被安装:&quot;</span>, app, options);</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>函数类型的写法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\">app, options</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;插件被安装:&quot;</span>, app, options);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"vue3-如何注册全局组件方法替代-vue2-的-vueprototype\"><a class=\"markdownIt-Anchor\" href=\"#vue3-如何注册全局组件方法替代-vue2-的-vueprototype\">#</a> vue3 如何注册全局组件 / 方法（替代 vue2 的 Vue.prototype）</h1>\n<ol>\n<li>provide /inject （推荐）<br>\nmain.js 中：通过 provide 将组件或者方法、变量挂载在全局：封装了一个函数，在首页中我们只需要调用这个函数并且传入 app 即可</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(store);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载全局方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">globalFunc</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;要挂载在全局的方法&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 将globalFunc方法挂载在全局</span></span><br><span class=\"line\">app.<span class=\"title function_\">provide</span>(<span class=\"string\">&quot;globalFunc&quot;</span>, globalFunc);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把vue实例挂载在window.vm,方便使用vue的实例</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">vm</span> = app;</span><br></pre></td></tr></table></figure>\n<p>组件中：通过 inject 获取全局方法并调用:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>组件中通过inject获取全局方法并调用<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; defineComponent, onMounted, inject &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;JobDetail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 注册组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Header</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">testFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> testFunc = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> <span class=\"attr\">globalFunc</span>: any = <span class=\"title function_\">inject</span>(<span class=\"string\">&quot;globalFunc&quot;</span>); <span class=\"comment\">// 通过inject获取挂载在全局的globalFunc方法</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">globalFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        testFunc,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>app.config.globalProperties（不推荐）</li>\n</ol>\n<p>main.js 中：通过  <code>app.config.globalProperties</code>  将组件或者方法、变量挂载在全局</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&quot;./router&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&quot;./store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(store);</span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(router);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 挂载全局方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">globalFunc</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;要挂载在全局的方法&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 将globalFunc方法挂载在全局</span></span><br><span class=\"line\">app.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"property\">globalFunc</span> = globalFunc;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 把vue实例挂载在window.vm,方便使用vue的实例</span></span><br><span class=\"line\"><span class=\"variable language_\">window</span>.<span class=\"property\">vm</span> = app;</span><br></pre></td></tr></table></figure>\n<p>组件中：通过  <code>getCurrentInstance().appContext.config.globalProperties</code>  获取全局方法并调用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>组件中通过inject获取全局方法并调用<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; defineComponent, onMounted, getCurrentInstance &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;JobDetail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"comment\">// 注册组件</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">Header</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"title function_\">testFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> testFunc = (): <span class=\"function\"><span class=\"params\">void</span> =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"keyword\">const</span> <span class=\"attr\">internalInstance</span>: any = <span class=\"title function_\">getCurrentInstance</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(internalInstance.<span class=\"property\">appContext</span>.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>);</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"comment\">// 通过getCurrentInstance().appContext.config.globalProperties获取全局方法并调用</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">        internalInstance.<span class=\"property\">appContext</span>.<span class=\"property\">config</span>.<span class=\"property\">globalProperties</span>.<span class=\"title function_\">globalFunc</span>();</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        testFunc,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>import _ as 是什么？<br>\n如果你想一次性全部导入模块的所有变量就可以使用 _ as 代表全部</p>\n<h1 id=\"过渡动画-transition\"><a class=\"markdownIt-Anchor\" href=\"#过渡动画-transition\">#</a> 过渡动画 transition</h1>\n<p>过渡动画 class：</p>\n</li>\n<li>\n<p><code>v-enter-from</code> ：定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除</p>\n</li>\n<li>\n<p><code>v-enter-active</code> ：定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡 / 动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数。</p>\n</li>\n<li>\n<p><code>v-enter-to</code> ：定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter-from 被移除)，在过渡 / 动画完成之后移除。</p>\n</li>\n<li>\n<p><code>v-leave-from</code> ：定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除</p>\n</li>\n<li>\n<p><code>v-leave-active</code> ：定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡 / 动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。</p>\n</li>\n<li>\n<p><code>v-leave-to</code> ：离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave-from 被删除)，在过渡 / 动画完成之后移除。</p>\n</li>\n</ul>\n<p>class 的 name 命名规则如下：</p>\n<ol>\n<li>如果我们使用的是一个没有 name 的 transition，那么所有的 class 是以 v- 作为默认前缀</li>\n<li>如果我们添加了一个 name 属性，比如 <transtion name=\"why\">，那么所有的 class 会以 why- 开头；</li>\n</ol>\n<h2 id=\"vuex-的状态管理\"><a class=\"markdownIt-Anchor\" href=\"#vuex-的状态管理\">#</a> Vuex 的状态管理</h2>\n<ul>\n<li>\n<p>管理不断变化的 state 本身是非常困难的<br>\n状态之间相互会存在依赖，一个状态的变化会引起另一个状态的变化，View 页面也有可能会引起状态的变化。当应用程序复杂时，state 在什么时候，因为什么原因而发生了变化，发生了怎么样的变化，会变得非常难以控制和追踪</p>\n</li>\n<li>\n<p>因此，我们是否可以考虑将组件的内部状态抽离出来，以一个全局单例的方式来管理呢？<br>\n在这种模式下，我们的组件树构成了一个巨大的 “视图 View”, 不管在树的哪个位置，任何组件都能获取状态或者触发行为<br>\n通过定义和隔离状态管理中的各个概念，并通过强制性的规则来维护视图和状态间的独立性，我们的代码边会变得更加结构化和易于维护、跟踪；<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/93Q@8VN8%60V_I72$62UDA~1A.png\" alt=\"\"></p>\n</li>\n</ul>\n<h3 id=\"store-仓库\"><a class=\"markdownIt-Anchor\" href=\"#store-仓库\">#</a> Store 仓库</h3>\n<p>每一个 Vuex 应用的核心就是 store（仓库）：store 本质上是一个 <code>容器</code> ，它包含着你的应用中大部分的状态（ <code>state</code> ）</p>\n<ul>\n<li>Vuex 和单纯的全局对象有什么区别呢？</li>\n</ul>\n<ol>\n<li>Vuex 的状态存储是响应式的：当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会被更新</li>\n<li>你不能直接改变 store 中的状态：改变 store 中的状态的唯一途径就显示提交 ( <code>commit</code> ) mutation, 这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够通过一些工具帮助我们更好的管理应用的状态</li>\n<li>使用步骤：创建 Store 对象，在 app 中通过插件安装</li>\n</ol>\n<h3 id=\"组件中使用-store\"><a class=\"markdownIt-Anchor\" href=\"#组件中使用-store\">#</a> 组件中使用 store</h3>\n<p>组件中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;h2&gt;&#123;&#123; $store.state.counter &#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">    &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  name: &quot;App&quot;,</span><br><span class=\"line\">  data() &#123;&#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    increment() &#123;</span><br><span class=\"line\">      this.$store.commit(&quot;increment&quot;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>store 中：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store <span class=\"title function_\">createStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"title function_\">state</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">counter</span>:<span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">      <span class=\"title function_\">increment</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">        state.<span class=\"property\">counter</span>++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> store</span><br></pre></td></tr></table></figure>\n<h3 id=\"单一状态树\"><a class=\"markdownIt-Anchor\" href=\"#单一状态树\">#</a> 单一状态树</h3>\n<p>Vuex 使用单一状态树，用一个对象就包含了全部的应用层级的状态，这也意味着，<strong>每个应用将仅仅包含一个 store 实例</strong><br>\n单状态树和模块化并不冲突，后面我们会讲到 module 的概念</p>\n<ul>\n<li>单一状态树的优势：<br>\n如果你的状态信息是保存到多个 Store 对象中的，那么之后的管理和维护等等都会变得特别困难，所以 Vuex 也使用了单一状态树来管理应用层级的全部状态；单一状态树能够让我们最直接的方式找到某个状态的片段，而且在之后的维护和调试过程中，也可以非常方便的管理和维护</li>\n</ul>\n<h3 id=\"组件获取状态\"><a class=\"markdownIt-Anchor\" href=\"#组件获取状态\">#</a> 组件获取状态</h3>\n<p>在前面我们已经学习过如何在组件中获取状态了 ( <code>$store.state.counter</code> ), 如果觉得那种方式有点繁琐（表达式过长），我们可以使用计算属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">counter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"property\">state</span>.<span class=\"property\">counter</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果我们有很多个状态都需要获取，可以使用 <code>mapState</code>  的辅助函数:<br>\nmapState 的方式一：对象类型<br>\n mapState 的方式二：数组类型<br>\n也可以使用展开运算符和来原有的 computed 混合在一起</p>\n<h4 id=\"在-setup-中使用-mapstate\"><a class=\"markdownIt-Anchor\" href=\"#在-setup-中使用-mapstate\">#</a> 在 setup 中使用 mapState</h4>\n<p>通过 useStore 拿到 store 后去获取某个状态即可</p>\n<h4 id=\"getters-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#getters-的基本使用\">#</a> getters 的基本使用</h4>\n<p>某些属性我们可能需要经过变化后来使用，这个时候可以使用 getters：</p>\n<h3 id=\"mutation-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#mutation-基本使用\">#</a> Mutation 基本使用</h3>\n<p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">increment</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">counter</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Mutation 携带数据<br>\n很多时候我们在提交 mutation 的时候，会携带一些数据，这个时候我们可以使用参数：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">addNumber</span>(<span class=\"params\">state,payload</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">counter</span> += payload</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>payload 为对象类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addNumber</span>(<span class=\"params\">state,payload</span>) &#123;</span><br><span class=\"line\">  state.<span class=\"property\">counter</span> += payload.<span class=\"property\">count</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对象风格的提交方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$store.<span class=\"title function_\">commit</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;addNumber&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">count</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"mapmutations-辅助函数\"><a class=\"markdownIt-Anchor\" href=\"#mapmutations-辅助函数\">#</a> mapMutations 辅助函数</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = <span class=\"title function_\">mapMutations</span>([<span class=\"string\">&quot;increment&quot;</span>, <span class=\"string\">&quot;decrement&quot;</span>]);</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations2 = <span class=\"title function_\">mapMutations</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">addNumber</span>: <span class=\"variable constant_\">ADD_NUMBER</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>mutation 重要原则一条重要的原则就是要记住  <code>mutation</code>  必须是<strong>同步</strong>函数</p>\n<h3 id=\"actions-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#actions-的基本使用\">#</a> actions 的基本使用</h3>\n<p>Action 类似于 mutation，不同在于 Action 提交的是 mutation，而不是直接变更状态<br>\n<strong> Action 可以包含异步操作</strong></p>\n<ul>\n<li>这里有一个非常重要的参数 <code>context</code> ：<br>\n <code>context</code>  是一个和 store 实例均有相同方法和属性的 context 对象，所以我们可以从其中获取到 commit 方法来提交一个 mutation，或者通过 context.state 和 context.getters 来<br>\n获取 state 和 getters</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">increment</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">counter</span>++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">increment</span>(<span class=\"params\">context</span>) &#123;</span><br><span class=\"line\">    context.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;increment&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"actions-的分发操作\"><a class=\"markdownIt-Anchor\" href=\"#actions-的分发操作\">#</a> actions 的分发操作</h4>\n<p>如何使用 action 呢？<br>\n进行 action 的分发：分发使用的是 store 上的 <code>dispatch</code>  函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;increment&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>同样的，它也可以携带我们的参数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;increment&quot;</span>,&#123;<span class=\"attr\">count</span>:<span class=\"number\">100</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也可以以对象的形式进行分发：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">add</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>:<span class=\"string\">&quot;increment&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">count</span>:<span class=\"number\">100</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"actions-的辅助函数\"><a class=\"markdownIt-Anchor\" href=\"#actions-的辅助函数\">#</a> actions 的辅助函数</h4>\n<p>action 也有对应的辅助函数：<br>\n对象类型的写法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&quot;increment&quot;</span>,<span class=\"string\">&quot;decrement&quot;</span>]),</span><br><span class=\"line\">  ...<span class=\"title function_\">mapActions</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">add</span>:<span class=\"string\">&quot;increment&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sub</span>:<span class=\"string\">&quot;decrement&quot;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"actions-的异步操作\"><a class=\"markdownIt-Anchor\" href=\"#actions-的异步操作\">#</a> actions 的异步操作</h4>\n<h3 id=\"module-的基本使用\"><a class=\"markdownIt-Anchor\" href=\"#module-的基本使用\">#</a> module 的基本使用</h3>\n<p>什么是 Module？<br>\n由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store 对象就有可<br>\n能变得相当臃肿<br>\n为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;&#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"title function_\">createStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: moduleB,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">a</span>; <span class=\"comment\">// =&gt; moduleA的状态</span></span><br><span class=\"line\">store.<span class=\"property\">state</span>.<span class=\"property\">b</span>; <span class=\"comment\">// =&gt; moduleB的状态</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>module 的命名空间<br>\n默认情况下，模块内部的 action 和 mutation 仍然是注册在<strong>全局的命名空间</strong>中的。这样使得多个模块能够对同一个 action 或 mutation 作出响应，Getter 同样也默认注册在全局命名空间<br>\n如果我们希望模块具有更高的封装度和复用性，可以添加  <code>namespaced: true</code>  的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">namespaced</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">state</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;why&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"number\">1.88</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">changeName</span>(<span class=\"params\">state</span>) &#123;</span><br><span class=\"line\">    state.<span class=\"property\">name</span> = <span class=\"string\">&quot;coderwhy&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">getters； &#123;</span><br><span class=\"line\">  <span class=\"title function_\">info</span>(<span class=\"params\">state,getters,rootState,rootGetters</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`name:<span class=\"subst\">$&#123;state.name&#125;</span> age:<span class=\"subst\">$&#123;state.age&#125;</span> height:<span class=\"subst\">$&#123;state.height&#125;</span>`</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  <span class=\"title function_\">changeNameAction</span>(<span class=\"params\">&#123;commit,dispatch,state,rootState,getters,rootGetters&#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;changeName&quot;</span>,<span class=\"string\">&quot;kobe&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"nexttick\"><a class=\"markdownIt-Anchor\" href=\"#nexttick\">#</a> nextTick</h1>\n<p>(一个 api)<br>\n 官方解释：将回调推迟到下一个 DOM 更新周期之后执行。在更改了一些数据以等待 DOM 更新后立即使用它。<br>\n比如我们有下面的需求：点击一个按钮，我们会修改在 h2 中显示的 message；message 被修改后，获取 h2 的高度</p>\n<p>实现上面的案例我们有三种方式：</p>\n<ol>\n<li>在点击按钮后立即获取到 h2 的高度（错误的做法）</li>\n<li>在 updated 生命周期函数中获取 h2 的高度（但是其他数据更新，也会执行该操作）</li>\n<li>使用 nextTick 函数</li>\n</ol>\n<h1 id=\"definecomponent\"><a class=\"markdownIt-Anchor\" href=\"#definecomponent\">#</a> defineComponent</h1>\n<p>vue3 中，新增了  <code>defineComponent</code>  ，它并没有实现任何的逻辑，只是把接收的 Object 直接返回，它的存在是完全让传入的整个对象获得对应的类型，它的存在就是完全为了服务 TypeScript 而存在的。<br>\n(ps. 读到 &quot;它的存在就是完全为了服务 TypeScript 而存在的&quot; 时莫名其妙觉得好浪漫～)<br>\n 我们都知道普通的组件就是一个普通的对象，既然是一个普通的对象，那自然就不会获得自动的提示:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;Home&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup, <span class=\"comment\">// 没有该有的提示，这非常的不友好</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component;</span><br></pre></td></tr></table></figure>\n<p>但是当我们加上 defineComponent（） 之后，就完全不一样了，可以获得自动提示，vue2、vue3 的自动提示都有:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> component = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Home&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">props</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"title class_\">String</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  setup（props, context）&#123;<span class=\"comment\">// setup 可接受两个参数，一个props，和 context</span></span><br><span class=\"line\">    <span class=\"comment\">// props.data</span></span><br><span class=\"line\">    <span class=\"comment\">// context.attrs    context.slots    context.emit</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> component</span><br></pre></td></tr></table></figure>\n<p>接下来看看 setup 中的两个参数  <code>props</code>  与  <code>context</code>  ,<br>\n <code>props</code>  指组件传递来的参数，并且 ts 可以推论出 <code>props</code>  的类型. <code>props</code>  也就是 vue2 中组件中的  <code>props</code> <br>\n <code>context</code>  有三个属性  <code>attrs</code>   <code>slots</code>   <code>emit</code>  分别对应 vue2 中的 <code>attrs</code>  属性、 <code>slots</code>  插槽、 <code>$emit</code>  发送事件</p>\n<ul>\n<li><code>defineComponent</code>  函数，只是对 setup 函数进行封装，返回 <code>options</code>  的对象；</li>\n<li><code>defineComponent</code>  最重要的是：在 TypeScript 下，给予了组件 正确的参数类型推断。</li>\n</ul>\n<h1 id=\"teleport-传送组件\"><a class=\"markdownIt-Anchor\" href=\"#teleport-传送组件\">#</a> Teleport 传送组件</h1>\n<p>假如在父组件中引用了一个子组件，那么渲染成页面后这个子组件 HTML 也是必然被父组件 HTML 包含的。</p>\n<p>但是如果把子组件放置到了 teleport 组件中，那么我们就可以指定该子组件渲染到父组件之外的其它 DOM 节点下，比如 body 或者其它的 DOM 等等。这就有点类似与 “传送” 了.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">teleport</span> <span class=\"attr\">to</span>=<span class=\"string\">&#x27;要传送的地方&#x27;</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">  …………</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">teleport</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：传送之前要先有 dom 【顺序】</li>\n<li>使用场景：假如有非常多的弹窗，那么如何管理它们的 z-index 呢，也就是同时弹窗时的层级关系，如果每个弹窗都在各自的父组件中，那么我们是没法控制的，所有有必要把它们都拧出来，放在同一个父元素下面，这样就可以方便的设置层级关系了</li>\n</ul>\n<h1 id=\"component-动态组件\"><a class=\"markdownIt-Anchor\" href=\"#component-动态组件\">#</a> Component 动态组件</h1>\n<p><code>component</code>  是 vue 内置组件，主要作用为动态渲染组件，进行动态组件切换</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;要动态绑定的组件&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>若是数据需要动态渲染，组件切换之后会导致之前获得的数据丢失，这个时候，若我们想要在组件切换过程中保持这些组件的状态，以避免重复渲染导致性能问题，则可以在动态组件上使用 <code>keep-alive</code>  来缓存组件中的数据:</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">keep-alive</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;要动态绑定的组件&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">keep-alive</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"异步组件\"><a class=\"markdownIt-Anchor\" href=\"#异步组件\">#</a> 异步组件</h1>\n<h2 id=\"场景一\"><a class=\"markdownIt-Anchor\" href=\"#场景一\">#</a> 场景一</h2>\n<p>在开发 Vue 项目时，大多数人都会用到组件。在父组件中，子组件的加载一般是按照先后顺序加载的，子组件加载后才会加载父组件<br>\n如果一个页面的子组件很多，由于会先加载子组件，那么父组件可能会出现比较长的白屏等待时间。我们想让某些子组件异步加载应该怎么办呢？Vue3 提供了一个新增的 <code>defineAsyncComponent</code>  方法来实现异步组件。</p>\n<ul>\n<li>函数方式创建</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父组件</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">  import &#123; onMounted, defineAsyncComponent &#125; from &quot;vue&quot;;</span><br><span class=\"line\">  const AsyncChild = defineAsyncComponent(() =&gt; import(&quot;./child.vue&quot;));</span><br><span class=\"line\">  onMounted(() =&gt; &#123;</span><br><span class=\"line\"><span class=\"code\">    console.log(&quot;父组件先运行了&quot;);</span></span><br><span class=\"line\"><span class=\"code\">  &#125;);</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;template&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;AsyncChild /&gt; </span></span><br><span class=\"line\"><span class=\"code\">  &lt;!-- 这个&lt;AsyncChild /&gt;是自己在 &lt;script setup&gt;中定义的名字 --&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/template&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>对象的方式创建</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AsyncComp</span> = <span class=\"title function_\">defineAsyncComponent</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 加载函数，需要返回一个Promise，可以使用动态import的方式，也可以自己new Promise()</span></span><br><span class=\"line\">  <span class=\"attr\">loader</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;./Foo.vue&quot;</span>),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载异步组件时使用的组件，该组件会在异步组件加载时显示，如果异步组件加载很快，可能不会出现loading组件</span></span><br><span class=\"line\">  <span class=\"attr\">loadingComponent</span>: <span class=\"title class_\">LoadingComponent</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 展示加载组件前的延迟时间，默认为 200ms</span></span><br><span class=\"line\">  <span class=\"attr\">delay</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 加载失败后展示的组件，可以通过Promise的reject来测试</span></span><br><span class=\"line\">  <span class=\"attr\">errorComponent</span>: <span class=\"title class_\">ErrorComponent</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 如果提供了一个 timeout 时间限制，并超时了</span></span><br><span class=\"line\">  <span class=\"comment\">// 也会显示这里配置的报错组件，默认值是：Infinity</span></span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">3000</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"场景二\"><a class=\"markdownIt-Anchor\" href=\"#场景二\">#</a> 场景二</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Suspense</span> #<span class=\"attr\">default</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">A</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">A</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span> #<span class=\"attr\">fallback</span>&gt;</span></span></span><br><span class=\"line\">  加载中...</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">Suspense</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">const A = defineAsyncComponent(()=&gt;</span><br><span class=\"line\">import(../components/A.vue))</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>打包的时候分包，会将异步组件单独打包</p>\n<h1 id=\"mixin-混入\"><a class=\"markdownIt-Anchor\" href=\"#mixin-混入\">#</a> Mixin 混入</h1>\n<ul>\n<li>解释：将组件的公共逻辑或者配置提取出来，哪个组件需要用到时，直接将提取的这部分混入到组件内部即可。</li>\n<li>注意：提取的是逻辑或配置，而不是 HTML 代码和 CSS 代码。其实大家也可以换一种想法，mixin 就是组件中的组件，Vue 组件化让我们的代码复用性更高，那么组件与组件之间还有重复部分，我们使用 Mixin 在抽离一遍。</li>\n</ul>\n<h2 id=\"mixin-和-vuex-的区别\"><a class=\"markdownIt-Anchor\" href=\"#mixin-和-vuex-的区别\">#</a> Mixin 和 Vuex 的区别？</h2>\n<p>上面一点说 Mixin 就是一个抽离公共部分的作用。在 Vue 中，Vuex 状态管理似乎也是做的这一件事，它也是将组件之间可能共享的数据抽离出来。两者看似一样，实则还是有细微的区别，区别如下：</p>\n<ol>\n<li>Vuex 公共状态管理，如果在一个组件中更改了 Vuex 中的某个数据，那么其它所有引用了 Vuex 中该数据的组件也会跟着变化。</li>\n<li>Mixin 中的数据和方法都是独立的，组件之间使用后是互相不影响的。</li>\n</ol>\n<h2 id=\"优缺点\"><a class=\"markdownIt-Anchor\" href=\"#优缺点\">#</a> 优缺点</h2>\n<h3 id=\"优点\"><a class=\"markdownIt-Anchor\" href=\"#优点\">#</a> 优点</h3>\n<ol>\n<li>提高代码复用性</li>\n<li>无需传递状态</li>\n<li>维护方便，只需要修改一个地方即可</li>\n</ol>\n<h3 id=\"缺点\"><a class=\"markdownIt-Anchor\" href=\"#缺点\">#</a> 缺点</h3>\n<ol>\n<li>命名冲突</li>\n<li>滥用的话后期很难维护</li>\n<li>不好追溯源，排查问题稍显麻烦</li>\n<li>不能轻易的重复代码</li>\n</ol>\n<h2 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h2>\n<ol>\n<li><code>src/mixin/index.js</code></li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ref &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//抽取的公共逻辑或配置</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> num = <span class=\"title function_\">ref</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> <span class=\"title function_\">Btn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    num.<span class=\"property\">value</span> += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  retuen &#123;</span><br><span class=\"line\">    num,</span><br><span class=\"line\">    fBtn</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在组件中使用：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">&#123;&#123;num&#125;&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span> = <span class=\"string\">&quot;Btn&quot;</span>&gt;</span></span>点击<span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import mixin from &#x27;地址&#x27;</span><br><span class=\"line\">//可以把mixin中的东西解构出来,解构出来就能直接用了</span><br><span class=\"line\">let &#123;num,Btn&#125; = mixin()</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"provide-和-inject-依赖注入\"><a class=\"markdownIt-Anchor\" href=\"#provide-和-inject-依赖注入\">#</a> Provide 和 Inject 依赖注入</h1>\n<p>父组件和孙子辈间进行组件通信<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.jpg\" alt=\"依赖注入\"></p>\n<ul>\n<li>父组件</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">sctipt</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123;provide&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">import Child from &#x27;url&#x27;</span><br><span class=\"line\">let num = ref(100)</span><br><span class=\"line\">provide(&#x27;changeNum&#x27;,num)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">sctipt</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>后代组件</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123;inject&#125; from &#x27;vue&#x27;</span><br><span class=\"line\">const aNum = inject(&#x27;changeNum&#x27;)</span><br><span class=\"line\">console.log(aNum)</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"vuex\"><a class=\"markdownIt-Anchor\" href=\"#vuex\">#</a> vuex</h1>\n<p><code>state</code>  值要用 <code>computed()</code>  去接： <code>let num = computed( ()=&gt; store.state.num )</code>  不然不是响应的数据<br>\n <code>mutations</code>  里面的方法用 <code>commit()</code>  调用<br>\n <code>actions</code>  里面的方法用 <code>dispatch()</code>  调用</p>\n<ul>\n<li>注意：vuex 修改数据只能用 <code>mutations</code>  提交来修改</li>\n</ul>\n<h2 id=\"vuex-持久化存储插件实现\"><a class=\"markdownIt-Anchor\" href=\"#vuex-持久化存储插件实现\">#</a> vuex 持久化存储【插件实现】</h2>\n<p>可以用 localStorage，也可以用插件： <code>vuex-persistedstate</code></p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add vuex-persistedstate -S</span><br></pre></td></tr></table></figure>\n<p>2. <code> src/store/index.js</code>  中使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;createStore&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> persistedState <span class=\"keyword\">from</span> <span class=\"string\">`vuex-persistedstate `</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">createStore</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">plugins</span>:[<span class=\"title function_\">persistedState</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">key</span>:<span class=\"string\">&#x27;&#x27;</span>,<span class=\"comment\">//浏览器中的名字</span></span><br><span class=\"line\">    <span class=\"attr\">path</span>:[], <span class=\"comment\">//需要存储起来的参数模块</span></span><br><span class=\"line\">  &#125;)]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"pinia\"><a class=\"markdownIt-Anchor\" href=\"#pinia\">#</a> Pinia</h1>\n<h2 id=\"pinia-和-vuex-的区别\"><a class=\"markdownIt-Anchor\" href=\"#pinia-和-vuex-的区别\">#</a> pinia 和 vuex 的区别：</h2>\n<ol>\n<li>pinia 没有 mutations，只有：state、getters、actions</li>\n<li>pinia 分模块不需要 modules（vuex 需要）</li>\n<li>ts 支持更好</li>\n<li>自动化代码拆分</li>\n<li>pinia 体积更小（性能更好）</li>\n<li>可以直接修改 state 数据（vuex 只能通过 mutations 提交来修改），但是不能直接解构，应该要用换种解构方式 storeToRefs</li>\n</ol>\n<h2 id=\"pinia-使用\"><a class=\"markdownIt-Anchor\" href=\"#pinia-使用\">#</a> pinia 使用</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add pinia</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li><code>src/main.js</code> : 创建一个 pinia（根存储）并将其传递给应用程序：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createPinia &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title function_\">createPinia</span>());</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li><code>src/store/index.js</code>  中使用</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 定义容器并导出</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数一: 容器ID, 唯一, 将来 Pinia 会把所有的容器挂载到根容器</span></span><br><span class=\"line\"><span class=\"comment\"> * 参数二: 选项对象</span></span><br><span class=\"line\"><span class=\"comment\"> * 返回值: 函数, 调用的时候要空参调用, 返回容器实例</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&quot;storeId&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类似组件的 data, 用于存储全局的的状态</span></span><br><span class=\"line\"><span class=\"comment\">   * 注意:</span></span><br><span class=\"line\"><span class=\"comment\">   *    1.必须是函数, 为了在服务端渲染的时候避免交叉请求导致的数据交叉污染</span></span><br><span class=\"line\"><span class=\"comment\">   *    2.必须是箭头函数, 为了更好的 TS 类型推导</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">num</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类似组件的 computed, 用来封装计算属性, 具有缓存特性</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 类似组件的 methods, 封装业务逻辑, 修改state</span></span><br><span class=\"line\"><span class=\"comment\">   * 注意: 里面的函数不能定义成箭头函数(函数体中会用到this)</span></span><br><span class=\"line\"><span class=\"comment\">   * actions 可以是异步的，您可以在其中await 任何 API 调用甚至其他操作！</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>在组件中使用：</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123;useStore&#125; from &#x27;../store&#x27;</span><br><span class=\"line\">const store = useStore()</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;name,num&#125; = store</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">&#123;&#123;num&#125;&#125;</span><br><span class=\"line\">&#123;&#123;name&#125;&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"组件修改-pinia-的-state-数据storetorefs\"><a class=\"markdownIt-Anchor\" href=\"#组件修改-pinia-的-state-数据storetorefs\">#</a> 组件修改 pinia 的 state 数据: <code>storeToRefs</code></h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123;useStore&#125; from &#x27;../store&#x27;</span><br><span class=\"line\">import &#123;storeToRefs&#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">const store = useStore()</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123;name,num&#125; = storeToRefs(store)</span><br><span class=\"line\">const btn = () =&gt; &#123;</span><br><span class=\"line\">  name.value = &#x27;李四&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span></span></span><br><span class=\"line\">  &#123;&#123;name&#125;&#125;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span></span></span></span>修改名称<span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"批量修改\"><a class=\"markdownIt-Anchor\" href=\"#批量修改\">#</a> 批量修改</h2>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">.....</span><br><span class=\"line\">store.$patch(state =&gt; &#123;</span><br><span class=\"line\">  state.num++,</span><br><span class=\"line\">  state.name = &#x27;王五&#x27;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">.....</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"pinia-分模块\"><a class=\"markdownIt-Anchor\" href=\"#pinia-分模块\">#</a> pinia 分模块</h2>\n<h2 id=\"pinia-持久化存储插件实现\"><a class=\"markdownIt-Anchor\" href=\"#pinia-持久化存储插件实现\">#</a> pinia 持久化存储 [插件实现]</h2>\n<p>可以用 localStorage，也可以用插件： <code>pinia-plugin-persist</code></p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add pinia-plugin-persist --save</span><br></pre></td></tr></table></figure>\n<p>2. <code>src/store/index.js</code>  中使用:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;pinia&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//引入pinia持久化存储插件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> piniaPluginPersist <span class=\"keyword\">from</span> <span class=\"string\">`pinia-plugin-persist`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> useStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&quot;storeId&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">num</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">//开启数据缓存</span></span><br><span class=\"line\">  <span class=\"attr\">persist</span>:&#123;</span><br><span class=\"line\">    <span class=\"attr\">enable</span>:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">strategies</span>:[</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">key</span>:<span class=\"string\">&#x27;my_user&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">storage</span>:<span class=\"variable language_\">localStorage</span>,<span class=\"comment\">//默认是sessionStorage：刷新页面会缓存，但关掉页面就会清理掉缓存</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>:[<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;age&#x27;</span>],<span class=\"comment\">//来决定state中的哪些数据需要持久化存储</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用插件</span></span><br><span class=\"line\">useStore.<span class=\"title function_\">use</span>(piniaPluginPersist)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> useStore</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "前端开发",
                "vue3"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/10/%E6%8B%9B%E7%94%9F%E6%8F%90%E6%8A%A5%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/",
            "url": "https://eucli.top/2023/03/10/%E6%8B%9B%E7%94%9F%E6%8F%90%E6%8A%A5%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE/",
            "title": "招生提报系统",
            "date_published": "2023-03-10T10:45:34.000Z",
            "content_html": "<p>在开发组混了那么久，本菜狗终于要参与项目了吗，虽然只是蹭项目，虽然这次的技术栈我一个也不熟悉，但是扑街就是蜜汁自信嗷 ┗|｀ O′|┛ ~~<br>\n 希望能在这次的项目开发中学到些东西吧，毕竟都大二下学期了，天天被卷的焦虑，再不好好学就真的要去搬砖廖～</p>\n<h1 id=\"day1\"><a class=\"markdownIt-Anchor\" href=\"#day1\">#</a> Day1</h1>\n<p>跟着大佬学习才知道在进行一个项目的开发前还需要写产品文档和技术文档，感觉有必要记录一下：</p>\n<h2 id=\"开发文档\"><a class=\"markdownIt-Anchor\" href=\"#开发文档\">#</a> 开发文档</h2>\n<ol>\n<li>需求背景 先把要做的事情铺垫下背景，上下文交代清楚，谁来看都明白要给谁做</li>\n<li>现状、预期目标和收益 把做之前和做之后做个对比</li>\n<li>产品调研（就是相关产品都是咋做的，实在没有可以不写）</li>\n<li>产品整体功能设计 这里就可以拆大概的功能模块了<br>\n ps. 技术栈和稍微偏技术一些的分析就不用单独拉个模块了，可以穿插在文档里，甚至直接不写。整体设计里面如果想拆的更细一点也可以把详细设计都加上，每个模块每个页面给个原型图和大概的交互逻辑，然后有异常处理之类的</li>\n</ol>\n<h2 id=\"技术文档\"><a class=\"markdownIt-Anchor\" href=\"#技术文档\">#</a> 技术文档</h2>\n<p>技术文档首先是需求反讲，然后是详细模块方案，接口方案，兼容性与异常兜底方案等等，然后是方案初筛检查，备选方案列表，功能开关，自测用例表，性能测试表，排期</p>\n<ul>\n<li>还有就是飞书原来那么强大，功能特别丰富，能画流程图、甘特图，还能在文档里导入各种东西，实在是太方便辣！之前一直只是听说过，看来真的有必要重视起来嗷。还用到了 sourcetree、apifox，基本都是第一次听说过，之前更是用都没用过，我平时只是看 b 站的视频来学习，缺少实战，有很多问题都解决不了。</li>\n</ul>\n<p>因为讨论出来大体流程后已经挺晚的了，加上这次项目只有三个人（两个前端一个后端），还有一个学后端的大三学长提供场外支援，项目要的不是很急，要到八月份，所以理论上事件还是很充足的，不过考虑到两个前端中有我这个菜狗在拖后腿，究竟能多块也不好说。</p>\n<p>我现在的任务是做招生提报系统的登录页面，直接 CV 了之前橙果官网的登录页，但因为橙果用的是 vue2，新项目全特喵是新技术（Vue3、TypeScript、Element Plus、Pinia 和 Vite ），当然一个登录页用不到这么多东西，但是对于本菜狗来说搬运起来还是很痛苦的.</p>\n<h1 id=\"day2\"><a class=\"markdownIt-Anchor\" href=\"#day2\">#</a> Day2</h1>\n<p>耗费了整整一天，而且基本还是在大佬的帮助下才堪堪完成了登录页面，在 sourcetree 上提交分支并合并，过程可谓是折磨，因为自己不会的太多而别人会的太多而焦虑自我损耗，老玻璃心了嗷。全称基本不是在 CV 就是在面向搜索引擎，气死偶咧！<br>\n但好歹是把登录页面给弄出来了，还是记录一下吧 ┭┮﹏┭┮……</p>\n<ol>\n<li><code>App.vue</code>  中 <code>&lt;template&gt;&lt;/template&gt;</code>  里写：</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class=\"line\">    &lt;transition&gt;</span><br><span class=\"line\">      &lt;component :is=&quot;Component&quot; /&gt;</span><br><span class=\"line\">    &lt;/transition&gt;</span><br><span class=\"line\">  &lt;/router-view&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在 pages 文件夹下创建 <code>Login.vue</code> ，cv 过来的，就个表单，用的是 element-plus，很方便，别人封装好的就是好看又好用！<br>\nelement-plus 有专门的 Form 表单组件，而且自定义性非常的高，可以设置行内表单（一行内显示），对齐方式。<br>\n而且还能够进行表单校验，来验证用户输入是否符合规范，只需要为 <code>rules</code>  属性传入约定的验证规则，并将 <code>form-Item</code>  的 <code>prop</code>  属性设置为需要验证的特殊值就好了！就比如 <code>&lt;el-form&gt;</code>  中有 <code>&lt;el-form ref=&quot;ruleFormRef&quot; :model=&quot;ruleForm&quot; :model=&quot;ruleForm&quot;&gt;</code> ，该标签包含:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;el-form-item label=<span class=\"string\">&quot;Activity name&quot;</span> prop=<span class=\"string\">&quot;name&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-input</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.name&quot;</span> /&gt;</span></span></span><br><span class=\"line\">&lt;/el-form-item&gt;</span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">el-form-item</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Activity zone&quot;</span> <span class=\"attr\">prop</span>=<span class=\"string\">&quot;region&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">el-select</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;ruleForm.region&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;Activity zone&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-option</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Zone one&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;shanghai&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">el-option</span> <span class=\"attr\">label</span>=<span class=\"string\">&quot;Zone two&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;beijing&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">el-select</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">el-form-item</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>其中 <code>name</code>  和 <code>region</code>  作为 <code>prop</code>  是 <code>:model</code>  的键名，写验证的时候就可以:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ruleFormRef = ref&lt;<span class=\"title class_\">FormInstance</span>&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> ruleForm = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">region</span>: <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rules = reactive&lt;<span class=\"title class_\">FormRules</span>&gt;(&#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: [</span><br><span class=\"line\">    &#123; <span class=\"attr\">required</span>: <span class=\"literal\">true</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Please input Activity name&#x27;</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">min</span>: <span class=\"number\">3</span>, <span class=\"attr\">max</span>: <span class=\"number\">5</span>, <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Length should be 3 to 5&#x27;</span>, <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;blur&#x27;</span> &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">region</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">required</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"attr\">message</span>: <span class=\"string\">&#x27;Please select Activity zone&#x27;</span>,</span><br><span class=\"line\">      <span class=\"attr\">trigger</span>: <span class=\"string\">&#x27;change&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>还可以对表单进行尺寸控制，设置 <code>size</code>  属性。</p>\n<h3 id=\"form-attributes\"><a class=\"markdownIt-Anchor\" href=\"#form-attributes\">#</a> Form Attributes：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">model</td>\n<td style=\"text-align:left\">表单数据对象</td>\n<td style=\"text-align:left\"><code>object</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rules</td>\n<td style=\"text-align:left\">表单验证规则</td>\n<td style=\"text-align:left\"><code>object</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inline</td>\n<td style=\"text-align:left\">行内表单模式</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-position</td>\n<td style=\"text-align:left\">表单域标签的位置， 当设置为  <code>left</code>  或  <code>right</code>  时，则也需要设置  <code>label-width</code>  属性</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">right</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-width</td>\n<td style=\"text-align:left\">标签的长度，例如  <code>'50px'</code> 。 作为 Form 直接子元素的 form-item 会继承该值。 可以使用  <code>auto</code> 。</td>\n<td style=\"text-align:left\"><code>string</code>  /  <code>number</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-suffix</td>\n<td style=\"text-align:left\">表单域标签的后缀</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">hide-required-asterisk</td>\n<td style=\"text-align:left\">是否隐藏必填字段标签旁边的红色星号。</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">require-asterisk-position</td>\n<td style=\"text-align:left\">星号的位置。</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">left</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show-message</td>\n<td style=\"text-align:left\">是否显示校验错误信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inline-message</td>\n<td style=\"text-align:left\">是否以行内形式展示校验信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">status-icon</td>\n<td style=\"text-align:left\">是否在输入框中显示校验结果反馈图标</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validate-on-rule-change</td>\n<td style=\"text-align:left\">是否在  <code>rules</code>  属性改变后立即触发一次验证</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">用于控制该表单内组件的尺寸</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">disabled</td>\n<td style=\"text-align:left\">是否禁用该表单内的所有组件。 如果设置为  <code>true</code> , 它将覆盖内部组件的  <code>disabled</code>  属性</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scroll-to-error</td>\n<td style=\"text-align:left\">当校验失败时，滚动到第一个错误表单项</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"form-methods\"><a class=\"markdownIt-Anchor\" href=\"#form-methods\">#</a> Form Methods：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>validate</code></td>\n<td style=\"text-align:left\">对整个表单的内容进行验证。 接收一个回调函数，或返回  <code>Promise</code> 。</td>\n<td style=\"text-align:left\"><code>(callback?: (isValid: boolean, invalidFields?: ValidateFieldsError) =&gt; void) =&gt; Promise&lt;boolean&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>validateField</code></td>\n<td style=\"text-align:left\">验证具体的某个字段。</td>\n<td style=\"text-align:left\"><code>(props?: Arrayable&lt;FormItemProp&gt;, callback?: (isValid: boolean, invalidFields?: ValidateFieldsError) =&gt; void) =&gt; Promise&lt;void&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>resetFields</code></td>\n<td style=\"text-align:left\">重置该表单项，将其值重置为初始值，并移除校验结果</td>\n<td style=\"text-align:left\"><code>(props?: Arrayable&lt;FormItemProp&gt;) =&gt; void</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>scrollToField</code></td>\n<td style=\"text-align:left\">滚动到指定的字段</td>\n<td style=\"text-align:left\"><code>(prop: FormItemProp) =&gt; void</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>clearValidate</code></td>\n<td style=\"text-align:left\">清理某个字段的表单验证信息。</td>\n<td style=\"text-align:left\"><code>(props?: Arrayable&lt;FormItemProp&gt;) =&gt; void</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"form-methods-2\"><a class=\"markdownIt-Anchor\" href=\"#form-methods-2\">#</a> Form Methods：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">事件名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">validate</td>\n<td style=\"text-align:left\">任一表单项被校验后触发</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"form-methods-3\"><a class=\"markdownIt-Anchor\" href=\"#form-methods-3\">#</a> Form Methods：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">validate</td>\n<td style=\"text-align:left\">对整个表单的内容进行验证。 接收一个回调函数，或返回  <code>Promise</code> 。</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validateField</td>\n<td style=\"text-align:left\">验证具体的某个字段。</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">resetFields</td>\n<td style=\"text-align:left\">重置该表单项，将其值重置为初始值，并移除校验结果</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">scrollToField</td>\n<td style=\"text-align:left\">滚动到指定的字段</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clearValidate</td>\n<td style=\"text-align:left\">清理某个字段的表单验证信息。</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"formitem-attributes\"><a class=\"markdownIt-Anchor\" href=\"#formitem-attributes\">#</a> FormItem Attributes：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">prop</td>\n<td style=\"text-align:left\"><code>model</code>  的键名。 它可以是一个路径数组 (例如  <code>['a', 'b', 0]</code> )。 在定义了  <code>validate</code> 、 <code>resetFields</code>  的方法时，该属性是必填的</td>\n<td style=\"text-align:left\"><code>string</code>  /  <code>string[]</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label</td>\n<td style=\"text-align:left\">标签文本</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label-width</td>\n<td style=\"text-align:left\">标签宽度，例如  <code>'50px'</code> 。 可以使用  <code>auto</code> 。</td>\n<td style=\"text-align:left\"><code>string</code>  /  <code>number</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">required</td>\n<td style=\"text-align:left\">是否为必填项，如不设置，则会根据校验规则确认</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">rules</td>\n<td style=\"text-align:left\">表单验证规则，具体配置见<a href=\"https://element-plus.gitee.io/zh-CN/component/form.html#formitemrule\">下表</a>，更多内容可以参考<a href=\"https://github.com/yiminghe/async-validator\"> async-validator</a></td>\n<td style=\"text-align:left\"><code>object</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">error</td>\n<td style=\"text-align:left\">表单域验证错误时的提示信息。设置该值会导致表单验证状态变为 error，并显示该错误信息。</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">show-message</td>\n<td style=\"text-align:left\">是否显示校验错误信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">true</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">inline-message</td>\n<td style=\"text-align:left\">是否在行内显示校验信息</td>\n<td style=\"text-align:left\"><code>boolean</code></td>\n<td style=\"text-align:left\">false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">用于控制该表单域下组件的默认尺寸</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">default</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">for</td>\n<td style=\"text-align:left\">和原生标签相同能力</td>\n<td style=\"text-align:left\"><code>string</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validate-status</td>\n<td style=\"text-align:left\">formitem 校验的状态</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"formitemrule\"><a class=\"markdownIt-Anchor\" href=\"#formitemrule\">#</a> FormItemRule：</h4>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">插槽名</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">默认</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">trigger</td>\n<td style=\"text-align:left\">验证逻辑的触发方式</td>\n<td style=\"text-align:left\"><code>enum</code></td>\n<td style=\"text-align:left\">—</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"formitem-slots\"><a class=\"markdownIt-Anchor\" href=\"#formitem-slots\">#</a> FormItem Slots：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">说明</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">default</td>\n<td style=\"text-align:left\">表单的内容。</td>\n<td style=\"text-align:left\">—</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">label</td>\n<td style=\"text-align:left\">标签位置显示的内容</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">error</td>\n<td style=\"text-align:left\">验证错误信息的显示内容</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"formitem-exposes\"><a class=\"markdownIt-Anchor\" href=\"#formitem-exposes\">#</a> FormItem Exposes：</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">描述</th>\n<th style=\"text-align:left\">类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">size</td>\n<td style=\"text-align:left\">表单项大小</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validateMessage</td>\n<td style=\"text-align:left\">校验消息</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validateState</td>\n<td style=\"text-align:left\">校验状态</td>\n<td style=\"text-align:left\"><code>object</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">validate</td>\n<td style=\"text-align:left\">验证表单项</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">resetField</td>\n<td style=\"text-align:left\">对该表单项进行重置，将其值重置为初始值并移除校验结果</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">clearValidate</td>\n<td style=\"text-align:left\">移除该表单项的校验结果</td>\n<td style=\"text-align:left\"><code>Function</code></td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>因为登录页用到了 element plus，所以要在 main.ts 中导入：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ElementPlus</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;element-plus/dist/index.css&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App.vue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title class_\">ElementPlus</span>);</span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>因为登录页点了 “登录” 之后要想服务器发请求，所以要从 api 文件夹中引入，我看大佬是把 axios 的二次封装写成 <code>requset.js</code>  放在 utils 文件夹下，然后 api 文件夹中的文件再引入 <code>requset.js</code> 。<br>\naxios 封装如下：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> axios, &#123; <span class=\"title class_\">AxiosRequestConfig</span>, <span class=\"title class_\">AxiosResponse</span>, <span class=\"title class_\">AxiosInstance</span>, <span class=\"title class_\">AxiosError</span>, <span class=\"title class_\">InternalAxiosRequestConfig</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;axios&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElLoadingService</span>, <span class=\"title class_\">ElMessage</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义请求响应参数，不含data</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">code</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">msg</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 请求响应参数，包含data</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">ResultData</span>&lt;T = <span class=\"built_in\">any</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">  data?: T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> config = &#123;</span><br><span class=\"line\">  <span class=\"attr\">baseURL</span>: <span class=\"keyword\">import</span>.<span class=\"property\">meta</span>.<span class=\"property\">env</span>.<span class=\"property\">VITE_BASE_URL</span>,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: (<span class=\"number\">10</span> * <span class=\"number\">1000</span>) <span class=\"keyword\">as</span> <span class=\"built_in\">number</span>, <span class=\"comment\">// 请求超时时间</span></span><br><span class=\"line\">  <span class=\"attr\">withCredentials</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 跨域时候允许携带凭证</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">loading</span>: <span class=\"literal\">null</span> | <span class=\"title class_\">ReturnType</span>&lt;<span class=\"keyword\">typeof</span> <span class=\"title class_\">ElLoadingService</span>&gt; = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RequestHttp</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">service</span>: <span class=\"title class_\">AxiosInstance</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">constructor</span>(<span class=\"params\">config: AxiosRequestConfig</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">service</span> = axios.<span class=\"title function_\">create</span>(config);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// request拦截器</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"property\">interceptors</span>.<span class=\"property\">request</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">config: InternalAxiosRequestConfig</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!config.<span class=\"property\">headers</span>) <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">        config.<span class=\"property\">headers</span>.<span class=\"property\">Authorization</span> = <span class=\"string\">`Bearer <span class=\"subst\">$&#123;sessionStorage.getItem(<span class=\"string\">&quot;token&quot;</span>)&#125;</span>`</span>;</span><br><span class=\"line\">        config.<span class=\"property\">headers</span>[<span class=\"string\">&quot;Content-Type&quot;</span>] = <span class=\"string\">&quot;application/json;charset=utf-8&quot;</span>;</span><br><span class=\"line\">        loading = <span class=\"title class_\">ElLoadingService</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">lock</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">text</span>: <span class=\"string\">&quot;加载中&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">background</span>: <span class=\"string\">&quot;rgba(0, 0, 0, 0.7)&quot;</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> config;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">error: AxiosError</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(error);</span><br><span class=\"line\">        <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// response 拦截器</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"property\">interceptors</span>.<span class=\"property\">response</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">response: AxiosResponse</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> res = response.<span class=\"property\">data</span>;</span><br><span class=\"line\">        loading?.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"function\">(<span class=\"params\">error: AxiosError</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">error</span>(<span class=\"string\">&quot;err&quot;</span> + error);</span><br><span class=\"line\">        loading?.<span class=\"title function_\">close</span>();</span><br><span class=\"line\">        <span class=\"title class_\">ElMessage</span>(&#123;</span><br><span class=\"line\">          <span class=\"attr\">message</span>: <span class=\"string\">`网络超时，没有请求到数据`</span>,</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">duration</span>: <span class=\"number\">3</span> * <span class=\"number\">1000</span>,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(error);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 常用方法封装</span></span><br><span class=\"line\">  get&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">get</span>(url, &#123; params &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  post&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">post</span>(url, params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  put&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">put</span>(url, params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">delete</span>&lt;T&gt;(<span class=\"attr\">url</span>: <span class=\"built_in\">string</span>, params?: <span class=\"built_in\">object</span>): <span class=\"title class_\">Promise</span>&lt;<span class=\"title class_\">ResultData</span>&lt;T&gt;&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">service</span>.<span class=\"title function_\">delete</span>(url, &#123; params &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RequestHttp</span>(config);</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>api 文件夹下 <code>user.ts</code>  代码如下：</li>\n</ol>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/request&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">login</span> = (<span class=\"params\">data: <span class=\"built_in\">any</span></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request.<span class=\"title function_\">post</span>(<span class=\"string\">&quot;/&quot;</span>, data);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>用这个暴露方式是因为大佬已经在 <code>request.ts</code>  中封装好了形式，这么用就可以</p>\n<ol start=\"6\">\n<li>sourecetree 的问题<br>\n xs，根本不会用好吧</li>\n</ol>\n<p>晚上回去前突然发现写的代码消失了，离谱！</p>\n<h1 id=\"day3\"><a class=\"markdownIt-Anchor\" href=\"#day3\">#</a> Day3</h1>\n<p>早上来用 vscode 自带的时间线挨个把代码恢复了，后来听同学说好像是提交合并分支的时候的问题，sourcetree 不会用，准确来说我对 git 的命令就不太会嗷。</p>\n<p>今天有点摆烂，没做什么活，和同学（大佬）分析了下提报系统后台管理页面的涉及，飞书真的强大啊，太帅了！<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/whiteboard_exported_image.png\" alt=\"\"></p>\n<h1 id=\"day4\"><a class=\"markdownIt-Anchor\" href=\"#day4\">#</a> Day4</h1>\n<p>整体的草图基本上已经画完了，开工项目，拉了个 <code>feature/navbar</code>  的分支，是主页（home）的子组件（侧边栏），cv 了极橙大后台的侧边栏，不过那是用 vue2 写的，在试着用 vue3 改。</p>\n<h1 id=\"day5\"><a class=\"markdownIt-Anchor\" href=\"#day5\">#</a> Day5</h1>\n<p>今日摆烂</p>\n<h1 id=\"day6\"><a class=\"markdownIt-Anchor\" href=\"#day6\">#</a> Day6</h1>\n<p>今天算是搞懂了 ref () 和 reactive () 了，我真棒。</p>\n<ul>\n<li>reactive () 只适用于对象或数组，一般用于表单</li>\n<li>ref () 可以接受任何类型，但需要.value，用于插值语法中不用（会自动解包）</li>\n</ul>\n<p>晚上的时候同学把 <code>home</code>  分支推了上来，合并到了我这边。<br>\n开发过程中遇到了几个问题和收获，这里记录下：</p>\n<ol>\n<li>vue 报错： <router-view> can no longer be used directly inside <transition> or <keep-alive></li>\n</ol>\n<ul>\n<li>解决：之前是<transition>包裹 <router-view>，改成 <router-view>包裹<transition></li>\n</ul>\n<ol start=\"2\">\n<li><el-submenu>报错，因为 element plus 变了，改成<el-sub-menu></li>\n<li>vue3 里面 <code>this</code>  基本上不用了，而是 <code>ref()</code>  绑定响应式之后用 <code>.value</code> ，<br>\n如： <code>this.menu</code>  改成 <code>menu.value</code> , <code>this.isCollapse</code>  改成 <code>isCollapse.value</code></li>\n<li>vue3 没有 <code>computed</code>  生命周期，但有 <code>computed</code>  函数，不过使用前不要忘了引入 <code>import &#123; computed &#125; from &quot;vue&quot;;</code></li>\n<li>vue3 使用子组件不需要再注册，import 引入了就能用。</li>\n<li>路由配置必须要有一个 <code>/</code>  路径，一般对应 <code>home</code>  组件，如果有子组件写在 <code>children()&#123;&#125;</code>  中：</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">path</span>: <span class=\"string\">&quot;/&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;home&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">auth</span>: <span class=\"string\">&quot;universal&quot;</span> &#125;,</span><br><span class=\"line\">  <span class=\"attr\">component</span>: <span class=\"function\">() =&gt;</span> <span class=\"keyword\">import</span>(<span class=\"string\">&quot;@/pages/home.vue&quot;</span>),</span><br><span class=\"line\">  <span class=\"comment\">//children: &#123;&#125;,</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"day7\"><a class=\"markdownIt-Anchor\" href=\"#day7\">#</a> Day7</h1>\n<p>今日摆烂<br>\n哦，把橙果的 logo 换成学校的了，当时脑子抽了竟然直接用了橙果的 logo</p>\n<h1 id=\"day8\"><a class=\"markdownIt-Anchor\" href=\"#day8\">#</a> Day8</h1>\n<p>摆烂，但和老师们开了几个会，算是说明了需求，突然发现原来开发不仅仅是写好代码，弄好文档能和甲方解释清楚也是非常的重要</p>\n<h1 id=\"day9\"><a class=\"markdownIt-Anchor\" href=\"#day9\">#</a> Day9</h1>\n<p>接着摆</p>\n<h1 id=\"day10\"><a class=\"markdownIt-Anchor\" href=\"#day10\">#</a> Day10</h1>\n<p>emmm，太罪恶了。。</p>\n<h1 id=\"day11\"><a class=\"markdownIt-Anchor\" href=\"#day11\">#</a> Day11</h1>\n<p><code>navbar</code>  组件修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">onMounted</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getNavBar</span>().<span class=\"title function_\">then</span>(</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      menu = res.<span class=\"property\">data</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      $store.<span class=\"title function_\">commit</span>(<span class=\"string\">&quot;msgAlert&quot;</span>, &#123;</span><br><span class=\"line\">        <span class=\"attr\">message</span>: <span class=\"string\">&quot;服务器繁忙, 请求失败&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;error&quot;</span>,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err.<span class=\"property\">message</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>api/index.js</code>  修改：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> request <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/utils/request&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">getNavBar</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> request.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;/getNavBar&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; getNavBar &#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"day12\"><a class=\"markdownIt-Anchor\" href=\"#day12\">#</a> Day12</h1>\n<p>分到两个服务器，一个测试用一个上线了用，同学在配服务器，正在部署？<br>\n <code>navbar.vue</code>  的语言一改成 ts 之后好多地方都报错了：</p>\n<ol>\n<li>变量后面报错，因为没写类型，暂时都改成了 <code>any</code>  类型</li>\n<li><code>$store</code>  和 <code>$router</code>  报错 <code> $store is not defined</code> 。因为 vue2 和 vue3 写法不一样了。<br>\n解决：import 引入， <code>import router from '@/routes'</code>  和 <code>import mainStore from '@/store'</code> , 并将 <code>$store</code> ， <code>$router</code>  分别替换成 <code>store</code> ， <code>mainStore</code></li>\n<li><code>&lt;template&gt;</code>  标签中链式调用报错，提示 <code>类型“never”上不存在属性“key”</code> , 好像 <code>.</code>  前面要加 <code>?</code> ，即 <code>?.</code> ，但不能直接加，好像要引入 <code>interface</code></li>\n</ol>\n<h1 id=\"day13\"><a class=\"markdownIt-Anchor\" href=\"#day13\">#</a> Day13</h1>\n<ol>\n<li>导入时如果那个导入的文件时默认导出的（ <code>export default</code> ），就不用加大括号，如果不是默认导出，就要用一个大括号括起来。如： <code>import &#123; mainStore &#125; from &quot;@/store&quot;;</code></li>\n<li>store 仓库使用 pinia，即 vuex5，没有了 mutations, 这意味着可以直接更新状态，不用再注册 Commit。语法上更加贴近 Composition Api.</li>\n<li>因为用了 pinia，所以 commit 不能用了，navbar 中 <code>store.commit(&quot;msgAlert&quot;, &#123;&#125;</code>  需要换一种写法<br>\n解决：直接 <code>.</code> , 函数调用， <code>store.msgAlert(&quot;服务器繁忙, 请求失败&quot;,&quot;error&quot;)</code> , <code>()</code>  里面直接传参数值，不是写参数名。其中 store 文件夹下:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 顶部居中消息弹窗</span></span><br><span class=\"line\">  <span class=\"title function_\">msgAlert</span>(<span class=\"params\">message: string, type: <span class=\"string\">&quot;info&quot;</span> | <span class=\"string\">&quot;success&quot;</span> | <span class=\"string\">&quot;warning&quot;</span> | <span class=\"string\">&quot;error&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * message: 必须 string</span></span><br><span class=\"line\"><span class=\"comment\">     * type: info | success | warning | error</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"title class_\">ElMessage</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">message</span>: message,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: type,</span><br><span class=\"line\">      <span class=\"attr\">center</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"attr\">duration</span>: <span class=\"number\">1500</span>, <span class=\"comment\">// 持续时长(毫秒)</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"day14\"><a class=\"markdownIt-Anchor\" href=\"#day14\">#</a> Day14</h1>\n<h3 id=\"sourecetree\"><a class=\"markdownIt-Anchor\" href=\"#sourecetree\">#</a> soureceTree</h3>\n<p>git 有一个远端仓库，有一个本地仓库，【提交】和【获取】、【拉取】都是由本地仓库针对远端仓库进行的</p>\n<ul>\n<li>提交：<br>\n【提交】</li>\n</ul>\n<ol>\n<li>提交 - 暂存所有 - “feature/fix” - 提交</li>\n<li>推送</li>\n</ol>\n<ul>\n<li>拉:<br>\n【获取】：“没有” 变 “有”。（没有这个分支，所以要获取分支）</li>\n</ul>\n<ol>\n<li>获取</li>\n<li>远程 - 检出</li>\n</ol>\n<p>【拉取】：“有” 变 “新”。（有这个分支，但与远端仓库相比落后了版本，所以要更新）<br>\n拉取不成功是因为有不一样的代码</p>\n<h1 id=\"day15\"><a class=\"markdownIt-Anchor\" href=\"#day15\">#</a> Day15</h1>\n<p>周六摆烂 ing…</p>\n<h1 id=\"day16\"><a class=\"markdownIt-Anchor\" href=\"#day16\">#</a> Day16</h1>\n<p>摆烂，打八方旅人</p>\n<h1 id=\"day17\"><a class=\"markdownIt-Anchor\" href=\"#day17\">#</a> Day17</h1>\n<p>无事可干</p>\n<h1 id=\"day18\"><a class=\"markdownIt-Anchor\" href=\"#day18\">#</a> Day18</h1>\n<p>摆</p>\n<h1 id=\"day19\"><a class=\"markdownIt-Anchor\" href=\"#day19\">#</a> Day19</h1>\n<p>。</p>\n<h1 id=\"day20\"><a class=\"markdownIt-Anchor\" href=\"#day20\">#</a> Day20</h1>\n<p>这个项目好像已经不需要我了。。。</p>\n<h1 id=\"day21\"><a class=\"markdownIt-Anchor\" href=\"#day21\">#</a> Day21</h1>\n<p>无事</p>\n<h1 id=\"day22\"><a class=\"markdownIt-Anchor\" href=\"#day22\">#</a> Day22</h1>\n<p>周六摆，打弹丸论破</p>\n<h1 id=\"day23\"><a class=\"markdownIt-Anchor\" href=\"#day23\">#</a> Day23</h1>\n<p>周日摆</p>\n<h1 id=\"day24\"><a class=\"markdownIt-Anchor\" href=\"#day24\">#</a> Day24</h1>\n<p>在疯狂的学 ts……</p>\n<h1 id=\"day25\"><a class=\"markdownIt-Anchor\" href=\"#day25\">#</a> Day25</h1>\n<p>开始做项目的 <code>发起年度考核</code> 页面</p>\n<h1 id=\"day26\"><a class=\"markdownIt-Anchor\" href=\"#day26\">#</a> Day26</h1>\n<p>有个问题，用 <code>el-upload</code>  组件，想把自动上传换成手动上传，可是一取消自动 <code>:auto-upload=&quot;false&quot;</code> ，那么之前设置的那些有关文件类型、大小的验证全都不管用了，甚至 <code>console.log</code>  打印个东西都不行；而且手动上传调用了后也没有反应，头大。</p>\n<h1 id=\"day27\"><a class=\"markdownIt-Anchor\" href=\"#day27\">#</a> Day27</h1>\n<p>去超算参观，并不像印象里的国企那样保守，反而感觉很有活力，而且正在做好多东西， 老师还知道 chatgpt (doge</p>\n<h1 id=\"day28\"><a class=\"markdownIt-Anchor\" href=\"#day28\">#</a> Day28</h1>\n<p><code>el-upload</code>  手动提交出的问题还是没有解决，愁人</p>\n<h1 id=\"day29\"><a class=\"markdownIt-Anchor\" href=\"#day29\">#</a> Day29</h1>\n<p>四月八号了，不知不觉已经干了一个月了，还是学到了很多东西的。<br>\n今天，周六，想把博客从 hexo 迁移到 vuepress2 上，但是这玩意太难用了，明明是按文档来的为啥不显示？头疼中……</p>\n<h1 id=\"day30\"><a class=\"markdownIt-Anchor\" href=\"#day30\">#</a> Day30</h1>\n<p>放弃 vuepress 了，真难用啊，还是 hexo 舒服，顺便换了个主题，不过又出了问题，这玩意在本地能显示图片，一上传到 github 再打开就寄了，离谱</p>\n<h1 id=\"day31\"><a class=\"markdownIt-Anchor\" href=\"#day31\">#</a> Day31</h1>\n<ul>\n<li><code>el-upload</code>  手动提交不成功的问题终于解决了，把 <code>:file-list=&quot;fileList&quot;</code>  去掉就好了，用  <code>ref=&quot;uploadRef&quot;</code>  即可，两个都有就会不生效。</li>\n<li>另外 get 到了一个小知识，在定义 <code>const uploadRef = ref&lt;UploadInstance&gt;()</code>  时会报错说找不到 <code>UploadInstance</code> ，这时候把鼠标移上去点一下快捷修复就好了。</li>\n<li>Alt + 箭头上下可以整体移动选中的代码，丝糕诶！</li>\n</ul>\n<h1 id=\"day32\"><a class=\"markdownIt-Anchor\" href=\"#day32\">#</a> Day32</h1>\n<p>发起考核模块搞完了，明天开组会，后天找老师再开会。好诶！</p>\n<h1 id=\"day33\"><a class=\"markdownIt-Anchor\" href=\"#day33\">#</a> Day33</h1>\n<p>过</p>\n<h1 id=\"day34\"><a class=\"markdownIt-Anchor\" href=\"#day34\">#</a> Day34</h1>\n<p>写 style 的时候别忘了写 scope，不然会样式污染！</p>\n<h1 id=\"day35\"><a class=\"markdownIt-Anchor\" href=\"#day35\">#</a> Day35</h1>\n<p>第一阶段初步告终</p>\n<h1 id=\"4-月-18-日\"><a class=\"markdownIt-Anchor\" href=\"#4-月-18-日\">#</a> 4 月 18 日</h1>\n<p>搞了下把后端传过来的 excel 文件转成 json 格式，封装 axios 时是  <code>responseType: 'blob'</code> , 不能取消，取消会影响正常下载，刚开始只能解析出来乱码，并报错说是非法的 json，后来研究了一会儿才发现还要安装 xlsx 的依赖，总算解决了，贴一下代码：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">setup</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span>&gt;</span></span></span><br><span class=\"line\">import &#123; mainStore &#125; from &quot;@/store/index&quot;;</span><br><span class=\"line\">import &#123; read, utils &#125; from &quot;xlsx&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">import &#123; getAssessmentModel &#125; from &quot;@/api/user&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">let &#123; assessment &#125; = mainStore();</span><br><span class=\"line\"></span><br><span class=\"line\">const btn = () =&gt; &#123;</span><br><span class=\"line\">  getAssessmentModel().then((res: any) =&gt; &#123;</span><br><span class=\"line\"><span class=\"code\">    const reader: any = new FileReader();</span></span><br><span class=\"line\"><span class=\"code\">    reader.readAsArrayBuffer(res);</span></span><br><span class=\"line\"><span class=\"code\">    reader.onload = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">      const data = new Uint8Array(reader.result);</span></span><br><span class=\"line\"><span class=\"code\">      const workbook = read(data, &#123; type: &quot;array&quot; &#125;);</span></span><br><span class=\"line\"><span class=\"code\">      const sheetName = workbook.SheetNames[0];</span></span><br><span class=\"line\"><span class=\"code\">      const sheet = workbook.Sheets[sheetName];</span></span><br><span class=\"line\"><span class=\"code\">      const json = utils.sheet_to_json(sheet);</span></span><br><span class=\"line\"><span class=\"code\">      assessment = json;</span></span><br><span class=\"line\"><span class=\"code\">      console.log(assessment);</span></span><br><span class=\"line\"><span class=\"code\">    &#125;;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;);</span></span><br><span class=\"line\"><span class=\"code\">&#125;;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/script&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span></span></span><br><span class=\"line\">  test页面 <span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span></span></span></span>点我发送请求<span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span></span><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span></span></span><br><span class=\"line\">  &#123;&#123; assessment &#125;&#125;<span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span></span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"language-handlebars\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span></span></span></span><br></pre></td></tr></table></figure>\n<p>不过还有个问题，就是想要将数据存储到 pinia 仓库的话还要引入 <code>import &#123;storeToRefs&#125; from 'pinia'</code> ，把要存储的数据用 <code>storeToRefs()</code>  包裹起来，但是因为是用 ts 写的，这样做会报错，目前不知道该怎么解决</p>\n<h1 id=\"4-月-22-日\"><a class=\"markdownIt-Anchor\" href=\"#4-月-22-日\">#</a> 4 月 22 日</h1>\n<p>因为项目中有多处需要用到文件上传功能，所以将其被封装成了公共组件，并提供了许多配置，可根据不同需求修改配置。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;ts&quot;</span> <span class=\"attr\">setup</span>&gt;</span></span></span><br><span class=\"line\">import &#123; UploadFilled &#125; from &#x27;@element-plus/icons-vue&#x27;</span><br><span class=\"line\">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">import &#123; ElMessageBox, UploadInstance &#125; from &#x27;element-plus&#x27;</span><br><span class=\"line\">import &#123; getToken &#125; from &quot;@/utils/token&quot;</span><br><span class=\"line\">import type &#123; UploadProps, UploadUserFile &#125; from &#x27;element-plus&#x27;</span><br><span class=\"line\">import &#123; mainStore &#125; from &quot;@/store&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">const baseUrl = import.meta.env.VITE<span class=\"emphasis\">_BASE_</span>URL + &quot;/api&quot;;</span><br><span class=\"line\">const headers = &#123; Authorization: getToken() &#125;</span><br><span class=\"line\">let fileList = ref<span class=\"language-xml\">&lt;UploadUserFile[]&gt;</span>([])</span><br><span class=\"line\"></span><br><span class=\"line\">const props = defineProps([&quot;limitation&quot;, &quot;uploadFilesUrl&quot;, &quot;type&quot;])</span><br><span class=\"line\">const uploadFilesUrl = props.uploadFilesUrl;</span><br><span class=\"line\">const limitation = props.limitation;</span><br><span class=\"line\">const type = props.type;</span><br><span class=\"line\"></span><br><span class=\"line\">let flag = &quot;remove&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">const beforeRemove: UploadProps[&#x27;beforeRemove&#x27;] = async (uploadFile, uploadFiles) =&gt; &#123;</span><br><span class=\"line\">  if (flag === &quot;remove&quot;) &#123;</span><br><span class=\"line\"><span class=\"code\">    return ElMessageBox.confirm(</span></span><br><span class=\"line\"><span class=\"code\">      `是否删除此文件 $&#123;uploadFile.name&#125; ?`, &#123;</span></span><br><span class=\"line\"><span class=\"code\">      confirmButtonText: &quot;确定&quot;,</span></span><br><span class=\"line\"><span class=\"code\">      cancelButtonText: &quot;取消&quot;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;).then(() =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">      mainStore().msgAlert(&quot;删除成功&quot;, &quot;success&quot;);</span></span><br><span class=\"line\"><span class=\"code\">      return true;</span></span><br><span class=\"line\"><span class=\"code\">    &#125;).catch(() =&gt; false);</span></span><br><span class=\"line\"><span class=\"code\">  &#125; else &#123;</span></span><br><span class=\"line\"><span class=\"code\">    return true;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">const handlePreview: UploadProps[&#x27;onPreview&#x27;] = (uploadFile) =&gt; &#123;</span><br><span class=\"line\">  console.log(uploadFile)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const onSuccess: UploadProps[&#x27;onSuccess&#x27;] = (res, uploadFile, uploadFiles) =&gt; &#123;</span><br><span class=\"line\">  fileList.value = [];</span><br><span class=\"line\">  mainStore().msgAlert(&quot;上传成功&quot;, &quot;success&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const onError: UploadProps[&#x27;onError&#x27;] = (res, uploadFile, uploadFiles) =&gt; &#123;</span><br><span class=\"line\">  mainStore().msgAlert(&quot;上传失败&quot;, &quot;error&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const beforeUpload: UploadProps[&#x27;beforeUpload&#x27;] = (rawFile) =&gt; &#123;</span><br><span class=\"line\">  if (type.includes(rawFile.type)) return true;</span><br><span class=\"line\">  else &#123;</span><br><span class=\"line\"><span class=\"code\">    mainStore().msgAlert(&quot;请上传指定类型的文件&quot;, &quot;error&quot;);</span></span><br><span class=\"line\"><span class=\"code\">    flag = &quot;&quot;;</span></span><br><span class=\"line\"><span class=\"code\">    return false;</span></span><br><span class=\"line\"><span class=\"code\">  &#125;</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\">// 手动上传</span></span><br><span class=\"line\"><span class=\"code\">const uploadRef = ref&lt;UploadInstance&gt;()</span></span><br><span class=\"line\"><span class=\"code\">const submitUpload = () =&gt; &#123;</span></span><br><span class=\"line\"><span class=\"code\">  uploadRef.value!.submit()</span></span><br><span class=\"line\"><span class=\"code\">&#125;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\">// 暴露方法</span><br><span class=\"line\">defineExpose(&#123;</span><br><span class=\"line\">  submitUpload</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span></span><br><span class=\"line\">  <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"code\">    &lt;el-upload :file-list=&quot;fileList&quot; ref=&quot;uploadRef&quot; class=&quot;upload-demo&quot; name=&quot;file&quot; method=&quot;post&quot; drag</span></span><br><span class=\"line\"><span class=\"code\">      :action=&quot;baseUrl + uploadFilesUrl&quot; show-file-list :headers=&quot;headers&quot; :auto-upload=&quot;false&quot;</span></span><br><span class=\"line\"><span class=\"code\">      :on-preview=&quot;handlePreview&quot; :before-remove=&quot;beforeRemove&quot; :on-success=&quot;onSuccess&quot; :on-error=&quot;onError&quot;</span></span><br><span class=\"line\"><span class=\"code\">      :before-upload=&quot;beforeUpload&quot;&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;el-icon class=&quot;el-icon--upload&quot;&gt;&lt;upload-filled /&gt;&lt;/el-icon&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;div class=&quot;el-upload__text&quot;&gt;</span></span><br><span class=\"line\"><span class=\"code\">        拖动文件到此处或 &lt;em&gt;点击我上传&lt;/em&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;template #tip&gt;</span></span><br><span class=\"line\"><span class=\"code\">        &lt;div class=&quot;el-upload__tip&quot;&gt;</span></span><br><span class=\"line\"><span class=\"code\">          &#123;&#123; props.limitation ? props.limitation : &quot;&quot; &#125;&#125;</span></span><br><span class=\"line\"><span class=\"code\">        &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">      &lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"code\">    &lt;/el-upload&gt;</span></span><br><span class=\"line\"><span class=\"code\">  &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"code\">&lt;/template&gt;</span></span><br><span class=\"line\"><span class=\"code\"></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">scoped</span>&gt;</span></span><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-月\"><a class=\"markdownIt-Anchor\" href=\"#4-月\">#</a> 4 月</h1>\n",
            "tags": [
                "前端开发",
                "项目实战",
                "橙果工作室开发组",
                "TypeScript",
                "vue3",
                "pinia",
                "vite",
                "Element-Plus"
            ]
        },
        {
            "id": "https://eucli.top/2023/03/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/",
            "url": "https://eucli.top/2023/03/05/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%88%98/",
            "title": "微信小程序项目实战",
            "date_published": "2023-03-05T00:15:34.000Z",
            "content_html": "<h1 id=\"认识小程序\"><a class=\"markdownIt-Anchor\" href=\"#认识小程序\">#</a> 认识小程序</h1>\n<ul>\n<li>小程序与普通网页开发的区别</li>\n</ul>\n<ol>\n<li>运行环境不同<br>\n网页运行在浏览器环境中，小程序运行在微信环境中</li>\n<li>API 不同<br>\n由于运行环境不同，所以小程序中无法调用 DOM 和 BOM 的 API，但是可以调用微信环境提供的各种 API，如：地理定位，扫码，支付</li>\n<li>开发模式不同<br>\n网页开发模式：浏览器 + 代码编辑器<br>\n小程序：申请小程序开发账号，安装小程序开发者工具，创建和配置小程序项目</li>\n</ol>\n<ul>\n<li>\n<p>注册小程序账号，获取小程序的 AppID<br>\nwx40e49b099125edca</p>\n</li>\n<li>\n<p>开发者工具 不建议使用 vscode，官方提供的功能更多</p>\n</li>\n<li>\n<p>设置代理 — 不适用代理，直连</p>\n</li>\n<li>\n<p>常用功能<br>\n帮助 — 开发者文档<br>\n工具 — 构建 npm<br>\n 详情 — 本地设置</p>\n</li>\n<li>\n<p>小程序代码的构成<br>\n！[](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/8KSE\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/8KSE</a>([I`L5(HI<sub>JE@$E]</sub>7C.png)</p>\n</li>\n</ul>\n",
            "tags": [
                "前端开发",
                "项目实战",
                "小程序",
                "uni-app"
            ]
        },
        {
            "id": "https://eucli.top/2023/01/04/%E7%8E%A9%E6%9C%BA%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E4%B8%80%EF%BC%9A%E8%A7%A3%E9%94%81BL/",
            "url": "https://eucli.top/2023/01/04/%E7%8E%A9%E6%9C%BA%E9%82%A3%E4%BA%9B%E4%BA%8B%E4%B9%8B%E4%B8%80%EF%BC%9A%E8%A7%A3%E9%94%81BL/",
            "title": "玩机那些事之一：解锁BL",
            "date_published": "2023-01-04T12:49:45.000Z",
            "content_html": "<p>我们在刷到一些安卓手机玩机魔改类的视频中，可能有些朋友听的一头雾水，什么 “root”“bootloader”“recovery”“内核”“面具”“三清、四清” 之类的，往往对此感到不明觉厉，本系列博客就是结合博主自身的玩机教程，带大家科普一下玩机领域的基本概念和一些操作。<br>\n前排提示：玩机需谨慎，一不小心手机可能变砖！</p>\n<p>众所周知，一部手机出厂搭载的官方系统，其首要目标便是安全稳定，具有纯净（广告眼花缭乱）、功能（找不到功能）、美观（丑土乱）、流畅（卡顿不跟手）、稳定（闪退死机）、安全（密码泄露）等诸多优点，因此厂家希望用户不要乱搞，所有出厂的系统用户权限比较低，很多修改都做不了，如果我们要想玩机，第一步就是提高权限。</p>\n<ul>\n<li>在安卓系统中一共有三种权限，第一种是软件权限（这里指的是第三方软件），它们的权限都是最低的，使用的时候会先向用户发送请求，需要经过用户同意才能使用。</li>\n<li>第二种是用户权限，比如设定锁屏密码，重启手机，卸载第三方软件等操作，这些操作是普通软件做不到的，因此用户权限比第三方软件权限高。</li>\n<li>第三种权限，也是最高的权限，便是超级用户权限，我们通常也称之为 ROOT 权限。拥有这类权限便可以完全控制手机，去实现手机系统本不开放的功能，比如修改手机型号，卸载系统软件，甚至实现对硬件的控制（修改 CPU 调度、对 GPU 超频）。<br>\n因此，如果我们想要解除官方系统的种种限制，真正的成为手机的主人，首先就要获取 ROOT 权限。</li>\n</ul>\n<p>安卓手机的存储中包含了数个分区，其中有一个分区叫做 boot 分区，存放有启动和引导文件，包含了操作系统的 Kernel（内核）和 Ramdisk（虚拟内存）。而安卓 root 的操作就是修改 boot 分区。<br>\n在此之前，我们首先需要介绍一下 bootloader。我们简单翻译一下，bootloader 顾名思义就是引导加载器，在你长按电源键开机的那一刻起，bootloader 就开始工作了，这段时间会初始化硬件设备，引导操作系统内核（boot 分区）。在引导后期我们可以选择进入一个叫 fastboot 的阶段，也即很多玩机发烧友说的 “刷机模式”，</p>\n",
            "tags": [
                "刷机",
                "ROOT"
            ]
        },
        {
            "id": "https://eucli.top/2022/10/31/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/",
            "url": "https://eucli.top/2022/10/31/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%8A%80%E5%B7%A7/",
            "title": "一些小技巧",
            "date_published": "2022-10-31T01:13:45.000Z",
            "content_html": "<ul>\n<li>一些快捷键\n<ul>\n<li>ctrl + d 快速复制该行代码到下一行</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "日常记录",
                "小技巧"
            ]
        },
        {
            "id": "https://eucli.top/2022/10/16/HTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://eucli.top/2022/10/16/HTML%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "HTML基础知识",
            "date_published": "2022-10-16T11:59:45.000Z",
            "content_html": "<p>大一刚开始学习前端时记录的笔记，那时候是为了进入网站组的二面学习的，当时很多都还不懂，记笔记也记的乱七八糟的。一转眼就大二了，时间过得真特么的快啊！</p>\n<p>推荐一个前端学习的网站 <a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web/HTML_basics\">HTML 基础 - 学习 Web 开发 | MDN</a></p>\n<h2 id=\"一-网页的基本组成什么是-html\"><a class=\"markdownIt-Anchor\" href=\"#一-网页的基本组成什么是-html\">#</a> 一、网页的基本组成，什么是 HTML</h2>\n<ul>\n<li>\n<p>网站是网页的集合，网页是网站中的一页，通常是 HTML 格式的文件</p>\n</li>\n<li>\n<p>网页是构成网站的基本元素，通常由图片、链接、文字、声音、视频等元素组成，常见以.htm 和.html 后缀结尾，俗称为 HTML 文件。</p>\n</li>\n<li>\n<p>HTML 是超文本标记语言，用来描述网页的一种语言。不是一种编程语言，而是一种标记语言。标记语言是一套标记标签。</p>\n</li>\n<li>\n<p>超文本：</p>\n</li>\n<li>\n<p>超越文本限制</p>\n</li>\n<li>\n<p>可以从一个文件跳转到另一个文件，超级链接文本</p>\n</li>\n<li>\n<p>网页的形成：将网页元素利用 html 标签描述出来，然后通过浏览器解析来显示给用户。</p>\n</li>\n</ul>\n<h2 id=\"二-常用浏览器\"><a class=\"markdownIt-Anchor\" href=\"#二-常用浏览器\">#</a> 二、常用浏览器</h2>\n<ul>\n<li>\n<p>IE、火狐、谷歌、Safari 和 Opera 等。五大浏览器</p>\n</li>\n<li>\n<p>浏览器内核（渲染引擎）：负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。</p>\n</li>\n</ul>\n<h2 id=\"三-web-标准的三大组成部分\"><a class=\"markdownIt-Anchor\" href=\"#三-web-标准的三大组成部分\">#</a> 三、Web 标准的三大组成部分</h2>\n<ul>\n<li>\n<p>Web 标准是由 W3C（万维网联盟）组织和其他标准化组织制定的一系列标准的集合</p>\n</li>\n<li>\n<p>为什么需要 web 标准：浏览器不同，显示页面或者排版就会有差异</p>\n</li>\n<li>\n<p>制定 Web 标准的优点：</p>\n<ol>\n<li>\n<p>让 web 的发展前景更广阔</p>\n</li>\n<li>\n<p>内容能被更广泛的设备访问</p>\n</li>\n<li>\n<p>更容易被搜索引擎搜索</p>\n</li>\n<li>\n<p>降低网站流量费用</p>\n</li>\n<li>\n<p>使网站更易于维护</p>\n</li>\n<li>\n<p>提高页面浏览速度</p>\n</li>\n</ol>\n</li>\n<li>\n<p>web 标准的构成：<strong>结构（Structure）</strong>、<strong>表现（Presentation）</strong>、<strong>行为（Behavior）</strong></p>\n<ul>\n<li>\n<p>结构：用于对网页元素进行整理和分类，现阶段主要学的是 HTML</p>\n</li>\n<li>\n<p>表现：用于设置网页元素的版式、颜色、大小等外观样式，主要指 CSS</p>\n</li>\n<li>\n<p>行为：指网页模型的定义及交互的编写，现阶段主要学的是 Javascript</p>\n</li>\n</ul>\n</li>\n<li>\n<p>web 标准提出的最佳体验方案：结构、表现、行为相分离</p>\n<p>简单理解：结构写到 HTML 文件中，表现写到 CSS 文件中，行为写到 JavaScript 文件中。</p>\n</li>\n</ul>\n<h2 id=\"四-html标签\"><a class=\"markdownIt-Anchor\" href=\"#四-html标签\">#</a> 四、HTML 标签</h2>\n<ul>\n<li>\n<p>html 语法规范</p>\n<ol>\n<li>\n<p>1.HTML 标签是由尖括号包围的关键词，例如<html></p>\n</li>\n<li>\n<p>HTML 标签通常是成对出现的，例如<html>和</heml>, 称为双标签</p>\n</li>\n<li>\n<p>有些特殊的标签必须是单个标签（极少情况），例如 <code>&lt;br /&gt;</code> ，称为单标签</p>\n</li>\n<li>\n<p>标签关系</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">     &lt;title&gt;&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;head&gt;&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n<li>\n<p>HTML 基本结构标签</p>\n<ul>\n<li>\n<p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写的。HTML 页面也称为 HTML 文档</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">标签名</th>\n<th>定义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><html></html></td>\n<td>HTML 标签</td>\n<td>页面中最大的标签，我们称为根标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><head></head></td>\n<td>文档的头部</td>\n<td>注意在 head 标签中我们必须要设置的标签是 title</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><title></title></td>\n<td>文档的标题</td>\n<td>让页面拥有一个属于自己的网页标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><body></body></td>\n<td>文档的主体</td>\n<td>元素包含文档的所有内容，页面内容基本都是放在 body 里面</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>HTML 常用标签</p>\n<ul>\n<li>\n<p>标题标签：<h1>~<h6></p>\n<p>加了标题的文字会变得加粗，字号也会依次变大，一个标题独占一行</p>\n<h1>我是一级标签</h1>\n</li>\n<li>\n<p>段落标签：<p>  单词 paragraph 缩写，意味段落</p>\n<p>特点：</p>\n<ol>\n<li>文本在一个段落中会根据浏览器窗口的大小自动换行</li>\n<li>段落和段落间保有空隙</li>\n</ol>\n</li>\n<li>\n<p>换行标签： <code>&lt;br /&gt;</code>  单词 break 的缩写，意味打断、换行</p>\n</li>\n<li>\n<p>文本格式化标签：</p>\n<table>\n<thead>\n<tr>\n<th>语义</th>\n<th>标签</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>加粗</td>\n<td><strong></strong>或<b></b></td>\n</tr>\n<tr>\n<td>倾斜</td>\n<td><em></em>或<i></i></td>\n</tr>\n<tr>\n<td>删除线</td>\n<td><del></del>或<s></s></td>\n</tr>\n<tr>\n<td>下划线</td>\n<td><ins></ins>或<u></u></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><code>&lt;div&gt;和&lt;span&gt;标签</code> ：盒子，用来装内容</p>\n<p><code>&lt;div&gt;</code>  一行只能放一个， <code>&lt;span&gt;</code>  一行可以放多个</p>\n</li>\n<li>\n<p>图像标签：<img>  单标签  单词 image 的缩写，意为图像</p>\n<p><code>&lt;img src=&quot;图像URL&quot;/&gt;</code></p>\n<p>在 HTML 标签中，<img>标签用于定义 HTML 页面中的图像</p>\n<p>src 是<image>标签的必须属性，它用于指定图像文件的路径和文件名</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>src</td>\n<td>图片路径</td>\n<td>必须熟悉</td>\n</tr>\n<tr>\n<td>alt</td>\n<td>文本</td>\n<td>替换文本。图像不能显示的文字</td>\n</tr>\n<tr>\n<td>title</td>\n<td>文本</td>\n<td>提示文本。鼠标放在图像上显示的文字</td>\n</tr>\n<tr>\n<td>width</td>\n<td>像素</td>\n<td>设置图像的宽度</td>\n</tr>\n<tr>\n<td>height</td>\n<td>像素</td>\n<td>设置图像的高度</td>\n</tr>\n<tr>\n<td>border</td>\n<td>像素</td>\n<td>设置图像的边框粗细</td>\n</tr>\n</tbody>\n</table>\n<p><code>&lt;img src=&quot;图片地址&quot; alt=&quot;我是Eucli&quot; title=&quot;哈哈哈&quot;/&gt;</code></p>\n<p>注意点：</p>\n<ul>\n<li>\n<p>图像标签可以拥有多个属性，必须写在标签名 img 后面</p>\n</li>\n<li>\n<p>属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开</p>\n</li>\n<li>\n<p>属性采取键值对的格式，即 key=”value” 的格式，属性 =” 属性值”</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>路径</p>\n</li>\n<li>\n<p>相对路径：以引用文件所在的位置为参考基础，而建立的目录路径，这里简单来说，图片相对于 HTML 页面的位置</p>\n<table>\n<thead>\n<tr>\n<th>相对路径分类</th>\n<th>符号</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>同一级路径</td>\n<td></td>\n<td>图像文件位于 HTML 文件的同一级，如 <code>&lt;img src=”图片名”/&gt;</code></td>\n</tr>\n<tr>\n<td>下一级路径</td>\n<td>/</td>\n<td>图像文件位于 HTML 文件的下一级，如 <code>&lt;img src=”文件夹名/图片名”/&gt;</code></td>\n</tr>\n<tr>\n<td>上一级路径</td>\n<td>…/</td>\n<td>图像文件位于 HTML 文件的上一级，如 <code>&lt;img src=&quot;E:\\Blog\\source\\_posts\\”..\\文件名”\\&gt;&quot;</code></td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>绝对路径：是指目录下的绝对位置，直接到达目标位置，通常是从盘符开始的路径</p>\n<p>例如， <code>例如，”D:\\web\\img\\logo.gif”或完整的网络地址”http://www.itcast.cn/images/logo.gif”</code></p>\n<p>也可以直接在网上直接右键图片复制图片地址</p>\n</li>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n<li></li>\n</ul>\n<p>​</p>\n",
            "tags": [
                "前端知识点",
                "HTML"
            ]
        },
        {
            "id": "https://eucli.top/2022/10/16/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "url": "https://eucli.top/2022/10/16/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "title": "尚品汇前台项目实战",
            "date_published": "2022-10-16T11:59:45.000Z",
            "content_html": "<h1 id=\"vue-cli-脚手架初始化项目-vue-create-app\"><a class=\"markdownIt-Anchor\" href=\"#vue-cli-脚手架初始化项目-vue-create-app\">#</a> vue-cli 脚手架初始化项目 vue create app</h1>\n<h1 id=\"npm-常用的安装命令\"><a class=\"markdownIt-Anchor\" href=\"#npm-常用的安装命令\">#</a> npm 常用的安装命令</h1>\n<ul>\n<li>npm i 就是 npm install 简写</li>\n<li>npm i xxx -D 就是 npm i xxx --save-dev</li>\n<li>npm i xxx -S 就是 npm i xxx --save</li>\n<li>npm i xxx -g 就是 全局安装</li>\n<li>npm i xxx 就是 npm i xxx --save</li>\n</ul>\n<h1 id=\"初始项目中文件夹的作用\"><a class=\"markdownIt-Anchor\" href=\"#初始项目中文件夹的作用\">#</a> 初始项目中文件夹的作用</h1>\n<ul>\n<li>\n<p>node_modules 项目依赖文件夹</p>\n</li>\n<li>\n<p>public 一般放置一些静态资源 (图片)，需要注意放在 public 文件夹中的资源 webpack 打包的时候会原封不动打包到 dist 文件夹中</p>\n</li>\n<li>\n<p>src (程序员源代码文件夹):</p>\n<ul>\n<li>\n<p>assets 文件夹：一般也是放置一些静态资源 (一般放置多个组件共用的静态资源)，需要注意，放置在 assets 文件夹里的静态资源在 webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</p>\n</li>\n<li>\n<p>components 文件夹：一般放置的是非路由组件或者一些常用的全局组件</p>\n</li>\n<li>\n<p>pages|views 文件夹：放置路由组件</p>\n</li>\n<li>\n<p>router 文件夹：配置路由的地方</p>\n</li>\n<li>\n<p>APP.vue: 整个项目中唯一的根组件</p>\n</li>\n<li>\n<p>main.js: 程序入口文件，也是整个程序当中最先执行的文件</p>\n</li>\n</ul>\n</li>\n<li>\n<p>babel.config.js: 配置文件 (babel 相关)</p>\n</li>\n<li>\n<p>package.json: 记录项目的信息</p>\n</li>\n<li>\n<p>package-lock.json: 缓存性文件</p>\n</li>\n</ul>\n<h1 id=\"一些问题\"><a class=\"markdownIt-Anchor\" href=\"#一些问题\">#</a> 一些问题</h1>\n<ul>\n<li>\n<p>vue 创建项目，报错 No Babel config file detected for…<br>\n 解决办法：在 package.json 文件中增加 “requireConfigureFile”: false</p>\n</li>\n<li>\n<p>【vue 报错】The template root requires exactly one element<br>\n 解决：因为 vue2 的模版中只有能一个根节点，所以在 template 中插入第二个元素就会报错</p>\n</li>\n</ul>\n<h1 id=\"一些配置\"><a class=\"markdownIt-Anchor\" href=\"#一些配置\">#</a> 一些配置：</h1>\n<ol>\n<li>\n<p>项目运行起来的时候，让浏览器可以自动打开<br>\n办法：在 package.json 中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"><span class=\"attr\">&quot;serve&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;vue-cli-service serve --open&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>eslint 校验功能关闭<br>\n在 vue.config.js 中写 <code>lintOnSave: false</code></p>\n</li>\n<li>\n<p>src 文件夹简写方式，配置别名 @代表 src 文件夹<br>\n jscpnfig.json 文件中：(省略)</p>\n</li>\n</ol>\n<h1 id=\"项目的路由分析-vue-router\"><a class=\"markdownIt-Anchor\" href=\"#项目的路由分析-vue-router\">#</a> 项目的路由分析 vue-router</h1>\n<ul>\n<li>\n<p>前端所谓路由：KV 键值对</p>\n<ul>\n<li>key:URL (浏览器地址栏中的路径 path)</li>\n<li>value: 相应的路由组件 (component，注意后面没有 s)</li>\n<li>注意：项目的上中下结构</li>\n</ul>\n</li>\n<li>\n<p>路由组件：</p>\n<ul>\n<li>Home 首页路由组件、Search 路由组件、login 登录路由组件、Refister 注册路由组件</li>\n</ul>\n</li>\n<li>\n<p>非路由组件：Header、Footer (在首页，搜索页)，但是在 登录 | 注册 页没有</p>\n</li>\n</ul>\n<h1 id=\"在开发项目的时候\"><a class=\"markdownIt-Anchor\" href=\"#在开发项目的时候\">#</a> 在开发项目的时候：</h1>\n<ol>\n<li>书写静态页面 (HTML+CSS)</li>\n<li>拆分组件</li>\n<li>获取服务器的数据动态展示</li>\n<li>完成相应的动态业务逻辑</li>\n</ol>\n<ul>\n<li>注意：\n<ol>\n<li>创建组件的时候，组件结构 + 组件的样式 + 图片资源</li>\n<li>咱们的项目采用 less 样式，但浏览器不识别 less 样式，需要通过 less、less-loader 进行处理<br>\n <code>npm i less less-loader@7</code>  安装 5 版本会报错<br>\n别忘了 style 标签中写 <code>&lt;style scoped lang=&quot;less&quot;&gt;</code></li>\n<li>header 样式太高记得把 App.vue 里面的样式清除</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"使用组件的步骤非路由组件\"><a class=\"markdownIt-Anchor\" href=\"#使用组件的步骤非路由组件\">#</a> 使用组件的步骤 (非路由组件)</h1>\n<ol>\n<li>创建或定义组件</li>\n<li>引入：import 组件名 from ‘组件地址’ 在需要使用这个组件的地方引入</li>\n<li>注册 (vue3 使用 setup 语法糖不用注册)：components 中注册引入的组件名 (简写形式，KV 一致省略 V)</li>\n<li>使用：以标签形式在 APP.vue 中使用</li>\n</ol>\n<h1 id=\"引入的-css-错乱记得引入默认的样式\"><a class=\"markdownIt-Anchor\" href=\"#引入的-css-错乱记得引入默认的样式\">#</a> 引入的 css 错乱，记得引入默认的样式</h1>\n<p>public 文件夹中，创建一个清除默认样式的 css 文件，再在 public 下的 index.html 中引入这个 css 用 link</p>\n<h1 id=\"路由的搭建-vue-router\"><a class=\"markdownIt-Anchor\" href=\"#路由的搭建-vue-router\">#</a> 路由的搭建 vue-router</h1>\n<p>(ps. 创建项目的时候直接把路由选上就不用搭建了 doge)</p>\n<p>安装：  <code>npm i vue-router@3</code>  因为 vue2 不用 3 版本会报错</p>\n<p>在上面的分析中，路由组件应该有四个： Home、Search、Login、Refister<br>\ncomponents 文件夹：经常放非路由组件或共用全局组件<br>\n pages|views 文件夹：经常放置路由组件</p>\n<h1 id=\"配置路由\"><a class=\"markdownIt-Anchor\" href=\"#配置路由\">#</a> 配置路由</h1>\n<p>项目当中配置的路由一般都放在 router 文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//配置路由的地方</span><br><span class=\"line\">import Vue from &quot;vue&quot;;</span><br><span class=\"line\">import VueRouter from &quot;vue-router&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用插件</span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\">//引入路由组件</span><br><span class=\"line\">import Home from &#x27;@/pages/Home&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//配置路由</span><br><span class=\"line\">export default new VueRouter(&#123;</span><br><span class=\"line\">routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    path:&quot;/&quot;,            //默认展示只写 /</span><br><span class=\"line\">    component:Home       //注意是 component 一定不要加 s</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>除此之外，还需要在 main.js 中引入路由</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>引入路由</span><br><span class=\"line\">import router from <span class=\"string\">&#x27;@/router&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\"><span class=\"regexp\">//</span>注册路由</span><br><span class=\"line\">router</span><br><span class=\"line\">&#125;).<span class=\"variable\">$mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>还有一件事，路由组件还需要出口 在需要展示路由组件的地方写  <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n<p>ps. 配置路由的时候，可以给路由添加路由元信息 meta，路由需要配置对象，它的 key 不能瞎写</p>\n<h1 id=\"路由组件与非路由组件的异同\"><a class=\"markdownIt-Anchor\" href=\"#路由组件与非路由组件的异同\">#</a> 路由组件与非路由组件的异同：</h1>\n<ol>\n<li>路由组件一般放置在 pages|views 文件夹中，非路由组件一般放置在 components 文件夹中</li>\n<li>路由组件一般需要在 router 文件夹注册 (使用即为组件的名字，非路由组件在使用的时候还要占位)，非路由组件一般都是以标签的形式使用</li>\n<li>注册完路由，不管是路由组件还是非路由组件身上都有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</li>\n</ol>\n<h1 id=\"route和router-属性\"><a class=\"markdownIt-Anchor\" href=\"#route和router-属性\">#</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</h1>\n<ul>\n<li><code>$route</code> ：一般获取路由信息 (路径、query、params 等等)</li>\n<li><code>$router</code> ：一般进行编程式导航进行路由跳转 (push|replace)</li>\n</ul>\n<h1 id=\"路由的跳转\"><a class=\"markdownIt-Anchor\" href=\"#路由的跳转\">#</a> 路由的跳转</h1>\n<p>路由的跳转有两种形式：</p>\n<ul>\n<li>声明式导航 router-link 注意要有 to 属性</li>\n<li>编程式导航 push|replace：声明式导航能做的，编程式导航都能做。而且编程式导航除了可以进行路由跳转，还可以做一些其他的业务逻辑</li>\n</ul>\n<h1 id=\"footer-组件的显示与隐藏\"><a class=\"markdownIt-Anchor\" href=\"#footer-组件的显示与隐藏\">#</a> Footer 组件的显示与隐藏</h1>\n<p>Footer 组件：在 Home、Search 显示，在 Login、Register 时隐藏</p>\n<h1 id=\"路由传参\"><a class=\"markdownIt-Anchor\" href=\"#路由传参\">#</a> 路由传参</h1>\n<ol>\n<li>路由的跳转有几种方式？<br>\n比如：A-&gt;B</li>\n</ol>\n<ul>\n<li>声明式导航：route-link, 务必要有 to 属性</li>\n<li>编程式导航：利用的是组件实例的 $router.push|replace 方法 可以写自己的业务</li>\n</ul>\n<ol start=\"2\">\n<li>路由传参，参数有几种写法？</li>\n</ol>\n<ul>\n<li>params 参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位</li>\n<li>query 参数：不属于路径当中的一部分，类似于 ajax 中的 queryString/home?k=v&amp;kv=, 不需要占位</li>\n<li>三种方式：</li>\n</ul>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第一种：字符串形式</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(<span class=\"string\">&quot;/search/&quot;</span> + <span class=\"keyword\">this</span>.keyword + <span class=\"string\">&quot;?k=&quot;</span> + <span class=\"keyword\">this</span>.keyword.toUpperCase());</span><br><span class=\"line\"><span class=\"comment\">//第二种：模板字符串</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(`/search/$&#123;<span class=\"keyword\">this</span>.keyword&#125;?k=$&#123;<span class=\"keyword\">this</span>.keyword.toUpperCase()&#125;`);</span><br><span class=\"line\"><span class=\"comment\">//第三种：对象写法   这种写法需要给路由起名字name   ☆最常用</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.$router.push(&#123;</span><br><span class=\"line\">name:<span class=\"string\">&quot;search&quot;</span>,</span><br><span class=\"line\">params:&#123;keyword:<span class=\"keyword\">this</span>.keyword&#125;,</span><br><span class=\"line\">query:&#123;k:<span class=\"keyword\">this</span>.keyword.toUpperCase()&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"路由传参相关面试题\"><a class=\"markdownIt-Anchor\" href=\"#路由传参相关面试题\">#</a> 路由传参相关面试题</h1>\n<ol>\n<li>\n<p>路由传递参数 (对象写法) path 是否可以结合 params 参数一起使用？<br>\n不可以。<br>\n路由跳转传参的时候，对象写法可以是 name，path 形式，但 path 写法不能与 params 使用</p>\n</li>\n<li>\n<p>如何指定 params 参数可传可不传？<br>\n比如：配置路由的时候，params 参数占位了，但是路由跳转的时候没有传递 params，那么路径会出现问题  <code>http://localhost:8080/#/?k=1123</code>  没有 search<br>\n 解决：params 参数后面加？ <code>path:&quot;/search/:keyword?&quot;</code></p>\n</li>\n<li>\n<p>params 参数可以传递也可以不传递，但如果传递的是空串如何解决？<br>\n// 答：用 undefined 解决  <code>params:&#123;keyword:''||undefined&#125;</code></p>\n</li>\n<li>\n<p>路由组件能不能传递 props 数据？<br>\n可以，有三种方式 (但是实际开发中并不怎么用)</p>\n</li>\n</ol>\n<ul>\n<li>方式一：布尔值写法，只能传递 params 参数<br>\n <code>props:true</code></li>\n<li>方式二：对象写法 额外给路由组件传递一些 props<br>\n <code>props:&#123;a:1,b:2&#125;</code></li>\n<li>方式三 (最常用)：函数写法，可以把 params、query 参数，通过 props 传递给路由组件</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props:(<span class=\"variable\">$route</span>) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    keyword: <span class=\"variable\">$route</span><span class=\"selector-class\">.params</span><span class=\"selector-class\">.keyword</span>,</span><br><span class=\"line\">    k: <span class=\"variable\">$route</span><span class=\"selector-class\">.query</span>,k</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>编程式导航跳转到当前路由 (参数不变)，多次执行会抛出错误警告？</li>\n</ol>\n<ul>\n<li>声明式导航没有这类问题，因为 vue-router 底层已经处理好了</li>\n<li>怎么解决：通过给 push 方法传递相应的成功、失败的回调，可以捕获到当前的错误，可以解决，只是治标不治本，将来在别的组件组件中使用 push|replace 还会有类似错误</li>\n</ul>\n<p>this：当前组件实例 (search)<br>\n this.$router 属性：属性值 vueRouter 类的一个实例<br>\n push：vueRouter 类的一个实例</p>\n<h1 id=\"call-与-apply-区别\"><a class=\"markdownIt-Anchor\" href=\"#call-与-apply-区别\">#</a> call 与 apply 区别</h1>\n<ul>\n<li>相同点：都可以调用函数一次，都可以修改函数的上下文一次</li>\n<li>不同点：call 传递参数用逗号隔开，apply 方法执行传递数组</li>\n</ul>\n<h1 id=\"home-模块的组件拆分\"><a class=\"markdownIt-Anchor\" href=\"#home-模块的组件拆分\">#</a> Home 模块的组件拆分</h1>\n<ol>\n<li>先把静态页面完成</li>\n<li>拆分出静态组件</li>\n<li>获取服务器的数据展示</li>\n<li>动态业务</li>\n</ol>\n<h1 id=\"三级联动组件完成\"><a class=\"markdownIt-Anchor\" href=\"#三级联动组件完成\">#</a> 三级联动组件完成</h1>\n<p>由于三级联动组件在 Home、Search、Detail 模块中都使用了，所有注册为一个全局组件 (在 main.js 注册):<br>\n// 先引入。三级联动的组件–全局组件<br>\n <code>import TypeNav from '@/pages/Home/TypeNav'</code> <br>\n// 再注册。第一个参数：全局组件的名字 第二个参数：哪一个组件<br>\n <code>Vue.component(TypeNav.name,TypeNav)</code></p>\n<ul>\n<li>好处：只需要注册一次，就可以在项目任意的地方使用，且使用的时候不需要引入</li>\n</ul>\n<h1 id=\"完成其余静态组件\"><a class=\"markdownIt-Anchor\" href=\"#完成其余静态组件\">#</a> 完成其余静态组件</h1>\n<p>HTML + CSS + 图片资源</p>\n<h1 id=\"postman-测试接口\"><a class=\"markdownIt-Anchor\" href=\"#postman-测试接口\">#</a> POSTMAN 测试接口</h1>\n<ul>\n<li>刚刚经过 postman 工具测试，接口是没有问题的</li>\n<li>如果服务器返回的数据 code 字段为 200，代表服务器返回数据成功</li>\n<li>整个项目，接口前缀都有 /api 字样</li>\n</ul>\n<h1 id=\"axios-二次封装\"><a class=\"markdownIt-Anchor\" href=\"#axios-二次封装\">#</a> axios 二次封装</h1>\n<p>(发请求的几种方式：XMLHttpRequest、fetch、JQ、axios)</p>\n<ol>\n<li>为什么需要进行二次封装 axios<br>\n 为了使用请求拦截器、响应拦截器：</li>\n</ol>\n<ul>\n<li>请求拦截器：可以在发请求之前可以处理一些业务</li>\n<li>响应拦截器：当服务器数据返回以后，可以处理一些事情</li>\n</ul>\n<ol start=\"2\">\n<li>在项目中创建 api 文件夹关于 axios (在 src 文件夹目录下建立)</li>\n</ol>\n<ul>\n<li>接口当中：路径都带有 /api</li>\n<li>baseURL:&quot;/api&quot; 基础路径，发请求的时候，路径当中会出现 api，不用自己手写了</li>\n</ul>\n<ol start=\"3\">\n<li>如果 axios 基础不好，可以参考 <a href=\"https://www.axios-http.cn/docs/intro\">axios 中文文档</a></li>\n</ol>\n<h1 id=\"接口统一管理\"><a class=\"markdownIt-Anchor\" href=\"#接口统一管理\">#</a> 接口统一管理</h1>\n<ul>\n<li>\n<p>项目很小：完全可以在组件的生命周期函数中发请求</p>\n</li>\n<li>\n<p>项目大：axios.get (‘xxx’)</p>\n<ol>\n<li>跨域问题<br>\n什么是跨域：协议、域名、端口号不同请求，称之为跨域<br>\n<a href=\"http://localhost:8080/#/home\"> http://localhost:8080/#/home</a> 前端项目本地服务器<br>\n<a href=\"http://gmall-h5-api.atguigu.cn\"> http://gmall-h5-api.atguigu.cn</a> 后台服务器</li>\n</ol>\n<ul>\n<li>\n<p>解决跨域的几个方法：<br>\nJSONP、CROS、代理</p>\n</li>\n<li>\n<p>webpack 代理配置</p>\n</li>\n</ul>\n<figure class=\"highlight nestedtext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"attribute\">devServer</span><span class=\"punctuation\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">  <span class=\"attribute\">proxy</span><span class=\"punctuation\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">    <span class=\"attribute\">&#x27;/api&#x27;</span><span class=\"punctuation\">:</span> <span class=\"string\">&#123;</span></span><br><span class=\"line\">      <span class=\"attribute\">target</span><span class=\"punctuation\">:</span> <span class=\"string\">&#x27;http://gmall-h5-api.atguigu.cn&#x27;,</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"nprogress-进度条的使用\"><a class=\"markdownIt-Anchor\" href=\"#nprogress-进度条的使用\">#</a> nprogress 进度条的使用</h1>\n<p>可以在 reques.js 文件中使用</p>\n<ol>\n<li>\n<p>先引入：<br>\n// 引入进度条<br>\n <code>import nprogress from &quot;nprogress&quot;;</code> <br>\n// 引入进度条样式<br>\n <code>import &quot;nprogress/nprogress.css&quot;</code></p>\n</li>\n<li>\n<p>start：进度条开始 done：进度条结束<br>\n在请求拦截器中用 <code>1nprogress.start()</code> ，在响应拦截器中用 <code>nprogress.done()</code></p>\n</li>\n</ol>\n<h1 id=\"vuex-状态管理库\"><a class=\"markdownIt-Anchor\" href=\"#vuex-状态管理库\">#</a> vuex 状态管理库</h1>\n<ol>\n<li>vuex 是什么？<br>\n官方提供的一个插件，是一个状态管理库，集中式管理项目中组件共用的数据。</li>\n</ol>\n<ul>\n<li>\n<p>state：仓库存储数据的地方</p>\n</li>\n<li>\n<p>mutations：修改 state 的唯一手段</p>\n</li>\n<li>\n<p>actions：处理 action，可以书写自己的业务逻辑，也可以处理异步。不能修改 state<br>\n <code>actions是服务员，mutations是厨师，只有mutations能做菜(修改state)</code></p>\n<p>getters：理解为计算属性，用于简化仓库数据，让组件获取仓库的数据更加方便<br>\n modules</p>\n<p>vue2 要安装 vuex@3</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>vuex 基本使用<br>\n因为 vuex 是 Vue 框架中的一个插件，要使用插件需要引入 vue 与 vuex 并 <code>Vue.use()</code>  一下，<br>\n然后暴露出去一个  <code>export default new Vuex.Store(&#123;&#125;)</code> <br>\n 别忘了在 main.js 入口文件里引入、注册一下仓库</p>\n</li>\n<li>\n<p>vuex 模块式开发</p>\n</li>\n</ol>\n<ul>\n<li>如果项目过大，组件过多，接口也很多，数据也很多，可以让 vuex 实现模块式开发</li>\n<li>每个模块都有自己的一个小仓库，到时候引入到 store 的入口文件中，然后在 export default 中用 modules 对小仓库进行管理</li>\n</ul>\n<h1 id=\"vue-模块开发总结\"><a class=\"markdownIt-Anchor\" href=\"#vue-模块开发总结\">#</a> vue 模块开发总结！！！！！！！</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>写请求。【api 文件夹的 <code>index.js</code>  中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】<br>\n(Actions,Mutations,State) 参考 vuex 工作流程图</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取仓库数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"一-写静态页面-静态组件拆分\"><a class=\"markdownIt-Anchor\" href=\"#一-写静态页面-静态组件拆分\">#</a> 一、写静态页面 + 静态组件拆分</h2>\n<h2 id=\"二-写请求\"><a class=\"markdownIt-Anchor\" href=\"#二-写请求\">#</a> 二、写请求。</h2>\n<p>在 api 文件夹的 <code>index.js</code>  中</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> const reqGetSearchInfo = <span class=\"function\"><span class=\"params\">(params)</span> =&gt;</span> requests(&#123;</span><br><span class=\"line\">  url:<span class=\"string\">&#x27;/list&#x27;</span>,</span><br><span class=\"line\">  method:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  data:params</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"三-发请求api\"><a class=\"markdownIt-Anchor\" href=\"#三-发请求api\">#</a> 三、发请求 (API)</h2>\n<p>在组件的 <code>mounted()</code>  中发请求。即组件挂载完毕，通知 Vuex 向服务器发请求。</p>\n<ul>\n<li>dispatch：dispatch 是分发的意思，是 store 身上的一个 API，它包含两个参数，第一个是动作也可以说是一个操作，你通过这个操作调用 actions 里面的一个函数。第二个就是你要传递的参数 (也可以不传。但如果传递，到时候至少要传一个空对象，不然会报错)</li>\n</ul>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">mounted</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中</span></span><br><span class=\"line\">this.<span class=\"variable\">$store</span><span class=\"selector-class\">.dispatch</span>(<span class=\"string\">&#x27;getGoodInfo&#x27;</span>,this.<span class=\"variable\">$route</span><span class=\"selector-class\">.params</span><span class=\"selector-class\">.skuid</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>要发请求，需要在对应的小仓库中先引入之前封装好的 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<h2 id=\"四-vuex三连环\"><a class=\"markdownIt-Anchor\" href=\"#四-vuex三连环\">#</a> 四、vuex (三连环)</h2>\n<ol>\n<li>第一环：Actions。<br>\n因为你使用了 dispatch，而其中的 <code>getGoodInfo</code>  未定义，因此要在 store 仓库中对应小仓库的 actions 中定义 getGoodInfo。通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据。<br>\n即 actions 中必须要有一个 getGoodInfo 方法来与之对应。其中参数 <code>&#123;commit&#125;</code>  是对 commit 的解构。commit 也是一个函数，有两个操作，第一个也是一个动作，第二个就是参数，通过 commit 将这次请求交给 mutations。<br>\n这第二个参数是在用户派发 actions 的时候，第二个参数传递过来的，至少要传一个空对象</li>\n</ol>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">const actions = &#123;</span><br><span class=\"line\">async <span class=\"built_in\">getGoodInfo</span>(&#123;commit&#125;,skuId)&#123;</span><br><span class=\"line\">let result =await <span class=\"built_in\">reqGoodsInfo</span>(skuId)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(result.code==<span class=\"number\">200</span>)</span></span>&#123;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">commit</span><span class=\"params\">(<span class=\"string\">&#x27;GetGOODINFO&#x27;</span>,result.data)</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>第二环：Mutations</li>\n</ol>\n<ul>\n<li>修改处理数据的唯一地方</li>\n<li>在 mutations 中真正的处理数据并且渲染数据</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">GetGOODINFO(<span class=\"keyword\">state</span>, categoryList) &#123;</span><br><span class=\"line\"><span class=\"keyword\">state</span>.categoryList = categoryList;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>getters:<br>\n 就是相当于计算属性，对 state 中的数据进行简化操作，就比如当你的数据很复杂时你需要简单的拿到数据。举个例子你的数据是：AAA.BBB.CCC.DDD.data, 那么你就可以使用计算属性将其变为 data.</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">skuInfo(<span class=\"keyword\">state</span>) &#123;</span><br><span class=\"line\">  return <span class=\"keyword\">state</span>.goodInfo.skuInfo || &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>使用 getters，在组件中获取仓库数据时用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code>  不用 <code>&#123; mapState &#125;</code>  了</li>\n</ul>\n<ol start=\"3\">\n<li>第三环：State<br>\nstate 中数据默认初始值别瞎写，服务器返回对象，起始值是对象；服务器返回数组，起始值是数组。根据接口的返回值去初始化</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span> = &#123;</span><br><span class=\"line\">  categoryList: []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"五-组件获取仓库数据\"><a class=\"markdownIt-Anchor\" href=\"#五-组件获取仓库数据\">#</a> 五、组件获取仓库数据</h2>\n<p>回到实例 (组件) 中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br>\n 并把数据映射为组件实例身上的一个属性：</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">...mapState(&#123;</span><br><span class=\"line\">categoryList: (<span class=\"keyword\">state</span>) =&gt; categoryList</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>如果用了 getters，辅助函数要用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//mapGetters里面的写法：传递的数组，因为getters计算没有划分模块</span></span><br><span class=\"line\">..<span class=\"selector-class\">.mapGetters</span>(<span class=\"selector-attr\">[<span class=\"string\">&#x27;skuInfo&#x27;</span>]</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"六-动态展示数据\"><a class=\"markdownIt-Anchor\" href=\"#六-动态展示数据\">#</a> 六、动态展示数据</h2>\n<p>根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成</p>\n<p>————————————————————————————————————————————————</p>\n<p>栗子：</p>\n<h1 id=\"完成-typenav-三级联动展示数据业务\"><a class=\"markdownIt-Anchor\" href=\"#完成-typenav-三级联动展示数据业务\">#</a> 完成 TypeNav 三级联动展示数据业务</h1>\n<p>把全局组件放到 components 文件夹中<br>\n axios 二次封装、vuex 准备工作。。。</p>\n<ol>\n<li>在三级联动组件中写 <code>mounted()</code> ，组件挂载完毕，通知 Vuex 向服务器发请求：</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">mounted</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">$store</span>.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&quot;categoryList&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>因为 &quot;categoryList&quot; 未定义，去 store 仓库中的 home 模块的小仓库中，在 actions 中定义 categoryList。<br>\n通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据<br>\n要发请求，需要引入之前封装 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//通过API里面的接口函数调用，向服务器发请求，获取服务器的数据</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">categoryList</span>(<span class=\"params\">&#123; commit &#125;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//解构commit，提交mutations</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">reqCategoryList</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//第一个参数是起名，第二个参数是提交的数据</span></span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;GETCATEGORYLIST&quot;</span>, result.<span class=\"property\">data</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>请求成功，commit 提交给 mutations 修改 state。在此之前 state 需要写一个初始值。</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span> = &#123;</span><br><span class=\"line\">categoryList: [],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">CATEGORYLIST(<span class=\"keyword\">state</span>, categoryList) &#123;</span><br><span class=\"line\"><span class=\"keyword\">state</span>.categoryList = categoryList;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>Home 组件中已经有了相应的数组，需要在三级联动 TypeNav 组件中拿到相应的数据进行展示<br>\n回到 TypeNav 组件中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br>\n 并把数据映射为组件实例身上的一个属性：</li>\n</ol>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">computed: &#123;</span><br><span class=\"line\">...mapState(&#123;</span><br><span class=\"line\">categoryList: (<span class=\"keyword\">state</span>) =&gt; <span class=\"keyword\">state</span>.home.categoryList,</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>展示数据。<br>\n先看数据的结构，发现一层套一层有三层，是一个三级菜单<br>\n在 template 把多余的结构去掉，只留一个，用 v-for 生成： <code>v-for=&quot;(c1, index) in categoryList&quot; :key=&quot;c1.categoryId&quot;</code> <br>\n 并把之前写死的数据替换： <code>c1.categoryName</code></li>\n</ol>\n<h1 id=\"完成一级分类动态添加背景颜色\"><a class=\"markdownIt-Anchor\" href=\"#完成一级分类动态添加背景颜色\">#</a> 完成一级分类动态添加背景颜色</h1>\n<ul>\n<li>方法一：采用样式完成 (可以的)</li>\n<li>方法二：通过 JS 完成</li>\n</ul>\n<h1 id=\"通过-js-控制二三级商品分类的显示与隐藏\"><a class=\"markdownIt-Anchor\" href=\"#通过-js-控制二三级商品分类的显示与隐藏\">#</a> 通过 JS 控制二三级商品分类的显示与隐藏</h1>\n<p>最开始的时候，是通过 CSS 样式的 display：block|none 显示与隐藏二三级商品分类</p>\n<h1 id=\"函数的防抖与节流\"><a class=\"markdownIt-Anchor\" href=\"#函数的防抖与节流\">#</a> 函数的防抖与节流</h1>\n<p>演示卡顿现象：事件触发非常频繁，而且每一次触发，回调函数都要去执行，如果事件很短，而且回调函数有计算，那么很可能出现浏览器卡顿</p>\n<ul>\n<li>\n<p>节流：在规定的间隔时间范围内不会重复触发回调，只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</p>\n</li>\n<li>\n<p>防抖：前面的所有的触发都被取消，最后一次执行在规定的时间后才会触发，也就是说如果连续快速的触发，只会执行一次</p>\n</li>\n</ul>\n<h1 id=\"完成三级联动节流操作\"><a class=\"markdownIt-Anchor\" href=\"#完成三级联动节流操作\">#</a> 完成三级联动节流操作</h1>\n<p>node_modules 里面已经有 lodash 了</p>\n<ol>\n<li>引入 lodash： <code>import * from 'lodash' </code></li>\n<li>使用节流函数：</li>\n</ol>\n<figure class=\"highlight wren\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">changeIndex</span>: \\<span class=\"variable\">_</span>.<span class=\"property\">throttle</span>(<span class=\"title function_\">function</span>(<span class=\"params\">index</span>) &#123;</span><br><span class=\"line\"><span class=\"comment\">//index:鼠标移上某一个一级分类的索引值</span></span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">currentIndex</span> <span class=\"operator\">=</span> index</span><br><span class=\"line\">&#125;,<span class=\"number\">50</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"三级联动组件的路由跳转与传递参数\"><a class=\"markdownIt-Anchor\" href=\"#三级联动组件的路由跳转与传递参数\">#</a> 三级联动组件的路由跳转与传递参数</h1>\n<p>三级联动用户可以点击的：一级分类、二级分类、三级分类，当你点击的时候 Home 模块跳转到 Search 模块，一级会把用户选中的产品 (产品的名字、产品的 ID) 在路由跳转的时候，进行传递</p>\n<ul>\n<li>注意：如果使用声明式导航 router-link，可以实现路由的跳转与传递参数。但是会出现卡顿现象</li>\n<li>原因：router-link 会创建很多组件，很耗内存。</li>\n</ul>\n<p>因此我们选择编程式导航，但是为了优化性能，不建议在每一个 a 标签上写，最好给它们的父节点上写声明式导航，然后利用事件的委派</p>\n<ul>\n<li>\n<p>利用事件的委派存在一些问题：</p>\n<ol>\n<li>\n<p>事件委派父节点下的子节点有很多，怎么知道一定是 a 标签<br>\n解决：给 a 标签添加自定义属性，以自定义属性为条件判断其是不是 a 标签</p>\n</li>\n<li>\n<p>如何获取参数<br>\n解决：仍然给 a 标签添加自定义属性</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"search-模块中的-typenav-商品分类菜单\"><a class=\"markdownIt-Anchor\" href=\"#search-模块中的-typenav-商品分类菜单\">#</a> Search 模块中的 TypeNav 商品分类菜单</h1>\n<p>显示与隐藏</p>\n<p>过渡动画效果：前提 组件 | 元素 必须有 <code>v-if|v-show</code>  指令才可以进行过渡动画<br>\n要用 transition 标签把需要添加过渡的元素包裹起来 可以加 name，不加 name 的话就是 <code> v-enter，v-leave</code></p>\n<h1 id=\"优化商品分类三级列表\"><a class=\"markdownIt-Anchor\" href=\"#优化商品分类三级列表\">#</a> 优化商品分类三级列表</h1>\n<p>把  <code>this.$store.dispatch(&quot;categoryList&quot;)</code>  从 TypeNav 组件放到 App 组件中<br>\n在 App 根组件中发请求，因为根组件 mounted 只会执行一次</p>\n<h1 id=\"合并-params-与-query-参数\"><a class=\"markdownIt-Anchor\" href=\"#合并-params-与-query-参数\">#</a> 合并 params 与 query 参数</h1>\n<h1 id=\"开发-home-首页当中的-listcontainer-组件与-floor-组件\"><a class=\"markdownIt-Anchor\" href=\"#开发-home-首页当中的-listcontainer-组件与-floor-组件\">#</a> 开发 Home 首页当中的 ListContainer 组件与 Floor 组件</h1>\n<ul>\n<li>\n<p>注意：服务器返回的数据 (接口) 只有商品分类菜单分类数据，对于 ListContainer 组件与 Floor 组件数据服务器没有提供<br>\n解决方法：mock 数据 (模拟)：如果你想 mock 数据，需要用到插件 mockjs<br>\n 前端 mock 的数据不会和服务器进行任何通信</p>\n</li>\n<li>\n<p>mockjs 使用步骤：</p>\n<ol>\n<li>在项目当中 src 文件夹中创建 mock 文件夹，并创建相应的 JSON 文件</li>\n<li>准备 JSON 数据 (一定要格式化一下，不能留有空格，不然跑不起来)</li>\n<li>把 mock 数据需要的图片放置到 public 文件夹中【public 文件夹在打包的时候原封不动打包到 dist 文件夹中】</li>\n<li>开始 mock 虚拟数据，通过 mockjs 实现：在 mock 文件夹下创建 mockServe.js 文件</li>\n<li>mockServe.js 文件下：</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先引入 mockjs 模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Mock <span class=\"keyword\">from</span> <span class=\"string\">&quot;mockjs&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//把 JSON 数据格式引入进来(JSON 数据格式没有对外暴露，但是可以引入)</span></span><br><span class=\"line\"><span class=\"comment\">//webpack 默认对外暴露的：图片、JSON 数据格式</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> banner <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./banner.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> floor <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./floor.json&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">//mock 数据：第一个参数请求地址 第二个参数请求数据</span></span><br><span class=\"line\">Mock.mock(<span class=\"string\">&quot;/mock/banner&quot;</span>,&#123;<span class=\"keyword\">code</span>:<span class=\"number\">200</span>,data:banner&#125;)</span><br><span class=\"line\">Mock.mock(<span class=\"string\">&quot;/mock/floor&quot;</span>,&#123;<span class=\"keyword\">code</span>:<span class=\"number\">200</span>,data:floor&#125;) <span class=\"number\">6.</span>把 mockServe.js 文件在 main.js 中引入一下</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"swiper-基本使用\"><a class=\"markdownIt-Anchor\" href=\"#swiper-基本使用\">#</a> swiper 基本使用</h1>\n<p>swiper 主要用来做轮播图<br>\n在 new Swiper 实例之前，页面的结构必须得先有</p>\n<ul>\n<li>第一步：引包 (相应 js|css)</li>\n<li>第二步：页面中结构务必要有</li>\n<li>第三步：new Swiper 实例【轮播图添加动态效果】</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"><span class=\"keyword\">var</span> mySwiper = <span class=\"keyword\">new</span> <span class=\"title class_\">Swiper</span> (<span class=\"string\">&#x27;.swiper&#x27;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"attr\">loop</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 循环模式选项</span></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果需要分页器</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">pagination</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&#x27;.swiper-pagination&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">clickable</span>:<span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">// 如果需要前进后退按钮</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"attr\">navigation</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">nextEl</span>: <span class=\"string\">&#x27;.swiper-button-next&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">prevEl</span>: <span class=\"string\">&#x27;.swiper-button-prev&#x27;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;)</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"listcontainer-组件开发重点\"><a class=\"markdownIt-Anchor\" href=\"#listcontainer-组件开发重点\">#</a> ListContainer 组件开发重点</h1>\n<ol>\n<li>安装 Swiper 插件：安装 5 版本  <code>npm i swiper@5 </code></li>\n<li>引包： <code>import Swiper from 'swiper</code></li>\n<li>写轮播图：</li>\n</ol>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;swiper-wrapper&quot;</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">&quot;swiper-slide&quot;</span> v-<span class=\"keyword\">for</span>=<span class=\"string\">&quot;(carousel,index) in bannerList&quot;</span> :key=<span class=\"string\">&quot;carousel.id&quot;</span>&gt;</span><br><span class=\"line\">&lt;img :src=<span class=\"string\">&quot;carousel.imgUrl&quot;</span> /&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>在 main.js 中引入样式，因为网站有好几个地方都使用了轮播图，这样引入一遍就可以了。<br>\n引入样式直接 import 引入就行，不用对外暴露，不用写 from： <code>import &quot;swiper/css/swiper.css&quot;</code></li>\n<li>new Swiper 实例，注意不要在 mounted 中，因为 dispatch 涉及异步语句，导致 v-for 遍历的时候结构还没有完全，因此不行</li>\n</ol>\n<ul>\n<li>\n<p>watch 数据监听：监听已有数据的变化 (watch 有两种写法，一种是对象写法，一种是函数写法)</p>\n</li>\n<li>\n<p>最完美的解决方案： watch + nextTick</p>\n</li>\n</ul>\n<p>nextTick：在下次 DOM 更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   watch: &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>监听bannerList数据的变化：因为这条数据发生过变化，由空数组变为数组中有四个元素</span><br><span class=\"line\">  <span class=\"regexp\">//</span>handler:可以监听到新的值和旧的值</span><br><span class=\"line\">  bannerList: &#123;</span><br><span class=\"line\">    handler(newValue, oldValue) &#123;</span><br><span class=\"line\">      <span class=\"regexp\">//</span>如果执行handler方法，代表组件实例身上这个属性的数据已经有了。但只能保证有数据，不知道v-<span class=\"keyword\">for</span>有没有执行完</span><br><span class=\"line\">      <span class=\"regexp\">//</span>nextTick：在下次DOM更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM</span><br><span class=\"line\">      this.<span class=\"variable\">$nextTick</span>(() =&gt; &#123;</span><br><span class=\"line\">        <span class=\"regexp\">//</span>当执行这个回调的时候，保证服务器数据回来了，v-<span class=\"keyword\">for</span>执行完毕</span><br><span class=\"line\">        var mySwiper = new Swiper(this.<span class=\"variable\">$refs</span>.mySwiper, &#123;</span><br><span class=\"line\">          loop: true, <span class=\"regexp\">//</span> 循环模式选项</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"regexp\">//</span> 如果需要分页器</span><br><span class=\"line\">          pagination: &#123;</span><br><span class=\"line\">            el: <span class=\"string\">&quot;.swiper-pagination&quot;</span>,</span><br><span class=\"line\">            clickable: true,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"regexp\">//</span> 如果需要前进后退按钮</span><br><span class=\"line\">          navigation: &#123;</span><br><span class=\"line\">            nextEl: <span class=\"string\">&quot;.swiper-button-next&quot;</span>,</span><br><span class=\"line\">            prevEl: <span class=\"string\">&quot;.swiper-button-prev&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h1 id=\"开发-floor-组件\"><a class=\"markdownIt-Anchor\" href=\"#开发-floor-组件\">#</a> 开发 floor 组件</h1>\n<ol>\n<li>写 API<br>\n 在 api 文件夹下的 index.js 中写：  <code>export const reqFloorList = () =&gt; mockRequests.get('/floor') </code></li>\n<li>写 vuex 三连环 在 store 文件夹下写</li>\n</ol>\n<ul>\n<li>引入请求： <code>import &#123; reqFloorList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  async getFloorList(&#123; commit &#125;) &#123;</span><br><span class=\"line\">  //获取发送请求的结果</span><br><span class=\"line\">  let result = await reqGetBannerList();</span><br><span class=\"line\">  if (result.code == 200) &#123;</span><br><span class=\"line\">  //提交 mutation</span><br><span class=\"line\">  commit(&quot;GETFLOORLIST&quot;, result.data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  ```</span><br><span class=\"line\"></span><br><span class=\"line\">```mutations中：</span><br><span class=\"line\">  GETFLOORLIST(state, floorList) &#123;</span><br><span class=\"line\">  state.floorList = floorList;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">floorList: []</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意： <code>getFloorList</code>  这个 action 在哪里触发？需要在 Home 路由组件中发。如果在 floor 组件内部触发没有办法 v-for 出来两个 floor。因为用了两个 floor</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>组件获取数据</p>\n<ul>\n<li>让组件拿到相应数据，使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code></li>\n<li>并把数据映射为组件实例身上的一个属性：<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  ...mapState(&#123;</span><br><span class=\"line\">    floorList: (<span class=\"keyword\">state</span>) =&gt; <span class=\"keyword\">state</span>.home.floorList</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li>\n<p>展示数据<br>\n根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成。(v-for 也可以在自定义标签中使用)</p>\n<ul>\n<li>\n<p>因为 Floor 的数据在 Home 那里，而 Home 组件与 Floor 组件是父子关系，所以涉及到了父子间的组件通信</p>\n</li>\n<li>\n<p>组件通信的方式有哪些？(面试频率极高)</p>\n<ul>\n<li>props：用于父子间组件通信</li>\n<li>自定义事件 (@on @emit)：可以实现子给父通信</li>\n<li>全局事件总线 ($bus)：全能</li>\n<li>插槽</li>\n<li>vuex</li>\n</ul>\n</li>\n</ul>\n<p>父传：<br>\n <code>&lt;Floor v-for=&quot;(floor, index) in floorList&quot; :key=&quot;floor.id&quot; :list=&quot;floor&quot;/&gt;</code></p>\n<p>子收：<br>\n <code> props: ['list']</code></p>\n<ul>\n<li>动态展示数据<br>\n根据数据的格式和内容，将之前写的死数据替换成动态数据，把复用的删掉，该遍历的遍历<br>\n <code>&#123;&#123;list.name&#125;&#125;,list.navList,&#123;&#123;nav.text&#125;&#125;</code>  等</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"search-模块开发\"><a class=\"markdownIt-Anchor\" href=\"#search-模块开发\">#</a> search 模块开发</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"写请求-在-api-文件夹下的indexjs中\"><a class=\"markdownIt-Anchor\" href=\"#写请求-在-api-文件夹下的indexjs中\">#</a> 写请求 在 api 文件夹下的 <code>index.js</code>  中</h2>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当前这个接口，给服务器传递一个默认的参数params，至少是一个空对象，不然会报错</span></span><br><span class=\"line\">export <span class=\"keyword\">const</span> <span class=\"variable constant_\">reqGetSearchInfo</span> = (params) =&gt; <span class=\"title function_ invoke__\">requests</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">&#x27;/list&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">method</span>:<span class=\"string\">&#x27;post&#x27;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>:params</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"search-模块根据不同的参数获取数据展示\"><a class=\"markdownIt-Anchor\" href=\"#search-模块根据不同的参数获取数据展示\">#</a> Search 模块根据不同的参数获取数据展示</h2>\n<p>因为 mounted 只会调用一次，所以将 <code>this.$store.dispatch(&quot;getSearchList&quot;, &#123;&#125;)</code>  封装成一个函数，写在 methods 中，需要的时候调用即可</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data() &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    searchParams: &#123;</span><br><span class=\"line\">      <span class=\"regexp\">//</span>一级分类的id</span><br><span class=\"line\">      category1Id: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>二级分类的id</span><br><span class=\"line\">      category2Id: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>三级分类的id</span><br><span class=\"line\">      category3Id: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>分类的名字</span><br><span class=\"line\">      categoryName: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>关键字</span><br><span class=\"line\">      keyword: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>排序</span><br><span class=\"line\">      order: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>分页器</span><br><span class=\"line\">      pageNo: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>代表每一页展示数据的个数</span><br><span class=\"line\">      pageSize: <span class=\"number\">10</span>,</span><br><span class=\"line\">      <span class=\"regexp\">//</span>平台售卖属性操作带的参数</span><br><span class=\"line\">      props: [],</span><br><span class=\"line\">      <span class=\"regexp\">//</span>品牌</span><br><span class=\"line\">      trademark: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">beforeMount() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>使用Object.assign:ES6 新增的语法，合并对象 整理参数</span><br><span class=\"line\">  Object.assign(this.searchParams, this.<span class=\"variable\">$route</span>.query, this.<span class=\"variable\">$route</span>.params);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">mounted() &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>在发请求之前带给服务器参数【searchParams参数发生变化有数值带给服务器】</span><br><span class=\"line\">  this.getData();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"regexp\">//</span>向服务器发请求获取search数据(根据参数不同返回不同的数据进行展示)</span><br><span class=\"line\">  getData() &#123;</span><br><span class=\"line\">    this.<span class=\"variable\">$store</span>.dispatch(<span class=\"string\">&quot;getSearchList&quot;</span>, this.searchParams);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"监听路由的变化再次发请求获取数据\"><a class=\"markdownIt-Anchor\" href=\"#监听路由的变化再次发请求获取数据\">#</a> 监听路由的变化再次发请求获取数据</h2>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">watch: &#123;</span><br><span class=\"line\">  $route(newValue,oldValue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//再次发请求之前还需要整理带给服务器的参数</span></span><br><span class=\"line\">    Object.assign(<span class=\"keyword\">this</span>.searchParams, <span class=\"keyword\">this</span>.$route.query, <span class=\"keyword\">this</span>.$route.params);</span><br><span class=\"line\">    <span class=\"comment\">//再次发起ajax请求</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getData()</span><br><span class=\"line\">    <span class=\"comment\">//每次一请求完毕，应该把相应的一二三级分类的id置空，让他接收下一次的相应的id</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.searchParams.category1Id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.searchParams.category2Id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.searchParams.category3Id = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"面包屑分类处理\"><a class=\"markdownIt-Anchor\" href=\"#面包屑分类处理\">#</a> 面包屑分类处理</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl sui-tag&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;with-x&quot;</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;searchParams.categoryName&quot;</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123;searchParams.categoryName&#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">i</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;removeCategoryName&quot;</span>&gt;</span>x<span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除分类的名字</span><br><span class=\"line\">removeCategoryName() &#123;</span><br><span class=\"line\">  //一点击“x”，就把categoryName置空(恢复默认页面)，还需要向服务器发请求</span><br><span class=\"line\">  //也可以不置空，而是写成undefined，这样这个字段就不会带给服务器，提高性能</span><br><span class=\"line\">  this.searchParams.categoryName = undefined</span><br><span class=\"line\">  this.searchParams.category1Id = undefined</span><br><span class=\"line\">  this.searchParams.category2Id = undefined</span><br><span class=\"line\">  this.searchParams.category3Id = undefined</span><br><span class=\"line\">  this.getData()</span><br><span class=\"line\">  //地址栏也需要修改：进行路由的修改,自己跳自己</span><br><span class=\"line\">  //严谨：本意是删除query，如果路径中出现params不应该删除，路由跳转的时候应该带着</span><br><span class=\"line\">  if(this.$route.params) &#123;</span><br><span class=\"line\">    this.$router.push(&#123;</span><br><span class=\"line\">      name:&quot;search&quot;,</span><br><span class=\"line\">      params:this.$route.params</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"平台售卖属性操作\"><a class=\"markdownIt-Anchor\" href=\"#平台售卖属性操作\">#</a> 平台售卖属性操作</h2>\n<ul>\n<li>给售卖属性绑定点击事件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;type-wrap&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(attr,index) in attrList&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;attr.attrId&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--平台售卖属性：比如说颜色--&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl key&quot;</span>&gt;</span>&#123;&#123;attr.attrName&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;fl value&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;type-list&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--平台相应的属性值：粉色，蓝色，黑色。。。--&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(attrValue,index) in attr.attrValueList&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;attrValue&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;attrInfo&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>&#123;&#123;attrValue&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//平台售卖属性值的点击事件</span><br><span class=\"line\">attrInfo(attr,attrVal) &#123;</span><br><span class=\"line\">//[&quot;属性ID：属性值：属性名&quot;]</span><br><span class=\"line\">  this.$emit(&quot;attrInfo&quot;,attr,attrValue)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attrInfo(attr,attrValue) &#123;</span><br><span class=\"line\">  //[&quot;属性ID：属性值：属性名&quot;]</span><br><span class=\"line\">  //参数格式整理好</span><br><span class=\"line\">  let props = `$&#123;attr.attrID&#125;:$&#123;attrValue&#125;:$&#123;attr.attrName&#125;`</span><br><span class=\"line\">  this.searchParams.props(props)</span><br><span class=\"line\">  //再次发请求</span><br><span class=\"line\">  this.getData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组去重\"><a class=\"markdownIt-Anchor\" href=\"#数组去重\">#</a> 数组去重</h2>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">if</span><span class=\"params\">(this.array.x.indexOf(x)</span></span>==-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  this<span class=\"selector-class\">.array</span><span class=\"selector-class\">.x</span><span class=\"selector-class\">.push</span>(x)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"排序操作\"><a class=\"markdownIt-Anchor\" href=\"#排序操作\">#</a> 排序操作</h2>\n<p>api 接口给出的 order 排序参数：<br>\n1：综合<br>\n 2：价格<br>\n asc：升序<br>\n desc：降序<br>\n一共有四种情况</p>\n<ol>\n<li>判断 active 动态类名在谁身上？</li>\n</ol>\n<ul>\n<li>通过 order 属性值中包含 1 (综合)| 包含 2 (价格)</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sui-nav&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-variable\">&#123;active:searchParams.order.indexOf(&#x27;1&#x27;!=-1)&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>综合<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;</span></span></span><span class=\"template-variable\">&#123;active:searchParams.order.indexOf(&#x27;2&#x27;!=-1)&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>价格<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>判断箭头</li>\n</ol>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//太长了可以写在计算属性里</span><br><span class=\"line\">&lt;li <span class=\"symbol\">:class=<span class=\"string\">&quot;&#123;active:isOne&#125;&quot;</span>&gt;</span></span><br><span class=\"line\">  &lt;a&gt;综合&lt;span v-show=<span class=\"string\">&quot;isOne&quot;</span> class=<span class=\"string\">&quot;iconfont&quot;</span> <span class=\"symbol\">:class=<span class=\"string\">&quot;&#123;&#x27;icon-UP&#x27;:isAsc,&#x27;icon-DOWN&#x27;:isDesc&#125;&quot;</span>&gt;&lt;/span&gt;&lt;/a&gt;</span></span><br><span class=\"line\">&lt;/li&gt;</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>点击事件</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">changeOrder(flag) &#123;</span><br><span class=\"line\">  //flag形参：它是一个标记，代表用户点击的是综合(1)还是价格(2)  用户点击的时候传递进来的</span><br><span class=\"line\">  let originOrder = this.searchParams.order</span><br><span class=\"line\">  //这里获取到的是最开始的状态</span><br><span class=\"line\">  let originFlag = this.searchParams.order.split(&quot;:&quot;)[0]</span><br><span class=\"line\">  let originSort = this.searchParams.order.split(&quot;:&quot;)[1]</span><br><span class=\"line\">  //准备一个新的order的属性值</span><br><span class=\"line\">  let newOrder = &#x27;&#x27;</span><br><span class=\"line\">  //确定点击的一定是“综合”</span><br><span class=\"line\">  if(flag == originFlag) &#123;</span><br><span class=\"line\">    newOrder = `$&#123;originFlag&#125;:$&#123;originSort==&quot;desc&quot;?&quot;asc&quot;:&quot;desc&quot;&#125;`</span><br><span class=\"line\">  &#125;else &#123;</span><br><span class=\"line\">  //确定点击的一定是“价格”</span><br><span class=\"line\">  newOrder = `$&#123;flag&#125;:$&#123;&quot;desc&quot;&#125;`</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //将newOrder赋予searchParams</span><br><span class=\"line\">  this.searchParams.order = newOrder</span><br><span class=\"line\">  //再次发请求</span><br><span class=\"line\">  this.getData()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"分页器\"><a class=\"markdownIt-Anchor\" href=\"#分页器\">#</a> 分页器</h1>\n<ul>\n<li>为什么很多项目采用分页功能，因为有的平台同时展示的数据有很多</li>\n<li>对于分页器而言，自定义数据需要知道四个前提条件\n<ol>\n<li>pageNo：当前第几页</li>\n<li>pageSize：代表每一页展示多少条数据</li>\n<li>total：代表整个分页一共要展示多少条数据</li>\n<li>continues：代表分页连续页码个数</li>\n</ol>\n</li>\n<li>自定义分页器，在开发的时候先自己传递假的数据进行测试，调试成功后在用服务器数据</li>\n<li>对于分页器而言，很重要的一个地方即为【算出：连续页面起始数字和结束数字】</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  name: <span class=\"string\">&quot;Pagination&quot;</span>,</span><br><span class=\"line\">  props: [<span class=\"string\">&quot;pageNo&quot;</span>, <span class=\"string\">&quot;pageSize&quot;</span>, <span class=\"string\">&quot;total&quot;</span>, <span class=\"string\">&quot;continues&quot;</span>],</span><br><span class=\"line\">  computed: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//总共多少页</span></span><br><span class=\"line\">    <span class=\"built_in\">totalPage</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">//向上取整</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Math.<span class=\"built_in\">ceil</span>(<span class=\"keyword\">this</span>.total / <span class=\"keyword\">this</span>.pageSize);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//计算出连续页码的起始数字与结束数字[连续的页码数字，至少是5]</span></span><br><span class=\"line\">    <span class=\"built_in\">startNumAndEndNum</span>() &#123;</span><br><span class=\"line\">      <span class=\"comment\">//解构</span></span><br><span class=\"line\">      <span class=\"type\">const</span> &#123; continues, pageNo, totalPage &#125; = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      <span class=\"comment\">//先定义两个变量存储起始数字与结束数字</span></span><br><span class=\"line\">      let start = <span class=\"number\">0</span>,</span><br><span class=\"line\">        end = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"comment\">//连续页码数字5【就是至少5页】，如果出现不正常现象(就是不够五页)</span></span><br><span class=\"line\">      <span class=\"comment\">//不正常现象：总页数没有连续页码多</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (continues &gt; totalPage) &#123;</span><br><span class=\"line\">        start = <span class=\"number\">1</span>;</span><br><span class=\"line\">        end = totalPage;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//正常现象</span></span><br><span class=\"line\">        <span class=\"comment\">//起始数字</span></span><br><span class=\"line\">        start = pageNo - <span class=\"built_in\">parseInt</span>(continues / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//结束数字</span></span><br><span class=\"line\">        end = pageNo + <span class=\"built_in\">parseInt</span>(continues / <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">//把出现的不正常现象(start数字出现0或负数)纠正</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (start &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          start = <span class=\"number\">1</span>;</span><br><span class=\"line\">          end = continues;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//把出现的不正常现象(end数字大于总页码)纠正</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end &gt; totalPage) &#123;</span><br><span class=\"line\">          end = totalPage;</span><br><span class=\"line\">          start = totalPage - continues + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123; start, end &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"分页器动态展示\"><a class=\"markdownIt-Anchor\" href=\"#分页器动态展示\">#</a> 分页器动态展示</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>——————————Search 模块结束，再开发 “详情” 模块</p>\n<h1 id=\"开发某一个商品的详情页面\"><a class=\"markdownIt-Anchor\" href=\"#开发某一个商品的详情页面\">#</a> 开发某一个商品的详情页面</h1>\n<ol>\n<li>搭静态组件\n<ul>\n<li>详情页的组件还没有注册路由组件 (router 文件夹中)：</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Detail <span class=\"keyword\">from</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/pages/Detail&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">routes: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    //点击商品跳到其详情页，需要进行路由跳转并带参(产品的id给详情页面)，所以还要占位/:skuid</span><br><span class=\"line\">      <span class=\"type\">path</span>:&quot;/detail/:skuid&quot;,</span><br><span class=\"line\">      component:Detail,</span><br><span class=\"line\">      meta: &#123;<span class=\"keyword\">show</span>:<span class=\"keyword\">true</span>&#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>同时还要让商品图片可点击（跳转详情页）【search 模块中】</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\">//在路由跳转的时候别忘记带id（params）参数</span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;`/detail/$</span></span></span><span class=\"template-variable\">&#123;good.id&#125;</span><span class=\"language-xml\"><span class=\"tag\"><span class=\"string\">`&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;good.defaultImg&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在跳转后还需要让滚轮回到顶上。vuerouter 滚动行为【router 文件夹中】</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> <span class=\"title class_\">VueRouter</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>:[...],</span><br><span class=\"line\">  <span class=\"title function_\">scrollBehavior</span>(<span class=\"params\">to,savedPosition</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//return 期望滚动到哪个的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">y</span>:<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>发请求【api 文件夹中】</li>\n</ol>\n<ul>\n<li>获取商品详情数据<br>\n // 获取商品详细信息的接口 URL：/api/item/{skuId} 请求方式：get<br>\nexport const reqGoodsInfo = (skuId) =&gt;<br>\nrequests({<br>\nurl:  <code>/item/$&#123;skuId&#125;</code> ,<br>\nmethod: “get”,<br>\n});</li>\n</ul>\n<ol start=\"3\">\n<li>vuex— 获取商品详情信息</li>\n</ol>\n<ul>\n<li>vuex 中（store 文件夹中）还需要新增一个模块 detail.</li>\n</ul>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span>= &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">state</span>,</span><br><span class=\"line\">   actions,</span><br><span class=\"line\">   mutations,</span><br><span class=\"line\">   getters</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>搞完之后还需要回到大仓库中进行合并【store 文件夹中 index.js 中】</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> detail <span class=\"keyword\">from</span> <span class=\"string\">&quot;./detail&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//对外暴露Store类的一个实例</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Vuex</span>.<span class=\"title class_\">Store</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">//实现Vuex仓库模块式开发存储数据</span></span><br><span class=\"line\">  <span class=\"attr\">modules</span>:&#123;</span><br><span class=\"line\">    detail</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>派发 action，发请求捞数据【detail 模块 index.vue 中】</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>动态展示组件</li>\n</ol>\n<h1 id=\"面试分页器封装原理\"><a class=\"markdownIt-Anchor\" href=\"#面试分页器封装原理\">#</a> 面试：分页器封装原理</h1>\n<p>封装一个分页器组件 pagination</p>\n<ol>\n<li>知道当前是第几页：pageNo</li>\n<li>知道分页器一共需要展示多少条数据：total</li>\n<li>知道每一页需要展示数据的个数：pageSize，根据 2,3 能算出一共有多少页：totalPage</li>\n<li>知道连续的页码数：continues</li>\n</ol>\n<h1 id=\"zoom-放大镜展示数据\"><a class=\"markdownIt-Anchor\" href=\"#zoom-放大镜展示数据\">#</a> zoom 放大镜展示数据</h1>\n<ul>\n<li>\n<p>遮罩层随鼠标移动<br>\n let left = event.offsetX-mask.offsetWidth/2<br>\nlet top = event.offsetY-mask.offsetHeight/2</p>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HWT%5D5JAIEXRTU@0%25%7D9C()19.png\" alt=\"\"></p>\n</li>\n</ul>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5ZHB%7D4YUP1GE%F4YJ8BLR$4.png\" alt=\"\"></p>\n<h1 id=\"商品售卖属性-排他操作点击高亮\"><a class=\"markdownIt-Anchor\" href=\"#商品售卖属性-排他操作点击高亮\">#</a> 商品售卖属性 排他操作，点击高亮</h1>\n<h1 id=\"购买产品个数的操作\"><a class=\"markdownIt-Anchor\" href=\"#购买产品个数的操作\">#</a> 购买产品个数的操作</h1>\n<h1 id=\"加入购物车重要\"><a class=\"markdownIt-Anchor\" href=\"#加入购物车重要\">#</a> 加入购物车（重要）</h1>\n<ul>\n<li>\n<p>以前的路由跳转，就是从 A 路由跳到 B 路由，这里加入购物车、路由跳转之前，还要发请求。把你购买的产品的信息通过请求的形式通知服务器，服务器进行相应的存储</p>\n</li>\n<li>\n<p>加入购物车（发请求）以后，前台将参数带给服务器，服务器写入数据成功，并没有返回其他的数据，只返回了 code=200，代表这次操作成功。所以不用 vue 三连环存仓库了</p>\n</li>\n<li>\n<p>派发 action 操作实际上就是调用仓库中的 addOrUpdateShopCart，它是 async 函数，返回的结果是 Promise，只有成功和失败两种情况，为了判断购物车是否成功加入，store 仓库的 detail.js 中的 addOrUpdateShopCart 函数要进行判断，如果 code=200 则返回成功的回调，否则返回失败的回调。<br>\n写 try catch<br>\n![]( <a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/ZFP\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/ZFP</a>}3KBYS7(OJ(2D{$(_M~D.png)</p>\n<ul>\n<li>浏览器存储功能：HTML5 中新增的，本地存储和会话存储。一般存储的是字符串，不能存对象。要先把对象转化为字符串才能进行存储，JSON.stringify ()。捞到之后再转化回对象：JSON.parse ()</li>\n</ul>\n<p><img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3%7D\" alt=\"\">%ZR}ERURV(R3V$]Z9MP8.png)</p>\n<h1 id=\"购物车模块\"><a class=\"markdownIt-Anchor\" href=\"#购物车模块\">#</a> 购物车模块</h1>\n<ol>\n<li>购物车静态组件</li>\n<li>向服务器发起 ajax 请求，获取服务车数据，操作 vuex 三连环、组件获取数据展示数据</li>\n</ol>\n<ul>\n<li>问题：发请求的时候，获取不到你购物车里面的数据，因为服务器不知道你是谁</li>\n</ul>\n<ol start=\"3\">\n<li>UUID 临时游客身份</li>\n</ol>\n<ul>\n<li>生成 uuid，localStorage 存储</li>\n</ul>\n<p>detail.js 中</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">state</span> = &#123;</span><br><span class=\"line\">//游客的临时身份</span><br><span class=\"line\">uuid_token: getUUID()</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>新建一个 utils 文件夹放 uuid_token.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; v4 <span class=\"keyword\">as</span> uuidv4 &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;uuid&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//要随机生成一个字符串，且每次执行不能发生变化，游客身份持久存储</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">getUUID</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\"><span class=\"comment\">//先从本地存储获取uuid（看本地存储是否有）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uuid_token = <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&#x27;UUIDTOKEN&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//如果没有我则生成</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!uuid_token) &#123;</span><br><span class=\"line\">  uuid_token = <span class=\"title function_\">uuidv4</span>()</span><br><span class=\"line\">  <span class=\"comment\">//本地存储一次</span></span><br><span class=\"line\">  <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&#x27;UUIDTOKEN&#x27;</span>,uuid_token)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"comment\">//切记有返回值，没有返回值undefined</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> uuid_token</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>api 文件夹中 request.js</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在当前模块中引入store</span><br><span class=\"line\">import store <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/store&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">//请求拦截器</span><br><span class=\"line\">requests.interceptors.request.use((config) =&gt; &#123;</span><br><span class=\"line\">  if(store.<span class=\"keyword\">state</span>.detail.uuid_token) &#123;</span><br><span class=\"line\">  //给请求头添加一个字段(<span class=\"keyword\">user</span>TempId)：和后台老师商量好</span><br><span class=\"line\">  config.headers.<span class=\"keyword\">user</span>TempId = store.<span class=\"keyword\">state</span>.detail.uuid_token</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>})</p>\n<ol start=\"4\">\n<li>动态展示购物车</li>\n</ol>\n<ul>\n<li>\n<p>数据格式有点不完美</p>\n</li>\n<li>\n<p>全选效果：用数组的 every 方法</p>\n</li>\n<li>\n<p>处理购物车数量（+，-，输入的数值）<br>\n三个地方触发一个回调<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HTZ8$@2$UO%60LRH5%5DY%7DJ%60RI8.png\" alt=\"\"></p>\n</li>\n<li>\n<p>购物车删除操作<br>\n用户删除的太快，可能会出现负的情况（即使已经做了限制） 解决：节流</p>\n</li>\n<li>\n<p>删除选中的所有商品操作<br>\n没有一次删除很多产品的接口，但是有通过 ID 删除产品的接口（一次删一个）<br>\n传入参数 context 再调用 deleteCartListBySkuId</p>\n</li>\n</ul>\n<p>Promise.all () 只有所有的 promise 都成功才能调用<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/4MTF\" alt=\"\"> 9W3%6Z8AK9) 840DLOD.png)<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/SUG9N68IQZ%25X(0GHK2%5BM3CB.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/SUG9N68IQZ%X(0GHK2[M3CB.png)</a></p>\n<p>删完之后 await,async, 再次调用 getData<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/V%7D3%7DR17~XO0CS42CS02EL~8.png\" alt=\"\"></p>\n<h1 id=\"登录与注册非常重要\"><a class=\"markdownIt-Anchor\" href=\"#登录与注册非常重要\">#</a> 登录与注册（非常重要）</h1>\n<ol>\n<li>登录与注册的静态组件</li>\n</ol>\n<ul>\n<li>assets 文件夹：放置全部组件共用静态资源， webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</li>\n<li>在 css 中写相对路径也可以用 @（@表示 src），但在 css 中要在 @前加个～。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">~@/assets/images/icons.png</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>注册业务</li>\n</ol>\n<ul>\n<li>获取验证码的接口</li>\n</ul>\n<ol start=\"3\">\n<li>登录业务</li>\n</ol>\n<ul>\n<li>\n<p>注册：通过数据库存储用户信息（账号，密码）</p>\n</li>\n<li>\n<p>登录：登录成功的时候，后台为了区分你这个用户是谁，服务器下方 token【令牌：唯一标识符】</p>\n</li>\n<li>\n<p>将来经常通过带 token 找服务器要用户信息进行展示</p>\n</li>\n<li>\n<p>注意：vuex 仓库存储数据 —— 不是持久化</p>\n</li>\n<li>\n<p>当用户注册完成，用户登录【用户名 + 密码】向服务器发请求（组件派发 action：userLogin），登陆成功获取 token，存储于仓库当中（非持久化的）。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//登录业务</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">userLogin</span>(<span class=\"params\">&#123;commit&#125;,data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">reqUserLogin</span>(data)</span><br><span class=\"line\">    <span class=\"comment\">//服务器下发token，用户唯一标识符</span></span><br><span class=\"line\">    <span class=\"comment\">//将来经常通过带token找服务器要用用户信息进行展示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;USERLOGIN&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;faile&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>随后路由跳转到 home 首页，因此在首页当中（mounted）派发 action（getUserInfo）获取用户信息，以及动态展示 header 组件的内容。<br>\n问题：一刷新 home 首页，会获取不到用户信息（token：vuex 非持久化存储）</p>\n<ul>\n<li>持久化存储</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> state = &#123;</span><br><span class=\"line\">  <span class=\"attr\">token</span>: <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">getItem</span>(<span class=\"string\">&quot;TOKEN&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//登录业务</span></span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"title function_\">userLogin</span>(<span class=\"params\">&#123;commit&#125;,data</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"title function_\">reqUserLogin</span>(data)</span><br><span class=\"line\">    <span class=\"comment\">//服务器下发token，用户唯一标识符</span></span><br><span class=\"line\">    <span class=\"comment\">//将来经常通过带token找服务器要用用户信息进行展示</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">commit</span>(<span class=\"string\">&quot;USERLOGIN&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>)</span><br><span class=\"line\">      <span class=\"comment\">//持久化存储token</span></span><br><span class=\"line\">      <span class=\"variable language_\">localStorage</span>.<span class=\"title function_\">setItem</span>(<span class=\"string\">&quot;TOKEN&quot;</span>,result.<span class=\"property\">data</span>.<span class=\"property\">token</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&quot;ok&quot;</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"title class_\">Promise</span>.<span class=\"title function_\">reject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;faile&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"存在的问题\"><a class=\"markdownIt-Anchor\" href=\"#存在的问题\">#</a> 存在的问题</h2>\n<ol>\n<li>多个组件展示用户信息需要在每一个组件的 mounted 中触发 <code>this.$store.dispatch('getUserInfo')</code></li>\n<li>用户已经登陆了，就不应该再回登录页</li>\n</ol>\n<ul>\n<li></li>\n</ul>\n<ol>\n<li>有接口，现在 api 里 export 接口，写明接口地址和请求方式</li>\n<li>然后在 store 里引入请求，写 vue 三连环，</li>\n<li>在相应的位置派发 action</li>\n</ol>\n<ul>\n<li>\n<p>路由跳转不是你想跳就能跳的</p>\n</li>\n<li>\n<p>tips：空对象隐式转换为布尔值为真，所以空对象作为条件一定为真</p>\n</li>\n</ul>\n<h2 id=\"导航守卫\"><a class=\"markdownIt-Anchor\" href=\"#导航守卫\">#</a> 导航守卫</h2>\n<p>导航：表示进行路由跳转<br>\n守卫：看门的，</p>\n<ul>\n<li>\n<p>全局守卫：全部都要排查。<br>\neg. 皇宫（皇帝，妃子，大臣）大门守卫，全部排查</p>\n</li>\n<li>\n<p>路由独享守卫：是相应的（皇帝，妃子，大臣）毕竟之路上的守卫</p>\n</li>\n<li>\n<p>组件内守卫：已经进去了，但还是要接受排查</p>\n</li>\n</ul>\n<h3 id=\"全局前置守卫routerbeforeeach在路由跳转之前进行判断\"><a class=\"markdownIt-Anchor\" href=\"#全局前置守卫routerbeforeeach在路由跳转之前进行判断\">#</a> 全局前置守卫：router.beforeEach（在路由跳转之前进行判断）</h3>\n<p>在 router 中进行全局前置守卫配置:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置守卫</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//to:可以获取到你要跳转到的那个路由的信息（去哪里）</span></span><br><span class=\"line\">  <span class=\"comment\">//from:可以获取到你从哪个路由而来的信息（从哪来）</span></span><br><span class=\"line\">  <span class=\"comment\">//next:放行函数，  next()全部放行 next(path)放行到指定路径  nextfalse)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户登录了才会有token，未登录一定不会有token</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">token</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用户信息</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">userInfo</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户已经登陆了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(token) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用户已经登陆了还想去login：不能去，停留在首页</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.<span class=\"property\">path</span>==<span class=\"string\">&#x27;/login&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;/home&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//登录，去得不是login：home/search/detail/shopcart</span></span><br><span class=\"line\">      <span class=\"comment\">//如果用户名已有</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>()</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有用户信息，派发action让仓库存储用户信息再跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//获取用户信息成功</span></span><br><span class=\"line\">          <span class=\"keyword\">await</span> store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;getUserInfo&#x27;</span>)</span><br><span class=\"line\">          <span class=\"comment\">//放行</span></span><br><span class=\"line\">          <span class=\"title function_\">next</span>()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//token失效了</span></span><br><span class=\"line\">          <span class=\"comment\">//清除token</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//没有用户信息</span></span><br><span class=\"line\">    <span class=\"title function_\">next</span>()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"trade交易页面组件\"><a class=\"markdownIt-Anchor\" href=\"#trade交易页面组件\">#</a> trade（交易）页面组件</h1>\n<ul>\n<li>\n<p>排他：被选中的那个展示样式<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/WPKZDCBG%25HS8L%25WC7NEH$BG.png\" alt=\"\"></p>\n</li>\n<li>\n<p>import *as 命名 from URL 地址 统一引入<br>\n不需要一个个引入了，所有请求的接口统一接收，并且挂载到 vue.prototype 原型对象身上。到时候组件直接用就行，不用一个个引了</p>\n</li>\n</ul>\n<p>在 main.js 中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//统一接口api文件夹里面全部请求函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"variable constant_\">API</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/api&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Vue</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">render</span>: <span class=\"function\">(<span class=\"params\">h</span>) =&gt;</span> <span class=\"title function_\">h</span>(<span class=\"title class_\">App</span>),</span><br><span class=\"line\">  <span class=\"comment\">//全局事件总线</span></span><br><span class=\"line\">  <span class=\"title function_\">beforeCreate</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"title class_\">Vue</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">$API</span> = <span class=\"variable constant_\">API</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>不用 vuex 怎么获取支付信息？</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">data</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//订单号</span></span><br><span class=\"line\">      <span class=\"attr\">order</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">//提交订单</span></span><br><span class=\"line\">    <span class=\"keyword\">async</span> <span class=\"title function_\">submitOrder</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//交易编码</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123; tradeNo &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">orderInfo</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> <span class=\"variable language_\">this</span>.<span class=\"property\">$API</span>.<span class=\"title function_\">reqSubmitOrder</span>(tradeNo);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//提交订单成功</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (result.<span class=\"property\">code</span> == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">orderId</span> = result.<span class=\"property\">data</span>;</span><br><span class=\"line\">        <span class=\"comment\">//路由跳转+路由传参</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">$router</span>.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;/pay?orderId=&quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">orderId</span>);</span><br><span class=\"line\">        <span class=\"comment\">//提交订单失败</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(result.<span class=\"property\">data</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意：不要在生命周期函数中使用 async</li>\n</ul>\n<h1 id=\"elementui-使用按需引入\"><a class=\"markdownIt-Anchor\" href=\"#elementui-使用按需引入\">#</a> elementUI 使用 + 按需引入</h1>\n<ul>\n<li>已经学习过的组件库<br>\n react:antd [PC]、antd-mobile [移动端]<br>\n Vue:ElementUIp [PC]、vant [移动端]</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 选择一个你喜欢的包管理器</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># NPM</span></span><br><span class=\"line\">$ npm install <span class=\"keyword\">element</span>-plus <span class=\"comment\">--save</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Yarn</span></span><br><span class=\"line\">$ yarn <span class=\"built_in\">add</span> <span class=\"keyword\">element</span>-plus</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">$ pnpm install <span class=\"keyword\">element</span>-plus</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>引入 elementUI</li>\n</ol>\n<ul>\n<li>完全引入</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">ElementPlus</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;element-plus&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">app.<span class=\"title function_\">use</span>(<span class=\"title class_\">ElementPlus</span>)</span><br><span class=\"line\">app.<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>按需导入</li>\n</ul>\n<figure class=\"highlight angelscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 自动导入，首先安装unplugin-vue-components 和 unplugin-<span class=\"built_in\">auto</span>-<span class=\"keyword\">import</span>这两款插件</span><br><span class=\"line\">npm install -D unplugin-vue-components unplugin-<span class=\"built_in\">auto</span>-<span class=\"keyword\">import</span></span><br></pre></td></tr></table></figure>\n<p>然后把下列代码插入到你的 Vite 或 Webpack 的配置文件中</p>\n<p>Webpack：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">AutoImport</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-auto-import/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Components</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/webpack&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; <span class=\"title class_\">ElementPlusResolver</span> &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;unplugin-vue-components/resolvers&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">plugins</span>: [</span><br><span class=\"line\">    <span class=\"title class_\">AutoImport</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"title class_\">Components</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">resolvers</span>: [<span class=\"title class_\">ElementPlusResolver</span>()],</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">el-config-provider</span> <span class=\"attr\">:size</span>=<span class=\"string\">&quot;size&quot;</span> <span class=\"attr\">:z-index</span>=<span class=\"string\">&quot;zIndex&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">app</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">el-config-provider</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vue&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">import</span> &#123; <span class=\"title class_\">ElConfigProvider</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;element-plus&quot;</span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">ElConfigProvider</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>) &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">zIndex</span>: <span class=\"number\">3000</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">        <span class=\"attr\">size</span>: <span class=\"string\">&quot;small&quot;</span>,</span></span><br><span class=\"line\"><span class=\"language-javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"language-javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"language-javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"language-javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>ElementUI 注册组件的时候，还有一种写法，挂在原型上。</li>\n</ul>\n<h1 id=\"支付\"><a class=\"markdownIt-Anchor\" href=\"#支付\">#</a> 支付</h1>\n<ul>\n<li>生成二维码</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> qrcode <span class=\"attr\">--save</span></span><br></pre></td></tr></table></figure>\n<p>注意：${url} 和 / 之间要有一个空格，不然图片不显示<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/DG%5DS224H69@C0NQ%5DI%5B%7BMQBD.png\" alt=\"\"></p>\n<ul>\n<li>弹出二维码后，需要知道支付成功 | 失败<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3QAX\" alt=\"\"> 5 [NXJTG9`ES@6~MA] 4.png)</li>\n</ul>\n<h1 id=\"二级路由\"><a class=\"markdownIt-Anchor\" href=\"#二级路由\">#</a> 二级路由</h1>\n<ol>\n<li>拆分<br>\n将不变的内容留下，将会根据点击发生页面变化的内容拆分到子组件中</li>\n</ol>\n<ul>\n<li>注意拆分后路径会有不对的地方，记得改</li>\n<li>样式，把父组件中样式的 scoped 去掉</li>\n</ul>\n<ol start=\"2\">\n<li>在 router.js 中引入二级路由</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//引入二级路由组件</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">MyOrder</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/views/Center/myOrder&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">GroupOrder</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;@/views/Center/groupOrder&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置路由</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/center&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Center</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">isShow</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//二级路由组件</span></span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;myOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">MyOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;groupOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">GroupOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>\n<p>把点击会发生路由变化的地方换成 <code>&lt;router-linl to=&quot;/center/myorder&quot;&gt;我的订单&lt;/router-linl&gt;</code>  包裹，并设置二级路由组件的出口位置，让组件显示： <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n</li>\n<li>\n<p>重定向。设置默认显示的路由（不能让用户一切换过来看一个半边空白的页面，还得点击才能显示）<br>\nrouter.js 中：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&quot;/center&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">component</span>: <span class=\"title class_\">Center</span>,</span><br><span class=\"line\">    <span class=\"attr\">meta</span>: &#123; <span class=\"attr\">isShow</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//二级路由组件</span></span><br><span class=\"line\">    <span class=\"attr\">children</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;myOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">MyOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;groupOrder&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">component</span>: <span class=\"title class_\">GroupOrder</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">//重定向</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: <span class=\"string\">&quot;/center&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/center/myorder&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>面试的时候问是否封装过组件：分页器，日历</p>\n</li>\n<li>\n<p>完善路由守卫</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全局前置守卫</span></span><br><span class=\"line\">router.<span class=\"title function_\">beforeEach</span>(<span class=\"function\">(<span class=\"params\">to,<span class=\"keyword\">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//to:可以获取到你要跳转到的那个路由的信息（去哪里）</span></span><br><span class=\"line\">  <span class=\"comment\">//from:可以获取到你从哪个路由而来的信息（从哪来）</span></span><br><span class=\"line\">  <span class=\"comment\">//next:放行函数，  next()全部放行 next(path)放行到指定路径  nextfalse)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户登录了才会有token，未登录一定不会有token</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> token = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">token</span>;</span><br><span class=\"line\">  <span class=\"comment\">//用户信息</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> name = store.<span class=\"property\">state</span>.<span class=\"property\">user</span>.<span class=\"property\">userInfo</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//用户已经登陆了</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(token) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//用户已经登陆了还想去login：不能去，停留在首页</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(to.<span class=\"property\">path</span>==<span class=\"string\">&#x27;/login&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;/home&#x27;</span>)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//登录，去得不是login：home/search/detail/shopcart</span></span><br><span class=\"line\">      <span class=\"comment\">//如果用户名已有</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(name) &#123;</span><br><span class=\"line\">        <span class=\"title function_\">next</span>()</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有用户信息，派发action让仓库存储用户信息再跳转</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">          <span class=\"comment\">//获取用户信息成功</span></span><br><span class=\"line\">          <span class=\"keyword\">await</span> store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;getUserInfo&#x27;</span>)</span><br><span class=\"line\">          <span class=\"comment\">//放行</span></span><br><span class=\"line\">          <span class=\"title function_\">next</span>()</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">          <span class=\"comment\">//token失效了</span></span><br><span class=\"line\">          <span class=\"comment\">//清除token</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//未登录：不能去交易相关、不能去支付相关【pay、paysuccess】、不能去个人中心</span></span><br><span class=\"line\">    <span class=\"comment\">//未登录想去上面这些路由---跳转到登录页</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> toPath = to.<span class=\"property\">path</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(toPath.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/trade&#x27;</span>)!=-<span class=\"number\">1</span>||toPath.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/pay&#x27;</span>)!=-<span class=\"number\">1</span>||toPath.<span class=\"title function_\">indexOf</span>(<span class=\"string\">&#x27;/center&#x27;</span>)!=-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//把未登录的时候想去而没有去成的信息，存储于地址栏中【路由】</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>(<span class=\"string\">&#x27;/login?redirect=&#x27;</span>+toPath)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//去的不是上面这些路由（home、search、shopCard）---放行</span></span><br><span class=\"line\">      <span class=\"title function_\">next</span>()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>登录后不是回首页，而是到你之前点击却被提示登录的那个页面<br>\n<img src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0FT%7DO~%7BM41H%7D%250OJXEEEOU1.png\" alt=\"\"></p>\n</li>\n<li>\n<p>路由独享守卫<br>\n！[](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/(J56%251@ADO%25VVBJR$W%60O%7BUE.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/(J56%1@ADO%VVBJR$W`O{UE.png)</a></p>\n</li>\n<li>\n<p>组件内守卫</p>\n</li>\n</ul>\n<h1 id=\"图片懒加载-vue-lazyload\"><a class=\"markdownIt-Anchor\" href=\"#图片懒加载-vue-lazyload\">#</a> 图片懒加载 vue-lazyload</h1>\n<ul>\n<li>\n<p>使用插件 <code>Vue.use(VueLazyload)</code> ,vuex，vuerouter 也是插件</p>\n</li>\n<li>\n<p>图片、json 可以直接引用，它们是默认对外暴露的</p>\n</li>\n</ul>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JY%60$$@\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JY`$$@</a>](M45T3}YVVE9{VN6.png)</p>\n<h1 id=\"封装自定义插件\"><a class=\"markdownIt-Anchor\" href=\"#封装自定义插件\">#</a> 封装自定义插件</h1>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/YXTW(Z69%5B_8SN5PE3M8TZDN.png)\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/YXTW(Z69[_8SN5PE3M8TZDN.png)</a></p>\n<h1 id=\"vee-validate-表单验证-了解\"><a class=\"markdownIt-Anchor\" href=\"#vee-validate-表单验证-了解\">#</a> vee-validate 表单验证 （了解）</h1>\n<ol>\n<li>安装</li>\n<li>引入</li>\n<li>使用</li>\n</ol>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</a>[_`IH(QLVOZKL0HD33}2ZU7.png)</p>\n<p>![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</a>]98(9U9F(9L_8)E[{IO~~J6.png)</p>\n<h1 id=\"路由懒加载\"><a class=\"markdownIt-Anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h1>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p>\n<h1 id=\"打包上线\"><a class=\"markdownIt-Anchor\" href=\"#打包上线\">#</a> 打包上线</h1>\n<ol>\n<li>打包 <code>npm run build</code></li>\n</ol>\n<ul>\n<li>map<br>\n 项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。<br>\n有了 map 就可以像未加密的代码一样，准确输出是哪一行有错。<br>\n没有，该文件如果项目不需要是可以去掉的<br>\n vue.config.js 配置：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">productionSourceMap</span>: <span class=\"literal\">false</span>;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>购买服务器</p>\n</li>\n<li>\n<p>设置安全组</p>\n</li>\n<li>\n<p>利用 Xshell 工具登录服务器</p>\n</li>\n<li>\n<p>利用 Xftp 把本地文件上传到云服务器</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>问题 1：刚刚在服务器上：/root/www/shangpinhui/dist<br>\n 如何保证一访问 ip 地址就展示 dist 内容而不是展示其他文件夹内容？<br>\n解决：配置一些东西</p>\n</li>\n<li>\n<p>问题 2：项目数据来自于本地服务器，如何让用户在访问买的 ip 地址时捞到本地服务器的数据？<br>\n解决：nginx 反向代理</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>nginx 反向代理<br>\n配置：</p>\n</li>\n<li>\n<p>Xshell 进入  <code>/</code>  根目录下有一个 <code>etc</code>  目录，其下又有一个 <code>nginx</code>  目录。安装 nginx， <code>yum install nginx</code></p>\n</li>\n<li>\n<p>安装完 nginx 服务器以后，nginx 目录下会多一个 ngxinx.conf 文件，在这个文件中进行配置。<br>\n通过 <code>vim nginx.conf</code>  指令进行编辑，主要添加如下两项：<br>\n![](<a href=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0~2J0\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0~2J0</a> <code>BXN%A6($%G2O8AS]8.png) 按 INSERT 编辑，编辑完 ESC 退出编辑，输入</code> :wq` 保存</p>\n</li>\n<li>\n<p><code>serve nginx start</code></p>\n</li>\n</ol>\n<ul>\n<li>Linux<br>\n <code>/</code>  是 linux 系统的根目录</li>\n</ul>\n<p>常见 linux 命令</p>\n<ul>\n<li><code>ls</code> ：列出你想要的目录的内容（默认情况下为当前目录）</li>\n<li><code>alias</code> ：允许你在 shell 会话中定义临时别名</li>\n<li><code>unalias</code> ：从已定义的别名中删除 alias</li>\n<li><code>pwd</code> ：输出你所在目录的绝对路径</li>\n<li><code>cd</code> ：更改目录<br>\n <code>cd</code> ： 进入 home 文件夹<br>\n <code>cd ..</code> ：向上移动一个级别<br>\n <code>cd -</code> ：返回上一个目录</li>\n<li><code>cp</code> ：复制文件和文件夹。要使用 cp 命令，只需将其与源文件和目标文件一起键入即可： <code>cp file_to_copy.txt new_file.txt</code></li>\n<li><code>rm</code> ：删除文件和目录</li>\n<li><code>mv</code> ：在文件系统中移动（或重命名）文件和目录</li>\n<li><code>mkdir</code> ：在 shell 中创建文件夹</li>\n<li><code>man</code> ：显示任何其他命令的手册页面（只要有）。</li>\n<li><code>chmod</code> ：快速更改文件的模式（权限)，文件的基本权限包括：r (只读)、w (写入)、x (执行)</li>\n<li><code>sudo</code> ：此命令代表 “超级用户 do”，它允许您在运行特定命令时充当超级用户或根用户。这就是 Linux 如何保护自己，防止用户意外修改机器的文件系统或安装不合适的软件包。</li>\n<li><code>vim</code> ：编辑文件</li>\n</ul>\n",
            "tags": [
                "前端开发",
                "项目实战",
                "Vue"
            ]
        },
        {
            "id": "https://eucli.top/2022/10/15/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/",
            "url": "https://eucli.top/2022/10/15/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/",
            "title": "日常生活",
            "date_published": "2022-10-15T11:59:45.000Z",
            "content_html": "",
            "tags": [
                "生活日常",
                "杂谈"
            ]
        }
    ]
}