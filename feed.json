{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eucliの小窝",
    "description": null,
    "home_page_url": "https://eucli.top",
    "items": [
        {
            "id": "https://eucli.top/2023/11/07/TS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88coderwhy%EF%BC%89/",
            "url": "https://eucli.top/2023/11/07/TS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88coderwhy%EF%BC%89/",
            "title": "TS数据结构与算法（coderwhy）",
            "date_published": "2023-11-07T13:45:48.000Z",
            "content_html": "<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/download.jpg\" alt=\"download.jpg\" /><br />\n 术之尽头，炁体源流<br />\n编程尽头，数据结构</p>\n<ul>\n<li>\n<p>编程的真相：数据的处理</p>\n<blockquote>\n<p>数据结构的本质是<strong>一门专门研究数据如何组织、存储和操作的科目</strong></p>\n</blockquote>\n</li>\n<li>\n<p>学习数据结构与算法的实际应用</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231017223537651.png\" alt=\"image-20231017223537651\" /></p>\n</li>\n<li>\n<p>常见数据结构与算法</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231017225224143.png\" alt=\"image-20231017225224143\" /></p>\n</li>\n<li>\n<p>高阶数据结构与算法</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231018093540755.png\" alt=\"image-20231018093540755\" /></p>\n</li>\n</ul>\n<blockquote>\n<p>常见数据结构：数组（Array）、栈结构（Stack）、队列（Queue）、链表（LinkedList）、堆结构（Heap）、树结构（Tree）、散列表（Hash）、图结构（Craph）</p>\n</blockquote>\n<ul>\n<li>\n<p>什么是数据结构</p>\n<p><code>存储和组织数据的方式</code></p>\n</li>\n<li>\n<p>什么是算法（算法的定义）</p>\n<ul>\n<li>\n<p>一个有限的指令集，每条指令的描述不依赖于语言</p>\n</li>\n<li>\n<p>接受一些输入（有些情况下不需要输入）</p>\n</li>\n<li>\n<p>产生输出</p>\n</li>\n<li>\n<p>一定在有限步骤之后终止</p>\n</li>\n</ul>\n<p>算法并不只是那些高大上的东西，你在一个函数（如 sum 函数、fomat 函数）里写的功能其实都是算法。</p>\n</li>\n</ul>\n<h1 id=\"一-数组-array\"><a class=\"anchor\" href=\"#一-数组-array\">#</a> 一、数组 Array</h1>\n<ul>\n<li>\n<p>线性结构</p>\n<blockquote>\n<p>线性结构是由 n（n≥0）个数据元素（结点）组成的有限序列</p>\n</blockquote>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231019222855252.png\" alt=\"image-20231019222855252\" /></p>\n</li>\n<li>\n<p>数组结构</p>\n<p>数组的内存是连续的，所以数组在知道下标值的情况下访问效率是非常高的</p>\n</li>\n</ul>\n<h1 id=\"二-栈-stack\"><a class=\"anchor\" href=\"#二-栈-stack\">#</a> 二、栈 Stack</h1>\n<h2 id=\"1-认识栈结构和特性\"><a class=\"anchor\" href=\"#1-认识栈结构和特性\">#</a> 1、认识栈结构和特性</h2>\n<p>我们知道数组是一种 <code>线性结构</code> ，并且可以在数组的 <code>任意位置</code> 插入和删除数据，但有时候我们为了实现某些功能，必须<strong>对任意性加以限制</strong>，而栈和队列就是比较常见的 <code>受限的线性结构</code></p>\n<ul>\n<li>\n<p>栈结构示意图</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231019224950547.png\" alt=\"image-20231019224950547\" /></p>\n</li>\n<li>\n<p>特性</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020212121813.png\" alt=\"image-20231020212121813\" /></p>\n</li>\n</ul>\n<h2 id=\"2-栈结构特性面试题\"><a class=\"anchor\" href=\"#2-栈结构特性面试题\">#</a> 2、栈结构特性 —— 面试题</h2>\n<ol>\n<li><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020212602906.png\" alt=\"image-20231020212602906\" /></li>\n</ol>\n<ul>\n<li>\n<p>解析</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020213129445.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p>​\t&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L2ltYWdlLTIwMjMxMDIwMjEzMjI5MDkzLnBuZw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231020213229093.png</span>&quot; alt=&quot;image-20231020213229093&quot; style=&quot;zoom:50%;&quot; /&gt;</p>\n<ol start=\"2\">\n<li>\n<p>十进制转二进制</p>\n<blockquote>\n<p>要把十进制转二进制，是将十进制除二取余直到 0 为止，然后将各个余数<strong>从后往前排</strong>就是该十进制的二进制，可以利用栈结构的特点（后进先出）</p>\n</blockquote>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里用 string 是因为如果还是 number 二进制也会以十进制的形式表示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">decimalToBinary</span><span class=\"token punctuation\">(</span>decimal<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//1. 创建一个栈，用于存放余数 ArrayStack</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//2. 使用循环：while（不确定次数，只知道循环的结束条件） /for (知道循环的次数时)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>decimal <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> decimal <span class=\"token operator\">%</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      decimal <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>decimal <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">//3. 所有的余数都已经放入了栈中，依次取出即可</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> binary <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        binary <span class=\"token operator\">+=</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> binary</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">decimalToBinary</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>有效的括号</p>\n<p>题目：给定一个只包含 <code>(</code> , <code>)</code> , <code>&#123;</code> , <code>&#125;</code> , <code>[</code> , <code>]</code>  的字符串 s，判断字符串是否有效</p>\n<blockquote>\n<p>括号必须成对出现，有一一对应关系，如 <code>(&#123;&#125;)[]</code> ，像 <code>([)]</code>  就不行。</p>\n<ol>\n<li>左括号必须用相同类型的右括号闭合</li>\n<li>左括号必须以正确顺序闭合</li>\n<li>每个右括号都有一个对应类型的左括号</li>\n</ol>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>\n<p>思路：将给的字符串做一个遍历，先判断左括号，每遍历到一个左括号就把对应类型的一个右括号压入栈中（注意不是压字符串的右括号），</p>\n<p><img data-src=\"C:%5CUsers%5Cmonokuma%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20231028223114887.png\" alt=\"image-20231028223114887\" /></p>\n</li>\n<li>\n<p>代码实现</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ArrayStack <span class=\"token keyword\">from</span> <span class=\"token string\">'地址'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//1. 创建栈结构</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> stack <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//2. 遍历 s 中的所有的括号</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         cace <span class=\"token string\">\"(\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         cace <span class=\"token string\">\"&#123;\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         cace <span class=\"token string\">\"[\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>         stack<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">!==</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>           <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> stack<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"(]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-实现栈结构封装\"><a class=\"anchor\" href=\"#3-实现栈结构封装\">#</a> 3、实现栈结构封装</h2>\n<h3 id=\"1-基于数组实现\"><a class=\"anchor\" href=\"#1-基于数组实现\">#</a> 1. 基于数组实现</h3>\n<ul>\n<li>\n<p>常见的栈有哪些操作呢？</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L2ltYWdlLTIwMjMxMDI0MTMxNTE4NTc2LnBuZw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231024131518576.png</span>&quot; alt=&quot;image-20231024131518576&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 封装一个栈</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 定义一个数组 / 链表，用于存储元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 实现栈中相关的操作方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//push 方法：将一个元素压入栈中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//pop 方法：将栈顶的元素弹出栈（返回出去，并且从栈顶移除掉）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//peek 方法：看一眼栈顶元素，但是不进行任何操作</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//isEmpty 方法：判断栈是否为空</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//size 方法：返回栈的数据的个数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 创建栈实例</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">const</span> stack1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>stack1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">const</span> stack2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayStack<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>stack2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">124</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2-基于链表实现\"><a class=\"anchor\" href=\"#2-基于链表实现\">#</a> 2. 基于链表实现</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义栈的结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 封装一个栈</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IStack<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//pop 方法：将栈顶的元素弹出栈（返回出去，并且从栈顶移除掉）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//peek 方法：看一眼栈顶元素，但是不进行任何操作</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">//isEmpty 方法：判断栈是否为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>     </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">//size 方法：返回栈的数据的个数</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"三-队列-queue\"><a class=\"anchor\" href=\"#三-队列-queue\">#</a> 三、队列 Queue</h1>\n<h2 id=\"1-认识队列和其特性\"><a class=\"anchor\" href=\"#1-认识队列和其特性\">#</a> 1、认识队列和其特性</h2>\n<p>队列也是一种受限的线性结构，其特性为<strong>先进先出</strong>，队列结构还有两个特点：</p>\n<ul>\n<li>只允许在队列的 ** 前端 (front)** 进行 <code>删除</code> 操作</li>\n<li>在队列的 ** 后端 (rear)** 进行 <code>插入</code> 操作</li>\n</ul>\n<p>队列在开发中还有很多应用，如线程队列，很多算法也会用到队列（如二叉树中的层序遍历）</p>\n<h2 id=\"2-实现队列结构封装\"><a class=\"anchor\" href=\"#2-实现队列结构封装\">#</a> 2、实现队列结构封装</h2>\n<ul>\n<li>\n<p>队列的常见操作</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/IMG_20231029_224210.jpg\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"1-基于数组实现-2\"><a class=\"anchor\" href=\"#1-基于数组实现-2\">#</a> 1. 基于数组实现</h3>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 入队方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 出队方法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 返回队列中第一个元素</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 判断是否为空</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 元素的个数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">IQueue<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 内部使用过数组（链表保存）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  pivate data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nba\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 用了 get，就不用加括号调用了</span></pre></td></tr></table></figure><h3 id=\"2-基于链表实现性能更好\"><a class=\"anchor\" href=\"#2-基于链表实现性能更好\">#</a> 2. 基于链表实现（性能更好）</h3>\n<h2 id=\"3-队列结构常见方法\"><a class=\"anchor\" href=\"#3-队列结构常见方法\">#</a> 3、队列结构常见方法</h2>\n<h2 id=\"4-队列结构面试题\"><a class=\"anchor\" href=\"#4-队列结构面试题\">#</a> 4、队列结构面试题</h2>\n<h3 id=\"击鼓传花\"><a class=\"anchor\" href=\"#击鼓传花\">#</a> 击鼓传花</h3>\n<p>几个人围成一圈，开始数数，数到某个数字 (假设是 3) 的人自动淘汰，最后剩下的人会获得胜利，问最后这个人的名字或者位置？</p>\n<blockquote>\n<p>循环：queue.size ()&gt; 1<br />\n 循环体内完成什么操作：</p>\n<ol>\n<li>数的是 1，2 的人，操作出队 -&gt; 入队</li>\n<li>数的是 3 的人，只出队，不需要入队<br />\n return queue.dequeue ()</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ArrayQueue <span class=\"token keyword\">from</span> <span class=\"token string\">'地址'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">hotPotato</span><span class=\"token punctuation\">(</span>names<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>num<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 将所有的 name 入队操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> name <span class=\"token keyword\">of</span> names<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 淘汰的规则</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//1,2 不淘汰</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//3 淘汰</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> lastName <span class=\"token operator\">=</span> <span class=\"token function\">hotPotato</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"james\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"kobe\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"curry\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>lastName<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"约瑟夫环\"><a class=\"anchor\" href=\"#约瑟夫环\">#</a> 约瑟夫环</h3>\n<ul>\n<li>\n<p>0,1,・・・,n-1 这 n 个数字排成一个圆圈，从数字 0 开始，每次从这个圆圈里删除第 m 个数字（删除后从下一个数字开始计数），求出这个圆圈里剩下的最后一个数字<br />\n例如：0、1、2、3、4 这 5 个人数字组成一个圆圈，从数字 0 开始每次删除第 3 个数字，则删除的前 4 个数字依次是 2、0、4、1，因此最后剩下的数字是 3</p>\n</li>\n<li>\n<p>代码实现</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ArrayQueue <span class=\"token keyword\">from</span> <span class=\"token string\">'地址'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayQueue<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 将所有数字加入到队列中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 判断队列中是否还有数字</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      queue<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">dequeue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>！</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>动态规划实现</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>m<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> position <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    position <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>position <span class=\"token operator\">+</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> i</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> position</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"四-链表-linkedlist\"><a class=\"anchor\" href=\"#四-链表-linkedlist\">#</a> 四、链表 LinkedList</h1>\n<h2 id=\"1-认识链表及其特性\"><a class=\"anchor\" href=\"#1-认识链表及其特性\">#</a> 1、认识链表及其特性</h2>\n<p>链表和数组一样可以用于存储一系列的元素，但链表和数组的实现机制完全不同</p>\n<blockquote>\n<p>数组也有很多缺点:</p>\n<ul>\n<li>数组创建通常需要申请一段<strong>连续的内存</strong>，并且大小是需要扩容固定的，所有当前数组不能满足容量需求时</li>\n<li>在<strong>数组开头或中间插入数据的成本很</strong>高，需要进行大量元素的位移</li>\n</ul>\n</blockquote>\n<ul>\n<li>相对于数组，链表的优点</li>\n</ul>\n<ol>\n<li>链表的元素在内存中<strong>不必是连续的空间</strong>。链表的每个元素由一个 <code>存储元素本身的节点</code> 和一个 <code>指向下一个元素的引用</code> （也可称为指针）组成</li>\n<li>链表不必在创建时就确定大小，并且可以无限的延伸下去</li>\n<li>链表在插入和删除数据时，时间复杂度可以达到 O (1)</li>\n</ol>\n<ul>\n<li>相对于数组，链表的缺点</li>\n</ul>\n<ol>\n<li>链表访问任何一个位置的元素时，需要从头开始访问（无法跳过第一个元素访问任何一个元素）</li>\n<li>无法通过下标直接访问元素，需要从头一个个访问，直到找到对应元素</li>\n</ol>\n<p>链表类似于火车，有车厢和连接下一个车厢的节点<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/IMG_20231030_220108.jpg\" alt=\"链表的火车结构\" /><br />\n item 是 “车厢” 的数据，也可以叫 value、element 等</p>\n<h2 id=\"2-封装链表的类结构\"><a class=\"anchor\" href=\"#2-封装链表的类结构\">#</a> 2、封装链表的类结构</h2>\n<p>要封装两个类</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 创建 Node 节点类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  value<span class=\"token operator\">:</span><span class=\"token constant\">T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  next<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">// 默认值设置为 null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//2. 创建 LinkedList 类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  head<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  size<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3-封装链表相关方法\"><a class=\"anchor\" href=\"#3-封装链表相关方法\">#</a> 3、封装链表相关方法</h2>\n<ul>\n<li>链表常见方法：\n<ul>\n<li>append (element): 向链表尾部插入一个新的项</li>\n<li>insert (position,element): 向链表的特定位置插入一个新的项</li>\n<li>get (position): 获取对应位置的元素</li>\n<li>indexOf (element): 返回元素在链表中的索引，如果链表中没有该元素则返回 - 1</li>\n<li>update (position,element): 修改某个元素的位置</li>\n<li>removeAt (position): 从链表的特定位置移除一项</li>\n<li>remove (element): 从链表中移除一项</li>\n<li>isEmptu (): 如果链表不包含任何元素，返回 true，否则返回 false</li>\n<li>size (): 返回链表包含的元素个数，与数组的 length 属性类型</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-append方法\"><a class=\"anchor\" href=\"#1-append方法\">#</a> 1. append 方法</h3>\n<p>向链表尾部追加数据可能有两种情况：</p>\n<ul>\n<li>链表本身为空，新添加的数据为唯一的节点</li>\n<li>链表不为空，需要在其他节点后面追加节点</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 创建 Node 节点类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  value<span class=\"token operator\">:</span><span class=\"token constant\">T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  next<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">// 默认值设置为 null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//2. 创建 LinkedList 类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  head<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  size<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//1. 根据 value 创建一个新节点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">//2. 判断链表是否为空（即 this.head 是否为 null）</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newNode</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token comment\">// 创建一个临时变量</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 出了循环，就说明此时 current 肯定是指向最后一个节点的，这时候为最后的节点连接上新添加的节点</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      current<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">//size 增加</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// 遍历链表并打印的方法</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">const</span> values<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      values<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"->\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">const</span> LinkedList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>LinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>LinkedList<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"2-insert方法\"><a class=\"anchor\" href=\"#2-insert方法\">#</a> 2. insert 方法</h3>\n<ul>\n<li>确定 position 的边界</li>\n<li>插入的位置有两种情况：\n<ul>\n<li>插入到最前面</li>\n<li>插入到其他地方</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//2. 根据 value 创建一个新的节点（待插入）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//3. 判断是否插入到头部</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> newNode <span class=\"token comment\">// 这两行代码不能反过来，不然头结点和新插入的节点就会互相指向，独立出来了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 这里用双指针，previous 表示 current 的前一个节点</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">let</span> previous<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      previous <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 跳出循环表示此时 index === position</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    previous<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    newNode<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3-removeat\"><a class=\"anchor\" href=\"#3-removeat\">#</a> 3. removeAt</h3>\n<p>两种情况：</p>\n<ul>\n<li>移除第一项信息<br />\n移除第一项时，直接让 head 指向第二项信息就可以了。之后因为第一项信息没有引用指向，就在链表中不再有效，后面会被回收掉</li>\n<li>移除其他项信息<br />\n移除其他项的信息操作方式是相同的。首先，通过 while 循环找到正确的位置，然后就可以直接将上一项 previous 的 next 指向 current 项的 next，这样中间的项就没有引用指向它，之后会被回收</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除方法（根据位置移除对应数据）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//2. 判断删除的是不是第一个节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> previous<span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      previous <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 跳出循环表示此时 index === position, 找到了需要的节点</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    previous<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> current<span class=\"token operator\">?.</span>next <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-get方法\"><a class=\"anchor\" href=\"#4-get方法\">#</a> 4. get 方法</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取对应位置的元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//2. 查找并返回元素</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 查找到元素，返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> current<span class=\"token operator\">?.</span>value <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-封装私有方法\"><a class=\"anchor\" href=\"#5-封装私有方法\">#</a> 5. 封装私有方法</h3>\n<h3 id=\"根据position获取当前的节点注意不是节点的值而是获取节点本身\"><a class=\"anchor\" href=\"#根据position获取当前的节点注意不是节点的值而是获取节点本身\">#</a> 根据 position 获取当前的节点（注意不是节点的值，而是获取节点本身）</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>Node<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>index<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    current <span class=\"token operator\">=</span> current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> current</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样， <code>current = this.getNode(position)</code> , <code>previous = this.getNode(position-1)</code></p>\n<h3 id=\"6-update方法\"><a class=\"anchor\" href=\"#6-update方法\">#</a> 6. update 方法</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>position<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//1. 越界的判断</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>position <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> position <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 获取相应位置节点，直接更新即可</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  current<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"7-indexof方法\"><a class=\"anchor\" href=\"#7-indexof方法\">#</a> 7. indexOf 方法</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据值，获取对应位置的索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 从第一个节点开始向后遍历</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> index</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    current <span class=\"token operator\">=</span> current<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    index<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"8-remove\"><a class=\"anchor\" href=\"#8-remove\">#</a> 8. remove</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除方法（根据元素移除对应数据）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeAt</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"4-链表常见的面试题\"><a class=\"anchor\" href=\"#4-链表常见的面试题\">#</a> 4、链表常见的面试题</h2>\n<h3 id=\"1-面试题一手写链表\"><a class=\"anchor\" href=\"#1-面试题一手写链表\">#</a> 1. 面试题一：手写链表</h3>\n<p>见上文</p>\n<h3 id=\"2-面试题二删除链表中的节点\"><a class=\"anchor\" href=\"#2-面试题二删除链表中的节点\">#</a> 2. 面试题二：删除链表中的节点</h3>\n<blockquote>\n<ul>\n<li>\n<p>有一个单链表的 head，我们想删除它其中一个节点 node</p>\n<p>条件：</p>\n<ul>\n<li>给你一个需要删除的节点</li>\n<li>你无法访问第一个节点 head</li>\n</ul>\n</li>\n<li>\n<p>链表的所有值都是唯一的，并且保证给定的节点 node 不是链表中最后一个节点</p>\n</li>\n<li>\n<p>注意，删除节点并不是指从内存中删除它。这里的意思是：</p>\n<ul>\n<li>给定节点的指不应该存在于链表中</li>\n<li>链表中的节点数应该减一</li>\n<li>node 前面的所有值顺序相同</li>\n<li>node 后面的所有值顺序相同</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/IMG_20231103_214705-2023-11-4.jpg\" alt=\"IMG_20231103_214705-2023-11-4.jpg\" /></p>\n<blockquote>\n<p>思路：</p>\n<ol>\n<li>把 &quot;5&quot; 改成 &quot;1&quot;</li>\n<li>让 value 为 &quot;5&quot; 的节点的 next 指向其 next 的 next（即指向 &quot;9&quot;）</li>\n<li>这样虽然看起来是把值为 &quot;1&quot; 的节点删了，但因为第一步 &quot;5&quot; 已改成 &quot;1&quot; 了，所以相当于有两个 &quot;1&quot; 节点，删掉一个还剩一个，就等于删掉了 &quot;5&quot;</li>\n</ol>\n</blockquote>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMTY5OTA3MjMwNTg0OC0yMDIzLTExLTQuanBn\">https://gitee.com/eucli312/img/raw/master/1699072305848-2023-11-4.jpg</span>&quot; alt=&quot;IMG_20231103_214705-2023-11-4.jpg&quot; style=&quot;zoom:150%;&quot; /&gt;</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    val<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    next<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span><span class=\"token operator\">?</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>next<span class=\"token operator\">?</span><span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deleteNode</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 在这里写代码实现功能</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>val</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3-面试题三反转链表\"><a class=\"anchor\" href=\"#3-面试题三反转链表\">#</a> 3. 面试题三：反转链表</h3>\n<p>p998</p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/Screenshot_2023-11-04-22-23-09-676_com.baidu.netd-2023-11-4.jpg\" alt=\"Screenshot_2023-11-04-22-23-09-676_com.baidu.netd-2023-11-4.jpg\" /></p>\n<h4 id=\"31-反转链表非递归\"><a class=\"anchor\" href=\"#31-反转链表非递归\">#</a> 3.1 反转链表（非递归）</h4>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/Screenshot_2023-11-05-22-35-01-424_com.baidu.netd-2023-11-5.jpg\" alt=\"Screenshot_2023-11-05-22-35-01-424_com.baidu.netd-2023-11-5.jpg\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699195871664-2023-11-5.jpg\" alt=\"1699195871664-2023-11-5.jpg\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/Screenshot_2023-11-05-22-49-06-382_com.baidu.netd-2023-11-5.jpg\" alt=\"Screenshot_2023-11-05-22-49-06-382_com.baidu.netd-2023-11-5.jpg\" /></p>\n<blockquote>\n<ol>\n<li>\n<p>让 current 节点指向 head 节点的下一个节点。（目的：保留下一个节点的引用，保证其可以拿到且不会因为之后没有被引用而被销毁）</p>\n</li>\n<li>\n<p>改变 head 当前指向的节点，令其指向 newHead。（对于第一个节点来说，指向 newHead 就是指向 null）</p>\n</li>\n<li>\n<p>让 newHead 指向 head 节点。（目的：下一次遍历时，第二步可以让下一节点指向第一个节点）</p>\n</li>\n<li>\n<p>让 head 移动到下一个节点：即让 head 指向 current</p>\n</li>\n</ol>\n<p>进行一次上面的操作可以反转一个节点</p>\n</blockquote>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    val<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    next<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">:</span><span class=\"token operator\">?</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>next<span class=\"token operator\">?</span><span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">=</span> val <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> next <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 在这里写代码实现功能</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//1. 判断节点为 null 或者只有一个节点，那么直接返回即可</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//2. 反转链表结构</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">let</span> newHead<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">let</span> current<span class=\"token operator\">:</span>ListNode<span class=\"token operator\">|</span><span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newHead</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      newHead <span class=\"token operator\">=</span> head</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      head <span class=\"token operator\">=</span> current</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> newHead</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"32-反转链表递归\"><a class=\"anchor\" href=\"#32-反转链表递归\">#</a> 3.2 反转链表（递归）</h4>\n<p>p999</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc5M1NjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi0xOC0yNC02NDBfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-793Screenshot_2023-11-06-22-18-24-640_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-793Screenshot_2023-11-06-22-18-24-640_com.baidu.netd.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc5MlNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi0xOS00OC01NzRfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-792Screenshot_2023-11-06-22-19-48-574_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-792Screenshot_2023-11-06-22-19-48-574_com.baidu.netd.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc4OVNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi0yMS0xOS03NzJfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-789Screenshot_2023-11-06-22-21-19-772_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-789Screenshot_2023-11-06-22-21-19-772_com.baidu.netd.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>ListNode <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 在这里写代码实现功能</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 如果使用的是递归，那么递归必须要有结束条件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>head <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> head</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> newHead <span class=\"token operator\">=</span>  <span class=\"token function\">reverseList</span><span class=\"token punctuation\">(</span>head<span class=\"token operator\">?.</span>next <span class=\"token operator\">??</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 完成想要的操作是在这个位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 第一次来到这里的时候，是倒数第二个节点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> head</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> newHead</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"5-算法的复杂度分析\"><a class=\"anchor\" href=\"#5-算法的复杂度分析\">#</a> 5、算法的复杂度分析</h2>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc5MFNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi00MS0wNS03MTRfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-790Screenshot_2023-11-06-22-41-05-714_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-790Screenshot_2023-11-06-22-41-05-714_com.baidu.netd.jpg&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTc4NlNjcmVlbnNob3RfMjAyMy0xMS0wNi0yMi00NS00NS01NDBfY29tLmJhaWR1Lm5ldGQuanBn\">https://gitee.com/eucli312/img/raw/master/2023-11-6-786Screenshot_2023-11-06-22-45-45-540_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-786Screenshot_2023-11-06-22-45-45-540_com.baidu.netd.jpg&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h2 id=\"6-数组和链表的对比\"><a class=\"anchor\" href=\"#6-数组和链表的对比\">#</a> 6、数组和链表的对比</h2>\n",
            "tags": [
                "TS",
                "算法"
            ]
        },
        {
            "id": "https://eucli.top/2023/11/06/React%EF%BC%88%E7%8E%8B%E7%BA%A2%E5%85%83%EF%BC%89/",
            "url": "https://eucli.top/2023/11/06/React%EF%BC%88%E7%8E%8B%E7%BA%A2%E5%85%83%EF%BC%89/",
            "title": "React（王红元）",
            "date_published": "2023-11-06T13:45:48.000Z",
            "content_html": "<h1 id=\"一-react18基础\"><a class=\"anchor\" href=\"#一-react18基础\">#</a> 一、React18 基础</h1>\n<h2 id=\"1-邂逅react\"><a class=\"anchor\" href=\"#1-邂逅react\">#</a> 1、邂逅 React</h2>\n<ol>\n<li>声明式编程</li>\n</ol>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699177760162-2023-11-5.png\" alt=\"1699177760162-2023-11-5.png\" /></p>\n<ol start=\"2\">\n<li>组件化开发</li>\n<li>多平台适配</li>\n</ol>\n<p>​\tRN、RVR</p>\n<h2 id=\"2-react安装和依赖\"><a class=\"anchor\" href=\"#2-react安装和依赖\">#</a> 2、React 安装和依赖</h2>\n<blockquote>\n<p>开发 React 必须依赖三个库：</p>\n<ul>\n<li>react：包含 react 所必须的核心代码</li>\n<li>react-dom：react 渲染在不同平台所需要的核心代码</li>\n<li>babel：将 jsx 转换成 react 相关代码的工具</li>\n</ul>\n</blockquote>\n<h2 id=\"3-jsx\"><a class=\"anchor\" href=\"#3-jsx\">#</a> 3、JSX</h2>\n<p>在 react 里面绑定变量统一使用 <code>&#123;&#125;</code></p>\n<h3 id=\"31-认识jsx语法\"><a class=\"anchor\" href=\"#31-认识jsx语法\">#</a> 3.1、认识 JSX 语法</h3>\n<ul>\n<li>JSX 是一种 JavaScript 的语法扩展（eXetension），也在很多地方称之为 JavaScript XML，因为看起来就是一段 XML 语法</li>\n<li>它用于描述我们的 UI 界面，并且完全可以和 JavaScript 一起使用</li>\n<li>它不同于 Vue 的模板语法，你不需要专门学习模板语法中的一些指令（如：v-for、v-if、v-else、v-bind）</li>\n</ul>\n<p>所以多写 react 的话 js 功底一定会提升的</p>\n<blockquote>\n<p>为什么 React 选择了 JSX？</p>\n<p>React 认为<strong>渲染逻辑</strong>本质上与<strong>其他 UI 逻辑</strong>存在 <code>内在耦合</code></p>\n<ul>\n<li>比如 UI 需要绑定事件（button、a 原生等等）</li>\n<li>比如 UI 中需要展示数据状态</li>\n<li>比如在某些状态发生改变时，又需要改变 UI</li>\n</ul>\n</blockquote>\n<p>JSX 的书写规范：</p>\n<ul>\n<li>JSX 顶层只能有一个根元素，所以我们很多时候会在外层包裹一个 div 元素（或者使用后面我们学习的 Fragment）</li>\n<li>为了方便阅读，我们通常在 JSX 的外层包裹一个小括号 ()，这样可以方便阅读，并且 JSX 可以换行书写</li>\n<li>JSX 的标签可以是单标签也可以是双标签</li>\n</ul>\n<h3 id=\"32-jsx的基本使用\"><a class=\"anchor\" href=\"#32-jsx的基本使用\">#</a> 3.2、JSX 的基本使用</h3>\n<h4 id=\"1-jsx注释的写法\"><a class=\"anchor\" href=\"#1-jsx注释的写法\">#</a> 1. JSX 注释的写法</h4>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 我是注释 */</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"2-jsx插入内容\"><a class=\"anchor\" href=\"#2-jsx插入内容\">#</a> 2. JSX 插入内容</h4>\n<p><strong>插入变量作为子元素：</strong></p>\n<ol>\n<li>情况一：当变量是 <code>Number</code> 、 <code>String</code> 、 <code>Arra</code> y 时，可以直接显示</li>\n<li>情况二：当变量是 <code>null</code> 、 <code>undefined</code> 、 <code>Boolean</code>  时，内容为空\n<ul>\n<li>如果希望可以显示，那么需要转换成字符串</li>\n<li>转换的方式很多，比如 toString 方法、和空字符串拼接、String (变量)</li>\n</ul>\n</li>\n<li>情况三： <code>Object对象类型</code> 不能作为子元素。（绑定属性值时可以）</li>\n</ol>\n<p><strong>插入表达式：</strong></p>\n<ul>\n<li>运算表达式</li>\n<li>三元运算符</li>\n<li>执行一个函数</li>\n</ul>\n<h4 id=\"3-jsx绑定属性\"><a class=\"anchor\" href=\"#3-jsx绑定属性\">#</a> 3. JSX 绑定属性</h4>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699243316228-2023-11-6.jpg\" alt=\"1699243316228-2023-11-6.jpg\" /></p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">title</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>title<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">我是h2元素</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>href<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">百度一下</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 绑定 class 属性，因为关键字冲突最好使用 className */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>className<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">哈哈哈</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 绑定 style 属性：绑定对象类型 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token value css language-css\">&lt;!--swig￼0--</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">>哈哈哈</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"33-jsx的事件绑定\"><a class=\"anchor\" href=\"#33-jsx的事件绑定\">#</a> 3.3、JSX 的事件绑定</h3>\n<h4 id=\"1-this绑定\"><a class=\"anchor\" href=\"#1-this绑定\">#</a> 1. this 绑定</h4>\n<blockquote>\n<p>this 的四种绑定规则：</p>\n<ol>\n<li>默认绑定：独立函数执行 foo () 默认绑定在非严格模式下指向 window，在严格模式下是 undefined</li>\n<li>隐式绑定：被一个对象执行 obj.foo () this 绑定 obj</li>\n<li>显示绑定：call/apply/bind foo.call (&quot;aaa&quot;) this 绑定为 String (&quot;aaa&quot;)</li>\n<li>new 绑定：new Foo () 创建一个新对象，并且赋值给 this</li>\n</ol>\n</blockquote>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699244155630-2023-11-6.jpg\" alt=\"1699244155630-2023-11-6.jpg\" /></p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMTY5OTI0MzkxNjUyMi0yMDIzLTExLTYuanBn\">https://gitee.com/eucli312/img/raw/master/1699243916522-2023-11-6.jpg</span>&quot; alt=&quot;1699243916522-2023-11-6.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvU2NyZWVuc2hvdF8yMDIzLTExLTA2LTEwLTUwLTA1LTYwMV9jb20uYmFpZHUubmV0ZC0yMDIzLTExLTYuanBn\">https://gitee.com/eucli312/img/raw/master/Screenshot_2023-11-06-10-50-05-601_com.baidu.netd-2023-11-6.jpg</span>&quot; alt=&quot;Screenshot_2023-11-06-10-50-05-601_com.baidu.netd-2023-11-6.jpg&quot; style=&quot;zoom:67%;&quot; /&gt;</p>\n<p>开发中建议使用第三种 this 绑定方式，即直接传入一个箭头函数。需要传参的时候：</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">btnClick</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>aaa<span class=\"token punctuation\">,</span>bbb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">按钮</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"2-事件绑定案例\"><a class=\"anchor\" href=\"#2-事件绑定案例\">#</a> 2. 事件绑定案例</h4>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          <span class=\"token literal-property property\">movies</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"星际穿越\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"盗梦空间\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"大话西游\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"流浪地球\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token literal-property property\">currentIndex</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">itemClick</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">currentIndex</span><span class=\"token operator\">:</span> index <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> movies<span class=\"token punctuation\">,</span> currentIndex <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              </span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                movies<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                      <span class=\"token attr-name\">className</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span> currentIndex <span class=\"token operator\">===</span> index <span class=\"token operator\">?</span> <span class=\"token string\">'active'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">&#125;</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                      <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">&#125;</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                      <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">itemClick</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                      </span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"34-jsx的条件渲染\"><a class=\"anchor\" href=\"#34-jsx的条件渲染\">#</a> 3.4、JSX 的条件渲染</h3>\n<ul>\n<li>在 vue 中，我们使用指令：v-if、v-show</li>\n<li>在 React 中，所有条件判断都和普通的 JavaScript 代码一致</li>\n</ul>\n<blockquote>\n<p>常见的条件渲染方式：</p>\n<ul>\n<li>\n<p>方式一：条件判断语句</p>\n<p>适合逻辑较多的情况</p>\n</li>\n<li>\n<p>方式二：三元运算符</p>\n<p>适合逻辑比较简单</p>\n</li>\n<li>\n<p>方式三：与运算符 &amp;&amp;</p>\n<p>适合如果条件成立，渲染某一个组件；如果条件不成立，什么内容也不渲染</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 1. 方式一：根据条件给变量赋值不同的内容 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>showElement<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 2. 方式二：三元运算符 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span> isReady <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">开始战斗!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token operator\">:</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">赶紧准备</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 3. 方式三: &amp;&amp; 逻辑与运算 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            </span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/* 场景：当某一个值，有可能为 undefined 时，使用 & amp;&amp; 进行条件判断 */</span><span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span> friend <span class=\"token operator\">&amp;&amp;</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>friend<span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> friend<span class=\"token punctuation\">.</span>desc<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"35-jsx的列表渲染\"><a class=\"anchor\" href=\"#35-jsx的列表渲染\">#</a> 3.5、JSX 的列表渲染</h3>\n<ul>\n<li>在 React 中，渲染列表最多的方式就是使用数组的 <code>map高阶函数</code></li>\n<li>key 的主要作用是为了提高 diff 算法的效率</li>\n</ul>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">学生列表数据</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              </span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                students<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>score <span class=\"token operator\">></span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">学号: </span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">姓名: </span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">分数: </span><span class=\"token punctuation\">&#123;</span>item<span class=\"token punctuation\">.</span>score<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"36-jsx的原理和本质\"><a class=\"anchor\" href=\"#36-jsx的原理和本质\">#</a> 3.6、JSX 的原理和本质</h3>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699257351984-2023-11-6.jpg\" alt=\"1699257351984-2023-11-6.jpg\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/wegrsdgsdg-2023-11-6.png\" alt=\"wegrsdgsdg-2023-11-6.png\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-u8debmqb6d.pngwegrsdgsdg.png\" alt=\"2023-11-6-u8debmqb6d.pngwegrsdgsdg.png\" /></p>\n<h2 id=\"4-react脚手架解析\"><a class=\"anchor\" href=\"#4-react脚手架解析\">#</a> 4、React 脚手架解析</h2>\n<h3 id=\"41-认识脚手架工具\"><a class=\"anchor\" href=\"#41-认识脚手架工具\">#</a> 4.1、认识脚手架工具</h3>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-277.jpgScreenshot_2023-11-06-18-21-15-256_com.baidu.netd.jpg\" alt=\"2023-11-6-277.jpgScreenshot_2023-11-06-18-21-15-256_com.baidu.netd.jpg\" /></p>\n<h3 id=\"42-cteate-react-app\"><a class=\"anchor\" href=\"#42-cteate-react-app\">#</a> 4.2、cteate-react-app</h3>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-282.jpgScreenshot_2023-11-06-18-25-34-597_com.baidu.netd.jpg\" alt=\"2023-11-6-282.jpgScreenshot_2023-11-06-18-25-34-597_com.baidu.netd.jpg\" /></p>\n<h3 id=\"43-创建react项目\"><a class=\"anchor\" href=\"#43-创建react项目\">#</a> 4.3、创建 react 项目</h3>\n<ol>\n<li>\n<p>电脑上要有 react 脚手架环境： <code> npm i create-react-app -g</code></p>\n</li>\n<li>\n<p>创建项目： <code>create-react-app 项目名称</code>  (p.s. 注意不能有大写字母) 要等好久～</p>\n</li>\n<li>\n<p>运行项目： <code>yarn start</code></p>\n</li>\n</ol>\n<ul>\n<li>\n<p><code>public/index.html</code> ：应用的 index.html 入口文件</p>\n</li>\n<li>\n<p>PWA（ <code>manifest.json</code> 、 <code>logo192.png</code> 、 <code>logo512.png</code>  等文件）</p>\n<p>手机（Android）可以将浏览器上的网页保存到桌面</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vZXVjbGkzMTIvaW1nL3Jhdy9tYXN0ZXIvMjAyMy0xMS02LTI3Ni5qcGdTY3JlZW5zaG90XzIwMjMtMTEtMDYtMTktMDctNDUtNDM3X2NvbS5iYWlkdS5uZXRkLmpwZw==\">https://gitee.com/eucli312/img/raw/master/2023-11-6-276.jpgScreenshot_2023-11-06-19-07-45-437_com.baidu.netd.jpg</span>&quot; alt=&quot;2023-11-6-276.jpgScreenshot_2023-11-06-19-07-45-437_com.baidu.netd.jpg&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n</li>\n<li>\n<p><code>robots.txt</code></p>\n<p>配置那些可以被爬虫爬</p>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-271.png456120.png\" alt=\"2023-11-6-271.png456120.png\" /></p>\n<blockquote>\n<p>src 下各个文件：</p>\n<ul>\n<li>\n<p>index.js：整个应用程序的入口文件</p>\n</li>\n<li>\n<p>App.js：从 index.js 抽取出来的组件，为了更加直观。后续自己开发的组件其实也可以直接写在这里面，但为了直观方便维护我们也单独抽取出组件</p>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>React.StrictMode: 严格模式</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\"></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">React.StrictMode</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"44-webpack的配置\"><a class=\"anchor\" href=\"#44-webpack的配置\">#</a> 4.4、webpack 的配置</h3>\n<p>react 是已经把 webpack 集成了的，所有目录里直接看不到 webpack 相关的配置</p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<h2 id=\"5-react组件化开发\"><a class=\"anchor\" href=\"#5-react组件化开发\">#</a> 5、React 组件化开发</h2>\n<h3 id=\"51-react组件化开发介绍\"><a class=\"anchor\" href=\"#51-react组件化开发介绍\">#</a> 5.1、React 组件化开发介绍</h3>\n<ul>\n<li>将一个完整的页面分成很多个组件</li>\n<li>每个组件都用于实现页面的一个功能块</li>\n<li>而每一个组件又可以进行细分</li>\n<li>而组件本身又可以在多个地方复用</li>\n</ul>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-279.jpgScreenshot_2023-11-06-20-58-03-573_com.baidu.netd.jpg\" alt=\"2023-11-6-279.jpgScreenshot_2023-11-06-20-58-03-573_com.baidu.netd.jpg\" /></p>\n<blockquote>\n<p>一般情况下函数组件都是无状态组件；类组件都是有状态组件</p>\n</blockquote>\n<h4 id=\"1-类组件\"><a class=\"anchor\" href=\"#1-类组件\">#</a> 1. 类组件</h4>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-281.jpgScreenshot_2023-11-06-21-03-41-190_com.baidu.netd.jpg\" alt=\"2023-11-6-281.jpgScreenshot_2023-11-06-21-03-41-190_com.baidu.netd.jpg\" /></p>\n<ul>\n<li>\n<p>render () 的返回值</p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-791Screenshot_2023-11-06-21-23-10-051_com.baidu.netd.jpg\" alt=\"2023-11-6-791Screenshot_2023-11-06-21-23-10-051_com.baidu.netd.jpg\" /></p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 类组件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">\"App Component\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> message <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 1.react 元素：通过 jsx 编写的代码就会被编译成 React.createElement, 所以返回的就是一个 `React 元素`</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>message<span class=\"token punctuation\">&#125;</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2. 组件或者 fragments (后续学习)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nba\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">h1元素</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">h2元素</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">哈哈哈</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 3. 字符串 / 数字类型</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Hello World\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"2-函数组件\"><a class=\"anchor\" href=\"#2-函数组件\">#</a> 2. 函数组件</h4>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-789Screenshot_2023-11-06-21-31-12-185_com.baidu.netd.jpg\" alt=\"2023-11-6-789Screenshot_2023-11-06-21-31-12-185_com.baidu.netd.jpg\" /></p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数式组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 返回值：和类组件中 render 函数返回的是一致，只是不需要 render () 包裹了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">App Functional Component</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</pre></td></tr></table></figure><h3 id=\"52-react组件的生命周期\"><a class=\"anchor\" href=\"#52-react组件的生命周期\">#</a> 5.2、React 组件的生命周期</h3>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-790Screenshot_2023-11-06-21-39-11-761_com.baidu.netd.jpg\" alt=\"2023-11-6-790Screenshot_2023-11-06-21-39-11-761_com.baidu.netd.jpg\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/2023-11-6-782Screenshot_2023-11-06-21-50-28-596_com.baidu.netd.jpg\" alt=\"2023-11-6-782Screenshot_2023-11-06-21-50-28-596_com.baidu.netd.jpg\" /></p>\n<h3 id=\"53-组件组件间通信\"><a class=\"anchor\" href=\"#53-组件组件间通信\">#</a> 5.3、组件组件间通信</h3>\n<h3 id=\"54-组件插槽的用法\"><a class=\"anchor\" href=\"#54-组件插槽的用法\">#</a> 5.4、组件插槽的用法</h3>\n<h3 id=\"55-非父子组件的通信\"><a class=\"anchor\" href=\"#55-非父子组件的通信\">#</a> 5.5、非父子组件的通信</h3>\n<h3 id=\"56-setstate的使用详解\"><a class=\"anchor\" href=\"#56-setstate的使用详解\">#</a> 5.6、setState 的使用详解</h3>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h3>\n<h2 id=\"react-css样式规范\"><a class=\"anchor\" href=\"#react-css样式规范\">#</a> React CSS 样式规范</h2>\n<h2 id=\"7-表单处理和ref\"><a class=\"anchor\" href=\"#7-表单处理和ref\">#</a> 7、表单处理和 Ref</h2>\n<h2 id=\"8-网络请求和封装\"><a class=\"anchor\" href=\"#8-网络请求和封装\">#</a> 8、网络请求和封装</h2>\n<h2 id=\"9-react动画处理\"><a class=\"anchor\" href=\"#9-react动画处理\">#</a> 9、React 动画处理</h2>\n<h2 id=\"10-react其它补充\"><a class=\"anchor\" href=\"#10-react其它补充\">#</a> 10、React 其它补充</h2>\n<h1 id=\"二-redux状态管理\"><a class=\"anchor\" href=\"#二-redux状态管理\">#</a> 二、Redux 状态管理</h1>\n<h2 id=\"1-邂逅redux\"><a class=\"anchor\" href=\"#1-邂逅redux\">#</a> 1、邂逅 redux</h2>\n<h2 id=\"2-redux-devtools\"><a class=\"anchor\" href=\"#2-redux-devtools\">#</a> 2、Redux DevTools</h2>\n<h2 id=\"3-redux基本使用\"><a class=\"anchor\" href=\"#3-redux基本使用\">#</a> 3、Redux 基本使用</h2>\n<h2 id=\"4-react-redux使用\"><a class=\"anchor\" href=\"#4-react-redux使用\">#</a> 4、React-Redux 使用</h2>\n<h2 id=\"5-redux模块拆分\"><a class=\"anchor\" href=\"#5-redux模块拆分\">#</a> 5、Redux 模块拆分</h2>\n<h2 id=\"6-redux-middleware\"><a class=\"anchor\" href=\"#6-redux-middleware\">#</a> 6、Redux middleware</h2>\n<h2 id=\"7-redux其它补充\"><a class=\"anchor\" href=\"#7-redux其它补充\">#</a> 7、Redux 其它补充</h2>\n<h1 id=\"三-reactrouter6\"><a class=\"anchor\" href=\"#三-reactrouter6\">#</a> 三、ReactRouter6</h1>\n<h2 id=\"1-认识react-router6\"><a class=\"anchor\" href=\"#1-认识react-router6\">#</a> 1、认识 react-router6</h2>\n<h2 id=\"2-react-router基本使用\"><a class=\"anchor\" href=\"#2-react-router基本使用\">#</a> 2、react-router 基本使用</h2>\n<h2 id=\"3-react-router进阶\"><a class=\"anchor\" href=\"#3-react-router进阶\">#</a> 3、react-router 进阶</h2>\n<h2 id=\"4-react-router其它补充\"><a class=\"anchor\" href=\"#4-react-router其它补充\">#</a> 4、react-router 其它补充</h2>\n<h2 id=\"5-其他知识点补充\"><a class=\"anchor\" href=\"#5-其他知识点补充\">#</a> 5、其他知识点补充</h2>\n<h1 id=\"四-react-hooks\"><a class=\"anchor\" href=\"#四-react-hooks\">#</a> 四、React Hooks</h1>\n<h2 id=\"1-react-hooks介绍\"><a class=\"anchor\" href=\"#1-react-hooks介绍\">#</a> 1、React Hooks 介绍</h2>\n<h2 id=\"2-react-hooks基本使用\"><a class=\"anchor\" href=\"#2-react-hooks基本使用\">#</a> 2、React Hooks 基本使用</h2>\n<h2 id=\"3-react-hooks进阶使用\"><a class=\"anchor\" href=\"#3-react-hooks进阶使用\">#</a> 3、React Hooks 进阶使用</h2>\n<h2 id=\"4-自定义react-hooks\"><a class=\"anchor\" href=\"#4-自定义react-hooks\">#</a> 4、自定义 React Hooks</h2>\n<h2 id=\"5-redux-hooks\"><a class=\"anchor\" href=\"#5-redux-hooks\">#</a> 5、Redux Hooks</h2>\n<h2 id=\"6-router-hooks\"><a class=\"anchor\" href=\"#6-router-hooks\">#</a> 6、Router Hooks</h2>\n<h1 id=\"五-实战\"><a class=\"anchor\" href=\"#五-实战\">#</a> 五、实战</h1>\n<h1 id=\"六-react项目自动化部署\"><a class=\"anchor\" href=\"#六-react项目自动化部署\">#</a> 六、React 项目自动化部署</h1>\n",
            "tags": [
                "React"
            ]
        },
        {
            "id": "https://eucli.top/2023/11/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%89%A9%E5%B1%95/",
            "url": "https://eucli.top/2023/11/06/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E6%89%A9%E5%B1%95/",
            "title": "前后端开发扩展",
            "date_published": "2023-11-06T13:45:48.000Z",
            "content_html": "<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/A81I0%7BICYL1%60CC%7D%5DCWYUCPR.png\" alt=\"\" /></p>\n",
            "tags": []
        },
        {
            "id": "https://eucli.top/2023/11/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%EF%BC%9AVite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "url": "https://eucli.top/2023/11/06/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%EF%BC%9AVite%20+%20Vue3%20+%20Typescript%20+%20Pinia%20+%20Vueuse%E9%A1%B9%E7%9B%AE/",
            "title": "快速搭建：Vite + Vue3 + Typescript + Pinia + Vueuse项目",
            "date_published": "2023-11-06T13:45:48.000Z",
            "content_html": "<h1 id=\"vite-vue3-typescript-pinia-vueuse\"><a class=\"anchor\" href=\"#vite-vue3-typescript-pinia-vueuse\">#</a> Vite + Vue3 + Typescript + Pinia + Vueuse</h1>\n<blockquote>\n<h2 id=\"一个大厂企业级前端项目\"><a class=\"anchor\" href=\"#一个大厂企业级前端项目\">#</a> 一个大厂企业级前端项目</h2>\n</blockquote>\n<h1 id=\"通过这篇文章你可以学到\"><a class=\"anchor\" href=\"#通过这篇文章你可以学到\">#</a> 通过这篇文章你可以学到</h1>\n<ul>\n<li>如何使用使用 Vite 搭建项目</li>\n<li>如何在 Vite 中集成  <code>typescript</code></li>\n<li>如何在 Vite 中集成  <code>vue-router4</code>  和  <code>pinia</code></li>\n<li>如何使用 vue3 的伴侣  <code>vueuse</code></li>\n<li>如何在项目中集成  <code>eslint</code>  和  <code>prettier</code>  保证代码质量</li>\n<li>如何规范化  <code>git</code>  提交信息</li>\n<li>如何为团队开发 <code>专属的项目模板</code></li>\n</ul>\n<h1 id=\"环境依赖版本\"><a class=\"anchor\" href=\"#环境依赖版本\">#</a> 环境依赖版本</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2Rl\">node</span>：v14.15.4</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZpdGVqcy92aXRl\">vite</span>：^2.8.0</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZQ==\">vue</span>：^3.2.25</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0\">typescript</span>：^4.5.4</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Bpbmlh\">pinia</span>：^2.0.12</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3JvdXRlcg==\">vue-router</span>：^4.0.14</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZXVzZS92dWV1c2U=\">vueuse</span>：^8.2.0</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQ=\">eslint</span>：^8.12.0</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ByZXR0aWVyL3ByZXR0aWVy\">prettier</span>：^2.6.1</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbW1pdGl6ZW4vY3otY2xp\">commitizen</span>：^4.2.4</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGljb2RlL2h1c2t5\">husky</span>：^7.0.4</li>\n</ul>\n<p><strong>长话短说，直接开干～</strong></p>\n<h1 id=\"1-初始化项目\"><a class=\"anchor\" href=\"#1-初始化项目\">#</a> 1. 初始化项目</h1>\n<h2 id=\"按步骤提示初始化\"><a class=\"anchor\" href=\"#按步骤提示初始化\">#</a> 按步骤提示初始化：</h2>\n<ol>\n<li>使用 vite-cli 命令</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># pnpm</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> create vite</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># yarn</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">yarn</span> create vite</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># npm</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">npm</span> init vite@latest</pre></td></tr></table></figure><ol start=\"2\">\n<li>输入项目名：</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>? Project name:  vite-vue3-ts-pinia</pre></td></tr></table></figure><ol start=\"3\">\n<li>选择一个框架（vue）</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>? Select a framework: » - Use arrow-keys. Return to submit.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     vanilla // 原生js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">></span>   vue     // 默认就是 vue3</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     react   // react</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     preact  // 轻量化react框架</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     lit     // 轻量级web组件</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     svelte  // svelte框架</pre></td></tr></table></figure><ol start=\"4\">\n<li>使用 typescript</li>\n</ol>\n<pre><code>? Select a variant: › - Use arrow-keys. Return to submit.\n     vue\n ❯   vue-ts\n</code></pre>\n<ol start=\"5\">\n<li>启动项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> vite-vue3-ts-pinia <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> run dev</pre></td></tr></table></figure><h2 id=\"快速初始化建议使用\"><a class=\"anchor\" href=\"#快速初始化建议使用\">#</a> 快速初始化（建议使用）：</h2>\n<pre><code># pnpm\npnpm create vite project-name -- --template vue-ts\n\n# yarn\nyarn create vite project-name --template vue-ts\n\n# npm 6.x\nnpm init vite@latest project-name --template vue-ts\n \n# npm 7+, 需要额外的双横线：\nnpm init vite@latest project-name -- --template vue-ts\n</code></pre>\n<h2 id=\"集成配置\"><a class=\"anchor\" href=\"#集成配置\">#</a> 集成配置</h2>\n<ol>\n<li>为保证 node 的使用</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i @types/node --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>修改  <code>tsconfig.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token string\">\"node_modules/@types\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 默认值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string\">\"src/types\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">\"useDefineForClassFields\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">\"resolveJsonModule\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"esnext\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token property\">\"@\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token property\">\"include\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/**/*.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.d.ts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.tsx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/**/*.vue\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// https://vitejs.dev/config/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置别名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token string-property property\">\"@\"</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  server<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    port<span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 启动端口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    hmr<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      host<span class=\"token operator\">:</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      port<span class=\"token operator\">:</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 设置 https 代理</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token string-property property\">\"/api\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        target<span class=\"token operator\">:</span> <span class=\"token string\">\"your https address\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function-variable function\">rewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\/api</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"2-代码质量风格的统一\"><a class=\"anchor\" href=\"#2-代码质量风格的统一\">#</a> 2. 代码质量风格的统一</h1>\n<h2 id=\"集成-eslint\"><a class=\"anchor\" href=\"#集成-eslint\">#</a> 集成  <code>eslint</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i eslint eslint-plugin-vue --save-dev</pre></td></tr></table></figure><p>由于 ESLint 默认使用  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc3ByZWU=\">Espree</span>  进行语法解析，无法识别 TypeScript 的一些语法，故我们需要安装  <a href=\"https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/parser\"> <code>@typescript-eslint/parser</code> </a> 替代掉默认的解析器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> @typescript-eslint/parser --save-dev</pre></td></tr></table></figure><p>安装对应的插件  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGVzY3JpcHQtZXNsaW50L3R5cGVzY3JpcHQtZXNsaW50L3RyZWUvbWFzdGVyL3BhY2thZ2VzL2VzbGludC1wbHVnaW4=\">@typescript-eslint/eslint-plugin</span>  它作为 eslint 默认规则的补充，提供了一些额外的适用于 ts 语法的规则。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> @typescript-eslint/eslint-plugin --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建配置文件：  <code>.eslintrc.js</code>   或   <code>.eslintrc.json</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-eslint-parser\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">parserOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">parser</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@typescript-eslint/parser\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">ecmaVersion</span><span class=\"token operator\">:</span> <span class=\"token number\">2020</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">sourceType</span><span class=\"token operator\">:</span> <span class=\"token string\">\"module\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">ecmaFeatures</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">jsx</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"plugin:vue/vue3-recommended\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// override/add rules settings here, such as:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>创建忽略文件： <code>.eslintignore</code></li>\n</ol>\n<pre><code>node_modules/\ndist/\nindex.html\n</code></pre>\n<ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"eslint:comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"使用 ESLint 检查并自动修复 src 目录下所有扩展名为 .js 和 .vue 的文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint --ext .js,.vue --ignore-path .gitignore --fix src\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"集成-prettier\"><a class=\"anchor\" href=\"#集成-prettier\">#</a> 集成  <code>prettier</code></h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i prettier eslint-config-prettier eslint-plugin-prettier --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>创建配置文件：  <code>prettier.config.js</code>  或  <code>.prettierrc.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 一行最多 80 字符</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">printWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 使用 4 个空格缩进</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">tabWidth</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 不使用 tab 缩进，而使用空格</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">useTabs</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 行尾需要有分号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">semi</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 使用单引号代替双引号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">singleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 对象的 key 仅在必要时用引号</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token literal-property property\">quoteProps</span><span class=\"token operator\">:</span> <span class=\"token string\">\"as-needed\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//jsx 不使用单引号，而使用双引号</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token literal-property property\">jsxSingleQuote</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 末尾使用逗号</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token literal-property property\">trailingComma</span><span class=\"token operator\">:</span> <span class=\"token string\">\"all\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 大括号内的首尾需要空格 &#123;foo: bar&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token literal-property property\">bracketSpacing</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">//jsx 标签的反尖括号需要换行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token literal-property property\">jsxBracketSameLine</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 箭头函数，只有一个参数的时候，也需要括号</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token literal-property property\">arrowParens</span><span class=\"token operator\">:</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token comment\">// 每个文件格式化的范围是文件的全部内容</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token literal-property property\">rangeStart</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token literal-property property\">rangeEnd</span><span class=\"token operator\">:</span> <span class=\"token number\">Infinity</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">// 不需要写文件开头的 @prettier</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token literal-property property\">requirePragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 不需要自动在文件开头插入 @prettier</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token literal-property property\">insertPragma</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 使用默认的折行标准</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token literal-property property\">proseWrap</span><span class=\"token operator\">:</span> <span class=\"token string\">\"preserve\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 根据显示样式决定 html 要不要折行</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token literal-property property\">htmlWhitespaceSensitivity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token comment\">// 换行符使用 lf</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token literal-property property\">endOfLine</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改  <code>.eslintrc.js</code>  配置</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">'plugin:vue/vue3-recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token string\">'plugin:@typescript-eslint/recommended'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">'prettier'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">'plugin:prettier/recommended'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>命令行式运行：修改  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        ...</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">\"prettier:comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"自动格式化当前目录下的所有文件\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"prettier --write\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ...</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"3-集成-pinia\"><a class=\"anchor\" href=\"#3-集成-pinia\">#</a> 3. 集成  <code>pinia</code></h1>\n<p><code>Pinia</code>  读音：['piːnə]，是 Vue 官方团队推荐代替 <code>Vuex</code>  的一款轻量级状态管理库。</p>\n<p><strong>Pinia 有如下特点：</strong></p>\n<ul>\n<li>完整的 typescript 的支持；</li>\n<li>足够轻量，压缩后的体积只有 1.6kb;</li>\n<li>去除 mutations，只有 state，getters，actions（这是我最喜欢的一个特点）；</li>\n<li>actions 支持同步和异步；</li>\n<li>没有模块嵌套，只有 store 的概念，store 之间可以自由使用，更好的代码分割；</li>\n<li>无需手动添加 store，store 一旦创建便会自动添加；</li>\n</ul>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h2>\n<pre><code> pnpm i pinia --save\n</code></pre>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<ol>\n<li>新建 src/store 目录并在其下面创建 index.ts，导出 store</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> store<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">\"./store\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 vue 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 挂载 pinia</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 挂载实例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>定义 State：</strong> 在 src/store 下面创建一个 user.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  id<span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//id 必填，且需要唯一</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><strong>获取 State：</strong> 在 src/components/usePinia.vue 中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span> setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useUserStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/user'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">const</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><ol start=\"5\">\n<li><strong>修改 State：</strong></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 直接修改 state （不建议）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> userStore<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'李四'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 2. 通过 actions 去修改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span> setup<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useUserStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/user'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">const</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> userStore<span class=\"token punctuation\">.</span><span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><blockquote>\n<p>更详细上手指南：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDQ5MTk2OTY3NzcwOTgwMzg5\">链接</span> 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waW5pYS52dWVqcy5vcmcvaW50cm9kdWN0aW9uLmh0bWw=\">链接</span></p>\n</blockquote>\n<h1 id=\"4-集成-vue-router4\"><a class=\"anchor\" href=\"#4-集成-vue-router4\">#</a> 4. 集成  <code>vue-router4</code></h1>\n<h2 id=\"安装-2\"><a class=\"anchor\" href=\"#安装-2\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i vue-router <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><h2 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用</h2>\n<ol>\n<li>新建 src/router 目录并在其下面创建 index.ts，导出 router</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHistory<span class=\"token punctuation\">,</span> RouteRecordRaw <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      requireAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/pages/login.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Index\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      keepAlive<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      requireAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/pages/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在 main.ts 中引入并使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 vue 实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 挂载实例</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改 App.vue</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token operator\">&lt;</span>RouterView <span class=\"token operator\">/</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"5-集成-vueuse\"><a class=\"anchor\" href=\"#5-集成-vueuse\">#</a> 5. 集成  <code>vueuse</code></h1>\n<p><code>VueUse</code>  是一个基于   <code>Composition API</code>  的实用函数集合。</p>\n<h2 id=\"安装-3\"><a class=\"anchor\" href=\"#安装-3\">#</a> 安装</h2>\n<pre><code> pnpm i @vueuse/core\n</code></pre>\n<h2 id=\"使用-3\"><a class=\"anchor\" href=\"#使用-3\">#</a> 使用</h2>\n<ol>\n<li>创建一个新的 src/page/vueUse.vue 页面来做一个简单的 demo</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span> 测试 vueUse 的鼠标坐标 <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>Mouse<span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span> x <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">2</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useMouse <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@vueuse/core'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         name<span class=\"token operator\">:</span> <span class=\"token string\">'VueUse'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>           <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>           <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             x<span class=\"token punctuation\">,</span> y</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>           <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>useMouse 只是 vueuse 的一个最基本的函数库，还有许多，总会有一个适合你；</p>\n<p>更多函数官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV1c2Uub3JnLw==\">链接</span></p>\n<h1 id=\"6-css-的集成\"><a class=\"anchor\" href=\"#6-css-的集成\">#</a> 6. CSS 的集成</h1>\n<h2 id=\"方案一原生-css-variable-新特性\"><a class=\"anchor\" href=\"#方案一原生-css-variable-新特性\">#</a> 方案一：原生 css variable 新特性：</h2>\n<p>原生支持，不需要第三方插件，具体使用文档可 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQ1NTL3Zhcg==\">查看</span></p>\n<ol>\n<li>新建文件 src/styles/index.css</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">:root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   --main-bg-color<span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token selector\">​</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   background-color<span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--main-bg-color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注：还可以增加 PostCSS 配置，(任何受  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvcG9zdGNzcy1sb2FkLWNvbmZpZw==\">postcss-load-config</span> 支持的格式，例如   <code>postcss.config.js</code>  )，它将会自动应用于所有已导入的 CSS。</p>\n<h2 id=\"方案二scss-或-less\"><a class=\"anchor\" href=\"#方案二scss-或-less\">#</a> 方案二：scss 或 less：</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># .scss and .sass</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> sass</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\"># .less</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> <span class=\"token function\">less</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用在 .vue 文件模板中</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// .scss</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>欢迎使用 scss<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token operator\">&lt;</span>style lang<span class=\"token operator\">=</span><span class=\"token string\">\"scss\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">.</span>root <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// .less</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> <span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"root\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>         <span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>欢迎使用 less<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token operator\">&lt;</span>style lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">.</span>root <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"7-集成-axios\"><a class=\"anchor\" href=\"#7-集成-axios\">#</a> 7. 集成  <code>axios</code></h1>\n<p><code>axios</code>  是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>\n<h2 id=\"安装-4\"><a class=\"anchor\" href=\"#安装-4\">#</a> 安装</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i axios</pre></td></tr></table></figure><h2 id=\"使用-4\"><a class=\"anchor\" href=\"#使用-4\">#</a> 使用：</h2>\n<ol>\n<li>新建 src/utils/axios.ts</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> AxiosResponse<span class=\"token punctuation\">,</span> AxiosRequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> service <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Request interceptors</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>service<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Response interceptors</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>service<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>response<span class=\"token operator\">:</span> AxiosResponse<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> service<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在页面中使用即可</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/axios'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestRes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    url<span class=\"token operator\">:</span> <span class=\"token string\">'/api/xxx'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"封装请求参数和响应数据的所有-api-可选项\"><a class=\"anchor\" href=\"#封装请求参数和响应数据的所有-api-可选项\">#</a> 封装请求参数和响应数据的所有 api (可选项)</h2>\n<ol>\n<li>新建  <code>src/api/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> login <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module/login\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> index <span class=\"token keyword\">from</span> <span class=\"token string\">\"./module/index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> login<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>新建  <code>src/api/module/login.ts</code>  和  <code>src/api/module/index.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 登录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IResponseType<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  code<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  status<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILogin</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  expires<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>username<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> password<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>IResponseType<span class=\"token operator\">&lt;</span>ILogin<span class=\"token operator\">>></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/api/auth/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      username<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      password<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>由于使用了 typescript，所以需新增  <code>src/types/shims-axios.d.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> AxiosRequestConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 自定义扩展 axios 模块</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @author Maybe</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"axios\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AxiosInstance</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">request</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>config<span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">delete</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">head</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">put</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token generic-function\"><span class=\"token function\">patch</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>url<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> config<span class=\"token operator\">?</span><span class=\"token operator\">:</span> AxiosRequestConfig<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在  <code>src/pages/request.vue</code>  页面中使用</li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">import</span> <span class=\"token constant\">API</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/api'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">requestRes</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zhangsan'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"8-css-的-ui-样式库\"><a class=\"anchor\" href=\"#8-css-的-ui-样式库\">#</a> 8. css 的 UI 样式库</h1>\n<blockquote>\n<p>可选很多，根据自己项目的需求去进行选择即可</p>\n</blockquote>\n<p><strong>注意：UI 库一般需要按需引入（下面以  <code>element-plus</code>  为例）</strong></p>\n<ol>\n<li>安装  <code>vite-plugin-style-import</code></li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i vite-plugin-style-import --save-dev</pre></td></tr></table></figure><ol start=\"2\">\n<li>修改  <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> styleImport <span class=\"token keyword\">from</span> <span class=\"token string\">'vite-plugin-style-import'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">styleImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            libs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    libraryName<span class=\"token operator\">:</span> <span class=\"token string\">'element-plus'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    esModule<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token function-variable function\">resolveStyle</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">element-plus/lib/theme-chalk/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.css</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    ensureStyleFile<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 忽略文件是否存在，导入不存在的 CSS 文件时防止错误。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"9-使用-commitizen-规范-git-提交\"><a class=\"anchor\" href=\"#9-使用-commitizen-规范-git-提交\">#</a> 9. 使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbW1pdGl6ZW4vY3otY2xp\">commitizen</span> 规范 git 提交</h1>\n<p>为了使团队多人协作更加的规范，所以需要每次在 git 提交的时候，做一次硬性规范提交，规范 git 的提交信息</p>\n<h2 id=\"安装-commitizen-交互式提交-自定义提示文案-commit-规范\"><a class=\"anchor\" href=\"#安装-commitizen-交互式提交-自定义提示文案-commit-规范\">#</a> 安装  <code>commitizen</code>  (交互式提交 + 自定义提示文案 + Commit 规范)</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> commitizen cz-conventional-changelog @commitlint/config-conventional @commitlint/cli commitlint-config-cz cz-customizable</pre></td></tr></table></figure><ol start=\"2\">\n<li>配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"commit:comment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"引导设置规范化的提交信息\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"commit\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"git-cz\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">\"config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"commitizen\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node_modules/cz-customizable\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>新增配置  <code>commitlint.config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">extends</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@commitlint/config-conventional\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cz\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string-property property\">\"type-enum\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">\"feature\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 新功能（feature）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">\"bug\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 此项特别针对 bug 号，用于向测试反馈 bug 列表的 bug 修改情况</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">\"fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 修补 bug</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 更新 ui</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">\"docs\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 文档（documentation）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 格式（不影响代码运行的变动）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token string\">\"perf\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 性能优化</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token string\">\"release\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 发布</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 部署</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token string\">\"refactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 重构（即不是新增功能，也不是修改 bug 的代码变动）</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 增加测试</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token string\">\"chore\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 构建过程或辅助工具的变动</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token string\">\"revert\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//feat (pencil): add ‘graphiteWidth’ option (撤销之前的 commit)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token string\">\"merge\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 合并分支， 例如： merge（前端页面）： feature-xxxx 修改线程地址</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 打包</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// &lt;type> 格式 小写</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token string-property property\">\"type-case\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lower-case\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// &lt;type> 不能为空</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token string-property property\">\"type-empty\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// &lt;scope> 范围不能为空</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token string-property property\">\"scope-empty\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// &lt;scope> 范围格式</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token string-property property\">\"scope-case\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">// &lt;subject> 主要 message 不能为空</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token string-property property\">\"subject-empty\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// &lt;subject> 以什么为结束标志，禁用</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token string-property property\">\"subject-full-stop\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// &lt;subject> 格式，禁用</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token string-property property\">\"subject-case\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"never\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// &lt;body> 以空行开头</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token string-property property\">\"body-leading-blank\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token string-property property\">\"header-max-length\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"always\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">72</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>自定义提示则添加  <code>.cz-config.js</code></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">types</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"feature\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"feature:  增加新功能\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bug\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"bug:      测试反馈bug列表中的bug号\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fix\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"fix:      修复bug\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ui\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ui:       更新UI\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docs\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"docs:     文档变更\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"style\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"style:    代码格式(不影响代码运行的变动)\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"perf\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"perf:     性能优化\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"refactor\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"refactor: 重构(既不是增加feature，也不是修复bug)\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"release\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"release:  发布\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"deploy\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"deploy:   部署\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"test:     增加测试\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chore\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chore:    构建过程或辅助工具的变动(更改配置文件)\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"revert\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"revert:   回退\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build:    打包\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// override the messages, defaults are as follows</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token literal-property property\">messages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请选择提交类型:\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token literal-property property\">customScope</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请输入您修改的范围(可选):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">subject</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请简要描述提交 message (必填):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">body</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请输入详细描述(可选，待优化去除，跳过即可):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token literal-property property\">footer</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请输入要关闭的issue(待优化去除，跳过即可):\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token literal-property property\">confirmCommit</span><span class=\"token operator\">:</span> <span class=\"token string\">\"确认使用以上信息提交？(y/n/e/h)\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token literal-property property\">allowCustomScopes</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token literal-property property\">skipQuestions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"body\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"footer\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token literal-property property\">subjectLimit</span><span class=\"token operator\">:</span> <span class=\"token number\">72</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>交互界面测试</li>\n</ol>\n<p><img data-src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d2be96b13d3c427e919b11e5bc5404e4~tplv-k3u1fbpfcp-watermark.image?\" alt=\"carbon.png\" /></p>\n<ul>\n<li>到目前只是规范了 git 的提交信息，我们对提交前代码的检查还没有做到位，例如 ESLint、Prettier，毕竟谁都会有疏忽的时候，</li>\n<li>那么现在我们的 husky 就闪亮登场了</li>\n</ul>\n<h2 id=\"安装-husky\"><a class=\"anchor\" href=\"#安装-husky\">#</a> 安装 husky</h2>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 安装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pnpm</span> i husky lint-staged <span class=\"token parameter variable\">-D</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 生成 .husky 的文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>npx husky <span class=\"token function\">install</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 添加 hooks，会在 .husky 目录下生成一个 pre-commit 脚本文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>npx husky <span class=\"token function\">add</span> .husky/pre-commit <span class=\"token string\">\"npx --no-install lint-staged\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 4. 添加 commit-msg</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>npx husky <span class=\"token function\">add</span> .husky/commit-msg <span class=\"token string\">'npx --no-install commitlint --edit \"$1\"'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 5. 使用 `git commit -m\"message\"` 就会看到 hook 生效了。</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>添加配置  <code>package.json</code></li>\n</ol>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"lint-staged\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token property\">\"*.&#123;js,ts&#125;\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token string\">\"npm run eslint\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token string\">\"npm run prettier\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  ...</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"提交日志可选\"><a class=\"anchor\" href=\"#提交日志可选\">#</a> 提交日志（可选）</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvc3RhbmRhcmQtdmVyc2lvbg==\">standard-version</span> 或者 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvbnZlbnRpb25hbC1jaGFuZ2Vsb2cvY29udmVudGlvbmFsLWNoYW5nZWxvZw==\">conventional-changelog</span></li>\n</ul>\n",
            "tags": [
                "实战",
                "快速搭建"
            ]
        },
        {
            "id": "https://eucli.top/2023/11/05/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://eucli.top/2023/11/05/JS%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "JS基础",
            "date_published": "2023-11-05T13:45:48.000Z",
            "content_html": "<h1 id=\"js基础\"><a class=\"anchor\" href=\"#js基础\">#</a> JS 基础</h1>\n<h2 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h2>\n<h3 id=\"基本类型有7种-undefined-null-string-number-boolean-bigint-symbol\"><a class=\"anchor\" href=\"#基本类型有7种-undefined-null-string-number-boolean-bigint-symbol\">#</a> 基本类型有 7 种：  <code>undefined</code> 、 <code>null</code> 、 <code>string</code> 、 <code>number</code> 、 <code>boolean</code> 、 <code>bigint</code> 、 <code>symbol</code></h3>\n<h3 id=\"引用类型有-object-array\"><a class=\"anchor\" href=\"#引用类型有-object-array\">#</a> 引用类型有：  <code>Object</code> 、 <code>Array</code></h3>\n<h2 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> For 循环</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>of<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>数组原型链上的方法可能经常会拿出来单独考，如果平时不常使用就很容易卡壳，可以从数组去重这个切入点来巩固 for 循环。</p>\n</blockquote>\n<h3 id=\"数组方法\"><a class=\"anchor\" href=\"#数组方法\">#</a> 数组方法：</h3>\n<blockquote>\n<p>数组常考，实际开发中也常用，需要尽量全面地了解。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>push：末尾添加</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>unshift：首部添加</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pop：末尾删除</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>shift：首部删除</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>concat：数组合并</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>join：数组元素通过连接符变成字符串</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>reverse：数组反转</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sort：数组排序</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flat：数组拍平</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">slice</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>：切割，不改变原数组，返回新数组</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">splice</span> <span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> newItem<span class=\"token punctuation\">)</span>：切割，改变数组，从指定位置开始删除，同时可插入新元素</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>indexOf：查找元素下标</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>map、foreach、filter <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<blockquote>\n<p>简单来说就是函数中嵌套函数，这个内部函数暴露给了外部调用。作用是可以访问局部变量，缺点是容易发生内存泄漏（即变量不会被自动回收）。</p>\n</blockquote>\n<ol>\n<li>可以用来封装私有变量，编写 JS 库 / 插件可能会用到</li>\n<li>用来实现节流这类函数</li>\n<li>可以作为缓存数据的一种策略</li>\n</ol>\n<h2 id=\"原型链\"><a class=\"anchor\" href=\"#原型链\">#</a> 原型链</h2>\n<p>每个函数都有  <code>prototype</code>  属性，每个函数实例对象都有一个  <code>__proto__</code>  属性， <code>__proto__</code>  指向了  <code>prototype</code> ，当访问实例对象的属性或方法，会先从自身构造函数中查找，如果找不到就通过  <code>__proto__</code>  去原型中查找。</p>\n<h3 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链：</h3>\n<p>在当前作用域下找不到某个变量时就去父级作用域查找，依次向上一级一层层查找变量的过程就叫做作用域链。</p>\n<h2 id=\"call-apply-bind\"><a class=\"anchor\" href=\"#call-apply-bind\">#</a> call、apply、bind</h2>\n<ul>\n<li>共同点：都可以改变函数的作用域（改变 this 指向）<br />\n <code>call</code>  /  <code>apply</code>  ：会立即执行函数，两者基本区别在于传参不同<br />\n <code>bind</code> ：不会立即执行</li>\n</ul>\n<h2 id=\"this的指向\"><a class=\"anchor\" href=\"#this的指向\">#</a> this 的指向</h2>\n<h2 id=\"new关键字\"><a class=\"anchor\" href=\"#new关键字\">#</a> New 关键字</h2>\n<h2 id=\"如何理解-foreach\"><a class=\"anchor\" href=\"#如何理解-foreach\">#</a> 如何理解 foreach</h2>\n<h2 id=\"关于深浅拷贝\"><a class=\"anchor\" href=\"#关于深浅拷贝\">#</a> 关于深浅拷贝</h2>\n<h3 id=\"浅拷贝\"><a class=\"anchor\" href=\"#浅拷贝\">#</a> 浅拷贝：</h3>\n<h3 id=\"深拷贝\"><a class=\"anchor\" href=\"#深拷贝\">#</a> 深拷贝：</h3>\n<ol>\n<li><code>JSON.parse(JSON.Stringify())</code> ，优点是简单，缺点是<strong>不能拷贝 Function、undefined</strong> 会丢失，时间对象会变成字符串。</li>\n<li>深度递归遍历</li>\n<li><code>Object.assign</code>  （一层是深拷贝，嵌套二层以上为浅拷贝）</li>\n</ol>\n<h1 id=\"js进阶\"><a class=\"anchor\" href=\"#js进阶\">#</a> JS 进阶</h1>\n<h2 id=\"es6-新语法特性\"><a class=\"anchor\" href=\"#es6-新语法特性\">#</a> ES6 新语法 / 特性</h2>\n<ol>\n<li>模板字符串</li>\n<li><code>let</code> 、 <code>const</code>  关键字</li>\n<li>箭头函数（没有自己的  <code>this</code> ，不能使用  <code>new</code>  命令，不能调用  <code>call</code> ）</li>\n<li><code>class</code>  类</li>\n<li><code>Promise</code> 、 <code>async</code> / <code>await</code> （es7 之后才支持）</li>\n<li><code>export</code> 、 <code>import</code>  模块化（<strong>ES Module</strong>）</li>\n<li>对象扩展（很常用，键值对同名简写， <code>Object.assign</code>  拷贝或合并对象）</li>\n<li>展开运算符（很常用， <code>...</code>  用于组装数组 / 对象）</li>\n<li>解构赋值（可简化提取数组 / 对象中的值，变量交换不用中间变量）</li>\n<li><code>Map</code> （性能更好的对象）</li>\n<li><code>Set</code> （元素值是唯一的，常用于数组去重）</li>\n</ol>\n<h3 id=\"map和普通对象的区别\"><a class=\"anchor\" href=\"#map和普通对象的区别\">#</a> Map 和普通对象的区别：</h3>\n<ul>\n<li>键值类型；</li>\n<li><code>Map</code>  有记录顺序，对象是无序的；</li>\n<li><code>Map</code>  采用红黑树来存储键值，储存大量数据时性能更优，对象需要维护键值对映射关系，会受到内存上的一些限制。</li>\n</ul>\n<blockquote>\n<p>由于这些差异，通常在需要存储大量数据且需要按照特定规则查找和排序时，使用 Map 对象更为合适；而在存储少量数据，并且知道属性名的情况下，使用对象更加方便。</p>\n</blockquote>\n<h4 id=\"特殊类型-weakmap\"><a class=\"anchor\" href=\"#特殊类型-weakmap\">#</a> 特殊类型 WeakMap：</h4>\n<ul>\n<li><code>Map</code>  对象的键可以是任何类型，但  <code>WeakMap</code>  对象中的键只能是引用对象（如果对象不再被引用，则会自动 GC）</li>\n<li><code>WeakMap</code>  对象是不可枚举的，无法获取集合的大小</li>\n</ul>\n<blockquote>\n<p><code>WeakMap</code>  由于无法遍历和清空，使用场景比较有限，通常可以用于避免循环引用造成内存泄漏</p>\n</blockquote>\n<h2 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h2>\n<p>JS 实现继承写法如下，JAVA 直呼内行 (bushi</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"高阶函数\"><a class=\"anchor\" href=\"#高阶函数\">#</a> 高阶函数</h2>\n<p>高阶函数泛指那些操作其他函数的函数。简单来说，就是一个<strong>将函数作为 <code>参数</code> 或者 <code>返回值</code> 的函数</strong>。例如  <code>Array.prototype.map</code> 、 <code>Array.prototype.filter</code> 、 <code>Array.prototype.reduce</code>  这些都是 JavaScript 原生的高阶函数。</p>\n<ul>\n<li></li>\n</ul>\n",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "https://eucli.top/2023/11/05/%E5%BC%82%E6%AD%A5async%E3%80%81await/",
            "url": "https://eucli.top/2023/11/05/%E5%BC%82%E6%AD%A5async%E3%80%81await/",
            "title": "异步编程",
            "date_published": "2023-11-05T13:45:48.000Z",
            "content_html": "<h1 id=\"js异步编程\"><a class=\"anchor\" href=\"#js异步编程\">#</a> JS 异步编程</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FkdmFuY2VkLUZyb250ZW5kL0RhaWx5LUludGVydmlldy1RdWVzdGlvbi9pc3N1ZXMvNw==\">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/7</span><br />\n 讲的非常好</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L2ltYWdlLTIwMjMxMDI5MDk0MTMzNDY5LnBuZw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20231029094133469.png</span>&quot; alt=&quot;image-20231029094133469&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<h2 id=\"eventloop\"><a class=\"anchor\" href=\"#eventloop\">#</a> EventLoop</h2>\n<p>JavaScript 是单线程的，包含了同步任务与异步任务，同步任务直接在<strong>调用栈</strong> (主线程) 中执行，异步任务会放入<strong>任务队列</strong> (TaskQueue) 中，等待同步任务全部执行完毕再取出来，所以如果异步之中仍有异步任务，在调用栈中执行时会继续放入任务队列中，这就是 JS 的事件循环机制 (EventLoop)。</p>\n<h2 id=\"宏任务与微任务\"><a class=\"anchor\" href=\"#宏任务与微任务\">#</a> 宏任务与微任务</h2>\n<p>异步任务队列实际上分为两种，分别是宏任务队列与微任务队列，<strong>在当前循环中会优先执行微任务，当微任务队列被清空后才会执行宏任务队列。</strong></p>\n<p>微任务实际上是宏任务的其中一个步骤。微任务是 JS 级别的，宏任务是宿主级别的，是包含关系，不是先后关系。</p>\n<h3 id=\"微任务micro-task\"><a class=\"anchor\" href=\"#微任务micro-task\">#</a> 微任务（micro task）：</h3>\n<ul>\n<li>\n<p>promise <code>.then</code> / <code>.catch</code> / <code>.finally</code></p>\n</li>\n<li>\n<p><code>process.nextTick</code></p>\n</li>\n<li>\n<p><code>MutationObserver</code></p>\n</li>\n<li>\n<p><code>async/await</code> : 本质上还是基于 <code>Promise</code>  的一些封装，而 <code>Promise</code>  是属于微任务的一种。所以在使用 <code>await</code>  关键字与 <code>Promise.then</code>  效果类似。</p>\n<blockquote>\n<p><strong>async 函数在 await 之前的代码都是同步执行的，可以理解为 await 之前的代码属于 <code>new Promise</code>  时传入的代码，await 之后的所有代码都是在 <code>Promise.then</code>  中的回调</strong></p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"宏任务macro-task\"><a class=\"anchor\" href=\"#宏任务macro-task\">#</a> 宏任务（macro task）:</h3>\n<ul>\n<li>\n<p>script（整体代码）</p>\n</li>\n<li>\n<p>定时器系列： <code>setTimeout</code> 、 <code>setInterval</code> 、 <code>setImmediate</code></p>\n</li>\n<li>\n<p><code>I/O</code> ：这种比较耗性能的操作浏览器会交给单独的线程去办，得到结果后再通知回来</p>\n</li>\n<li>\n<p><code>requestAnimationFrame</code></p>\n</li>\n</ul>\n<blockquote>\n<p>tips:UI 渲染不是宏任务，而是和微任务平行的一个操作步骤</p>\n</blockquote>\n<h3 id=\"执行顺序\"><a class=\"anchor\" href=\"#执行顺序\">#</a> 执行顺序：</h3>\n<p><strong> <code>同步任务 &gt; 微任务 &gt; requestAnimationFrame &gt; DOM渲染 &gt; 宏任务</code> </strong></p>\n<p>构造函数是同步任务</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<ol>\n<li>先执行上下文栈的 <code>同步任务</code> ；</li>\n<li>看一下微任务队列有没有需要执行的微任务，按照队列 <code>先进先出</code> 的原则，** <code>一次执行完所有</code>  ** 微任务队列任务；</li>\n<li>执行宏任务队列，<strong> <code>一次执行一个</code> </strong>，每执行完一个都会<strong>检测微任务是否为空</strong>；</li>\n<li>不为空则先执行微任务</li>\n<li>为空再执行下一个宏任务；</li>\n</ol>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699173401134-2023-11-5.png\" alt=\"1699173401134-2023-11-5.png\" /></p>\n<p><img data-src=\"https://gitee.com/eucli312/img/raw/master/1699174167689-2023-11-5.png\" alt=\"1699174167689-2023-11-5.png\" /></p>\n<h3 id=\"mutationobserver是一个内建对象它观察-dom-元素并在检测到更改时触发回调\"><a class=\"anchor\" href=\"#mutationobserver是一个内建对象它观察-dom-元素并在检测到更改时触发回调\">#</a> MutationObserver：是一个内建对象，它观察 DOM 元素，并在检测到更改时触发回调</h3>\n<h3 id=\"requestanimationframe\"><a class=\"anchor\" href=\"#requestanimationframe\">#</a> RequestAnimationFrame</h3>\n<ul>\n<li>仅对浏览器生效，回调属于高优先级任务</li>\n<li>会将每一帧中所有 DOM 操作集中一次渲染（所以性能较好）</li>\n<li>回流重绘的时间会跟随刷新频率动态改变，不能主动控制（由于是帧操作，必须递归调用）</li>\n<li>因为是异步任务，在调用后实际还可以取消</li>\n<li>浏览器页面不是激活状态下（或离开标签页），会自动暂停执行</li>\n<li>根据以上特性该方法常用于处理帧动画的操作，性能优于 setInterval</li>\n</ul>\n<h3 id=\"requestidlecallback\"><a class=\"anchor\" href=\"#requestidlecallback\">#</a> RequestIdleCallback</h3>\n<p>该回调函数是低优先级的任务，仅在浏览器空闲时期被调用（目前仍处于实验功能阶段，在微前端中常有应用）</p>\n<h3 id=\"callback\"><a class=\"anchor\" href=\"#callback\">#</a> Callback</h3>\n<p>容易造成回调地狱，不能  <code>try...catch</code>  捕获，不能  <code>return</code></p>\n<h3 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h3>\n<p>也会造成回调地狱，但优化了 callback 方式的回调地狱问题，而  <code>async</code> 、 <code>await</code> （ES7）才真正解决了异步回调的问题。</p>\n<h4 id=\"面试高频\"><a class=\"anchor\" href=\"#面试高频\">#</a> <strong>面试高频：</strong></h4>\n<ul>\n<li>\n<p><code>Promise.all</code> ：将一个包含 Promise 实例的数组传入，数组内所有 Promise 实例执行完毕时，该方法会返回结果数组。</p>\n</li>\n<li>\n<p><code>Promise.race</code> ：返回的是最快成功回调的一个结果。</p>\n</li>\n<li>\n<p>实现  <code>Promise.all</code>  的思路：返回一个 promise 对象，方法中设有变量 count、results，循环执行每个 promise，then 回调中 count++，当 count === promises.length 时 resolve (results)</p>\n</li>\n</ul>\n<p>b 站讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVdQNHkxODdUdS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT1mZjI0Nzc3MmE2MmVlOWMzYjJlZDI3ZmE1ZTRhOTFlMg==\">https://www.bilibili.com/video/BV1WP4y187Tu/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ff247772a62ee9c3b2ed27fa5e4a91e2</span></p>\n<h1 id=\"异步\"><a class=\"anchor\" href=\"#异步\">#</a> 异步</h1>\n<p>js 中异步有两种方式实现：</p>\n<ol>\n<li>回调函数，如 setTimeOut。但是会回调地狱</li>\n<li>Promise。“承诺”：承诺会在未来的某个时刻返回数据。链式调用，避免代码的层层嵌套</li>\n</ol>\n<h1 id=\"asyncawait-是什么\"><a class=\"anchor\" href=\"#asyncawait-是什么\">#</a> async/await 是什么</h1>\n<p>async/await 是 ES2017 (ES8) 提出的基于 Promise 的解决异步的最终方案，是一个语法糖。<br />\nasync 是 “异步” 的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p>\n<p>一个问题：await 只能出现在 async 函数中，那这个 async 函数应该怎么调用？如果需要通过 await 来调用一个 async 函数，那这个调用的外面必须得再包一个 async 函数，然后…… 进入死循环，永无出头之日……<br />\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，我们当然应该用原来的方式：then () 链来处理这个 Promise 对象</p>\n<h2 id=\"async\"><a class=\"anchor\" href=\"#async\">#</a> async</h2>\n<p>async 是一个加在函数前的修饰符，被 async 定义的函数会默认返回一个 Promise 对象 resolve 的值。因此对 async 函数可以直接 then，返回值就是 then 方法传入的函数。</p>\n<h2 id=\"await\"><a class=\"anchor\" href=\"#await\">#</a> await</h2>\n<p>await 也是一个修饰符，只能放在 async 定义的函数内。可以理解为<strong>等待</strong>。可以不再使用 then 直接使用 await</p>\n<ul>\n<li>\n<p>await 到底在等啥？<br />\n一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。<br />\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值 —— 这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。</p>\n</li>\n<li>\n<p>await 等到了要等的，然后呢？<br />\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p>\n</li>\n</ul>\n<ol>\n<li>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</li>\n<li>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n<blockquote>\n<p>看到上面的阻塞一词，心慌了吧…… 放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n</blockquote>\n</li>\n</ol>\n<p>——————————————————<br />\n 使用 async 和 await 可以让我们写出更清晰、更容易理解的异步代码，有了它们之后，我们几乎不再需要使用底层的 Promise 对象，包括调用它的 then (),catch () 函数等等</p>\n",
            "tags": [
                "异步"
            ]
        },
        {
            "id": "https://eucli.top/2023/11/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "url": "https://eucli.top/2023/11/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",
            "title": "计算机网络",
            "date_published": "2023-11-03T13:45:48.000Z",
            "content_html": "<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/1699013316123.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "计算机网络"
            ]
        },
        {
            "id": "https://eucli.top/2023/10/29/VueRouter/",
            "url": "https://eucli.top/2023/10/29/VueRouter/",
            "title": "VueRouter",
            "date_published": "2023-10-29T13:45:48.000Z",
            "content_html": "<h1 id=\"vue-router\"><a class=\"anchor\" href=\"#vue-router\">#</a> Vue Router</h1>\n<ul>\n<li>前言：<br />\n因为 vue 是单页应用，不会有那么多 html 让我们跳转，所有要使用路由做页面的跳转</li>\n</ul>\n<p>Vue 路由允许我们通过不同的 URL 访问不同的内容。通过 Vue 可以实现多视图的单页 Web 应用</p>\n<ul>\n<li>快速上手</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> vue-router@4</pre></td></tr></table></figure><ol start=\"2\">\n<li><code>src/router/index.ts</code> :</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入路由对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHistory<span class=\"token punctuation\">,</span> createWebHashHistory<span class=\"token punctuation\">,</span> createMemoryHistory<span class=\"token punctuation\">,</span> RouteRecordRaw <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//vue2 mode history vue3 createWebHistory</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//vue2 mode  hash  vue3  createWebHashHistory</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//vue2 mode abstact vue3  createMemoryHistory</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 路由数组的类型 RouteRecordRaw</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 定义一些路由</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 每个路由都需要映射到一个组件。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/a.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/register\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/b.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 导出 router</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 &lt;router-link&gt; 和 &lt; router-view&gt;：<br />\n请注意，我们没有使用常规的 a 标签，而是使用一个自定义组件 router-link 来创建链接。这使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码。我们将在后面看到如何从这些功能中获益。<br />\nrouter-view 将显示与 url 对应的组件。你可以把它放在任何地方，以适应你的布局。</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1&gt;小满最骚&lt;/h1&gt;\n    &lt;div&gt;\n      &lt;!--使用 router-link 组件进行导航 --&gt;\n      &lt;!--通过传递 `to` 来指定链接 --&gt;\n      &lt;!--`&lt;router-link&gt;` 将呈现一个带有正确 `href` 属性的 `&lt;a&gt;` 标签--&gt;\n      &lt;router-link tag=&quot;div&quot; to=&quot;/&quot;&gt;跳转a&lt;/router-link&gt;\n      &lt;router-link tag=&quot;div&quot; style=&quot;margin-left:200px&quot; to=&quot;/register&quot;&gt;跳转b&lt;/router-link&gt;\n    &lt;/div&gt;\n    &lt;hr /&gt;\n    &lt;!-- 路由出口 --&gt;\n    &lt;!-- 路由匹配到的组件将渲染在这里 --&gt;\n    &lt;router-view&gt;&lt;/router-view&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<ol start=\"4\">\n<li>最后在 main.ts 挂载</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createApp <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">createApp</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"编程式导航\"><a class=\"anchor\" href=\"#编程式导航\">#</a> 编程式导航</h2>\n<p>除了使用  <code>&lt;router-link&gt;</code>  创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现。<br />\n想要导航到不同的 URL，可以使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，会回到之前的 URL。<br />\n当你点击 <code>&lt;router-link&gt;</code>  时，内部会调用这个方法，所以点击  <code>&lt;router-link :to=&quot;...&quot;&gt; </code> (声明式) 相当于调用 <code>router.push(...)</code> (编程式).</p>\n<ol>\n<li>编程式导航，字符串模式</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/reg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>编程式导航，对象模式</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>编程式导航，命名式路由模式</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"命名路由\"><a class=\"anchor\" href=\"#命名路由\">#</a> 命名路由</h2>\n<p>除了 path 之外，你还可以为任何路由提供 name。这有以下优点：</p>\n<ol>\n<li>没有硬编码的 URL</li>\n<li>params 的自动编码 / 解码。</li>\n<li>防止你在 url 中出现打字错误。</li>\n<li>绕过路径排序（如显示一个）</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/login.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/reg.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>router-link 跳转方式需要改变 变为对象并且有对应 name:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>小满最骚<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">:to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;name:'Login'&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span>10px</span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">:to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;name:'Reg'&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Reg<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><h2 id=\"历史记录\"><a class=\"anchor\" href=\"#历史记录\">#</a> 历史记录</h2>\n<ul>\n<li>replace 的使用<br />\n采用 replace 进行页面的跳转会同样也会创建渲染新的 Vue 组件，但是在 history 中其不会重复保存记录，而是替换原有的 vue 组件；</li>\n</ul>\n<ol>\n<li>router-link 使用方法</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">replace</span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-link</span> <span class=\"token attr-name\">replace</span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span>10px</span><span class=\"token punctuation\">\"</span></span></span> <span class=\"token attr-name\">to</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/reg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Reg<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-link</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>编程式导航</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toPage('/')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>toPage('/reg')<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Reg<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>横跨历史<br />\n该方法采用一个整数作为参数，表示在历史堆栈中前进或后退多少步</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>next<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>前进<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>后退<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 前进 数量不限于 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">prev</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 后退</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"路由传参\"><a class=\"anchor\" href=\"#路由传参\">#</a> 路由传参</h2>\n<ul>\n<li>useRouter：传参</li>\n<li>useRoute：接收参数</li>\n</ul>\n<p>传递参数两种传参方式（query/params）</p>\n<ol>\n<li>query 传参（用 path）<br />\nquery 只能接收一个对象，这里的 item 一个就是对象<br />\n传参:</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">userRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toDetail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> item<span class=\"token punctuation\">,</span> <span class=\"token comment\">//query 只能接收一个对象，这里的 item 一个就是对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接收参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRoute <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>品牌：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>价格：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>ID：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>params 传参（用 name）<br />\nparams 存在于内存中，刷新会丢失<br />\n传参:</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>…………</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toDetail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> item<span class=\"token punctuation\">,</span> <span class=\"token comment\">//params 存在于内存中，刷新会丢失</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接收参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRoute <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>品牌：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>价格：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>ID：<span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>动态路由参数<br />\n很多时候，我们需要将给定匹配模式的路由映射到同一个组件。例如，我们可能有一个 User 组件，它应该对所有用户进行渲染，但用户 ID 不同。在 Vue Router 中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数<br />\n使用带有参数的路由时需要注意的是，当用户从  <code>/users/johnny </code> 导航到 <code>/users/jolyne</code>  时，相同的组件实例将被重复使用。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。不过，这也意味着组件的生命周期钩子不会被调用。</li>\n</ol>\n<p>路径参数 用冒号  <code>:</code>  表示。当一个路由被匹配时，它的 params 的值将在每个组件<br />\n需要先配置路由：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/login.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 动态路由参数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/reg/:id\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/reg.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>传参：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 路由的 path 要改成动态（/:id）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">toDetail</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 此时刷新参数不会丢失</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接收参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRoute <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./list.json\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>二者的区别</li>\n</ul>\n<ol>\n<li>\n<p>query 传参配置的是 path，而 params 传参配置的是 name，在 params 中配置 path 无效</p>\n</li>\n<li>\n<p>query 在路由配置不需要设置参数，而 params 必须设置</p>\n</li>\n<li>\n<p>query 传递的参数会显示在地址栏中</p>\n</li>\n<li>\n<p>params 传参刷新会无效，但是 query 会保存传递过来的值，刷新不变；</p>\n<p>路由配置</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> $router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> $route <span class=\"token operator\">=</span> <span class=\"token function\">useRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$router</code>  是路由器对象，是全局对象，可以传递参数。<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi>r</mi><mi mathvariant=\"normal\">.</mi><mi>p</mi><mi>u</mi><mi>s</mi><mi>h</mi><mo separator=\"true\">;</mo><mi mathvariant=\"normal\">‘</mi></mrow><annotation encoding=\"application/x-tex\">router.push;\n`</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">h</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">‘</span></span></span></span>route` 是路由对象，是局部对象，可以接收参数，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mi mathvariant=\"normal\">.</mi><mi>p</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">route.path,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mpunct\">,</span></span></span></span>route.params,$route.query</p>\n<h2 id=\"sensitive-与-strict-路由配置\"><a class=\"anchor\" href=\"#sensitive-与-strict-路由配置\">#</a> Sensitive 与 strict 路由配置</h2>\n<p>默认情况下，所有路由是不区分大小写的，并且能匹配带有或不带有尾部斜线的路由。例如，路由 <code>/users</code>  将匹配  <code>/users</code> 、 <code>/users/</code> 、甚至 <code> /Users/</code> 。可以通过 <code> strict</code>  和  <code>sensitive </code> 选项来修改:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 将匹配 /users/posva 而非：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//-/users/posva/ 当 strict: true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//-/Users/posva 当 sensitive: true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/users/:id'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sensitive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将匹配 /users, /Users, 以及 /users/42 而非 /users/ 或 /users/42/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/users/:id?'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">strict</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// applies to all routes</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"可选参数\"><a class=\"anchor\" href=\"#可选参数\">#</a> 可选参数</h2>\n<p>可以通过使用？修饰符 (0 个或 1 个) 将一个参数标记为可选：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 匹配 /users 和 /users/posva</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/users/:userId?\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"嵌套路由\"><a class=\"anchor\" href=\"#嵌套路由\">#</a> 嵌套路由</h2>\n<p>一些应用程序的 UI 由多层嵌套的组件组成。在这种情况下，URL 的片段通常对应于特定的嵌套组件结构，例如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/user\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/footer.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/login.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Reg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/reg.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>需要在路由中配置  <code>children</code> , 不写 <code>/</code></p>\n<h2 id=\"命名视图\"><a class=\"anchor\" href=\"#命名视图\">#</a> 命名视图</h2>\n<p>有时候想同时 (同级) 展示多个视图，而不是嵌套展示，例如创建一个布局，有  <code>sidebar </code> (侧导航) 和  <code>main </code> (主内容) 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果  <code>router-view </code> 没有设置名字，那么默认为 default。<br />\n命名视图的概念非常类似于 “具名插槽”，并且视图的默认名称也是 default。</p>\n<ul>\n<li>一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件。确保正确使用 components 配置 (带上 s)：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHistory<span class=\"token punctuation\">,</span> RouteRecordRaw <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 也可以直接用名字匹配 default: User, sidebar: Sidebar</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function-variable function\">default</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/layout/menu.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function-variable function\">header</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/layout/header.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function-variable function\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../components/layout/content.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>对应 Router-view 通过 name 对应组件</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>content<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"重定向-redirect-和别名-alias\"><a class=\"anchor\" href=\"#重定向-redirect-和别名-alias\">#</a> 重定向 redirect 和别名 alias</h2>\n<h4 id=\"redirect\"><a class=\"anchor\" href=\"#redirect\">#</a> redirect</h4>\n<ul>\n<li>重定向也是通过 routes 配置来完成，下面例子是从 <code> /home</code>  重定向到  <code>/</code> ：</li>\n</ul>\n<ol>\n<li>字符串形式配置</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>对象形式配置，重定向的目标也可以是一个命名的路由：</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"homepage\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>函数模式（可以传参）</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">redirect</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">query</span><span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>请注意，导航守卫并没有应用在跳转路由上，而仅仅应用在其目标上。在上面的例子中，在  <code>/home</code>  路由中添加  <code>beforeEnter </code> 守卫不会有任何效果。</p>\n<p>在写  <code>redirect </code> 的时候，可以省略  <code>component</code>  配置，因为它从来没有被直接访问过，所以没有组件要渲染。唯一的例外是嵌套路由：如果一个路由记录有  <code>children</code>  和  <code>redirect</code>  属性，它也应该有 <code> component</code>  属性。</p>\n<h4 id=\"alias\"><a class=\"anchor\" href=\"#alias\">#</a> alias</h4>\n<p>重定向是指当用户访问  <code>/home</code>  时，URL 会被  <code>/</code>  替换，然后匹配成  <code>/</code> 。那么什么是别名呢？<br />\n将  <code>/</code>  别名为  <code>/home</code> ，意味着当用户访问  <code>/home</code>  时，URL 仍然是  <code>/home</code> ，但会被匹配为用户正在访问  <code>/</code> 。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Homepage<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">alias</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"路由组件传参\"><a class=\"anchor\" href=\"#路由组件传参\">#</a> 路由组件传参</h2>\n<ul>\n<li>\n<p>将  <code>props</code>  传递给路由组件</p>\n</li>\n<li>\n<p>命名视图<br />\n对于有命名视图的路由，你必须为每个命名视图定义  <code>props</code>  配置：</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/user/:id\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sidebar</span><span class=\"token operator\">:</span> Sidebar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">sidebar</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>布尔模式</li>\n<li>对象模式</li>\n<li>函数模式</li>\n</ul>\n<h2 id=\"路由的默认路径\"><a class=\"anchor\" href=\"#路由的默认路径\">#</a> 路由的默认路径</h2>\n<p>默认情况下，进入网站的首页，我们希望 <code>&lt;router-view&gt;</code>  渲染首页的内容，但是我们的实现中，默认没有显示首页组件，必须让用户点击才可以。如何可以让路径默认跳到到首页，并且 <code>&lt;router-view&gt;</code>  渲染首页组件呢？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Home <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> About <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 routes 中再配置一个映射， <code>path</code>  配置的是根路径:  <code>/</code> , <code>redirect</code>  是重定向，也就是我们将根路径重定向到 <code>/home</code>  的路径下，这样就可以得到我们想要的结果了</p>\n<h2 id=\"history-模式\"><a class=\"anchor\" href=\"#history-模式\">#</a> history 模式</h2>\n<h2 id=\"路由懒加载\"><a class=\"anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h2>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。<br />\n <code>component</code>  可以传入一个组件，也可以接收一个函数，该函数需要放回一个 Promise. 而 <code>import</code>  函数就是返回一个 Promise</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../pages/Home.vue\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"路由的其他属性\"><a class=\"anchor\" href=\"#路由的其他属性\">#</a> 路由的其他属性</h2>\n<p><code>name</code>  属性：路由记录独一无二的名称<br />\n <code>meta</code>  属性：自定义的数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'about-router'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../pages/About.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'why'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    age；<span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"路由元信息\"><a class=\"anchor\" href=\"#路由元信息\">#</a> 路由元信息</h2>\n<p>通过路由记录的 meta 属性可以定义路由的元信息。使用路由元信息可以在路由中附加自定义的数据，例如：</p>\n<ul>\n<li>权限校验标识。</li>\n<li>路由组件的过渡名称。</li>\n<li>路由组件持久化缓存 (keep-alive) 的相关配置。</li>\n<li>标题名称</li>\n</ul>\n<p>我们可以在导航守卫或者是路由对象中访问路由的元信息数据。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/Login.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/Index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 TS 扩展。如果不使用扩展 将会是 unknow 类型</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"vue-router\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RouteMeta</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    title<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"动态路由\"><a class=\"anchor\" href=\"#动态路由\">#</a> 动态路由</h2>\n<p>我们一般使用动态路由都是后台会返回一个路由表前端通过调接口拿到后处理 (后端处理路由)<br />\n 主要使用的方法就是 router.addRoute</p>\n<h4 id=\"添加路由\"><a class=\"anchor\" href=\"#添加路由\">#</a> 添加路由</h4>\n<p>动态路由主要通过两个函数实现。 <code>router.addRoute()</code>  和  <code>router.removeRoute()</code> 。它们只注册一个新的路由，也就是说，如果新增加的路由与当前位置相匹配，就需要你用  <code>router.push()</code>  或  <code>router.replace()</code>  来手动导航，才能显示该新路由</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> About <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"删除路由\"><a class=\"anchor\" href=\"#删除路由\">#</a> 删除路由</h4>\n<p>有几个不同的方法来删除现有的路由：</p>\n<ol>\n<li>通过添加一个名称冲突的路由。如果添加与现有途径名称相同的途径，会先删除路由，再添加路由：</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> About <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这将会删除之前已经添加的路由，因为他们具有相同的名字且名字必须是唯一的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/other\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Other <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>通过调用 router.addRoute () 返回的回调：</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> removeRoute <span class=\"token operator\">=</span> router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>routeRecord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">removeRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除路由如果存在的话</span></pre></td></tr></table></figure><p>当路由没有名称时，这很有用。</p>\n<ol start=\"3\">\n<li>通过使用 router.removeRoute () 按名称删除路由：</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/about\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"about\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> About <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 删除路由</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">removeRoute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"about\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>需要注意的是，如果你想使用这个功能，但又想避免名字的冲突，可以在路由中使用 Symbol 作为名字。</p>\n<ul>\n<li>当路由被删除时，所有的别名和子路由也会被同时删除</li>\n</ul>\n<h4 id=\"查看现有路由\"><a class=\"anchor\" href=\"#查看现有路由\">#</a> 查看现有路由</h4>\n<p>Vue Router 提供了两个功能来查看现有的路由：</p>\n<ol>\n<li>router.hasRoute ()：检查路由是否存在。</li>\n<li>router.getRoutes ()：获取一个包含所有路由记录的数组。</li>\n</ol>\n<h4 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h4>\n<ul>\n<li>前端代码</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">initRouter</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:9999/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">params</span><span class=\"token operator\">:</span> formInline <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">v</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> v<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> v<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 这儿不能使用 @</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../views/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>v<span class=\"token punctuation\">.</span>component<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">getRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>后端代码 nodejs express</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Express<span class=\"token punctuation\">,</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token literal-property property\">app</span><span class=\"token operator\">:</span> Express <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">req</span><span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">res</span><span class=\"token operator\">:</span> Response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">header</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Access-Control-Allow-Origin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>user <span class=\"token operator\">==</span> <span class=\"token string\">\"admin\"</span> <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>password <span class=\"token operator\">==</span> <span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">route</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/demo1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Demo1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token string\">\"demo1.vue\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/demo2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Demo2\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token string\">\"demo2.vue\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/demo3\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Demo3\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> <span class=\"token string\">\"demo3.vue\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token literal-property property\">code</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token literal-property property\">mesage</span><span class=\"token operator\">:</span> <span class=\"token string\">\"账号密码错误\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9999</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:9999\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"notfound\"><a class=\"anchor\" href=\"#notfound\">#</a> NotFound</h3>\n<p>对于没有匹配到的路由，我们通常会匹配到固定的某个页面，比如 NotFound 的错误页面中，这个时候我们可编写一个动态路由用于匹配所有的页面；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/:pathMatch(.*)'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../pages/NotFound.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"路由的嵌套\"><a class=\"anchor\" href=\"#路由的嵌套\">#</a> 路由的嵌套</h2>\n<p>什么是路由的嵌套？<br />\n目前我们匹配的 Home、About、User 等都属于底层路由，我们在它们之间可以来回进行切换。但是，我们 Home 页面本身，也可能会在多个组件之间来回切换：比如 Home 中包括 Product、Message，它们可以在 Home 内部来回切换。<br />\n这个时候我们就需要使用嵌套路由，在 Home 中也使用 router-view 来占位之后需要渲染的组件。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.../pages/Home.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span><span class=\"token string\">'/home/product'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'product'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../pages/HomeProduct.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../pages/HomeMessage.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>query 方式的参数</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>useRouter<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-rourer'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">jumpToHome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span><span class=\"token string\">'/profile'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">quert</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'why'</span><span class=\"token punctuation\">,</span>age：<span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"router-view-的-v-slot\"><a class=\"anchor\" href=\"#router-view-的-v-slot\">#</a> router-view 的 v-slot</h3>\n<p><code>router-view</code>  也提供给我们一个插槽，可以用于  <code>&lt;transition&gt;</code>  和  <code>&lt;keep-alive&gt;</code>  组件来包裹你的路由组件：</p>\n<ul>\n<li><code>Component</code> ：要渲染的组件</li>\n<li><code>route</code> ：解析出的标准化路由对象</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;\n  &lt;transition name=&quot;why&quot;&gt;\n    &lt;keep-alive&gt;\n      &lt;component :is=&quot;Component&quot;&gt;&lt;/component&gt;\n    &lt;/keep-alive&gt;\n  &lt;/transition&gt;\n&lt;/router-view&gt;\n</code></pre>\n<h2 id=\"动态添加路由\"><a class=\"anchor\" href=\"#动态添加路由\">#</a> 动态添加路由</h2>\n<p>某些情况下我们可能需要动态的来添加路由：比如根据用户不同的权限，注册不同的路由。这个时候我们可以使用一个方法  <code>addRoute</code></p>\n<ul>\n<li>添加顶级路由：<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L1AlMjVJXzAoKERNJTYwSVRLJTI1RFJQQ0YyQ09PLnBuZyk=\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/P%I_0((DM`ITK%DRPCF2COO.png)</span></li>\n<li>添加二级路由对象<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/1RB3VFZZHORS82DD%60FO_C5C.png\" alt=\"\" /></li>\n</ul>\n<h2 id=\"动态删除路由\"><a class=\"anchor\" href=\"#动态删除路由\">#</a> 动态删除路由</h2>\n<ol>\n<li>添加一个 name 相同的路由</li>\n<li>通过 removeRoute 方法，传入路由的名称</li>\n<li>通过 addRoute 方法的返回值回调<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/OJLWP%5DY@S80JCYCDWFNM81Z.png\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/H%5DFZO@8N@%5BW_D%5DYEU5E5S0K.png\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/I$OQ6ZJH$_Q%5BI%5BJ%7B6%60MLIPJ.png\" alt=\"\" /></li>\n</ol>\n<h2 id=\"路由导航守卫\"><a class=\"anchor\" href=\"#路由导航守卫\">#</a> 路由导航守卫</h2>\n<h4 id=\"全局前置守卫\"><a class=\"anchor\" href=\"#全局前置守卫\">#</a> 全局前置守卫</h4>\n<h2 id=\"登录守卫功能-routerbeforeeach\"><a class=\"anchor\" href=\"#登录守卫功能-routerbeforeeach\">#</a> 登录守卫功能 router.beforeEach</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> form<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>每个守卫方法接收三个参数：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>to: Route， 即将要进入的目标 路由对象；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from: Route，当前导航正要离开的路由；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 confirmed <span class=\"token punctuation\">(</span>确认的<span class=\"token punctuation\">)</span>。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>next<span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span>: 中断当前的导航。如果浏览器的 URL 改变了 <span class=\"token punctuation\">(</span>可能是用户手动或者浏览器后退按钮<span class=\"token punctuation\">)</span>，那么 URL 地址会重置到 from 路由对应的地址。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>next<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> 或者 next<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path: <span class=\"token string\">'/'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</pre></td></tr></table></figure><ul>\n<li>案例：权限判断</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> whileList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"token\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 白名单 有值 或者登陆过存储了 token 信息可以跳转 否则就去登录页面</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>whileList<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>比如我们完成一个功能，只有登录后才能看到其他页面：<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/4%606%60HY%60G8ABQ2R_B\" alt=\"\" />T)UFO1.png)<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LzZVMA==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/6U0</span>{1(~VVLP7IR99W5WGRHU.png)</p>\n<h4 id=\"全局后置守卫\"><a class=\"anchor\" href=\"#全局后置守卫\">#</a> 全局后置守卫</h4>\n<p>使用场景一般可以用来做 loadingBar</p>\n<p>你也可以注册全局后置钩子，然而和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Vnode<span class=\"token punctuation\">.</span>component<span class=\"token operator\">?.</span>exposed<span class=\"token operator\">?.</span><span class=\"token function\">endLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>loadingBar 组件</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wraps<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ts<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref<span class=\"token punctuation\">,</span> onMounted <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> speed <span class=\"token operator\">=</span> ref<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> ref<span class=\"token operator\">&lt;</span>HTMLElement<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> ref<span class=\"token operator\">&lt;</span>number<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">startLoading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> dom <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    speed<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    timer<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&lt;</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        speed<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        timer<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        speed<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        window<span class=\"token punctuation\">.</span><span class=\"token function\">cancelAnimationFrame</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">endLoading</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">let</span> dom <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">.</span>value <span class=\"token keyword\">as</span> HTMLElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      window<span class=\"token punctuation\">.</span><span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        speed<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        dom<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token string\">\"%\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token function\">defineExpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    startLoading<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    endLoading<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">scoped</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>less<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token selector\">.wraps</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token selector\">.bar</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>mian.ts</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> loadingBar <span class=\"token keyword\">from</span> <span class=\"token string\">\"./components/loadingBar.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> Vnode <span class=\"token operator\">=</span> <span class=\"token function\">createVNode</span><span class=\"token punctuation\">(</span>loadingBar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>Vnode<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Vnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Vnode<span class=\"token punctuation\">.</span>component<span class=\"token operator\">?.</span>exposed<span class=\"token operator\">?.</span><span class=\"token function\">startLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  Vnode<span class=\"token punctuation\">.</span>component<span class=\"token operator\">?.</span>exposed<span class=\"token operator\">?.</span><span class=\"token function\">endLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"vuex-状态管理\"><a class=\"anchor\" href=\"#vuex-状态管理\">#</a> Vuex 状态管理</h1>\n<ul>\n<li>\n<p>什么是状态管理？<br />\n在开发中，应用程序需要处理各种各样的数据，这些<br />\n数据需要保存在我们应用程序中的某一个位置，对于这些数据<br />\n的管理我们就称之为是 状态管理</p>\n</li>\n<li>\n<p>在前面我们是如何管理自己的状态呢？<br />\n在 Vue 开发中，我们使用组件化的开发方式，而在组件中我们定义 <code>data</code>  或者在 <code>setup</code>  中返回使用的数据，这些数据我们称之为 <code>state</code> <br />\n 在模块 <code>template</code>  中我们可以使用这些数据，模块最终会被渲染成 DOM，我们称之为 <code>View</code> <br />\n 在模块中我们会产生一些行为事件，处理这些行为事件时，<br />\n有可能会修改 state，这些行为事件我们称之为 <code>actions</code> <br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LyUyNU1BNU9VUlVG\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%MA5OURUF</span>}(PO5C%MNS6{AM.png)</p>\n</li>\n<li>\n<p>复杂的状态管理<br />\n JavaScript 需要管理的状态越来越多，越来越复杂，这些状态包括服务器返回的数据、缓存数据、用户操作产生的数据等等，也包括一些 UI 的状态，比如某些元素是否被选中，是否显示加载动效，当前分页；<br />\n 当我们的应用遇到多个组件共享状态时，单向数据流的简洁性很容易被破坏；<br />\n 对于一些简单的状态，确实可以通过 props 的传递或者 Provide 的方式来共享状态，但是对于复杂的状态管理来说，显然单纯通过传递和共享的方式是不足以解决问题的，比如兄弟组件如何共享数据呢？</p>\n</li>\n</ul>\n<h2 id=\"路由过渡动效\"><a class=\"anchor\" href=\"#路由过渡动效\">#</a> 路由过渡动效</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">#default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>&#123;route,Component&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">:enter-active-class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>`animate__animated $&#123;route.meta.transition&#125;`<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>component</span> <span class=\"token attr-name\">:is</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Component<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>component</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上面的用法会对所有的路由使用相同的过渡。如果你想让每个路由的组件有不同的过渡，你可以将元信息和动态的 name 结合在一起，放在 &lt;transition&gt; 上：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>declare module <span class=\"token string\">'vue-router'</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RouteMeta</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token literal-property property\">transition</span><span class=\"token operator\">:</span>string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">BASE_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token literal-property property\">routes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/Login.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>         <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span><span class=\"token string\">\"登录页面\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>         <span class=\"token literal-property property\">transition</span><span class=\"token operator\">:</span><span class=\"token string\">\"animate__fadeInUp\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/index'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/views/Index.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span><span class=\"token string\">\"首页！！！\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         <span class=\"token literal-property property\">transition</span><span class=\"token operator\">:</span><span class=\"token string\">\"animate__bounceIn\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"滚动行为\"><a class=\"anchor\" href=\"#滚动行为\">#</a> 滚动行为</h2>\n<p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。vue-router 可以自定义路由切换时页面如何滚动。<br />\n当创建一个 Router 实例，你可以提供一个 scrollBehavior 方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>…………</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">scrollBehavior</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savePosition</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> <span class=\"token string\">'==============>'</span><span class=\"token punctuation\">,</span> savePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span><span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>scrollBehavior 方法接收 to 和 from 路由对象。第三个参数 savedPosition 当且仅当 popstate 导航 (通过浏览器的 前进 / 后退 按钮触发) 时才可用。<br />\nscrollBehavior 返回滚动位置的对象信息，长这样： <code>&#123; left: number, top: number &#125;</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">history</span><span class=\"token operator\">:</span> <span class=\"token function\">createWebHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">scrollBehavior</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savePosition</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>\\</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token literal-property property\">top</span><span class=\"token operator\">:</span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "vuerouter"
            ]
        },
        {
            "id": "https://eucli.top/2023/10/19/CSS/",
            "url": "https://eucli.top/2023/10/19/CSS/",
            "title": "CSS",
            "date_published": "2023-10-19T13:45:48.000Z",
            "content_html": "<h1 id=\"tips\"><a class=\"anchor\" href=\"#tips\">#</a> Tips</h1>\n<h2 id=\"实现水平垂直居中\"><a class=\"anchor\" href=\"#实现水平垂直居中\">#</a> 实现水平垂直居中</h2>\n<ol>\n<li><code>flex</code>  布局（常用）</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 在需要居中的元素的父元素上写 css 居中样式 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>grid</code>  布局（更简洁）\n<blockquote>\n<p>grid 是二维布局特化的属性，只做居中布局其实一维的 flex 就够用了</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> grid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">place-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>translate</code>  偏移居中（绝对定位中最好用的方法，不定宽高）</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.child</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>flex</code>  实现特定比例排成一排（如 1:2:1）</li>\n</ol>\n<figure class=\"highlight less\"><figcaption data-lang=\"less\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token selector\">.child_left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token selector\">.child_center</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token selector\">.child_right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"适配问题\"><a class=\"anchor\" href=\"#适配问题\">#</a> 适配问题</h2>\n<h2 id=\"图片居中\"><a class=\"anchor\" href=\"#图片居中\">#</a> 图片居中</h2>\n<ol>\n<li>利用背景实现：</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">background</span><span class=\"token operator\">:</span> <span class=\"token function\">url</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span> no<span class=\"token operator\">-</span>repeat center center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>background<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> contain<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>更优方案：</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 有多个属性值可选，这里只举了 `contain`（等比缩放居中）的例子，常用的还有 `cover`（等比填充居中） */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">object-fit</span><span class=\"token punctuation\">:</span> contain<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"隐藏元素的方法\"><a class=\"anchor\" href=\"#隐藏元素的方法\">#</a> 隐藏元素的方法</h2>\n<ul>\n<li><code>display: none</code> ：结构消失，触发<strong>回流重绘</strong></li>\n<li><code>visibility: hidden</code> ：结构保留，占据空间，触发<strong>重绘</strong>，不可选中</li>\n<li><code>opacity: 0</code> ：占据空间，<strong>不回流不重绘</strong>，可以被选中</li>\n<li><code>position: absolute/fixed; left/top:-9999px;</code> ：利用绝对定位，设置超大负边距将元素抛出视图，脱离文档流所以不占据空间</li>\n<li><code>transform: translate(-9999px)</code> ：利用偏移抛出视图，空间会占据（注意：行内元素无效）</li>\n<li><code>transform: scale(0) / transform: skew(90deg)</code> ：变形来达到隐藏效果（注意：行内元素无效）</li>\n<li><code>clip-path: circle(0px)</code> ：利用裁剪创建元素的可显示区域，区域外会隐藏，占据空间，不可选中（这里我用 circle 是因为它参数最少）</li>\n<li><code>z-index</code> ：层叠上下文有可能盖住，也是一种隐藏方式</li>\n<li><code>content-visibility: hidden</code> ：只能设置内容隐藏，设置的元素本身不受影响。隐藏效果类似方法 1，隐藏原理是基于浏览器渲染的，性能上有优势</li>\n<li><code>height: 0</code> ：根据盒模型原理，需要额外代码处理，还需隐藏子元素</li>\n</ul>\n<h2 id=\"常见问题\"><a class=\"anchor\" href=\"#常见问题\">#</a> 常见问题</h2>\n<ul>\n<li>图片不能自动撑满怎么解决？</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>display：block<span class=\"token punctuation\">;</span> // 把 img 设置为块元素，解决</pre></td></tr></table></figure><ul>\n<li>Li 与 li（或行内块元素）之间看不见的空白间隔怎么产生的？</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>设置 <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span> // <span class=\"token property\">是受空格影响的，display</span><span class=\"token punctuation\">:</span> inline-block 也会产生间隔</pre></td></tr></table></figure><ul>\n<li>CSS 绘制三角形原理？\n<blockquote>\n<p>利用边框（border）属性实现，div 宽高设为 0，然后设置不同方向的三条边颜色为透明，剩下的边就是三角形。通过变换 border 宽度调整大小形状，变换剩下那条边的颜色改变三角形颜色</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 50px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token property\">border-top</span><span class=\"token punctuation\">:</span> 50px solid blue<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"vue3-集成-tailwind-css\"><a class=\"anchor\" href=\"#vue3-集成-tailwind-css\">#</a> Vue3 集成 Tailwind CSS</h1>\n<p>[Tailwind CSS] 是一个由 js 编写的 CSS 框架 他是基于 postCss 去解析的</p>\n<p>对于<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9zdGNzcy5jb20uY24v\"> PostCSS</span> 的插件使用，我们再使用的过程中一般都需要如下步骤：</p>\n<ol>\n<li>PostCSS 配置文件 postcss.config.js，新增 tailwindcss 插件。</li>\n<li>TaiWindCss 插件需要一份配置文件，比如:tailwind.config.js。</li>\n</ol>\n<ul>\n<li>postCss 功能介绍</li>\n</ul>\n<ol>\n<li>\n<p>增强代码的可读性 （利用从 Can I Use 网站获取的数据为 CSS 规则添加特定厂商的前缀。 Autoprefixer 自动获取浏览器的流行度和能够支持的属性，并根据这些数据帮你自动为 CSS 规则添加前缀。）</p>\n</li>\n<li>\n<p>将未来的 CSS 特性带到今天！（PostCSS Preset Env 帮你将最新的 CSS 语法转换成大多数浏览器都能理解的语法，并根据你的目标浏览器或运行时环境来确定你需要的 polyfills，此功能基于 cssdb 实现。）</p>\n</li>\n<li>\n<p>终结全局 CSS（CSS 模块 能让你你永远不用担心命名太大众化而造成冲突，只要用最有意义的名字就行了。）</p>\n</li>\n<li>\n<p>避免 CSS 代码中的错误（通过使用 stylelint 强化一致性约束并避免样式表中的错误。stylelint 是一个现代化 CSS 代码检查工具。它支持最新的 CSS 语法，也包括类似 CSS 的语法，例如 SCSS 。）</p>\n</li>\n</ol>\n<ul>\n<li>postCss 处理 tailWind Css 大致流程</li>\n</ul>\n<ol>\n<li>将 CSS 解析成抽象语法树 (AST 树)</li>\n<li>读取插件配置，根据配置文件，生成新的抽象语法树</li>\n<li>将 AST 树” 传递” 给一系列数据转换操作处理（变量数据循环生成，切套类名循环等）</li>\n<li>清除一系列操作留下的数据痕迹</li>\n<li>将处理完毕的 AST 树重新转换成字符串</li>\n</ol>\n<ul>\n<li>安装</li>\n</ul>\n<ol>\n<li>安装 Tailwind 以及其它依赖项</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> tailwindcss@latest postcss@latest autoprefixer@latest</pre></td></tr></table></figure><ol start=\"2\">\n<li>生成配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx tailwindcss init <span class=\"token parameter variable\">-p</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGFpbHdpbmRjc3MuY24vZG9jcy9jb25maWd1cmF0aW9u\">配置</span>文件 tailwind.config.js<br />\n2.6 版本:</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">purge</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./index.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">extend</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>3.0 版本:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"./index.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./src/**/*.&#123;vue,js,ts,jsx,tsx&#125;\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">theme</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">extend</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>创建一个 index.css, 在 main.ts 引入<br />\n index.css:</li>\n</ol>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> base<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> components<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@tailwind</span> utilities<span class=\"token punctuation\">;</span></span></pre></td></tr></table></figure><p>main.ts:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"./index.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>最后 npm run dev 就可以使用啦</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-2xl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md:flex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>md:flex-shrink-0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>h-48 w-full object-cover md:w-48<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://n.sinaimg.cn/translate/20170815/OoVn-fyixtym5144510.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Man looking at item at a store<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>p-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uppercase tracking-wide text-sm text-indigo-500 font-semibold<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Case study<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>block mt-1 text-lg leading-tight font-medium text-black hover:underline<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Finding customers for your new business<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mt-2 text-gray-500<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Getting a new business off the ground is a lot of hard work. Here are five ideas you can use to find your first customers.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"unocss-原子化\"><a class=\"anchor\" href=\"#unocss-原子化\">#</a> unocss 原子化</h1>\n<ul>\n<li>什么是 css 原子化？<br />\nCSS 原子化的优缺点:</li>\n</ul>\n<ol>\n<li>\n<p>减少了 css 体积，提高了 css 复用</p>\n</li>\n<li>\n<p>减少起名的复杂度</p>\n</li>\n<li>\n<p>增加了记忆成本 将 css 拆分为原子之后，你势必要记住一些 class 才能书写，哪怕 tailwindcss 提供了完善的工具链，你写 background，也要记住开头是 bg</p>\n</li>\n</ol>\n<ul>\n<li>接入 unocss<br />\n (tips：最好用于 vite ,webpack 属于阉割版功能很少)</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> unocss</pre></td></tr></table></figure><p>或者：安装 unocss 和三个预设，第一个是工具类预设，第二个是属性化模式支持，第三个是 icon 支持</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i <span class=\"token parameter variable\">-D</span> unocss @unocss/preset-uno @unocss/preset-attributify @unocss/preset-icons</pre></td></tr></table></figure><ol start=\"2\">\n<li>配置 vite.config.ts</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> unocss <span class=\"token keyword\">from</span> <span class=\"token string\">'unocss/vite'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> presetUno<span class=\"token punctuation\">,</span> presetAttributify<span class=\"token punctuation\">,</span> presetIcons <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unocss'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">vueJsx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">unocss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      presets<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">presetUno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">presetAttributify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">presetIcons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      rules<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>main.ts 引入</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"uno.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>使用</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text-25px text-#ff6700 bg-#ccc<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好Unocss<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">&lt;!-- text-25px: font-size:25px</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>text-#ff6700: color: #ff6700</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>bg-#ccc: background: #ccc</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>使用 class 类名来描述样式，省去了单独写 style 的样式 --></span></pre></td></tr></table></figure><ul>\n<li>配置静态 css</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">rules</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"flex\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">display</span><span class=\"token operator\">:</span> <span class=\"token string\">\"flex\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>unocss 预设</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">presetIcons</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">presetAttributify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">presetUno</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>presetIcons Icon 图标预设<br />\n图标集合安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> <span class=\"token function\">add</span> <span class=\"token parameter variable\">-D</span> @iconify-json/ic</pre></td></tr></table></figure><p>首先我们去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9pY29uZXMuanMub3JnLw==\"> icones</span> 官网（方便浏览和使用 iconify）浏览我们需要的 icon，比如这里我用到了 Google Material Icons 图标集里面的 baseline-add-circle 图标</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>i-ic-baseline-backspace text-3xl bg-green-500<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><ol start=\"2\">\n<li>presetAttributify 属性化模式支持<br />\n属性语义化 无须 class</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">font</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>black<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>btn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol start=\"3\">\n<li>presetUno 工具类预设<br />\n默认的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Vub2Nzcy91bm9jc3MvdHJlZS9tYWluL3BhY2thZ2VzL3ByZXNldC11bm8=\">@unocss/preset-uno</span> 预设（实验阶段）是一系列流行的原子化框架的 通用超集，包括了 Tailwind CSS，Windi CSS，Bootstrap，Tachyons 等。</li>\n</ol>\n<p>例如，ml-3（Tailwind），ms-2（Bootstrap），ma4（Tachyons），mt-10px（Windi CSS）均会生效。</p>\n",
            "tags": [
                "CSS"
            ]
        },
        {
            "id": "https://eucli.top/2023/10/12/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/",
            "url": "https://eucli.top/2023/10/12/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF%E6%B5%81%E7%A8%8B/",
            "title": "项目上线流程",
            "date_published": "2023-10-12T13:45:48.000Z",
            "content_html": "<h1 id=\"项目上线\"><a class=\"anchor\" href=\"#项目上线\">#</a> 项目上线</h1>\n<h4 id=\"1-环境替换\"><a class=\"anchor\" href=\"#1-环境替换\">#</a> 1、 环境替换</h4>\n<h4 id=\"2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\"><a class=\"anchor\" href=\"#2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\">#</a> 2、 打包（工作中一般前端就做到这，把打包后的 dist 文件夹交上去就行了）</h4>\n<h4 id=\"3-把-dist-上传到服务器-配置-nginx-代理\"><a class=\"anchor\" href=\"#3-把-dist-上传到服务器-配置-nginx-代理\">#</a> 3、 把 dist 上传到服务器 - 配置 nginx 代理</h4>\n<blockquote>\n<p>如果后端服务和前端代码（dist）放在一个域下面就不存在跨域，不用配置 nginx 的跨域部分</p>\n</blockquote>\n<ol>\n<li>连接服务器， <code>cd etc</code>  后安装 nginx： <code>yum install nginx</code></li>\n<li><code>cd nginx</code>  后进行配置 <code>vim nginx.conf</code> :</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>location <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  root <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  index index<span class=\"token punctuation\">.</span>html index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改后重启： <code>systemctl restart nginx.service</code> , 随后项目便上线了</li>\n</ol>\n<h2 id=\"代码上传仓库\"><a class=\"anchor\" href=\"#代码上传仓库\">#</a> 代码上传仓库</h2>\n<blockquote>\n<p>需要安装 git 并使用 git 初始化项目才行</p>\n</blockquote>\n<ol>\n<li>点击 vscode 侧边栏的 git 图标，初始化仓库</li>\n<li>创建 <code>.gitignore</code> , 忽略 <code>node_modules</code>  和图片<br />\n.gitignore 文件：</li>\n</ol>\n<pre><code>node_modules\n/public/upload\n</code></pre>\n<ol start=\"3\">\n<li>点击提交。（此时本地仓库已经建立好了）</li>\n<li>建立远程仓库，复制地址</li>\n<li>点击 vscodegit 图标，点击右上角的 <code>···</code> , 远程 - 添加远程存储库。（会要求你输入账号密码）</li>\n<li>同步仓库：点击 <code>发布Branch</code></li>\n</ol>\n<h2 id=\"云服务器\"><a class=\"anchor\" href=\"#云服务器\">#</a> 云服务器</h2>\n<ol>\n<li>连接服务器，安装 nodejs 等环境</li>\n<li>云服务器根目录下创建 <code>www</code>  文件夹（非绝对），随后 <code>git clone</code>  克隆项目</li>\n<li>安装项目依赖（ <code>npm i</code>  之类的），安装 nodemon，启动项目</li>\n</ol>\n<h2 id=\"域名\"><a class=\"anchor\" href=\"#域名\">#</a> 域名</h2>\n<p>域名解析：域名和 ip 地址作对应<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/Y@O2LLG\" alt=\"\" /> %522WUKJWZH$} 8N.png)</p>\n<h2 id=\"配置-https-证书\"><a class=\"anchor\" href=\"#配置-https-证书\">#</a> 配置 HTTPS 证书</h2>\n<p>https 本意是 &lt;span style=&quot;color:red&quot;&gt;http + SSL (Secure Sockets Layer 安全套接层)&lt;/span&gt;<br />\nhttps 可以 &lt;span style=&quot;color:red&quot;&gt; 加密 HTTP 报文 &lt;/span&gt;，所以大家可以理解为是安全的 HTTP<br />\n 工具官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jZXJ0Ym90LmVmZi5vcmcv\">https://certbot.eff.org/</span><br />\n 操作流程 (必须在服务器端进行)：</p>\n<ol>\n<li>下载工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbC5lZmYub3Jn\">https://dl.eff.org</span></li>\n<li>安装工具</li>\n<li>管理员运行命令  <code>certbot certonly --standalone</code> , 输入邮箱和域名即可获得证书</li>\n<li>代码配置</li>\n<li>证书更新 证书有效期为三个月，可以通过下面命令更新</li>\n</ol>\n<pre><code>## 一般更新\ncertbot renew\n## 强制更新\ncertbot --force-renew\n</code></pre>\n",
            "tags": [
                "实战"
            ]
        },
        {
            "id": "https://eucli.top/2023/10/11/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "url": "https://eucli.top/2023/10/11/%E7%A1%85%E8%B0%B7%E7%94%84%E9%80%89%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/",
            "title": "硅谷甄选项目笔记",
            "date_published": "2023-10-11T13:45:48.000Z",
            "content_html": "<h3 id=\"tips-vue3-组件通信方式\"><a class=\"anchor\" href=\"#tips-vue3-组件通信方式\">#</a> tips： vue3 组件通信方式</h3>\n<p><strong>通信仓库地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vamNoMTAxMS92dWUzX2NvbW11bmljYXRpb24uZ2l0\">https://gitee.com/jch1011/vue3_communication.git</span></strong></p>\n<p>不管是 vue2 还是 vue3, 组件通信方式很重要，不管是项目还是面试都是经常用到的知识点。</p>\n<p><strong>比如:vue2 组件通信方式</strong></p>\n<p>**props:** 可以实现父子组件、子父组件、甚至兄弟组件通信</p>\n<p><strong>自定义事件</strong>：可以实现子父组件通信</p>\n<p><strong>全局事件总线 $bus</strong>: 可以实现任意组件通信</p>\n<p>**pubsub:** 发布订阅模式实现任意组件通信</p>\n<p><strong>vuex</strong>: 集中式状态管理容器，实现任意组件通信</p>\n<p><strong>ref</strong>: 父组件获取子组件实例 VC, 获取子组件的响应式数据以及方法</p>\n<p>**slot:** 插槽 (默认插槽、具名插槽、作用域插槽) 实现父子组件通信........</p>\n<h1 id=\"硅谷甄选运营平台\"><a class=\"anchor\" href=\"#硅谷甄选运营平台\">#</a> 硅谷甄选运营平台</h1>\n<p>此次教学课程为硅谷甄选运营平台项目，包含运营平台项目模板从 0 到 1 开发，以及数据大屏幕、权限等业务。</p>\n<p>此次教学课程涉及到技术栈包含 **<em>:vue3+TypeScript+vue-router+pinia+element-plus+axios+echarts</em>** 等技术栈。</p>\n<h2 id=\"一-搭建后台管理系统模板\"><a class=\"anchor\" href=\"#一-搭建后台管理系统模板\">#</a> 一、搭建后台管理系统模板</h2>\n<h3 id=\"11-项目初始化-适用于团队开发场景自己的项目不用配置的那么麻烦\"><a class=\"anchor\" href=\"#11-项目初始化-适用于团队开发场景自己的项目不用配置的那么麻烦\">#</a> 1.1 项目初始化 (适用于团队开发场景，自己的项目不用配置的那么麻烦)</h3>\n<p>今天来带大家从 0 开始搭建一个 vue3 版本的后台管理系统。一个项目要有统一的规范，需要使用 eslint+stylelint+prettier 来对我们的代码质量做检测和修复，需要使用 husky 来做 commit 拦截，需要使用 commitlint 来统一提交规范，需要使用 preinstall 来统一包管理工具。</p>\n<p>下面我们就用这一套规范来初始化我们的项目，集成一个规范的模版。</p>\n<blockquote>\n<p><strong>环境准备</strong></p>\n<ul>\n<li>node v16.14.2</li>\n<li>pnpm 8.0.0</li>\n</ul>\n</blockquote>\n<p>本项目使用 vite 进行构建，vite 官方中文文档参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52aXRlanMuZGV2L2d1aWRlLw==\">cn.vitejs.dev/guide/</span></p>\n<p><strong>pnpm:performant npm ，意味 “高性能的 npm”。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1wbnBtJmFtcDtzcG09MTAwMS4yMTAxLjMwMDEuNzAyMA==\">pnpm</span> 由 npm/yarn 衍生而来，解决了 npm/yarn 内部潜在的 bug，极大的优化了性能，扩展了使用场景。被誉为 “最先进的包管理工具”</strong></p>\n<ol>\n<li>安装 pnpm</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> <span class=\"token function\">pnpm</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>使用 pnpm 命令，vite 脚手架初始化项目:</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> create vite</pre></td></tr></table></figure><ol start=\"3\">\n<li>启动项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> 项目地址 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> i <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">pnpm</span> run dev</pre></td></tr></table></figure><h3 id=\"12-项目配置\"><a class=\"anchor\" href=\"#12-项目配置\">#</a> 1.2 项目配置</h3>\n<h4 id=\"121-eslint-配置\"><a class=\"anchor\" href=\"#121-eslint-配置\">#</a> 1.2.1 eslint 配置</h4>\n<p><strong>eslint 中文官网:<span class=\"exturl\" data-url=\"aHR0cDovL2VzbGludC5jbi8=\">http://eslint.cn/</span></strong></p>\n<p>ESLint 最初是由<span class=\"exturl\" data-url=\"aHR0cDovL25jem9ubGluZS5uZXQv\"> Nicholas C. Zakas</span> 于 2013 年 6 月创建的开源项目。它的目标是提供一个插件化的<strong> javascript 代码检测工具</strong></p>\n<ol>\n<li>首先安装 eslint</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">pnpm</span> i eslint <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>生成配置文件:.eslint.cjs</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx eslint <span class=\"token parameter variable\">--init</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在 <code>.eslint.cjs</code>  中进行配置：</li>\n</ol>\n<pre><code class=\"language-cjs\">module.exports = &#123;\n  //运行环境\n  env: &#123;\n    browser: true, //浏览器端\n    es2021: true, //es2021\n  &#125;,\n  //规则继承\n  extends: [\n    //全部规则默认是关闭的,这个配置项开启推荐规则,推荐规则参照文档\n    //比如:函数不能重名、对象不能出现重复key\n    &quot;eslint:recommended&quot;,\n    //vue3语法规则\n    &quot;plugin:vue/vue3-essential&quot;,\n    //ts语法规则\n    &quot;plugin:@typescript-eslint/recommended&quot;,\n  ],\n  //要为特定类型的文件指定处理器\n  overrides: [],\n  //指定解析器:解析器\n  //Esprima 默认解析器\n  //Babel-ESLint babel解析器\n  //@typescript-eslint/parser ts解析器\n  parser: &quot;@typescript-eslint/parser&quot;,\n  //指定解析器选项\n  parserOptions: &#123;\n    ecmaVersion: &quot;latest&quot;, //校验ECMA最新版本\n    sourceType: &quot;module&quot;, //设置为&quot;script&quot;（默认），或者&quot;module&quot;代码在ECMAScript模块中\n  &#125;,\n  //ESLint支持使用第三方插件。在使用插件之前，您必须使用npm安装它\n  //该eslint-plugin-前缀可以从插件名称被省略\n  plugins: [&quot;vue&quot;, &quot;@typescript-eslint&quot;],\n  //eslint规则\n  rules: &#123;&#125;,\n&#125;;\n</code></pre>\n<h5 id=\"1211-vue3-环境代码校验插件\"><a class=\"anchor\" href=\"#1211-vue3-环境代码校验插件\">#</a> 1.2.1.1 vue3 环境代码校验插件</h5>\n<pre><code># 让所有与prettier规则存在冲突的Eslint rules失效，并使用prettier进行代码检查\n&quot;eslint-config-prettier&quot;: &quot;^8.6.0&quot;,\n&quot;eslint-plugin-import&quot;: &quot;^2.27.5&quot;,\n&quot;eslint-plugin-node&quot;: &quot;^11.1.0&quot;,\n# 运行更漂亮的Eslint，使prettier规则优先级更高，Eslint优先级低\n&quot;eslint-plugin-prettier&quot;: &quot;^4.2.1&quot;,\n# vue.js的Eslint插件（查找vue语法错误，发现错误指令，查找违规风格指南\n&quot;eslint-plugin-vue&quot;: &quot;^9.9.0&quot;,\n# 该解析器允许使用Eslint校验所有babel code\n&quot;@babel/eslint-parser&quot;: &quot;^7.19.1&quot;,\n</code></pre>\n<p>安装指令</p>\n<pre><code>pnpm install -D eslint-plugin-import eslint-plugin-vue eslint-plugin-node eslint-plugin-prettier eslint-config-prettier eslint-plugin-node @babel/eslint-parser\n</code></pre>\n<h5 id=\"12-修改eslintrccjs-配置文件\"><a class=\"anchor\" href=\"#12-修改eslintrccjs-配置文件\">#</a> 1.2 修改.eslintrc.cjs 配置文件</h5>\n<pre><code>// @see https://eslint.bootcss.com/docs/rules/\n\nmodule.exports = &#123;\n  env: &#123;\n    browser: true,\n    es2021: true,\n    node: true,\n    jest: true,\n  &#125;,\n  /* 指定如何解析语法 */\n  parser: 'vue-eslint-parser',\n  /** 优先级低于 parse 的语法解析配置 */\n  parserOptions: &#123;\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    parser: '@typescript-eslint/parser',\n    jsxPragma: 'React',\n    ecmaFeatures: &#123;\n      jsx: true,\n    &#125;,\n  &#125;,\n  /* 继承已有的规则 */\n  extends: [\n    'eslint:recommended',\n    'plugin:vue/vue3-essential',\n    'plugin:@typescript-eslint/recommended',\n    'plugin:prettier/recommended',\n  ],\n  plugins: ['vue', '@typescript-eslint'],\n  /*\n   * &quot;off&quot; 或 0    ==&gt;  关闭规则\n   * &quot;warn&quot; 或 1   ==&gt;  打开的规则作为警告（不影响代码执行）\n   * &quot;error&quot; 或 2  ==&gt;  规则作为一个错误（代码不能执行，界面报错）\n   */\n  rules: &#123;\n    // eslint（https://eslint.bootcss.com/docs/rules/）\n    'no-var': 'error', // 要求使用 let 或 const 而不是 var\n    'no-multiple-empty-lines': ['warn', &#123; max: 1 &#125;], // 不允许多个空行\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    'no-unexpected-multiline': 'error', // 禁止空余的多行\n    'no-useless-escape': 'off', // 禁止不必要的转义字符\n\n    // typeScript (https://typescript-eslint.io/rules)\n    '@typescript-eslint/no-unused-vars': 'error', // 禁止定义未使用的变量\n    '@typescript-eslint/prefer-ts-expect-error': 'error', // 禁止使用 @ts-ignore\n    '@typescript-eslint/no-explicit-any': 'off', // 禁止使用 any 类型\n    '@typescript-eslint/no-non-null-assertion': 'off',\n    '@typescript-eslint/no-namespace': 'off', // 禁止使用自定义 TypeScript 模块和命名空间。\n    '@typescript-eslint/semi': 'off',\n\n    // eslint-plugin-vue (https://eslint.vuejs.org/rules/)\n    'vue/multi-word-component-names': 'off', // 要求组件名称始终为 “-” 链接的单词\n    'vue/script-setup-uses-vars': 'error', // 防止&lt;script setup&gt;使用的变量&lt;template&gt;被标记为未使用\n    'vue/no-mutating-props': 'off', // 不允许组件 prop的改变\n    'vue/attribute-hyphenation': 'off', // 对模板中的自定义组件强制执行属性命名样式\n  &#125;,\n&#125;\n\n</code></pre>\n<h5 id=\"13eslintignore-忽略文件\"><a class=\"anchor\" href=\"#13eslintignore-忽略文件\">#</a> 1.3.eslintignore 忽略文件</h5>\n<pre><code>dist\nnode_modules\n</code></pre>\n<h5 id=\"14-运行脚本\"><a class=\"anchor\" href=\"#14-运行脚本\">#</a> 1.4 运行脚本</h5>\n<p>package.json 新增两个运行脚本</p>\n<pre><code>&quot;scripts&quot;: &#123;\n    &quot;lint&quot;: &quot;eslint src&quot;,\n    &quot;fix&quot;: &quot;eslint src --fix&quot;,\n&#125;\n</code></pre>\n<h4 id=\"二-配置prettier-vscode-好像有-pretter-插件\"><a class=\"anchor\" href=\"#二-配置prettier-vscode-好像有-pretter-插件\">#</a> 二、配置<strong> prettier</strong> (vscode 好像有 pretter 插件)</h4>\n<p>有了 eslint，为什么还要有 prettier？eslint 针对的是 javascript，他是一个检测工具，包含 js 语法以及少部分格式问题，在 eslint 看来，语法对了就能保证代码正常运行，格式问题属于其次；</p>\n<p>而 prettier 属于格式化工具，它看不惯格式不统一，所以它就把 eslint 没干好的事接着干，另外，prettier 支持</p>\n<p>包含 js 在内的多种语言。</p>\n<p>总结起来，<strong>eslint 和 prettier 这俩兄弟一个保证 js 代码质量，一个保证代码美观。</strong></p>\n<h5 id=\"21-安装依赖包\"><a class=\"anchor\" href=\"#21-安装依赖包\">#</a> 2.1 安装依赖包</h5>\n<pre><code>pnpm install -D eslint-plugin-prettier prettier eslint-config-prettier\n</code></pre>\n<h5 id=\"22prettierrcjson-添加规则\"><a class=\"anchor\" href=\"#22prettierrcjson-添加规则\">#</a> 2.2.prettierrc.json 添加规则</h5>\n<pre><code>&#123;\n  &quot;singleQuote&quot;: true,\n  &quot;semi&quot;: false,\n  &quot;bracketSpacing&quot;: true,\n  &quot;htmlWhitespaceSensitivity&quot;: &quot;ignore&quot;,\n  &quot;endOfLine&quot;: &quot;auto&quot;,\n  &quot;trailingComma&quot;: &quot;all&quot;,\n  &quot;tabWidth&quot;: 2\n&#125;\n</code></pre>\n<h5 id=\"23prettierignore-忽略文件\"><a class=\"anchor\" href=\"#23prettierignore-忽略文件\">#</a> 2.3.prettierignore 忽略文件</h5>\n<pre><code>/dist/*\n/html/*\n.local\n/node_modules/**\n**/*.svg\n**/*.sh\n/public/*\n</code></pre>\n<p><strong>通过 pnpm run lint 去检测语法，如果出现不规范格式，通过 pnpm run fix 修改</strong></p>\n<h4 id=\"三-配置-stylelint-感觉没必要\"><a class=\"anchor\" href=\"#三-配置-stylelint-感觉没必要\">#</a> 三、配置 stylelint (感觉没必要)</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHlsZWxpbnQuaW8v\">stylelint</span> 为 css 的 lint 工具。可格式化 css 代码，检查 css 语法错误与不合理的写法，指定 css 书写顺序等。</p>\n<p>我们的项目中使用 scss 作为预处理器，安装以下依赖：</p>\n<pre><code>pnpm add sass sass-loader stylelint postcss postcss-scss postcss-html stylelint-config-prettier stylelint-config-recess-order stylelint-config-recommended-scss stylelint-config-standard stylelint-config-standard-vue stylelint-scss stylelint-order stylelint-config-standard-scss -D\n</code></pre>\n<h5 id=\"31stylelintrccjs配置文件\"><a class=\"anchor\" href=\"#31stylelintrccjs配置文件\">#</a> 3.1 <code>.stylelintrc.cjs</code> <strong> 配置文件</strong></h5>\n<p><strong>官网:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdHlsZWxpbnQuYm9vdGNzcy5jb20v\">https://stylelint.bootcss.com/</span></strong></p>\n<pre><code>// @see https://stylelint.bootcss.com/\n\nmodule.exports = &#123;\n  extends: [\n    'stylelint-config-standard', // 配置stylelint拓展插件\n    'stylelint-config-html/vue', // 配置 vue 中 template 样式格式化\n    'stylelint-config-standard-scss', // 配置stylelint scss插件\n    'stylelint-config-recommended-vue/scss', // 配置 vue 中 scss 样式格式化\n    'stylelint-config-recess-order', // 配置stylelint css属性书写顺序插件,\n    'stylelint-config-prettier', // 配置stylelint和prettier兼容\n  ],\n  overrides: [\n    &#123;\n      files: ['**/*.(scss|css|vue|html)'],\n      customSyntax: 'postcss-scss',\n    &#125;,\n    &#123;\n      files: ['**/*.(html|vue)'],\n      customSyntax: 'postcss-html',\n    &#125;,\n  ],\n  ignoreFiles: [\n    '**/*.js',\n    '**/*.jsx',\n    '**/*.tsx',\n    '**/*.ts',\n    '**/*.json',\n    '**/*.md',\n    '**/*.yaml',\n  ],\n  /**\n   * null  =&gt; 关闭该规则\n   * always =&gt; 必须\n   */\n  rules: &#123;\n    'value-keyword-case': null, // 在 css 中使用 v-bind，不报错\n    'no-descending-specificity': null, // 禁止在具有较高优先级的选择器后出现被其覆盖的较低优先级的选择器\n    'function-url-quotes': 'always', // 要求或禁止 URL 的引号 &quot;always(必须加上引号)&quot;|&quot;never(没有引号)&quot;\n    'no-empty-source': null, // 关闭禁止空源码\n    'selector-class-pattern': null, // 关闭强制选择器类名的格式\n    'property-no-unknown': null, // 禁止未知的属性(true 为不允许)\n    'block-opening-brace-space-before': 'always', //大括号之前必须有一个空格或不能有空白符\n    'value-no-vendor-prefix': null, // 关闭 属性值前缀 --webkit-box\n    'property-no-vendor-prefix': null, // 关闭 属性前缀 -webkit-mask\n    'selector-pseudo-class-no-unknown': [\n      // 不允许未知的选择器\n      true,\n      &#123;\n        ignorePseudoClasses: ['global', 'v-deep', 'deep'], // 忽略属性，修改element默认样式的时候能使用到\n      &#125;,\n    ],\n  &#125;,\n&#125;\n</code></pre>\n<h5 id=\"32stylelintignore-忽略文件\"><a class=\"anchor\" href=\"#32stylelintignore-忽略文件\">#</a> 3.2.stylelintignore 忽略文件</h5>\n<pre><code>/node_modules/*\n/dist/*\n/html/*\n/public/*\n</code></pre>\n<h5 id=\"33-运行脚本\"><a class=\"anchor\" href=\"#33-运行脚本\">#</a> 3.3 运行脚本</h5>\n<pre><code>&quot;scripts&quot;: &#123;\n\t&quot;lint:style&quot;: &quot;stylelint src/**/*.&#123;css,scss,vue&#125; --cache --fix&quot;\n&#125;\n</code></pre>\n<p>最后配置统一的 prettier 来格式化我们的 js 和 css，html 代码</p>\n<pre><code> &quot;scripts&quot;: &#123;\n    &quot;dev&quot;: &quot;vite --open&quot;,\n    &quot;build&quot;: &quot;vue-tsc &amp;&amp; vite build&quot;,\n    &quot;preview&quot;: &quot;vite preview&quot;,\n    &quot;lint&quot;: &quot;eslint src&quot;,\n    &quot;fix&quot;: &quot;eslint src --fix&quot;,\n    &quot;format&quot;: &quot;prettier --write \\&quot;./**/*.&#123;html,vue,ts,js,json,md&#125;\\&quot;&quot;,\n    &quot;lint:eslint&quot;: &quot;eslint src/**/*.&#123;ts,vue&#125; --cache --fix&quot;,\n    &quot;lint:style&quot;: &quot;stylelint src/**/*.&#123;css,scss,vue&#125; --cache --fix&quot;\n  &#125;,\n</code></pre>\n<p><strong>当我们运行 <code>pnpm run format</code>  的时候，会把代码直接格式化</strong></p>\n<h4 id=\"四-配置-husky\"><a class=\"anchor\" href=\"#四-配置-husky\">#</a> 四、配置 husky</h4>\n<blockquote>\n<p>这个插件需要 git。要先 <code>git init</code>  初始化后才能用</p>\n</blockquote>\n<p>在上面我们已经集成好了我们代码校验工具，但是需要每次手动的去执行命令才会格式化我们的代码。如果有人没有格式化就提交了远程仓库中，那这个规范就没什么用。所以我们需要强制让开发人员按照代码规范来提交。</p>\n<p>要做到这件事情，就需要利用 husky 在代码提交之前触发 git hook (git 在客户端的钩子)，然后执行 <code>pnpm run format</code>  来自动的格式化我们的代码。</p>\n<p>安装 <code>husky</code></p>\n<pre><code>pnpm install -D husky\n</code></pre>\n<p>执行</p>\n<pre><code>npx husky-init\n</code></pre>\n<p>会在根目录下生成个一个.husky 目录，在这个目录下面会有一个 pre-commit 文件，这个文件里面的命令在我们执行 commit 的时候就会执行</p>\n<p>在 <code>.husky/pre-commit</code>  文件添加如下命令：</p>\n<pre><code>#!/usr/bin/env sh\n. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;\npnpm run format\n</code></pre>\n<p>当我们对代码进行 commit 操作的时候，就会执行命令，对代码进行格式化，然后再提交。</p>\n<h4 id=\"五-配置-commitlint\"><a class=\"anchor\" href=\"#五-配置-commitlint\">#</a> 五、配置 commitlint</h4>\n<p>对于我们的 commit 信息，也是有统一规范的，不能随便写，要让每个人都按照统一的标准来执行，我们可以利用<strong> commitlint</strong> 来实现。</p>\n<p>安装包</p>\n<pre><code>pnpm add @commitlint/config-conventional @commitlint/cli -D\n</code></pre>\n<p>添加配置文件，新建 <code>commitlint.config.cjs</code>  (注意是 cjs)，然后添加下面的代码：</p>\n<pre><code>module.exports = &#123;\n  extends: ['@commitlint/config-conventional'],\n  // 校验规则\n  rules: &#123;\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat',\n        'fix',\n        'docs',\n        'style',\n        'refactor',\n        'perf',\n        'test',\n        'chore',\n        'revert',\n        'build',\n      ],\n    ],\n    'type-case': [0],\n    'type-empty': [0],\n    'scope-empty': [0],\n    'scope-case': [0],\n    'subject-full-stop': [0, 'never'],\n    'subject-case': [0, 'never'],\n    'header-max-length': [0, 'always', 72],\n  &#125;,\n&#125;\n</code></pre>\n<p>在 <code>package.json</code>  中配置 scripts 命令</p>\n<pre><code># 在scrips中添加下面的代码\n&#123;\n&quot;scripts&quot;: &#123;\n    &quot;commitlint&quot;: &quot;commitlint --config commitlint.config.cjs -e -V&quot;\n  &#125;,\n&#125;\n</code></pre>\n<p>配置结束，现在当我们填写 <code>commit</code>  信息的时候，前面就需要带着下面的 <code>subject</code></p>\n<pre><code>'feat',//新特性、新功能\n'fix',//修改bug\n'docs',//文档修改\n'style',//代码格式修改, 注意不是 css 修改\n'refactor',//代码重构\n'perf',//优化相关，比如提升性能、体验\n'test',//测试用例修改\n'chore',//其他修改, 比如改变构建流程、或者增加依赖库、工具等\n'revert',//回滚到上一个版本\n'build',//编译相关的修改，例如发布版本、对项目构建或者依赖的改动\n</code></pre>\n<p>配置 husky</p>\n<pre><code>npx husky add .husky/commit-msg\n</code></pre>\n<p>在生成的 commit-msg 文件中添加下面的命令</p>\n<pre><code>#!/usr/bin/env sh\n. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;\npnpm commitlint\n</code></pre>\n<p>当我们 commit 提交信息时，就不能再随意写了，必须是 git commit -m 'fix: xxx' 符合类型的才可以，<strong>需要注意的是类型的后面需要用英文的 :，并且冒号后面是需要空一格的，这个是不能省略的</strong></p>\n<h4 id=\"六-强制使用-pnpm-包管理器工具\"><a class=\"anchor\" href=\"#六-强制使用-pnpm-包管理器工具\">#</a> 六、强制使用 pnpm 包管理器工具</h4>\n<p>团队开发项目的时候，需要统一包管理器工具，因为不同包管理器工具下载同一个依赖，可能版本不一样，</p>\n<p>导致项目出现 bug 问题，因此包管理器工具需要统一管理！！！</p>\n<p>在根目录创建 <code>scripts/preinstall.js</code>  文件，添加下面的内容</p>\n<pre><code>if (!/pnpm/.test(process.env.npm_execpath || '')) &#123;\n  console.warn(\n    `\\u001b[33mThis repository must using pnpm as the package manager ` +\n    ` for scripts to work properly.\\u001b[39m\\n`,\n  )\n  process.exit(1)\n&#125;\n</code></pre>\n<p>配置命令</p>\n<pre><code>&quot;scripts&quot;: &#123;\n\t&quot;preinstall&quot;: &quot;node ./scripts/preinstall.js&quot;\n&#125;\n</code></pre>\n<p><strong>当我们使用 npm 或者 yarn 来安装包的时候，就会报错了。原理就是在 install 的时候会触发 preinstall（npm 提供的生命周期钩子）这个文件里面的代码。</strong></p>\n<h2 id=\"二-项目集成\"><a class=\"anchor\" href=\"#二-项目集成\">#</a> 二、项目集成</h2>\n<h3 id=\"21-集成-element-plus\"><a class=\"anchor\" href=\"#21-集成-element-plus\">#</a> 2.1 集成 element-plus</h3>\n<p>硅谷甄选运营平台，UI 组件库采用的 element-plus，因此需要集成 element-plus 插件！！！</p>\n<p>官网地址:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbGVtZW50LXBsdXMuZ2l0ZWUuaW8vemgtQ04v\">https://element-plus.gitee.io/zh-CN/</span></p>\n<pre><code>pnpm install element-plus @element-plus/icons-vue\n</code></pre>\n<p><strong>入口文件 main.ts 全局安装 element-plus,element-plus 默认支持语言英语设置为中文</strong></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> ElementPlus <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"element-plus/dist/index.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//@ts-ignore 忽略当前文件 ts 类型的检测否则有红色提示 (打包会失败)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> zhCn <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus/dist/locale/zh-cn.mjs\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>ElementPlus<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  locale<span class=\"token operator\">:</span> zhCn<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>Element Plus 全局组件类型声明</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// tsconfig.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"types\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"element-plus/global\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置完毕可以测试 element-plus 组件与图标的使用.</p>\n<h3 id=\"22-src-别名的配置\"><a class=\"anchor\" href=\"#22-src-别名的配置\">#</a> 2.2 src 别名的配置</h3>\n<p>在开发项目的时候文件与文件关系可能很复杂，因此我们需要给 src 文件夹配置一个别名！！！</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// vite.config.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineConfig <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string-property property\">\"@\"</span><span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 相对路径别名配置，使用 @ 代替 src</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>TypeScript 编译配置</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// tsconfig.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 解析非相对模块的基地址，默认是当前目录</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 路径映射，相对于 baseUrl</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"23-环境变量的配置\"><a class=\"anchor\" href=\"#23-环境变量的配置\">#</a> 2.3 环境变量的配置</h3>\n<p><strong>项目开发过程中，至少会经历开发环境、测试环境和生产环境 (即正式环境) 三个阶段。不同阶段请求的状态 (如接口地址等) 不尽相同，若手动切换接口地址是相当繁琐且易出错的。于是环境变量配置的需求就应运而生，我们只需做简单的配置，把环境状态切换的工作交给代码。</strong></p>\n<p>开发环境（development）<br />\n顾名思义，开发使用的环境，每位开发人员在自己的 dev 分支上干活，开发到一定程度，同事会合并代码，进行联调。</p>\n<p>测试环境（testing）<br />\n测试同事干活的环境啦，一般会由测试同事自己来部署，然后在此环境进行测试</p>\n<p>生产环境（production）<br />\n生产环境是指正式提供对外服务的，一般会关掉错误报告，打开错误日志。(正式提供给客户使用的环境。)</p>\n<p>注意：一般情况下，一个环境对应一台服务器，也有的公司开发与测试环境是一台服务器！！！</p>\n<p>项目根目录分别添加 开发、生产和测试环境的文件！</p>\n<pre><code>.env.development\n.env.production\n.env.test\n</code></pre>\n<p>文件内容</p>\n<pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取\nNODE_ENV = 'development'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/dev-api'\n</code></pre>\n<pre><code>NODE_ENV = 'production'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/prod-api'\n</code></pre>\n<pre><code># 变量必须以 VITE_ 为前缀才能暴露给外部读取\nNODE_ENV = 'test'\nVITE_APP_TITLE = '硅谷甄选运营平台'\nVITE_APP_BASE_API = '/test-api'\n</code></pre>\n<p>配置运行命令：package.json</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite --open\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"build:test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-tsc &amp;&amp; vite build --mode test\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"build:pro\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vue-tsc &amp;&amp; vite build --mode production\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"preview\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"vite preview\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>通过 import.meta.env 获取环境变量</p>\n<h3 id=\"24-svg-图标配置\"><a class=\"anchor\" href=\"#24-svg-图标配置\">#</a> 2.4 SVG 图标配置</h3>\n<p>在开发项目的时候经常会用到 svg 矢量图，而且我们使用 SVG 以后，页面上加载的不再是图片资源，</p>\n<p>这对页面性能来说是个很大的提升，而且我们 SVG 文件比 img 要小的很多，放在项目中几乎不占用资源。</p>\n<p><strong>安装 SVG 依赖插件</strong></p>\n<pre><code>pnpm install vite-plugin-svg-icons -D\n</code></pre>\n<p><strong>在 <code>vite.config.ts</code>  中配置插件</strong></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createSvgIconsPlugin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-svg-icons\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">\"path\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">createSvgIconsPlugin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// Specify the icon folder to be cached</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        iconDirs<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"src/assets/icons\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// Specify symbolId format</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        symbolId<span class=\"token operator\">:</span> <span class=\"token string\">\"icon-[dir]-[name]\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>入口文件导入</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"virtual:svg-icons-register\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"241-svg-封装为全局组件\"><a class=\"anchor\" href=\"#241-svg-封装为全局组件\">#</a> 2.4.1 svg 封装为全局组件</h4>\n<p>因为项目很多模块需要使用图标，因此把它封装为全局组件！！！(这样就不用 import 引入了)</p>\n<p><strong>在 src/components 目录下创建一个 SvgIcon 组件：代表如下</strong></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;svg :style=&quot;&#123; width: width, height: height &#125;&quot;&gt;\n      &lt;use :xlink:href=&quot;prefix + name&quot; :fill=&quot;color&quot;&gt;&lt;/use&gt;\n    &lt;/svg&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\ndefineProps(&#123;\n  //xlink:href属性值的前缀\n  prefix: &#123;\n    type: String,\n    default: &quot;#icon-&quot;,\n  &#125;,\n  //svg矢量图的名字\n  name: String,\n  //svg图标的颜色\n  color: &#123;\n    type: String,\n    default: &quot;&quot;,\n  &#125;,\n  //svg宽度\n  width: &#123;\n    type: String,\n    default: &quot;16px&quot;,\n  &#125;,\n  //svg高度\n  height: &#123;\n    type: String,\n    default: &quot;16px&quot;,\n  &#125;,\n&#125;);\n&lt;/script&gt;\n&lt;style scoped&gt;&lt;/style&gt;\n</code></pre>\n<p>在 components 文件夹目录下创建一个 <code>index.ts</code>  文件：用于注册 components 文件夹内部全部全局组件！！！</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> SvgIcon <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/SvgIcon/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> App<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> SvgIcon <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> App<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在入口文件 <code>main.ts</code>  中引入 <code>components/index.ts</code>  文件，通过 app.use 方法安装自定义插件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> gloablComponent <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>gloablComponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>以上是注册多个全局组件的场景，如果只有一两个组件需要注册全局组件，那么不用创建 <code>src/index.ts</code>  文件，直接在入口文件 <code>main.ts</code>  配置如下代码：</p>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> SvgIcon <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/SvgIcon/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SvgIcon\"</span><span class=\"token punctuation\">,</span> SvgIcon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"25-集成-sass\"><a class=\"anchor\" href=\"#25-集成-sass\">#</a> 2.5 集成 sass</h3>\n<p>我们目前在组件内部已经可以使用 scss 样式，因为在配置 styleLint 工具的时候，项目当中已经安装过 sass sass-loader, 因此我们再组件内可以使用 scss 语法！！！需要加上 lang=&quot;scss&quot;</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>&lt;style scoped lang=<span class=\"token string\">\"scss\"</span>>&lt;/style></pre></td></tr></table></figure><p>接下来我们为项目添加一些全局的样式</p>\n<p>在 <code>src/styles</code>  目录下创建一个 <code>index.scss</code>  文件，当然项目中需要用到清除默认样式，因此在 index.scss 引入 <code>reset.scss</code></p>\n<figure class=\"highlight scss\"><figcaption data-lang=\"Sass (Scss)\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">@import</span> <span class=\"token string\">\"./reset.scss\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在入口文件 <code>main.ts</code>  引入</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"@/styles/index.scss\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是你会发现在 src/styles/index.scss 全局样式文件中没有办法使用<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>变量</mtext><mi mathvariant=\"normal\">.</mi><mtext>因此需要给项目中引入全局变量</mtext></mrow><annotation encoding=\"application/x-tex\">变量.因此需要给项目中引入全局变量</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord\">.</span><span class=\"mord cjk_fallback\">因</span><span class=\"mord cjk_fallback\">此</span><span class=\"mord cjk_fallback\">需</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">给</span><span class=\"mord cjk_fallback\">项</span><span class=\"mord cjk_fallback\">目</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">引</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">全</span><span class=\"mord cjk_fallback\">局</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span></span></span></span>.</p>\n<p>在 styles 文件夹下创建一个 variable.scss 文件！</p>\n<p>在 vite.config.ts 文件配置如下:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tcss<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      preprocessorOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        scss<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          javascriptEnabled<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          additionalData<span class=\"token operator\">:</span> <span class=\"token string\">'@import \"./src/styles/variable.scss\";'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong> <code>@import &quot;./src/styles/variable.less&quot;;</code>  后面的 <code>;</code>  不要忘记，不然会报错</strong>！</p>\n<p>配置完毕你会发现 scss 提供这些全局变量可以在组件样式中使用了！！！</p>\n<h3 id=\"26-mock-数据\"><a class=\"anchor\" href=\"#26-mock-数据\">#</a> 2.6 mock 数据</h3>\n<p>安装依赖:<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2Uvdml0ZS1wbHVnaW4tbW9jaw==\">https://www.npmjs.com/package/vite-plugin-mock</span></p>\n<pre><code>pnpm install -D vite-plugin-mock@2.9.8 mockjs\n</code></pre>\n<blockquote>\n<p>注意：这里要用 2.9.6 版本<br />\n在  <code>vite.config.js</code>  配置文件启用插件。</p>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> UserConfigExport<span class=\"token punctuation\">,</span> ConfigEnv <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> viteMockServe <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite-plugin-mock\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@vitejs/plugin-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> command <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">viteMockServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//localEnabled: command === 'serve',</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        enable<span class=\"token operator\">:</span> command <span class=\"token operator\">===</span> <span class=\"token string\">\"serve\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 保证开发阶段可以使用 mock 接口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在根目录创建 mock 文件夹：去创建我们需要 mock 数据与接口！！！</p>\n<p>在 mock 文件夹内部创建一个 user.ts 文件</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用户信息数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      userId<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      avatar<span class=\"token operator\">:</span> <span class=\"token string\">\"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      username<span class=\"token operator\">:</span> <span class=\"token string\">\"admin\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">\"111111\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      desc<span class=\"token operator\">:</span> <span class=\"token string\">\"平台管理员\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"平台管理员\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      buttons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cuser.detail\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      token<span class=\"token operator\">:</span> <span class=\"token string\">\"Admin Token\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      userId<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      avatar<span class=\"token operator\">:</span> <span class=\"token string\">\"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      username<span class=\"token operator\">:</span> <span class=\"token string\">\"system\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      password<span class=\"token operator\">:</span> <span class=\"token string\">\"111111\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      desc<span class=\"token operator\">:</span> <span class=\"token string\">\"系统管理员\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      roles<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"系统管理员\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      buttons<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cuser.detail\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cuser.user\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      token<span class=\"token operator\">:</span> <span class=\"token string\">\"System Token\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 用户登录接口</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/api/user/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求地址</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">\"post\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 请求方式</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function-variable function\">response</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> body <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token comment\">// 获取请求体携带过来的用户名与密码</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> username<span class=\"token punctuation\">,</span> password <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 调用获取用户信息函数，用于判断是否有此用户</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      <span class=\"token keyword\">const</span> checkUser <span class=\"token operator\">=</span> <span class=\"token function\">createUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>username <span class=\"token operator\">===</span> username <span class=\"token operator\">&amp;&amp;</span> item<span class=\"token punctuation\">.</span>password <span class=\"token operator\">===</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      <span class=\"token comment\">// 没有用户返回失败信息</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>checkUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"账号或者密码不正确\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 如果有返回成功信息</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> token <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> checkUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> token <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">\"/api/user/info\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token function-variable function\">response</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token comment\">// 获取请求头携带 token</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token comment\">// 查看用户信息是否包含有次 token 用户</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token keyword\">const</span> checkUser <span class=\"token operator\">=</span> <span class=\"token function\">createUserList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>token <span class=\"token operator\">===</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>      <span class=\"token comment\">// 没有返回失败的信息</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>checkUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">201</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"获取用户信息失败\"</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token comment\">// 如果有返回成功信息</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> code<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> checkUser <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>安装 axios</strong></p>\n<pre><code>pnpm install axios\n</code></pre>\n<p>最后通过 axios 测试接口！！！</p>\n<h3 id=\"27-axios-二次封装\"><a class=\"anchor\" href=\"#27-axios-二次封装\">#</a> 2.7 axios 二次封装</h3>\n<p>在开发项目的时候避免不了与后端进行交互，因此我们需要使用 axios 插件实现发送网络请求。在开发项目的时候</p>\n<p>我们经常会把 axios 进行二次封装。</p>\n<p>目的:</p>\n<p>1: 使用请求拦截器，可以在请求拦截器中处理一些业务 (开始进度条、请求头携带公共参数)</p>\n<p>2: 使用响应拦截器，可以在响应拦截器中处理一些业务 (进度条结束、简化服务器返回的数据、处理 http 网络错误)</p>\n<p>在 src 目录下下创建 <code>utils/request.ts</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElMessage <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 axios 实例</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_APP_BASE_API</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  timeout<span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 请求拦截器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>request<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 响应拦截器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>request<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 处理网络错误</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">let</span> status <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">401</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"token过期\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">403</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"无权访问\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">404</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"请求地址错误\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token keyword\">case</span> <span class=\"token number\">500</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"服务器出现问题\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        msg <span class=\"token operator\">=</span> <span class=\"token string\">\"无网络\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">ElMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      message<span class=\"token operator\">:</span> msg<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> request<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"28-api-接口统一管理\"><a class=\"anchor\" href=\"#28-api-接口统一管理\">#</a> 2.8 API 接口统一管理</h3>\n<p>在开发项目的时候，接口可能很多需要统一管理。在 src 目录下去创建 <code>api文件夹</code> 去统一管理项目的接口；</p>\n<p>比如：下面方式</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统一管理咱们项目用户相关的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> loginFormData<span class=\"token punctuation\">,</span> loginResponseData<span class=\"token punctuation\">,</span> userInfoReponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 项目用户相关的请求地址</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token constant\">LOGIN_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token constant\">USERINFO_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/info\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token constant\">LOGOUT_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/logout\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 登录接口</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> loginFormData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> loginResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> userInfoReponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USERINFO_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGOUT_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>如果接口太多可以根据接口的功能分模块在 api 文件夹下新建子文件夹，如：user、product、acl。<br />\n接口的 ts 类型可以像本项目一样在 api 文件夹下的每个接口文件夹中分别定义 ts 类型，也可以在 src 目录下新建一个 modules 文件夹专门放接口的 ts 类型：参考 招生提报系统</p>\n</blockquote>\n<h3 id=\"29-模板的路由配置\"><a class=\"anchor\" href=\"#29-模板的路由配置\">#</a> 2.9 模板的路由配置</h3>\n<p>首先分析一下项目都需要有哪些路由：<br />\n一级路由（4 个）：登录 login、登录成功后的首页面板展示 home、404 路由、重定向路由</p>\n<ol>\n<li>pnpm 安装 vue-router：</li>\n</ol>\n<pre><code>pnpm i vue-router\n</code></pre>\n<ol start=\"2\">\n<li>在 src 文件夹下创建 <code>views</code>  或 <code>pages</code>  文件夹，存放路由。\n<blockquote>\n<p>注意：views 文件夹中存放路由页面（组件），router 文件夹中放路由表</p>\n</blockquote>\n</li>\n</ol>\n<p>根据需求，分别创建一级路由：home，login，404</p>\n<ol start=\"3\">\n<li>在 src 目录下创建 <code>router</code>  文件夹，存放路由表，配置路由。<br />\n搭建出路由基本模板：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 vue-router 插件实现模板路由的配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHashHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建路由器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 路由模式 hash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命名路由。加名字方便后面控制菜单权限，根据用户信息匹配路由</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/login/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 省略其他路由……</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然，通常我们实际写项目的时候都会把 routes 单独摘出来：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 vue-router 插件实现模板路由的配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createRouter<span class=\"token punctuation\">,</span> createWebHashHistory <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 命名路由。加名字方便后面控制菜单权限，根据用户信息匹配路由</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/login/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/home/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/404\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"/404\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@/views/404/index.vue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">\"/:pathMatch(.*)*\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"any\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    redirect<span class=\"token operator\">:</span> <span class=\"token string\">\"/404\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 也可重定向到首页 home</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 创建路由器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token comment\">// 路由模式 hash</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  history<span class=\"token operator\">:</span> <span class=\"token function\">createWebHashHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  routes<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>在入口文件 main.ts 中注册一下路由：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"./router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>router<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>之后便可以在 <code>App.vue</code>  中使用：</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre>\n<h3 id=\"210-pinia-仓库\"><a class=\"anchor\" href=\"#210-pinia-仓库\">#</a> 2.10 pinia 仓库</h3>\n<ol>\n<li>pnpm i pinia</li>\n<li>src/store/index.ts</li>\n<li>创建大仓库：</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> createPinia <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建大仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> pinia <span class=\"token operator\">=</span> <span class=\"token function\">createPinia</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对外暴露：入口文件需要安装仓库</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> pinia<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>入口文件 main.ts 引入</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> pinia <span class=\"token keyword\">from</span> <span class=\"token string\">\"./store\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 安装仓库</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>创建用户相关的小仓库：src/modules/user.ts</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 创建小仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 处理异步 | 逻辑的地方</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useUserStore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"211-login-路由页面\"><a class=\"anchor\" href=\"#211-login-路由页面\">#</a> 2.11 login 路由页面</h3>\n<ol>\n<li>写 html、css 样式，把骨架搭建起来，收集输入框的账号、密码表单数据</li>\n<li>登录按钮，点击后仓库发送登录请求</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//login.vue 的 script 部分</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> useUserStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/store/modules/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> useStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 点击登录后干什么？</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 通知仓库发登录请求</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 请求成功 - 首页 home</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 请求失败 - 弹出登录失败信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  useStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span>loginForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 把表单收集到的账号密码传递过去</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>在小仓库 user.ts 中写 <code>userLogin()</code>  方法</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引入接口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> reqLogin <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 引入数据类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> loginForm <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user/type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建小仓库</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> useUserStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"User\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      token<span class=\"token operator\">:</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用户唯一标识 token</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 处理异步 | 逻辑的地方</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 用户登录的方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> loginForm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 登录请求</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">reqLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token comment\">// 登录请求成功 200->token</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 登录请求失败 201-> 登录失败错误信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">//pinia 仓库存储一下 token</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 由于 pinia|vuex 存储数据其实是利用 js 对象</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">==</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 本地存储持久化存储一份</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 也可以用 pinia-plugin-persistedstate 插件持久化存储</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useUserStore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>登录成功与失败后干什么<br />\n登录页面 login/index.vue,script 部分</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElNotification <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取路由器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> $router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">login</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 点击登录后干什么？</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 通知仓库发登录请求</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 请求成功 - 首页 home</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 请求失败 - 弹出登录失败信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 保证登录成功</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">await</span> useStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span>loginForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 编程式导航跳转到 home 首页</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    $router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 登陆成功的提示信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">ElNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      message<span class=\"token operator\">:</span> <span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">ElNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      type<span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      message<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>error <span class=\"token keyword\">as</span> Error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>\n<p>完善小仓库 user.ts 的 ts 类型<br />\n类型断言等等</p>\n</li>\n<li>\n<p>封装本地存储数据与读取数据方法，用的时候 import 引入就可以直接用</p>\n</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SET_TOKEN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>token<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">,</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">GET_TOKEN</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>登录时间判断与封装</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 封装一个函数：获取一个结果：早上 | 上午 | 下午 | 晚上</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTime</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 通过内置的构造函数 data 获取时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> hours <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"早上\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"上午\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hours <span class=\"token operator\">&lt;=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"下午\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    message <span class=\"token operator\">=</span> <span class=\"token string\">\"晚上\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后在 login/index.vue 中使用</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入获取时间的函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>getTime<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/time'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>……</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 登陆成功的提示信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">ElNotification</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  type<span class=\"token operator\">:</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  message<span class=\"token operator\">:</span><span class=\"token string\">'欢迎回来'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  title<span class=\"token operator\">:</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hi,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">好</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>登录模块表单校验<br />\n（用户名必须大于等于 4 位，密码必须大于等于 6 位）<br />\n这里使用 element-plus 中 Form 组件自带的表单验证功能： <code>rules</code>  属性<br />\n要保证所有的表单项校验通过再发请求  <code>validate</code></li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-form class=&quot;login_form&quot; :model=&quot;loginForm&quot; :rules=&quot;rules&quot; ref=&quot;loginForms&quot;&gt;\n    &lt;h1&gt;请登录&lt;/h1&gt;\n    &lt;el-form-item prop=&quot;username&quot;&gt;\n      &lt;el-input :prefix-icon=&quot;User&quot; v-model=&quot;loginForm.username&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item prop=&quot;password&quot;&gt;\n      &lt;el-input type=&quot;password&quot; :prefix-icon=&quot;Lock&quot; show-password=&quot;true&quot; v-model=&quot;loginForm.password&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n  &lt;/el-form&gt;\n&lt;/template&gt;\n&lt;script setup lang=&quot;ts&quot;&gt;\n//收集账号与密码的数据\nlet loginForm = reactive(&#123;\n  username: &quot;admin&quot;,\n  password: &quot;111111&quot;,\n&#125;);\n//获取el-form组件\nlet loginForms = ref();\n\nconst login = async () =&gt; &#123;\n  //保证所有的表单项校验通过再发请求\n  await loginForms.value.validate();\n  //点击登录后干什么？\n  //通知仓库发登录请求\n  //请求成功-首页home\n  //请求失败-弹出登录失败信息\n  try &#123;\n    //保证登录成功\n    await useStore.userLogin(loginForm);\n    //编程式导航跳转到home首页\n    $router.push(&quot;/&quot;);\n    //登陆成功的提示信息\n    ElNotification(&#123;\n      type: &quot;success&quot;,\n      message: &quot;欢迎回来&quot;,\n      title: `Hi,$&#123;getTime()&#125;好`,\n    &#125;);\n  &#125; catch (error) &#123;\n    ElNotification(&#123;\n      type: &quot;error&quot;,\n      message: (error as Error).message,\n    &#125;);\n  &#125;\n&#125;;\n\n//定义表单校验需要的配置对象\nconst rules = &#123;\n  username: [\n    &#123;\n      required: true,\n      min: 4,\n      max: 10,\n      message: &quot;账号长度至少4位&quot;,\n      trigger: &quot;change&quot;,\n    &#125;,\n  ],\n  password: [\n    &#123;\n      required: true,\n      min: 6,\n      max: 12,\n      message: &quot;密码长度至少6位&quot;,\n      trigger: &quot;change&quot;,\n    &#125;,\n  ],\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"212-layout或-home路由首页\"><a class=\"anchor\" href=\"#212-layout或-home路由首页\">#</a> 2.12 layout (或 home) 路由首页</h3>\n<p>包含：左侧导航菜单，顶部导航，中间内容展示区 (包含许多二级路由)</p>\n<ol>\n<li>搭建骨架，<br />\nviews/layout/index.vue</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;layout_container&quot;&gt;\n    &lt;!-- 左侧菜单 --&gt;\n    &lt;div class=&quot;layout_slider&quot;&gt;123&lt;/div&gt;\n    &lt;!-- 顶部导航 --&gt;\n    &lt;div class=&quot;layout_tabbar&quot;&gt;456&lt;/div&gt;\n    &lt;!-- 中间内容展示区域 --&gt;\n    &lt;div class=&quot;layout_main&quot;&gt;789&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.layout_container &#123;\n  width: 100%;\n  height: 100vh;\n  background: white;\n\n  .layout_slider &#123;\n    width: $base-menu-width;\n    height: 100vh;\n    background: #39c5bb;\n  &#125;\n\n  .layout_tabbar &#123;\n    position: fixed;\n    width: calc(100% - $base-menu-width);\n    height: $base-tabbar-height;\n    background: pink;\n    top: 0px;\n    left: $base-menu-width;\n  &#125;\n\n  .layout_main &#123;\n    position: absolute;\n    width: calc(100% - $base-menu-width);\n    height: calc(100vh - $base-tabbar-height);\n    top: $base-tabbar-height;\n    left: $base-menu-width;\n    padding: 20px;\n    overflow: auto;\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"2\">\n<li>logo 组件封装<br />\n layout/logo/index.vue:</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;logo&quot;&gt;\n    &lt;img src=&quot;../../../../public/logo.png&quot; alt=&quot;&quot; /&gt;\n    &lt;p&gt;K.K后台管理系统&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.logo &#123;\n  width: 100%;\n  height: $base-menu-logo-height;\n  display: flex;\n  align-items: center;\n  padding: 20px;\n  img &#123;\n    width: 40px;\n    height: 40px;\n  &#125;\n  p &#123;\n    font-size: $base-logo-title-fontSize;\n    margin-left: 10px;\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"3\">\n<li>左侧菜单展示相应的菜单\n<blockquote>\n<p>左侧的菜单其实就是一些可点击的导航链接，点击后中间的内容展示区域会切换相应的路由<br />\n我们使用 elementplus 的 menu 组件，但是不能写死，因为到时候要根据用户的路由去形成菜单<br />\n我们选择将左侧菜单单独封装成一个组件，根据项目的路由去展示菜单项</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>user 仓库引入路由（常量路由） 动态路由是登录后比对用户信息后获取的：<br />\nstore/modules/user.ts:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入路由（常量路由） 动态路由是登录后比对用户信息后获取的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> constantRoute <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/router/routes'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>state<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserState <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    menuRoutes<span class=\"token operator\">:</span> constantRoute<span class=\"token punctuation\">,</span><span class=\"token comment\">// 仓库存储生成左侧菜单需要的数组 (由)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><ul>\n<li>新建封装 menu 子组件，把路由数据传给 menu 组件<br />\n layout/index.vue:</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;Menu :menuList=&quot;userStore.menuRoutes&quot;&gt;&lt;/Menu&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入左侧菜单组件\nimport Menu from &quot;./menu/index.vue&quot;;\n\n//获取用户相关的小仓库\nimport useUserStore from &quot;@/store/modules/user&quot;;\nlet userStore = useUserStore();\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>接下来是 menu 子组件根据路由动态生成菜单：<br />\nlayout/menu/index.vue:</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;template v-for=&quot;(item, index) in menuList&quot; :key=&quot;item.path&quot;&gt;\n    &lt;!-- 没有子路由 --&gt;\n    &lt;el-menu-item v-if=&quot;!item.children&quot; :index=&quot;item.path&quot;&gt;\n      &lt;!-- &lt;template #title&gt;：菜单的名字 --&gt;\n      &lt;template #title&gt;\n        &lt;span&gt;&lt;/span&gt;\n        &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n      &lt;/template&gt;\n    &lt;/el-menu-item&gt;\n    &lt;!-- 有子路由但是只有一个子路由 --&gt;\n    &lt;el-menu-item v-if=&quot;item.children &amp;&amp; item.children.length == 1&quot; :index=&quot;item.children[0].path&quot;&gt;\n      &lt;template #title&gt;\n        &lt;span&gt;&#123;&#123; item.children[0].meta.title &#125;&#125;&lt;/span&gt;\n      &lt;/template&gt;\n    &lt;/el-menu-item&gt;\n    &lt;!-- 有子路由，且个数大于一个 --&gt;\n    &lt;el-sub-menu v-if=&quot;item.children &amp;&amp; item.children.length &gt; 1&quot; :index=&quot;item.path&quot;&gt;\n      &lt;template #title&gt;\n        &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n      &lt;/template&gt;\n      &lt;!-- 递归组件：递归一级路由的子路由，展示在这里 --&gt;\n      &lt;Menu :menuList=&quot;item.children&quot;&gt;&lt;/Menu&gt;\n    &lt;/el-sub-menu&gt;\n  &lt;/template&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//获取父组件传递过来的全部路由数组\ndefineProps([&quot;menuList&quot;]);\n&lt;/script&gt;\n&lt;script lang=&quot;ts&quot;&gt;\n//为了使用递归组件不报错，起个名字\nexport default &#123;\n  name: &quot;Menu&quot;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>并不是所有的路由都要在左侧菜单中展示（比如登录路由，你都进来了自然不需要再登录）。因此我们需要告诉组件哪些需要展示哪些不需要展示\n<blockquote>\n<p>在路由表 router/routes.ts 中路由的路由元信息 <code>meta</code>  中添加 <code>hidden</code>  属性，需要隐藏的就设为 true</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 菜单标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 代表路由标题在菜单中是否隐藏  true: 隐藏 false: 不隐藏</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><ul>\n<li>那么接下来怎么判断显示 / 隐藏？\n<blockquote>\n<p>再嵌套一层 &lt;template&gt;，把判断是否多层路由放在这里，然后把判断显示隐藏放在里层<br />\n layout/menu/index.vue:</p>\n</blockquote>\n</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;template v-for=&quot;(item, index) in menuList&quot; :key=&quot;item.path&quot;&gt;\n    &lt;!-- 没有子路由 --&gt;\n    &lt;template v-if=&quot;!item.children&quot;&gt;\n      &lt;el-menu-item :index=&quot;item.path&quot; v-if=&quot;!item.meta.hidden&quot;&gt;\n        &lt;!-- &lt;template #title&gt;：菜单的名字 --&gt;\n        &lt;template #title&gt;\n          &lt;span&gt;&lt;/span&gt;\n          &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n        &lt;/template&gt;\n      &lt;/el-menu-item&gt;\n    &lt;/template&gt;\n    &lt;!-- 有子路由但是只有一个子路由 --&gt;\n    &lt;template v-if=&quot;item.children &amp;&amp; item.children.length == 1&quot;&gt;\n      &lt;el-menu-item :index=&quot;item.children[0].path&quot; v-if=&quot;!item.meta.hidden&quot;&gt;\n        &lt;template #title&gt;\n          &lt;span&gt;&#123;&#123; item.children[0].meta.title &#125;&#125;&lt;/span&gt;\n        &lt;/template&gt;\n      &lt;/el-menu-item&gt;\n    &lt;/template&gt;\n    &lt;!-- 有子路由，且个数大于一个 --&gt;\n    &lt;template v-if=&quot;item.children &amp;&amp; item.children.length &gt; 1&quot;&gt;\n      &lt;el-sub-menu :index=&quot;item.path&quot; v-if=&quot;!item.meta.hidden&quot;&gt;\n        &lt;template #title&gt;\n          &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n        &lt;/template&gt;\n        &lt;!-- 递归组件：递归一级路由的子路由，展示在这里 --&gt;\n        &lt;Menu :menuList=&quot;item.children&quot;&gt;&lt;/Menu&gt;\n      &lt;/el-sub-menu&gt;\n    &lt;/template&gt;\n  &lt;/template&gt;\n&lt;/template&gt;\n</code></pre>\n<ol start=\"4\">\n<li>菜单图标</li>\n</ol>\n<blockquote>\n<ol>\n<li>把 elementplus 所有图标注册为全局组件<br />\n components/index.ts:</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 element-plus 提供的全部图标组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ElementPlusIconsVue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@element-plus/icons-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对外暴露插件对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> App<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 将 element-plus 提供图标注册为全局组件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>ElementPlusIconsVue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>因为菜单是动态生成，所有图标也不能写死，所有图标信息也要写在路由元信息 <code>meta</code>  中</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   title<span class=\"token operator\">:</span> <span class=\"token string\">\"登录\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 菜单标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   hidden<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 代表路由标题在菜单中是否隐藏  true: 隐藏 false: 不隐藏</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   icon<span class=\"token operator\">:</span> <span class=\"token string\">\"Promotion\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 菜单文字左侧的图标，支持 element-plus 全部图标</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>在 menu 路由中应用 (这里简略写)：<br />\nlayout/menu/index.vue</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;!-- 没有子路由 --&gt;\n&lt;template #title&gt;\n  &lt;!-- 添加图标 --&gt;\n  &lt;el-icon&gt;\n    &lt;component :is=&quot;item.meta.icon&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n  &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n&lt;/template&gt;\n\n&lt;!-- 有子路由但是只有一个子路由 --&gt;\n&lt;template #title&gt;\n  &lt;el-icon&gt;\n    &lt;component :is=&quot;item.children[0].meta.icon&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n  &lt;span&gt;&#123;&#123; item.children[0].meta.title &#125;&#125;&lt;/span&gt;\n&lt;/template&gt;\n</code></pre>\n<ol start=\"5\">\n<li>\n<p>项目其他路由配置<br />\n数据大屏 (一级路由)、权限管理（展示二级路由）、商品管理（展示二级路由）</p>\n</li>\n<li>\n<p>点击菜单时进行路由跳转<br />\n注册点击事件，进行路由跳转<br />\n menu 子组件（自己封装的）：</p>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; useRouter &#125; from &quot;vue-router&quot;;\n//获取父组件传递过来的全部路由数组\ndefineProps([&quot;menuList&quot;]);\n\n//获取路由器对象\nlet $router = useRouter();\n//点击菜单的回调,vc：传入的参数为组件实例\nconst goRoute = (vc: any) =&gt; &#123;\n  $router.push(vc.index);\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"7\">\n<li>menu 菜单刷新时不重叠回去<br />\n使用 el-menu 自带的 api <code>default-active</code></li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-menu</span> <span class=\"token attr-name\">:default-active</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$route.path<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-menu</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"213-中间内容展示区域\"><a class=\"anchor\" href=\"#213-中间内容展示区域\">#</a> 2.13 中间内容展示区域</h3>\n<ol>\n<li>封装 main 子组件为中间内容展示区域（不封装也行，这里封装是为了做过渡动画）\n<blockquote>\n<ul>\n<li>layout/index.vue:</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 部分省略 --&gt;\n  &lt;!-- ……………… --&gt;\n  &lt;!-- 中间内容展示区域 --&gt;\n  &lt;div class=&quot;layout_main&quot;&gt;\n    &lt;Main&gt;&lt;/Main&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入中间内容展示区域子组件（自己封装的）\nimport Main from &quot;./main/index.vue&quot;;\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<ul>\n<li>layout/main/index.vue:</li>\n</ul>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 路由组件出口的位置 --&gt;\n  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;\n    &lt;transition name=&quot;fade&quot;&gt;\n      &lt;!-- 渲染layout一级路由组件的子路由 --&gt;\n      &lt;component :is=&quot;Component&quot; /&gt;\n    &lt;/transition&gt;\n  &lt;/router-view&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.fade-enter-from &#123;\n  opacity: 0;\n  transform: scale(0);\n&#125;\n.fade-enter-active &#123;\n  transition: all 0.3s;\n&#125;\n.fade-enter-to &#123;\n  opacity: 1;\n  transform: scale(1);\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"214-顶部-tabbar-导航区域\"><a class=\"anchor\" href=\"#214-顶部-tabbar-导航区域\">#</a> 2.14 顶部 tabbar 导航区域</h3>\n<blockquote>\n<p>先分析一下，大体来看顶部导航区域一共分为两个部分：左边和右边<br />\n左边：折叠按钮、面包屑；右边：刷新按钮、全屏按钮、用户按钮</p>\n</blockquote>\n<ol>\n<li>整体是一个盒子，一左一右，可以用 flex 布局</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;tabbar&quot;&gt;\n    &lt;div class=&quot;tabbar_left&quot;&gt;123&lt;/div&gt;\n    &lt;div class=&quot;tabbar_right&quot;&gt;456&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.tabbar &#123;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"2\">\n<li>基本样式骨架</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;tabbar&quot;&gt;\n    &lt;!-- 左侧 --&gt;\n    &lt;div class=&quot;tabbar_left&quot;&gt;\n      &lt;!-- 折叠按钮 --&gt;\n      &lt;el-icon style=&quot;margin-right: 10px&quot;&gt;&lt;Expand /&gt;&lt;/el-icon&gt;\n      &lt;!-- 面包屑组件 --&gt;\n      &lt;el-breadcrumb separator-icon=&quot;ArrowRight&quot;&gt;\n        &lt;el-breadcrumb-item&gt;权限管理&lt;/el-breadcrumb-item&gt;\n        &lt;el-breadcrumb-item&gt;用户管理&lt;/el-breadcrumb-item&gt;\n      &lt;/el-breadcrumb&gt;\n    &lt;/div&gt;\n    &lt;!-- 右侧 --&gt;\n    &lt;div class=&quot;tabbar_right&quot;&gt;\n      &lt;el-button size=&quot;small&quot; icon=&quot;Refresh&quot; circle&gt;&lt;/el-button&gt;\n      &lt;el-button size=&quot;small&quot; icon=&quot;FullScreen&quot; circle&gt;&lt;/el-button&gt;\n      &lt;el-button size=&quot;small&quot; icon=&quot;Setting&quot; circle&gt;&lt;/el-button&gt;\n      &lt;img src=&quot;&quot; style=&quot;width: 24px; height: 24px; margin: 0 10px&quot; /&gt;\n      &lt;!-- 下拉菜单 --&gt;\n      &lt;el-dropdown&gt;\n        &lt;span class=&quot;el-dropdown-link&quot;&gt;\n          admin\n          &lt;el-icon class=&quot;el-icon--right&quot;&gt;\n            &lt;arrow-down /&gt;\n          &lt;/el-icon&gt;\n        &lt;/span&gt;\n        &lt;template #dropdown&gt;\n          &lt;el-dropdown-menu&gt;\n            &lt;el-dropdown-item&gt;退出登录&lt;/el-dropdown-item&gt;\n          &lt;/el-dropdown-menu&gt;\n        &lt;/template&gt;\n      &lt;/el-dropdown&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.tabbar &#123;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: space-between;\n\n  .tabbar_left &#123;\n    display: flex;\n    align-items: center; //垂直居中\n    margin-left: 20px;\n  &#125;\n  .tabbar_right &#123;\n    display: flex;\n    align-items: center; //垂直居中\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"3\">\n<li>菜单折叠效果实现\n<blockquote>\n<ul>\n<li>点击按钮图标切换：要定义一个响应式数据控制图标切换，绑定方法</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 折叠按钮 --&gt;\n  &lt;el-icon style=&quot;margin-right: 10px&quot; @click=&quot;changeIcon&quot;&gt;\n    &lt;component :is=&quot;fold ? 'Fold' : 'Expand'&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref &#125; from &quot;vue&quot;;\n//定义一个响应式数据控制图标切换\nlet fold = ref(false);\n//点击图标的方法\nconst changeIcon = () =&gt; &#123;\n  fold.value = !fold.value;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<ul>\n<li>因为顶部导航 tabbar 的按钮想要控制左侧菜单 slider 的折叠与展开（控制其宽度），所以需要用的组件间通信<br />\n store/modules/setting.ts 新建小仓库，将数据挂载到仓库上</li>\n</ul>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小仓库：layout 组件相关配置仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"pinia\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 引入数据类型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> loginForm<span class=\"token punctuation\">,</span> loginResponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user/type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建小仓库</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> useLayoutSettingStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SettingStore\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      fold<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用于控制左侧菜单折叠 / 展开</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 处理异步 | 逻辑的地方</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useLayoutSettingStore<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之前 tabbar/index.vue 的代码也要发生改变</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 折叠按钮 --&gt;\n  &lt;el-icon style=&quot;margin-right: 10px&quot; @click=&quot;changeIcon&quot;&gt;\n    &lt;component :is=&quot;LayoutSettingStore.fold ? 'Fold' : 'Expand'&quot;&gt;&lt;/component&gt;\n  &lt;/el-icon&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport useLayoutSettingStore from &quot;@/store/modules/setting&quot;;\n//获取仓库\nlet LayoutSettingStore = useLayoutSettingStore();\n\n//点击图标的方法\nconst changeIcon = () =&gt; &#123;\n  LayoutSettingStore.fold = !LayoutSettingStore.fold;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<p>接下来回到 “爷爷组件” layout/index.vue 组件中实现折叠效果（动态控制宽度）:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;layout_container&quot;&gt;\n    &lt;!-- 左侧菜单 --&gt;\n    &lt;div class=&quot;layout_slider&quot; :class=&quot;&#123; fold: LayoutSettingStore.fold ? true : false &#125;&quot;&gt;\n      &lt;Logo&gt;&lt;/Logo&gt;\n      &lt;!-- 展示菜单 --&gt;\n      &lt;!-- elementplus的菜单组件 --&gt;\n      &lt;el-menu :collapse=&quot;LayoutSettingStore.fold ? true : false&quot; :default-active=&quot;$route.path&quot; background-color=&quot;#39c5bb&quot; text-color=&quot;white&quot;&gt;\n        &lt;!-- 根据路由动态生成菜单 --&gt;\n        &lt;Menu :menuList=&quot;userStore.menuRoutes&quot;&gt;&lt;/Menu&gt;\n      &lt;/el-menu&gt;\n    &lt;/div&gt;\n    &lt;!-- 顶部导航 --&gt;\n    &lt;div class=&quot;layout_tabbar&quot; :class=&quot;&#123; fold: LayoutSettingStore.fold ? true : false &#125;&quot;&gt;\n      &lt;Tabbar&gt;&lt;/Tabbar&gt;\n    &lt;/div&gt;\n    &lt;!-- 中间内容展示区域 --&gt;\n    &lt;div class=&quot;layout_main&quot; :class=&quot;&#123; fold: LayoutSettingStore.fold ? true : false &#125;&quot;&gt;\n      &lt;Main&gt;&lt;/Main&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//获取layout配置小仓库\nimport useLayoutSettingStore from &quot;@/store/modules/setting&quot;;\nlet LayoutSettingStore = useLayoutSettingStore();\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.layout_container &#123;\n  width: 100%;\n  height: 100vh;\n\n  .layout_slider &#123;\n    color: white;\n    width: $base-menu-width;\n    height: 100vh;\n    background: $base-menu-background;\n    transition: all 0.3s;\n    .el-menu &#123;\n      border-right: none;\n    &#125;\n    &amp;.fold &#123;\n      width: $base-menu-min-width;\n    &#125;\n  &#125;\n\n  .layout_tabbar &#123;\n    position: fixed;\n    width: calc(100% - $base-menu-width);\n    height: $base-tabbar-height;\n    top: 0px;\n    left: $base-menu-width;\n    border-bottom: 1px solid;\n    transition: all 0.3s;\n\n    &amp;.fold &#123;\n      width: calc(100vw - $base-menu-min-width);\n      left: $base-menu-min-width;\n    &#125;\n  &#125;\n\n  .layout_main &#123;\n    position: absolute;\n    width: calc(100% - $base-menu-width);\n    height: calc(100vh - $base-tabbar-height);\n    top: $base-tabbar-height;\n    left: $base-menu-width;\n    padding: 20px;\n    overflow: auto;\n    transition: all 0.3s;\n\n    &amp;.fold &#123;\n      width: calc(100vw - $base-menu-min-width);\n      left: $base-menu-min-width;\n    &#125;\n  &#125;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"4\">\n<li>顶部面包屑动态展示</li>\n</ol>\n<ul>\n<li>\n<p>面包屑需要动态展示路由的名字与标题：通过路由对象 $route.matched 属性，根据匹配到的路由动态生成<br />\n <code>matched</code>  属性可以获取当前匹配到的路由</p>\n</li>\n<li>\n<p>点击面包屑可跳转对应路由<br />\n借助 elementplus 面包屑 breadcrumb 组件自带的 to 属性</p>\n</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 面包屑组件 --&gt;\n  &lt;el-breadcrumb separator-icon=&quot;ArrowRight&quot;&gt;\n    &lt;!-- 面包屑需要动态展示路由的名字与标题：通过路由对象$route.matched属性，根据匹配到的路由动态生成 --&gt;\n    &lt;el-breadcrumb-item v-for=&quot;(item, index) in $route.matched&quot; :key=&quot;index&quot; v-show=&quot;item.meta.title&quot; :to=&quot;item.path&quot;&gt;\n      &lt;span&gt;&#123;&#123; item.meta.title &#125;&#125;&lt;/span&gt;\n    &lt;/el-breadcrumb-item&gt;\n  &lt;/el-breadcrumb&gt;\n&lt;/template&gt;\n</code></pre>\n<ol start=\"5\">\n<li>刷新功能实现<br />\n涉及到组件间的通信<br />\n在 layout 相关小仓库中的 state 中新声明一个变量，用于保存刷新按钮的状态，一旦点击刷新按钮，状态就会发生变化，而 main 路由组件一旦监听（watch）到其发生变化，就会进行路由组件销毁<br />\n store/modules/setting.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 小仓库存储数据的地方</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      refresh<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 用于控制刷新效果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>layout/tabbar/index.vue:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 刷新按钮 --&gt;\n  &lt;el-button size=&quot;small&quot; icon=&quot;Refresh&quot; circle @click=&quot;updateRefsh&quot;&gt;&lt;/el-button&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//刷新按钮点击的回调\nconst updateRefsh = () =&gt; &#123;\n  LayoutSettingStore.refresh = !LayoutSettingStore.refresh;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<p>layout/mian/index.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 路由组件出口的位置 --&gt;\n  &lt;router-view v-slot=&quot;&#123; Component &#125;&quot;&gt;\n    &lt;transition name=&quot;fade&quot;&gt;\n      &lt;!-- 渲染layout一级路由组件的子路由 --&gt;\n      &lt;component :is=&quot;Component&quot; v-if=&quot;flag&quot; /&gt;\n    &lt;/transition&gt;\n  &lt;/router-view&gt;\n&lt;/template&gt;\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; watch, ref, nextTick &#125; from &quot;vue&quot;;\nimport useLayoutSettingStore from &quot;@/store/modules/setting&quot;;\n\n//获取仓库\nlet LayoutSettingStore = useLayoutSettingStore();\n\n//控制当前路由组件是否销毁重建\nlet flag = ref(true);\n\n//监听仓库内部的数据是否发生变化，如果发生变化，说明用户点击过刷新按钮\nwatch(\n  () =&gt; LayoutSettingStore.refresh,\n  () =&gt; &#123;\n    //点击刷新按钮：路由组件销毁\n    flag.value = false;\n    //销毁完毕之后再创建\n    nextTick(() =&gt; &#123;\n      flag.value = true;\n    &#125;);\n  &#125;\n);\n&lt;/script&gt;\n</code></pre>\n<ol start=\"6\">\n<li>全屏切换功能实现</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全屏按钮点击的回调</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fullScreen</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//DOM 对象的一个属性：可以用来当前是否为全屏模式 [全屏：ture，不是全屏：false]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> full <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>fullscreenElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>full<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 文档根节点的 requestFullscreen 方法实现全屏</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span><span class=\"token function\">requestFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 退出全屏模式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">exitFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>\n<p>获取用户信息与 token</p>\n<blockquote>\n<p>前台 ——&gt; 后台 ——&gt; 数据库 ——&gt; 后台 ——&gt; 前台<br />\n JWT:JsonWebToken<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/I%5DI9A7BV1JB%7BNI7Y733\" alt=\"\" />2AQ.png)</p>\n<ol>\n<li>通过请求拦截器的请求头，给服务器携带公共参数<br />\n utils/request.ts：</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入用户相关的仓库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> useUserStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/store/modules/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用请求拦截器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>request<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//config 配置对象具有 headers 请求头属性，经常给服务器端携带公共参数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取用户相关的小仓库：获取仓库内部的 token，登陆成功后携带给服务 器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>userStore<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    config<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> userStore<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 返回配置对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"2\">\n<li>登录成功后用户信息存储于仓库当中，方便调用<br />\n store/modules/user.ts:</li>\n</ol>\n</blockquote>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>reqUserInfo <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>state<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UserState <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    token<span class=\"token operator\">:</span> <span class=\"token constant\">GET_TOKEN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 用户唯一标识 token</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    menuRoutes<span class=\"token operator\">:</span> constantRoute<span class=\"token punctuation\">,</span><span class=\"token comment\">// 仓库存储生成左侧菜单需要的数组 (路 由)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    username<span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    avatar<span class=\"token operator\">:</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 获取用户信息方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">userInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 获取用户的信息 [头像、名字] 存储仓库当中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span> <span class=\"token function\">reqUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>checkUser<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>checkUser<span class=\"token punctuation\">.</span>avatar<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><blockquote>\n<ol start=\"3\">\n<li>首页加载完毕后获取用户信息<br />\n layout/home/index.vue</li>\n</ol>\n</blockquote>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;h1&gt;我是home首页&lt;/h1&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; onMounted &#125; from &quot;vue&quot;;\n//获取仓库\nimport useUserStore from &quot;@/store/modules/user&quot;;\nlet userStore = useUserStore();\n//首页挂载完毕获取用户信息\nonMounted(() =&gt; &#123;\n  userStore.userInfo();\n&#125;);\n&lt;/script&gt;\n</code></pre>\n<blockquote>\n<ol start=\"4\">\n<li>tabbar 组件获取用户信息，动态展示头像和名字</li>\n</ol>\n</blockquote>\n</li>\n<li>\n<p>退出登录业务功能<br />\n退出登录时需要做的事情：发退出登录请求，清除 token，跳转登录页面</p>\n</li>\n</ol>\n<ul>\n<li>layout/tabbar/index.vue:</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 第一件事：需要向服务器发请求（目前没有退出登录接口）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 第二件事：仓库当中关于用户相关的数据要清除掉</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  userStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 第三件事：跳转到登录页面</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  $router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>store/modules/user.ts:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">userLogout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">// 目前没有 mock 接口：退出登录接口（通知服务器本次用户的唯一标识失效）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 清除 store 仓库中存储的用户相关信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>avatar <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 本地存储中的 token 也需要清除掉</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token constant\">REMOVE_TOKEN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"215-路由守卫路由鉴权\"><a class=\"anchor\" href=\"#215-路由守卫路由鉴权\">#</a> 2.15 路由守卫 | 路由鉴权</h3>\n<ol>\n<li>路由鉴权之进度条业务<br />\n利用路由守卫</li>\n</ol>\n<ul>\n<li>1.1 新建 <code>permission.ts</code>  鉴权文件进行路由守卫的设置<br />\n src/router/permission.ts:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 路由鉴权 鉴权：项目中的路由能不能被访问的权限的设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 全局守卫：项目中任一路由的切换都会触发的钩子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 全局后置守卫</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>1.2 入口文件 main.ts 当中引入 permission.ts</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入鉴权文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"./router/permission\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>1.3 安装进度条插件</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pnpm i nprogress</pre></td></tr></table></figure><ul>\n<li>1.4 引入进度条并使用</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 路由鉴权 鉴权：项目中的路由能不能被访问的权限的设置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入进度条</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> nprogress <span class=\"token keyword\">from</span> <span class=\"token string\">\"nprogress\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"nprogress/nprogress.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 全局守卫：项目中任一路由的切换都会触发的钩子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 访问某一个路由之前的守卫</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 全局后置守卫</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>路由鉴权\n<blockquote>\n<p>全部的路由组件：登录 | 404 | 任意路由 | 首页（二级）| 数据大屏 | 权限管理（三个子路由）| 商品管理（四个子路由）</p>\n</blockquote>\n</li>\n</ol>\n<blockquote>\n<p>用户未登录可以访问的路由：login，其余的不能访问（指向 login）</p>\n</blockquote>\n<blockquote>\n<p>用户登录后可以访问的路由：不可以访问 login（指向首页），其他都可以访问</p>\n</blockquote>\n<ul>\n<li>可以根据仓库当中的 token 去判断用户是否登录:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 路由鉴权：鉴权，项目当中路由能不能被的权限的设置 (某一个路由什么条件下可以访问、什么条件下不可以访问)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/router\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//@ts-ignore</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> nprogress <span class=\"token keyword\">from</span> <span class=\"token string\">\"nprogress\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 引入进度条样式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"nprogress/nprogress.css\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 取消加载小圆圈</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> showSpinner<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 获取用户相关的小仓库内部 token 数据，去判断用户是否登录成功</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> useUserStore <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/store/modules/user\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> pinia <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store/index\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> userStore <span class=\"token operator\">=</span> <span class=\"token function\">useUserStore</span><span class=\"token punctuation\">(</span>pinia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 全局守卫：项目当中任意路由切换都会触发的钩子</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>to<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> from<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> next<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  document<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">K.K后台 - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">//to: 你将要访问那个路由</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">//from: 你从来个路由而来</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">//next: 路由的放行函数</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 获取 token, 去判断用户登录、还是未登录</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> userStore<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 获取用户名字</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> userStore<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 用户登录判断</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 登录成功，访问 login, 不能访问，指向首页</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// 登录成功访问其余六个路由 (登录排除)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 有用户信息</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 如果没有用户信息，在守卫这里发请求获取到了用户信息再放行</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token keyword\">await</span> userStore<span class=\"token punctuation\">.</span><span class=\"token function\">userInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>          <span class=\"token comment\">// 万一：刷新的时候是异步路由，有可能获取到用户信息、异步路由还没有加载完毕，出现空白的效果</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>to <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          <span class=\"token comment\">//token 过期：获取不到用户信息了</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token comment\">// 用户手动修改本地存储 token</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          <span class=\"token comment\">// 退出登录 -> 用户相关的数据清空</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          <span class=\"token keyword\">await</span> userStore<span class=\"token punctuation\">.</span><span class=\"token function\">userLogout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> redirect<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>path <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token comment\">// 用户未登录判断</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path <span class=\"token operator\">==</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> redirect<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>path <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 全局后置守卫</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> from<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  nprogress<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 第一个问题：任意路由切换实现进度条业务 ---nprogress</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\">// 第二个问题：路由鉴权 (路由组件访问权限的设置)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\">// 全部路由组件：登录 | 404 | 任意路由 | 首页 | 数据大屏 | 权限管理 (三个子路由)| 商品管理 (四个子路由)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 用户未登录：可以访问 login, 其余六个路由不能访问 (指向 login)</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\">// 用户登录成功：不可以访问 login [指向首页], 其余的路由可以访问</span></pre></td></tr></table></figure><blockquote>\n<p>报错：&quot;getActivePinia ()&quot; was called but there was no active Pinia.<br />\n 解决：看上面代码</p>\n</blockquote>\n<h3 id=\"216-接口\"><a class=\"anchor\" href=\"#216-接口\">#</a> 2.16 接口</h3>\n<p>使用真实接口代替 mock 接口</p>\n<ol>\n<li>解决跨域问题<br />\n vite.config.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> loadEnv <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> command<span class=\"token punctuation\">,</span> mode <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 获取各种环境下对应的变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> env <span class=\"token operator\">=</span> <span class=\"token function\">loadEnv</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//………………</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 代理跨域</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    server<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">[</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_APP_BASE_API</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          target<span class=\"token operator\">:</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">VITE_SERVE</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 获取数据的服务器地址设置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 代理跨域</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token function-variable function\">rewrite</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\/api</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 路径重写，把 `/api` 替换为 ''</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>替换 api<br />\napi/user/index.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统一管理项目用户相关的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 项目用户相关的请求地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token constant\">LOGIN_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/index/login\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token constant\">USERINFO_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"admin/acl/index/info\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">LOGOUT_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"admin/acl/index/logout\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 登录接口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogin</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGIN_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取用户信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">USERINFO_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 退出登录</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqLogout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOGOUT_URL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>store/modules/user.ts 相应更改<br />\n layout/tabbar/index.vue 的退出登录加 async、await</p>\n<ol start=\"3\">\n<li>接口 ts 类型定义</li>\n</ol>\n<h3 id=\"217-商品管理-品牌管理\"><a class=\"anchor\" href=\"#217-商品管理-品牌管理\">#</a> 2.17 商品管理 - 品牌管理</h3>\n<h4 id=\"1-静态模块搭建与模块数据展示\"><a class=\"anchor\" href=\"#1-静态模块搭建与模块数据展示\">#</a> 1. 静态模块搭建与模块数据展示</h4>\n<p>views/product/trademark:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-card class=&quot;box-card&quot;&gt;\n      &lt;!-- 卡片顶部添加品牌按钮 --&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; icon=&quot;Plus&quot; @click=&quot;&quot;&gt;添加品牌&lt;/el-button&gt;\n      &lt;!-- 表格组件：用于展示已有的品牌的数据--&gt;\n      &lt;el-table style=&quot;margin: 10px 0&quot; border&gt;\n        &lt;el-table-column label=&quot;序号&quot; width=&quot;80px&quot; align=&quot;center&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌名称&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌LOGO&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌操作&quot;&gt; &lt;/el-table-column&gt;\n      &lt;/el-table&gt;\n      &lt;!-- 分页器组件 --&gt;\n      &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;limit&quot; :page-sizes=&quot;[3, 5, 7, 9]&quot; :background=&quot;true&quot; layout=&quot; prev, pager, next, jumper, -&gt;,sizes,total&quot; :total=&quot;400&quot; /&gt;\n    &lt;/el-card&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入组合式API函数ref\nimport &#123; ref &#125; from &quot;vue&quot;;\n//当前页码\nlet pageNo = ref&lt;number&gt;(1);\n//每一页展示多少条数据\nlet limit = ref&lt;number&gt;(3);\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<h4 id=\"2-ts-类型定义\"><a class=\"anchor\" href=\"#2-ts-类型定义\">#</a> 2. ts 类型定义</h4>\n<ol>\n<li>发请求获取商品数据<br />\n api/product/trademark/index.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 书写品牌管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 品牌管理模块接口地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 获取已有品牌接口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 获取已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 需要携带两个参数：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//page: 获取第几页的数据，默认第一页</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//limit: 获取几个已有品牌的数据</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqHasTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>在商品管理组件内调用 api 接口，发请求获取数据并在页面上动态展示：</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;el-card class=&quot;box-card&quot;&gt;\n      &lt;!-- 卡片顶部添加品牌按钮 --&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; icon=&quot;Plus&quot; @click=&quot;&quot;&gt;添加品牌&lt;/el-button&gt;\n      &lt;!-- 表格组件：用于展示已有的品牌的数据--&gt;\n      &lt;el-table style=&quot;margin: 10px 0&quot; border :data=&quot;trademarkArr&quot;&gt;\n        &lt;el-table-column label=&quot;序号&quot; width=&quot;80px&quot; align=&quot;center&quot; type=&quot;index&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌名称&quot; prop=&quot;tmName&quot;&gt; &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌LOGO&quot;&gt;\n          &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n            &lt;img :src=&quot;row.logoUrl&quot; style=&quot;width: 100px; height: 100px&quot; /&gt;\n          &lt;/template&gt;\n        &lt;/el-table-column&gt;\n        &lt;el-table-column label=&quot;品牌操作&quot;&gt;\n          &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n            &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot;&gt;&lt;/el-button&gt;\n            &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot;&gt;&lt;/el-button&gt;\n          &lt;/template&gt;\n        &lt;/el-table-column&gt;\n      &lt;/el-table&gt;\n      &lt;!-- 分页器组件 --&gt;\n      &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;limit&quot; :page-sizes=&quot;[3, 5, 7, 9]&quot; :background=&quot;true&quot; layout=&quot; prev, pager, next, jumper, -&gt;,sizes,total&quot; :total=&quot;total&quot; /&gt;\n    &lt;/el-card&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//引入组合式API函数ref\nimport &#123; ref, onMounted &#125; from &quot;vue&quot;;\nimport &#123; reqHasTrademark &#125; from &quot;@/api/product/trademark&quot;;\n//当前页码\nlet pageNo = ref&lt;number&gt;(1);\n//每一页展示多少条数据\nlet limit = ref&lt;number&gt;(3);\n//存储已有品牌数据的总数\nlet total = ref&lt;number&gt;(0);\n//存储已有品牌的数据\nlet trademarkArr = ref&lt;any&gt;([]);\n//获取已有品牌的接口封装为一个函数：这样做就可以在想获取数据的情况下调用函数即可\nconst getHsaTrademark = async () =&gt; &#123;\n  let result = await reqHasTrademark(pageNo.value, limit.value);\n  if (result.code == 200) &#123;\n    //存储已有品牌的总个数\n    total.value = result.data.total;\n    trademarkArr.value = result.data.records;\n  &#125;\n&#125;;\n\n//组件挂在完毕的钩子————发一次请求获取数据\nonMounted(() =&gt; &#123;\n  getHsaTrademark();\n&#125;);\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<ol start=\"3\">\n<li><code>获取商品数据</code> 的 ts 类型：</li>\n</ol>\n<ul>\n<li>定义类型（ api/product/trademark/type.ts）:</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 公共的类型：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  code<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ok<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 已有的品牌的 ts 数据类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Trademark</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  tmName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  logoUrl<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 包含全部品牌数据的 ts 类型</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Records</span> <span class=\"token operator\">=</span> Trademark<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 包含全部品牌的 ts 类型</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TrademarkResponseData</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    records<span class=\"token operator\">:</span> Records<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    current<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    searchCount<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    pages<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>引入使用类型（ api/product/trademark/index.ts）</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 书写品牌管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> TrademarkResponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 品牌管理模块接口地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取已有品牌接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 获取已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 需要携带两个参数：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//page: 获取第几页的数据，默认第一页</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//limit: 获取几个已有品牌的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqHasTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TrademarkResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>组件内部也要补一下 ts 类型 (views/product/trademark/index.vue):</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;script&gt;\nimport type &#123; Records, TrademarkResponseData &#125; from &quot;@/api/product/trademark/type&quot;;\n\nlet trademarkArr = ref &lt; Records &gt; [];\n// ………………\nlet result: TrademarkResponseData = await reqHasTrademark(pageNo.value, limit.value);\n&lt;/script&gt;\n</code></pre>\n<h4 id=\"3-分页展示数据\"><a class=\"anchor\" href=\"#3-分页展示数据\">#</a> 3. 分页展示数据</h4>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 分页器组件 --&gt;\n  &lt;el-pagination @current-change=&quot;changePageNo&quot; @size-change=&quot;sizeChange&quot; v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;limit&quot; :page-sizes=&quot;[3, 5, 7, 9]&quot; :background=&quot;true&quot; layout=&quot; prev, pager, next, jumper, -&gt;,sizes,total&quot; :total=&quot;total&quot; /&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\n//分页器当前页码发生变化的时候触发\nconst changePageNo = () =&gt; &#123;\n  //不用传参，因为组件内置的v-model已经传入，双向绑定\n  getHsaTrademark();\n&#125;;\n//下拉菜单发生变化的时候触发\nconst sizeChange = () =&gt; &#123;\n  //当前每页的数据量发生变化时，当前页码归1\n  pageNo.value = 1;\n  getHsaTrademark();\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h4 id=\"4-对话框-dailog-对话框静态搭建-添加与修改品牌业务实现\"><a class=\"anchor\" href=\"#4-对话框-dailog-对话框静态搭建-添加与修改品牌业务实现\">#</a> 4. 对话框 dailog 对话框静态搭建 （添加与修改品牌业务实现）</h4>\n<blockquote>\n<p>elementplus 组件之 dailog 对话框：在保留当前页面状态的情况下，告知用户并承载相关操作</p>\n</blockquote>\n<ol>\n<li>写相应静态</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 对话框组件：在添加品牌与修改已有业务时候使用 --&gt;\n  &lt;!-- v-model属性控制对话框的显示与隐藏（true：显示，false：隐藏） --&gt;\n  &lt;!-- title：设置对话框左上角标题 --&gt;\n  &lt;el-dialog v-model=&quot;dialogFormVisible&quot; title=&quot;添加品牌&quot;&gt;\n    &lt;el-form style=&quot;width: 80%&quot;&gt;\n      &lt;el-form-item label=&quot;品牌名称&quot; label-width=&quot;80px&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入品牌名称&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;品牌logo&quot; label-width=&quot;80px&quot;&gt;\n        &lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;https://run.mocky.io/v3/9d059bf9-4660-45f2-925d-ce80ad6c4d15&quot; :show-file-list=&quot;false&quot; :on-success=&quot;handleAvatarSuccess&quot; :before-upload=&quot;beforeAvatarUpload&quot;&gt;\n          &lt;img v-if=&quot;imageUrl&quot; :src=&quot;imageUrl&quot; class=&quot;avatar&quot; /&gt;\n          &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt;&lt;Plus /&gt;&lt;/el-icon&gt;\n        &lt;/el-upload&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n    &lt;!-- 具名插槽：footer --&gt;\n    &lt;template #footer&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; @click=&quot;cancel&quot;&gt;取消&lt;/el-button&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; @click=&quot;confirm&quot;&gt;确定&lt;/el-button&gt;\n    &lt;/template&gt;\n  &lt;/el-dialog&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n//控制对话框的显示与隐藏\nlet dialogFormVisible = ref &lt; boolean &gt; false;\n\n//&quot;添加品牌&quot;按钮的回调\nconst addTrademark = () =&gt; &#123;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n&#125;;\n//&quot;修改品牌&quot;按钮的回调\nconst updateTrademark = () =&gt; &#123;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n&#125;;\n\n//对话框底部取消按钮\nconst cancel = () =&gt; &#123;\n  //对话框隐藏\n  dialogFormVisible.value = false;\n&#125;;\n//对话框底部确定按钮\nconst confirm = () =&gt; &#123;\n  dialogFormVisible.value = false;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"2\">\n<li>收集新增品牌数据</li>\n</ol>\n<ul>\n<li>2.1 写接口\n<blockquote>\n<p>新增品牌的接口不需要带 id，修改已存在的品牌的接口则需要传入 id. 二者的区别就是需不需要带 id<br />\napi/product/trademark/index.ts:</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 书写品牌管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> TrademarkResponseData<span class=\"token punctuation\">,</span> Trademark <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 品牌管理模块接口地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取已有品牌接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 添加品牌的接口地址 POST 请求</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token constant\">ADDTRADENARJ_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/save\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 修改已有品牌的数据 PUT 请求</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token constant\">UPDATETRADEMARK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/product/baseTrademark/update\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 需要携带两个参数：</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//page: 获取第几页的数据，默认第一页</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//limit: 获取几个已有品牌的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqHasTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> TrademarkResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TRADEMARK_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 添加与修改已有品牌的接口方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqAddOrUpdateTrademark</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> Trademark<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 判断参数带不带 id，如果有 id 就是修改已有品牌的数据，</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">put</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATETRADEMARK_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 如果没有 id 就是添加品牌；</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADDTRADENARJ_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>2.2 组件发请求</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-form style=&quot;width: 80%&quot;&gt;\n    &lt;el-form-item label=&quot;品牌名称&quot; label-width=&quot;80px&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入品牌名称&quot; v-model=&quot;trademarkParams.tmName&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item label=&quot;品牌logo&quot; label-width=&quot;80px&quot;&gt;\n      &lt;!-- 上传图片是要上传到服务器中，所以是要发请求 action传入后端写的上传文件的接口地址 --&gt;\n      &lt;el-upload class=&quot;avatar-uploader&quot; action=&quot;/api/admin/product/fileUpload&quot; :show-file-list=&quot;false&quot; :on-success=&quot;handleAvatarSuccess&quot; :before-upload=&quot;beforeAvatarUpload&quot;&gt;\n        &lt;img v-if=&quot;trademarkParams.logoUrl&quot; :src=&quot;trademarkParams.logoUrl&quot; class=&quot;avatar&quot; /&gt;\n        &lt;el-icon v-else class=&quot;avatar-uploader-icon&quot;&gt;&lt;Plus /&gt;&lt;/el-icon&gt;\n      &lt;/el-upload&gt;\n    &lt;/el-form-item&gt;\n  &lt;/el-form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport &#123; ref, reactive, onMounted &#125; from &quot;vue&quot;;\nimport type &#123; Records, TrademarkResponseData, Trademark &#125; from &quot;@/api/product/trademark/type&quot;;\nimport type &#123; UploadProps &#125; from &quot;element-plus&quot;;\nimport &#123; ElMessage &#125; from &quot;element-plus&quot;;\n//定义收集新增品牌数据\n//这里用reactive是因为对象内的数据也需要响应式，每个数据在表单中都会变化\nlet trademarkParams =\n  reactive &lt;\n  Trademark &gt;\n  &#123;\n    tmName: &quot;&quot;,\n    logoUrl: &quot;&quot;,\n  &#125;;\n\n//上传图片之前触发的钩子函数:作用是可以用来约束上传文件的类型、大小\nconst beforeAvatarUpload: UploadProps[&quot;beforeUpload&quot;] = (rawFile) =&gt; &#123;\n  if (rawFile.type !== &quot;image/jpeg&quot;) &#123;\n    ElMessage.error(&quot;上传的图片必须是jpg格式!&quot;);\n    return false;\n  &#125; else if (rawFile.size / 1024 / 1024 &gt; 4) &#123;\n    ElMessage.error(&quot;上传的图片不能超过4MB!&quot;);\n    return false;\n  &#125;\n  return true;\n&#125;;\n\n//文件上传成功时触发的钩子\nconst handleAvatarSuccess: UploadProps[&quot;onSuccess&quot;] = (response, uploadFile) =&gt; &#123;\n  //response:即为当前这次上传图片post请求服务器返回的数据\n  //存储收集上传的图片的地址，添加一个新的品牌的时候上传给服务器\n  trademarkParams.logoUrl = response.data;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"3\">\n<li>完成添加新的品牌的业务\n<blockquote>\n<p>新增后还需要发请求重新获取一遍所有商品</p>\n</blockquote>\n</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;script&gt;\nimport &#123; reqHasTrademark, reqAddOrUpdateTrademark &#125; from &quot;@/api/product/trademark&quot;;\n\n//&quot;添加品牌&quot;按钮的回调\nconst addTrademark = () =&gt; &#123;\n  //先清空收集的数据\n  trademarkParams.tmName = &quot;&quot;;\n  trademarkParams.logoUrl = &quot;&quot;;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n&#125;;\n\n//对话框底部确定按钮\nconst confirm = async () =&gt; &#123;\n  let result: any = await reqAddOrUpdateTrademark(trademarkParams);\n  if (result.code == 200) &#123;\n    //弹出添加成功的信息；对话框关闭；重新发一次请求获取全部数据；清空trademarkParams数据（这个在“添加品牌”的按钮业务中做，每一次添加品牌前都清空数据）\n    dialogFormVisible.value = false;\n    ElMessage(&#123;\n      type: &quot;success&quot;,\n      message: &quot;添加品牌成功&quot;,\n    &#125;);\n    getHsaTrademark();\n  &#125; else &#123;\n    dialogFormVisible.value = false;\n    ElMessage(&#123;\n      type: &quot;error&quot;,\n      message: &quot;添加品牌失败&quot;,\n    &#125;);\n  &#125;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"4\">\n<li>完成修改已有品牌的业务</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-table-column label=&quot;品牌操作&quot;&gt;\n    &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot; @click=&quot;updateTrademark(row)&quot;&gt;&lt;/el-button&gt;\n    &lt;/template&gt;\n  &lt;/el-table-column&gt;\n\n  &lt;el-dialog v-model=&quot;dialogFormVisible&quot; :title=&quot;trademarkParams.id ? '修改品牌' : '添加品牌'&quot;&gt;&lt;/el-dialog&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n//&quot;修改品牌&quot;按钮的回调\n//参数row：即为当前已有的品牌\nconst updateTrademark = (row: Trademark) =&gt; &#123;\n  //点击对话框显示\n  dialogFormVisible.value = true;\n  Object.assign(trademarkParams, row);\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ol start=\"5\">\n<li>品牌管理模块 dialog 表单校验<br />\n利用 el-form 组件提供的表单校验功能<br />\n views/product/trademark/index.vue</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对话框底部确定按钮</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">confirm</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 在发请求之前，对整个表单进行校验</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 调用这个方法进行全部的表单项校验，使用 await 保证只有校验全部通过才能执行后面的内容</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">await</span> formRef<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">validator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ……………………</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>品牌管理模块删除业务</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-popconfirm :title=&quot;`确定删除$&#123;row.tmName&#125;?`&quot; width=&quot;250px&quot; icon=&quot;Delete&quot;&gt;\n    &lt;template #reference&gt;\n      &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot; @confirm=&quot;removeTrademark(row.id)&quot;&gt;&lt;/el-button&gt;\n    &lt;/template&gt;\n  &lt;/el-popconfirm&gt;\n&lt;/template&gt;\n\n&lt;script&gt;&lt;/script&gt;\n</code></pre>\n<h3 id=\"218-平台属性管理\"><a class=\"anchor\" href=\"#218-平台属性管理\">#</a> 2.18 平台属性管理</h3>\n<h4 id=\"1-平台属性管理模块静态搭建\"><a class=\"anchor\" href=\"#1-平台属性管理模块静态搭建\">#</a> 1. 平台属性管理模块静态搭建</h4>\n<blockquote>\n<p>（三级联动：一级不需要传参，二级需要带着一级分类的 id，三级需要带着二级分类的 id。等三级分类也确定后再发一次请求，获取属性数据）</p>\n</blockquote>\n<ol>\n<li>因为三级联动组件在 spu 也会用到，所以将其变为全局组件 Category</li>\n</ol>\n<ul>\n<li>components/Category/index.vue</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 三级联动 --&gt;\n  &lt;el-card&gt;\n    &lt;el-form :inline=&quot;true&quot;&gt;\n      &lt;el-form-item label=&quot;一级分类&quot;&gt;\n        &lt;el-select&gt;\n          &lt;el-option label=&quot;北京&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;二级分类&quot;&gt;\n        &lt;el-select&gt;\n          &lt;el-option label=&quot;北京&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item label=&quot;三级分类&quot;&gt;\n        &lt;el-select&gt;\n          &lt;el-option label=&quot;北京&quot;&gt;&lt;/el-option&gt;\n        &lt;/el-select&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n</code></pre>\n<ul>\n<li>components/index.ts</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入项目中的全局组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> SvgIcon <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/SvgIcon/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Category <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/components/Category/index.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> App<span class=\"token punctuation\">,</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 引入 element-plus 提供的全部图标组件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ElementPlusIconsVue <span class=\"token keyword\">from</span> <span class=\"token string\">\"@element-plus/icons-vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 全局对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Component <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> SvgIcon<span class=\"token punctuation\">,</span> Category <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 对外暴露插件对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span>app<span class=\"token operator\">:</span> App<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>components<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> components<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 将 element-plus 提供图标注册为全局组件</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>ElementPlusIconsVue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      app<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其他的可以写在 views/product/attr/index.vue</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 三级联动组件 --&gt;\n  &lt;Category /&gt;\n  &lt;!-- 平台属性 --&gt;\n  &lt;el-card style=&quot;margin: 10px 0&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; icon=&quot;Plus&quot;&gt;添加属性&lt;/el-button&gt;\n    &lt;el-table border stripe&gt;\n      &lt;el-table-column label=&quot;序号&quot; type=&quot;index&quot; align=&quot;center&quot; width=&quot;80px&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;属性名称&quot; width=&quot;120px&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;属性值名称&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;120px&quot;&gt;&lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;&lt;/script&gt;\n\n&lt;style scoped lang=&quot;less&quot;&gt;&lt;/style&gt;\n</code></pre>\n<h4 id=\"2-属性管理模块一级分类数据收集与展示\"><a class=\"anchor\" href=\"#2-属性管理模块一级分类数据收集与展示\">#</a> 2. 属性管理模块一级分类数据收集与展示</h4>\n<ol>\n<li>写接口 api/product/attr/index.ts:</li>\n</ol>\n<pre><code class=\"language-ts\">\n</code></pre>\n<ol start=\"2\">\n<li>展示数据 components/Category/index.vue：<br />\n// 因为将来别的组件也需要用的三级联动的数据，需要组件通信，所以不应该把数据存储在子组件中，应该存储在 pinia 仓库中</li>\n</ol>\n<pre><code class=\"language-vue\">\n</code></pre>\n<h3 id=\"219-spu-模块\"><a class=\"anchor\" href=\"#219-spu-模块\">#</a> 2.19 SPU 模块</h3>\n<h3 id=\"特喵的这样效率太慢了跳了跳了\"><a class=\"anchor\" href=\"#特喵的这样效率太慢了跳了跳了\">#</a> 特喵的这样效率太慢了，跳了跳了</h3>\n<h3 id=\"权限管理-用户管理\"><a class=\"anchor\" href=\"#权限管理-用户管理\">#</a> 权限管理 - 用户管理</h3>\n<h4 id=\"1-用户管理静态搭建\"><a class=\"anchor\" href=\"#1-用户管理静态搭建\">#</a> 1. 用户管理静态搭建</h4>\n<p>views/acl/user/index.vue:</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-card style=&quot;height: 80px&quot;&gt;\n    &lt;el-form :inline=&quot;true&quot; class=&quot;form&quot;&gt;\n      &lt;el-form-item label=&quot;用户名:&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入搜索用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;搜索&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;重置&lt;/el-button&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n  &lt;el-card style=&quot;margin: 10px 0px&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;添加用户&lt;/el-button&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;批量删除&lt;/el-button&gt;\n    &lt;!-- table展示用户信息 --&gt;\n    &lt;el-table style=&quot;margin: 10px 0px&quot; border&gt;\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;#&quot; align=&quot;center&quot; type=&quot;index&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;ID&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名字&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名称&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户角色&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;创建时间&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;更新时间&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;300px&quot; align=&quot;center&quot;&gt; &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n    &lt;!-- 分页器 --&gt;\n    &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;pageSize&quot; :page-sizes=&quot;[5, 7, 9, 11]&quot; :background=&quot;true&quot; layout=&quot;prev, pager, next, jumper,-&gt;,sizes,total&quot; :total=&quot;400&quot; /&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref &#125; from &quot;vue&quot;;\nlet pageNo = ref&lt;number&gt;(1);\n\nlet pageSize = ref&lt;number&gt;(5);\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.form &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h4 id=\"2-用户管理展示已有账号数据\"><a class=\"anchor\" href=\"#2-用户管理展示已有账号数据\">#</a> 2. 用户管理展示已有账号数据</h4>\n<ol>\n<li>定义接口 api/acl/user/index.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用户管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> UserResponseData <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取全部已有用户的账号信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取用户账号信息的接口方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> UserResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>定义接口类型 api/acl/user/type.ts:</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 账号信息的 ts 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  code<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ok<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 代表一个账号信息的 ts 类型</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  createTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  updateTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  username<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  password<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  phone<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  roleName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 数组包含全部的用户信息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">Records</span> <span class=\"token operator\">=</span> User<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 获取全部用户信息接口返回的数据 ts 类型</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserResponseData</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    records<span class=\"token operator\">:</span> Records<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    total<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    current<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    pages<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 代表一个职位的 ts 类型</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RoleData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  createTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  updateTime<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  roleName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  remark<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\">// 全部职位的列表</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">AllRole</span> <span class=\"token operator\">=</span> RoleData<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 获取全部职位的接口返回的数据 ts 类型</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">AllRoleResponseData</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ResponseData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    assignRoles<span class=\"token operator\">:</span> AllRole<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    allRolesList<span class=\"token operator\">:</span> AllRole<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 给用户分配职位接口携带参数的 ts 类型</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetRoleData</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  roleIdList<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  userId<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>获取用户数据并展示以及分页器功能 views/acl/user/index.vue:</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-card style=&quot;height: 80px&quot;&gt;\n    &lt;el-form :inline=&quot;true&quot; class=&quot;form&quot;&gt;\n      &lt;el-form-item label=&quot;用户名:&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入搜索用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;搜索&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;重置&lt;/el-button&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n  &lt;el-card style=&quot;margin: 10px 0px&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;添加用户&lt;/el-button&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;批量删除&lt;/el-button&gt;\n    &lt;!-- table展示用户信息 --&gt;\n    &lt;el-table style=&quot;margin: 10px 0px&quot; border :data=&quot;userArr&quot;&gt;\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;#&quot; align=&quot;center&quot; type=&quot;index&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;ID&quot; align=&quot;center&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名字&quot; align=&quot;center&quot; prop=&quot;username&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名称&quot; align=&quot;center&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户角色&quot; align=&quot;center&quot; prop=&quot;roleName&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;创建时间&quot; align=&quot;center&quot; prop=&quot;createtTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;更新时间&quot; align=&quot;center&quot; prop=&quot;updateTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;300px&quot; align=&quot;center&quot;&gt;\n        &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;User&quot;&gt;分配角色&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot;&gt;编辑&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot;&gt;删除&lt;/el-button&gt;\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n    &lt;!-- 分页器 --&gt;\n    &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;pageSize&quot; :page-sizes=&quot;[5, 7, 9, 11]&quot; :background=&quot;true&quot; layout=&quot;prev, pager, next, jumper,-&gt;,sizes,total&quot; :total=&quot;total&quot; @current-change=&quot;getHasUser&quot; @size-change=&quot;handler&quot; /&gt;\n  &lt;/el-card&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref, onMounted &#125; from &quot;vue&quot;;\nimport &#123; reqUserInfo &#125; from &quot;@/api/acl/user&quot;;\nimport type &#123; UserResponseData, Records &#125; from &quot;@/api/acl/user/type&quot;;\n//默认页码\nlet pageNo = ref&lt;number&gt;(1);\n//一页展示几条数据\nlet pageSize = ref&lt;number&gt;(5);\n//用户总数\nlet total = ref&lt;number&gt;(0);\n//存储全部用户的数据\nlet userArr = ref&lt;Records&gt;([]);\n\nonMounted(() =&gt; &#123;\n  getHasUser();\n&#125;);\n\n//获取全部已有的用户信息的方法封装\nconst getHasUser = async (pager = 1) =&gt; &#123;\n  pageNo.value = pager;\n  let result: UserResponseData = await reqUserInfo(pageNo.value, pageSize.value);\n  if (result.code == 200) &#123;\n    total.value = result.data.total;\n    userArr.value = result.data.records;\n  &#125;\n&#125;;\n\n//分页器下拉菜单自定义事件的回调\nconst handler = () =&gt; &#123;\n  getHasUser();\n&#125;;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.form &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h4 id=\"3-添加与编辑修改用户业务实现\"><a class=\"anchor\" href=\"#3-添加与编辑修改用户业务实现\">#</a> 3. “添加” 与 “编辑”（修改）用户业务实现</h4>\n<p>// 点击 “添加” 按钮后从右侧弹出抽屉。“添加” 和 “编辑” 都用这个，区别它们就看是否携带 id</p>\n<ol>\n<li>静态搭建</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-card style=&quot;height: 80px&quot;&gt;\n    &lt;el-form :inline=&quot;true&quot; class=&quot;form&quot;&gt;\n      &lt;el-form-item label=&quot;用户名:&quot;&gt;\n        &lt;el-input placeholder=&quot;请输入搜索用户名&quot;&gt;&lt;/el-input&gt;\n      &lt;/el-form-item&gt;\n      &lt;el-form-item&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;搜索&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;重置&lt;/el-button&gt;\n      &lt;/el-form-item&gt;\n    &lt;/el-form&gt;\n  &lt;/el-card&gt;\n  &lt;el-card style=&quot;margin: 10px 0px&quot;&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot; @click=&quot;addUser&quot;&gt;添加用户&lt;/el-button&gt;\n    &lt;el-button type=&quot;primary&quot; size=&quot;default&quot;&gt;批量删除&lt;/el-button&gt;\n    &lt;!-- table展示用户信息 --&gt;\n    &lt;el-table style=&quot;margin: 10px 0px&quot; border :data=&quot;userArr&quot;&gt;\n      &lt;el-table-column type=&quot;selection&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;#&quot; align=&quot;center&quot; type=&quot;index&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;ID&quot; align=&quot;center&quot; prop=&quot;id&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名字&quot; align=&quot;center&quot; prop=&quot;username&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户名称&quot; align=&quot;center&quot; prop=&quot;name&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;用户角色&quot; align=&quot;center&quot; prop=&quot;roleName&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;创建时间&quot; align=&quot;center&quot; prop=&quot;createtTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;更新时间&quot; align=&quot;center&quot; prop=&quot;updateTime&quot;&gt;&lt;/el-table-column&gt;\n      &lt;el-table-column label=&quot;操作&quot; width=&quot;300px&quot; align=&quot;center&quot;&gt;\n        &lt;template #=&quot;&#123; row, $index &#125;&quot;&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;User&quot;&gt;分配角色&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Edit&quot; @click=&quot;updateUser(row)&quot;&gt;编辑&lt;/el-button&gt;\n          &lt;el-button type=&quot;primary&quot; size=&quot;small&quot; icon=&quot;Delete&quot;&gt;删除&lt;/el-button&gt;\n        &lt;/template&gt;\n      &lt;/el-table-column&gt;\n    &lt;/el-table&gt;\n    &lt;!-- 分页器 --&gt;\n    &lt;el-pagination v-model:current-page=&quot;pageNo&quot; v-model:page-size=&quot;pageSize&quot; :page-sizes=&quot;[5, 7, 9, 11]&quot; :background=&quot;true&quot; layout=&quot;prev, pager, next, jumper,-&gt;,sizes,total&quot; :total=&quot;total&quot; @current-change=&quot;getHasUser&quot; @size-change=&quot;handler&quot; /&gt;\n  &lt;/el-card&gt;\n  &lt;!-- 抽屉结构:完成添加新的用户账号|更新已有的账号信息 --&gt;\n  &lt;!-- 通过`v-model=&quot;drawer&quot;`控制抽屉组件显示与隐藏 --&gt;\n  &lt;el-drawer v-model=&quot;drawer&quot;&gt;\n    &lt;!-- 头部标题:将来文字内容应该动态的 --&gt;\n    &lt;template #header&gt;\n      &lt;h4&gt;添加用户&lt;/h4&gt;\n    &lt;/template&gt;\n    &lt;!-- 身体部分 --&gt;\n    &lt;template #default&gt;\n      &lt;el-form ref=&quot;formRef&quot;&gt;\n        &lt;el-form-item label=&quot;用户姓名&quot; prop=&quot;username&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户姓名&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;name&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户昵称&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户密码&quot; prop=&quot;password&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户密码&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n      &lt;/el-form&gt;\n    &lt;/template&gt;\n    &lt;template #footer&gt;\n      &lt;div style=&quot;flex: auto&quot;&gt;\n        &lt;el-button&gt;取消&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot;&gt;确定&lt;/el-button&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/el-drawer&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref, onMounted &#125; from &quot;vue&quot;;\nimport &#123; reqUserInfo &#125; from &quot;@/api/acl/user&quot;;\nimport type &#123; UserResponseData, Records, User &#125; from &quot;@/api/acl/user/type&quot;;\n//默认页码\nlet pageNo = ref&lt;number&gt;(1);\n//一页展示几条数据\nlet pageSize = ref&lt;number&gt;(5);\n//用户总数\nlet total = ref&lt;number&gt;(0);\n//存储全部用户的数据\nlet userArr = ref&lt;Records&gt;([]);\n//定义响应式数据控制抽屉的显示与隐藏\nlet drawer = ref&lt;boolean&gt;(false);\n\nonMounted(() =&gt; &#123;\n  getHasUser();\n&#125;);\n\n//获取全部已有的用户信息的方法封装\nconst getHasUser = async (pager = 1) =&gt; &#123;\n  pageNo.value = pager;\n  let result: UserResponseData = await reqUserInfo(pageNo.value, pageSize.value);\n  if (result.code == 200) &#123;\n    total.value = result.data.total;\n    userArr.value = result.data.records;\n  &#125;\n&#125;;\n\n//分页器下拉菜单自定义事件的回调\nconst handler = () =&gt; &#123;\n  getHasUser();\n&#125;;\n\n//“添加用户”按钮的回调\nconst addUser = () =&gt; &#123;\n  drawer.value = true;\n&#125;;\n//“编辑”按钮的回调\n//row：已有的用户的账号信息\nconst updateUser = (row: User) =&gt; &#123;\n  drawer.value = true;\n&#125;;\n&lt;/script&gt;\n\n&lt;style scoped lang=&quot;scss&quot;&gt;\n.form &#123;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<ol start=\"2\">\n<li>“添加用户” 业务实现<br />\n需要将收集到的数据通过接口传给后端</li>\n</ol>\n<ul>\n<li>2.1 写接口 api/acl/user/index.ts</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 用户管理模块的接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/utils/request\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> UserResponseData<span class=\"token punctuation\">,</span> User <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./type\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 枚举地址</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">enum</span> <span class=\"token constant\">API</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取全部已有用户账号信息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 添加一个新的用户账号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token constant\">ADDUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/save\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 更新已有的用户账号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token constant\">UPDATEUSER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/admin/acl/user/update\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取用户账号信息的接口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqUserInfo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>page<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">get</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> UserResponseData<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ALLUSER_URL</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>page<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>limit<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 添加用户与更新已有用户的接口</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reqAddOrUpdateUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 携带参数有 ID 更新</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 更新</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">put</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UPDATEUSER_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 添加</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">post</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ADDUSER_URL</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>2.2 收集表单数据相关业务</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;el-drawer v-model=&quot;drawer&quot;&gt;\n    &lt;!-- 头部标题:将来文字内容应该动态的 --&gt;\n    &lt;template #header&gt;\n      &lt;h4&gt;&#123;&#123; userParams.id ? \"更新用户\" : \"添加用户\" &#125;&#125;&lt;/h4&gt;\n    &lt;/template&gt;\n    &lt;!-- 身体部分 --&gt;\n    &lt;template #default&gt;\n      &lt;el-form :model=&quot;userParams&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot;&gt;\n        &lt;el-form-item label=&quot;用户姓名&quot; prop=&quot;username&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户姓名&quot; v-model=&quot;userParams.username&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;name&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户昵称&quot; v-model=&quot;userParams.name&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;用户密码&quot; prop=&quot;password&quot; v-if=&quot;!userParams.id&quot;&gt;\n          &lt;el-input placeholder=&quot;请输入用户密码&quot; v-model=&quot;userParams.password&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n      &lt;/el-form&gt;\n    &lt;/template&gt;\n    &lt;template #footer&gt;\n      &lt;div style=&quot;flex: auto&quot;&gt;\n        &lt;el-button @click=&quot;cancel&quot;&gt;取消&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; @click=&quot;save&quot;&gt;确定&lt;/el-button&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/el-drawer&gt;\n&lt;/template&gt;\n\n&lt;script setup lang=&quot;ts&quot;&gt;\nimport &#123; ref, onMounted, reactive &#125; from &quot;vue&quot;;\nimport &#123; reqUserInfo, reqAddOrUpdateUser &#125; from &quot;@/api/acl/user&quot;;\n\n//收集用户响应式数据\nlet userParams = reactive&lt;User&gt;(&#123;\n  username: &quot;&quot;,\n  name: &quot;&quot;,\n  password: &quot;&quot;,\n&#125;);\n\n//“添加用户”按钮的回调\nconst addUser = () =&gt; &#123;\n  drawer.value = true;\n  //每次清空数据\n  Object.assign(userParams, &#123;\n    username: &quot;&quot;,\n    name: &quot;&quot;,\n    password: &quot;&quot;,\n  &#125;);\n&#125;;\n\n//抽屉组件的“保存”按钮的回调\nconst save = async () =&gt; &#123;\n  //保存按钮：添加新用户或更新已有用户\n  let result: any = await reqAddOrUpdateUser(userParams);\n  if (result.code == 200) &#123;\n    drawer.value = false;\n    ElMessage(&#123;\n      type: &quot;success&quot;,\n      message: userParams.id ? &quot;更新成功&quot; : &quot;添加成功&quot;,\n    &#125;);\n    getHasUser();\n  &#125; else &#123;\n    drawer.value = false;\n    ElMessage(&#123;\n      type: &quot;error&quot;,\n      message: userParams.id ? &quot;更新失败&quot; : &quot;添加失败&quot;,\n    &#125;);\n  &#125;\n&#125;;\n\n//抽屉组件的“取消”按钮的回调\nconst cancel = () =&gt; &#123;\n  drawer.value = false;\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>2.3 表单校验功能</li>\n</ul>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- `:model`、`:rules`、`ref`、`prop` 是用来做表单校验的,其中`ref`是为了获得form组件实例等校验通过后再发请求--&gt;\n  &lt;el-form :model=&quot;userParams&quot; :rules=&quot;rules&quot; ref=&quot;formRef&quot;&gt;\n    &lt;el-form-item label=&quot;用户姓名&quot; prop=&quot;username&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入用户姓名&quot; v-model=&quot;userParams.username&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item label=&quot;用户昵称&quot; prop=&quot;name&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入用户昵称&quot; v-model=&quot;userParams.name&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n    &lt;el-form-item label=&quot;用户密码&quot; prop=&quot;password&quot; v-if=&quot;!userParams.id&quot;&gt;\n      &lt;el-input placeholder=&quot;请输入用户密码&quot; v-model=&quot;userParams.password&quot;&gt;&lt;/el-input&gt;\n    &lt;/el-form-item&gt;\n  &lt;/el-form&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n//获取form组件实例\nlet formRef = ref&lt;any&gt;()\n\nconst save = async () =&gt; &#123;\n  //点击保存按钮的时候务必保证表单校验全部通过再发请求\n  await formRef.value.validator()\n  …………………………………………\n&#125;\n//校验用户名字回调函数\nconst validatorUsername = (rule: any, value: any, callBack: any) =&gt; &#123;\n  //用户名字|昵称,长度至少五位\n  if (value.trim().length &gt;= 5) &#123;\n    callBack();\n  &#125; else &#123;\n    callBack(new Error(&quot;用户名字至少五位&quot;));\n  &#125;\n&#125;;\n//校验用户名字回调函数\nconst validatorname = (rule: any, value: any, callBack: any) =&gt; &#123;\n  //用户名字|昵称,长度至少五位\n  if (value.trim().length &gt;= 5) &#123;\n    callBack();\n  &#125; else &#123;\n    callBack(new Error(&quot;用户昵称至少五位&quot;));\n  &#125;\n&#125;;\nconst validatorPassword = (rule: any, value: any, callBack: any) =&gt; &#123;\n  //用户名字|昵称,长度至少五位\n  if (value.trim().length &gt;= 6) &#123;\n    callBack();\n  &#125; else &#123;\n    callBack(new Error(&quot;用户密码至少六位&quot;));\n  &#125;\n&#125;;\n//表单校验\nconst rules = &#123;\n  //用户名字\n  username: [&#123; required: true, trigger: &quot;blur&quot;, validator: validatorUsername &#125;],\n  //用户昵称\n  name: [&#123; required: true, trigger: &quot;blur&quot;, validator: validatorname &#125;],\n  //用户的密码\n  password: [&#123; required: true, trigger: &quot;blur&quot;, validator: validatorPassword &#125;],\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<ul>\n<li>2.4 更新修改功能的业务实现</li>\n</ul>\n<h4 id=\"4-分配角色业务\"><a class=\"anchor\" href=\"#4-分配角色业务\">#</a> 4. 分配角色业务</h4>\n<ol>\n<li>静态搭建</li>\n</ol>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 抽屉结构:用户某一个已有的账号进行职位分配 --&gt;\n  &lt;el-drawer v-model=&quot;drawer1&quot;&gt;\n    &lt;template #header&gt;\n      &lt;h4&gt;分配角色(职位)&lt;/h4&gt;\n    &lt;/template&gt;\n    &lt;template #default&gt;\n      &lt;el-form&gt;\n        &lt;el-form-item label=&quot;用户姓名&quot;&gt;\n          &lt;el-input v-model=&quot;userParams.username&quot; :disabled=&quot;true&quot;&gt;&lt;/el-input&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item label=&quot;职位列表&quot;&gt;\n          &lt;el-checkbox @change=&quot;handleCheckAllChange&quot; v-model=&quot;checkAll&quot; :indeterminate=&quot;isIndeterminate&quot;&gt;全选&lt;/el-checkbox&gt;\n          &lt;!-- 显示职位的的复选框 --&gt;\n          &lt;el-checkbox-group v-model=&quot;userRole&quot; @change=&quot;handleCheckedCitiesChange&quot;&gt;\n            &lt;el-checkbox v-for=&quot;(role, index) in allRole&quot; :key=&quot;index&quot; :label=&quot;role&quot;&gt;&#123;&#123; role.roleName &#125;&#125;&lt;/el-checkbox&gt;\n          &lt;/el-checkbox-group&gt;\n        &lt;/el-form-item&gt;\n      &lt;/el-form&gt;\n    &lt;/template&gt;\n    &lt;template #footer&gt;\n      &lt;div style=&quot;flex: auto&quot;&gt;\n        &lt;el-button @click=&quot;drawer1 = false&quot;&gt;取消&lt;/el-button&gt;\n        &lt;el-button type=&quot;primary&quot; @click=&quot;confirmClick&quot;&gt;确定&lt;/el-button&gt;\n      &lt;/div&gt;\n    &lt;/template&gt;\n  &lt;/el-drawer&gt;\n&lt;/template&gt;\n\n&lt;script&gt;&lt;/script&gt;\n</code></pre>\n<ol start=\"2\">\n<li>分配角色业务</li>\n</ol>\n<h3 id=\"权限管理-角色管理\"><a class=\"anchor\" href=\"#权限管理-角色管理\">#</a> 权限管理 - 角色管理</h3>\n<h4 id=\"分配权限功能\"><a class=\"anchor\" href=\"#分配权限功能\">#</a> 分配权限功能</h4>\n<p>elementplus 树形控件<br />\n获取全部的菜单与按钮的数据也是通过接口。</p>\n<ul>\n<li>\n<p>某个职位已有的菜单权限也是写在接口里的（seltct 的 true 与 false）。那么页面上如何展现勾与不勾呢？只需要过滤最末尾一级 id 的 select 即可。尾递归<br />\n准备一个数组，用于存储勾选的最末尾的节点 id，递归过滤时的条件是 select 且节点时最末一级</p>\n</li>\n<li>\n<p>为只为分配权限 也是调用接口，传参 roleId (需要分配的那个职位的 id) 和 permissionId (分配给职位的权限的 id)。参数可以调用 element plus 树形控件组件实例上的方法获得</p>\n<blockquote>\n<p>参数是 query 格式的时候写 api 接口还需要加上 <code>?k=v</code>  形式</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p>element plus 组件的 ref 属性可以获取该组件的组件实例，调用组件的方法需要 <code>组件实例.方法()</code></p>\n</blockquote>\n<h3 id=\"权限管理-菜单管理\"><a class=\"anchor\" href=\"#权限管理-菜单管理\">#</a> 权限管理 - 菜单管理</h3>\n<h4 id=\"开发菜单权限\"><a class=\"anchor\" href=\"#开发菜单权限\">#</a> 开发菜单权限</h4>\n<ol>\n<li>拆分路由</li>\n</ol>\n<ul>\n<li>静态（常亮）路由：所有用户都可以访问的路由。（登录、首页、数据大屏、404）</li>\n<li>异步路由：不同身份的用户有的有这个路由，有的没有</li>\n<li>任意路由</li>\n</ul>\n<ol start=\"2\">\n<li>菜单权限开发思路<br />\n目前咱们得项目：任何用户访问到的、能操作的菜单与按钮都是一样的</li>\n</ol>\n<p>过滤异步路由，map 递归生成菜单，</p>\n<ul>\n<li>路由器管理的只有常亮路由，用户计算完异步路由、任意路由后要动态追加：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>userAsyncRoute<span class=\"token punctuation\">,</span> anyRoute<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">route</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">addRoute</span><span class=\"token punctuation\">(</span>route<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>导航守卫</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>to <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"数据大屏\"><a class=\"anchor\" href=\"#数据大屏\">#</a> 数据大屏</h3>\n<ul>\n<li>适配问题：vw、vh； transform.scale (结合 js)<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVhoNDExVjdiNS8/cD0xMjkmYW1wO3NwbV9pZF9mcm9tPXBhZ2VEcml2ZXImYW1wO3ZkX3NvdXJjZT1mZjI0Nzc3MmE2MmVlOWMzYjJlZDI3ZmE1ZTRhOTFlMg==\">https://www.bilibili.com/video/BV1Xh411V7b5/?p=129&amp;spm_id_from=pageDriver&amp;vd_source=ff247772a62ee9c3b2ed27fa5e4a91e2</span><br />\np129 22:09</li>\n</ul>\n<h3 id=\"项目上线\"><a class=\"anchor\" href=\"#项目上线\">#</a> 项目上线</h3>\n<h4 id=\"1-环境替换\"><a class=\"anchor\" href=\"#1-环境替换\">#</a> 1、 环境替换</h4>\n<h4 id=\"2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\"><a class=\"anchor\" href=\"#2-打包工作中一般前端就做到这把打包后的-dist-文件夹交上去就行了\">#</a> 2、 打包（工作中一般前端就做到这，把打包后的 dist 文件夹交上去就行了）、</h4>\n<h4 id=\"3-把-dist-上传到服务器-配置-nginx-代理\"><a class=\"anchor\" href=\"#3-把-dist-上传到服务器-配置-nginx-代理\">#</a> 3、 把 dist 上传到服务器 - 配置 nginx 代理</h4>\n<ol>\n<li>连接服务器， <code>cd etc</code>  后安装 nginx： <code>yum install nginx</code></li>\n<li><code>cd nginx</code>  后进行配置 <code>vim nginx.conf</code> :</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>user root<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>location <span class=\"token operator\">/</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  root <span class=\"token operator\">/</span>root<span class=\"token operator\">/</span>www<span class=\"token operator\">/</span>dist<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  index index<span class=\"token punctuation\">.</span>html index<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>修改后重启： <code>systemctl restart nginx.service</code> , 随后项目便上线了</li>\n</ol>\n",
            "tags": [
                "实战",
                "后台管理系统"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/Node.js/",
            "url": "https://eucli.top/2023/09/29/Node.js/",
            "title": "Nodejs",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<p>NodeJS 二三事</p>\n<ul>\n<li>浏览器中的 javascript<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LzZUXw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/6T_</span>{RAS8(KQ3SRX[SK8WDYT.png)</li>\n<li>Node.js 中的 javascript<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/@GYE0D_MX7EBAJO@H%5DOJ6@5.png\" alt=\"\" /><br />\nnodejs 中不能使用 BOM 和 DOM 的 API</li>\n<li>nodejs 顶级对象： <code>global</code>\n<blockquote>\n<p>计算机基础快看</p>\n</blockquote>\n</li>\n<li>计算机主板主要由 CPU、内存（运算快，断电数据丢失），硬盘（运算慢，断电数据不丢失）组成。</li>\n<li>操作系统（windows、linux、macos）也是一种应用程序，用来管理和调度硬件资源。<br />\n“装系统” 就是把操作系统这个应用程序装到硬盘的过程<br />\n！[](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L0NNWVFVUEZQKFNIM000WDRLQU9EVUdYLnBuZyk=\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/CMYQUPFP(SH3M4X4KAODUGX.png)</span><br />\n 程序一般保存在硬盘中，软件安装的过程就是将程序写入硬盘的过程<br />\n程序在运行时会加载进入内存，然后由 cpu 读取并执行程序</li>\n<li>进程和线程<br />\n进程：进行（运行）中的程序。windows 可以通过任务管理器查看进程<br />\n线程：线程是一个进程中执行的一个执行流。一个线程是属于某个进程的（工厂和工人的关系）<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/%5BMS$WLCI3Q%7BP~C@N_%25WHMUA.png\" alt=\"\" /></li>\n</ul>\n<h1 id=\"buffer缓冲器\"><a class=\"anchor\" href=\"#buffer缓冲器\">#</a> Buffer（缓冲器）</h1>\n<h2 id=\"概念\"><a class=\"anchor\" href=\"#概念\">#</a> 概念</h2>\n<p>Buffer 是一个类似于数组的  <code>对象</code>  ，用于表示固定长度的字节序列</p>\n<p>Buffer 本质是一段内存空间，专门用来处理  <code>二进制数据</code>  。</p>\n<p><img data-src=\"../image/buffer.png\" alt=\"image-20230320173023659\" /></p>\n<h2 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h2>\n<ol>\n<li>Buffer 大小固定且无法调整</li>\n<li>Buffer 性能较好，可以直接对计算机内存进行操作</li>\n<li>每个元素的大小为 1 字节（byte）</li>\n</ol>\n<p><img data-src=\"../image/buffer2.png\" alt=\"image-20230320173043532\" /></p>\n<h2 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h2>\n<h3 id=\"创建-buffer\"><a class=\"anchor\" href=\"#创建-buffer\">#</a> 创建 Buffer</h3>\n<p>Node.js 中创建 Buffer 的方式主要如下几种：</p>\n<ol>\n<li>\n<p><code>Buffer.alloc</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建了一个长度为 10 字节的 Buffer，相当于申请了 10 字节的内存空间，每个字节的值为 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> buf_1 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 结果为 & lt;Buffer 00 00 00 00 00 00 00 00 00 00></span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Buffer.allocUnsafe</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建了一个长度为 10 字节的 Buffer，buffer 中可能存在旧数据，可能会影响执行结果，所以叫 unsafe ，但是效率比 alloc 高</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> buf_2 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Buffer.from</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过字符串创建 Buffer</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> buf_3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 通过数组创建 Buffer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> buf_4 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">118</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">121</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"buffer-与字符串的转化\"><a class=\"anchor\" href=\"#buffer-与字符串的转化\">#</a> Buffer 与字符串的转化</h3>\n<blockquote>\n<p>我们可以借助  <code>toString</code>  方法将 Buffer 转为字符串</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> buf_4 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">108</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">118</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">121</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">117</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf_4<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>iloveyou</span></pre></td></tr></table></figure><p><strong>注意:</strong>  <code>toString</code>  默认是按照  <code>utf-8</code>  编码方式进行转换的</p>\n<h3 id=\"buffer-的读写\"><a class=\"anchor\" href=\"#buffer-的读写\">#</a> Buffer 的读写</h3>\n<blockquote>\n<p>Buffer 可以直接通过  <code>[]</code>  的方式对数据进行处理。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> buf_3 <span class=\"token operator\">=</span> Buffer<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 读取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf_3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>101</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>buf_3<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">97</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 查看字符串结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>buf_3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>hallo</span></pre></td></tr></table></figure><p><strong>注意:</strong></p>\n<ol>\n<li>溢出：如果修改的数值超过  <code>255</code>  ，则 &lt;span style=&quot;color:red&quot;&gt; 超过 &lt;/span&gt;  <code>8</code>  位数据会被舍弃</li>\n<li>中文：一个  <code>utf-8</code>  的字符 &lt;span style=&quot;color:red&quot;&gt; 一般 &lt;/span&gt; 占 3 个字节</li>\n</ol>\n<h1 id=\"fs-模块fs-api\"><a class=\"anchor\" href=\"#fs-模块fs-api\">#</a> fs 模块（fs API）</h1>\n<blockquote>\n<p>fs 全称为  <code>file system</code>  ，称之为  <code>文件系统</code>  ，是 Node.js 中的  <code>内置模块</code>  ，可以对计算机中的磁盘进行操作。</p>\n</blockquote>\n<p>本章节会介绍如下几个操作：</p>\n<ol>\n<li>\n<p>文件写入</p>\n</li>\n<li>\n<p>文件读取</p>\n</li>\n<li>\n<p>文件移动与重命名</p>\n</li>\n<li>\n<p>文件删除</p>\n</li>\n<li>\n<p>文件夹操作</p>\n</li>\n<li>\n<p>查看资源状态</p>\n</li>\n</ol>\n<h2 id=\"文件写入\"><a class=\"anchor\" href=\"#文件写入\">#</a> 文件写入</h2>\n<blockquote>\n<p>文件写入就是将 &lt;span style=&quot;color:red&quot;&gt; 数据 &lt;/span&gt; 保存到 &lt;span style=&quot;color:red&quot;&gt; 文件 &lt;/span&gt; 中，我们可以使用如下几个方法来实现该效果</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>writeFile</td>\n<td>异步写入</td>\n</tr>\n<tr>\n<td>writeFileSync</td>\n<td>同步写入</td>\n</tr>\n<tr>\n<td>appendFile / appendFileSync</td>\n<td>追加写入</td>\n</tr>\n<tr>\n<td>createWriteStream</td>\n<td>流式写入</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"writefile-异步写入\"><a class=\"anchor\" href=\"#writefile-异步写入\">#</a> writeFile 异步写入</h3>\n<p><strong>语法</strong>：  <code>fs.writeFile(file, data[, options], callback)</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>file 文件名</p>\n</li>\n<li>\n<p>data 待写入的数据</p>\n</li>\n<li>\n<p>options 选项设置  <code>（可选）</code></p>\n</li>\n<li>\n<p>callback 写入回调</p>\n</li>\n</ul>\n<p><strong>返回值</strong>：  <code>undefined</code></p>\n<p><strong>代码示例</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//require 是 Node.js 环境中的 ' 全局 ' 变量，用来导入模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 将 [三人行，必有我师焉。] 写入到当前文件夹下的 [座右铭.txt] 文件中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"三人行，必有我师焉。\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 如果写入失败，则回调函数调用时，会传入错误对象，如写入成功，会传入 null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"writefilesync-同步写入\"><a class=\"anchor\" href=\"#writefilesync-同步写入\">#</a> writeFileSync 同步写入</h3>\n<p><strong>语法:</strong>  <code>fs.writeFileSync(file, data[, options])</code></p>\n<p>参数与  <code>fs.writeFile</code>  大体一致，只是没有 callback 参数</p>\n<p><strong>返回值：</strong> <code>undefined</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"三人行，必有我师焉。\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>Node.js 中的磁盘操作是由其他  <code>线程</code>  完成的，结果的处理有两种模式:</p>\n<ul>\n<li>同步处理 JavaScript 主线程  <code>会等待</code>  其线程的执行结果，然后再继续执行主线程的代码， <code>效率较低</code></li>\n<li>异步处理 JavaScript 主线程  <code>不会等待</code>  其线程的执行结果，直接执行后续的主线程代码， <code>效率较好</code></li>\n</ul>\n</blockquote>\n<h3 id=\"appendfile-appendfilesync-追加写入\"><a class=\"anchor\" href=\"#appendfile-appendfilesync-追加写入\">#</a> appendFile /appendFileSync 追加写入</h3>\n<blockquote>\n<p><code>appendFile</code>  作用是在文件尾部追加内容， <code>appendFile</code>  语法与  <code>writeFile</code>  语法完全相同</p>\n</blockquote>\n<p><strong>语法</strong>:</p>\n<p><code>fs.appendFile(file, data[, options], callback)</code></p>\n<p><code>fs.appendFileSync(file, data[, options])</code></p>\n<p><strong>返回值</strong>：二者都为  <code>undefined</code></p>\n<p>实例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"则其善者而从之，其不善者而改之。\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"追加成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">appendFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\r\\n温故而知新，可以为师矣\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"createwritestream-流式写入\"><a class=\"anchor\" href=\"#createwritestream-流式写入\">#</a> createWriteStream 流式写入</h3>\n<p><strong>语法</strong>： <code>fs.createWriteStream(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p><code>path</code>  文件路径</p>\n</li>\n<li>\n<p><code>options</code>  选项配置（  <code>可选</code>  ）</p>\n</li>\n</ul>\n<p>** 返回值: ** <code>Object</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./观书有感.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 写入数据到流</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"半亩方塘一鉴开\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"天光云影共徘徊\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"问渠那得清如许\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"为有源头活水来\\r\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 关闭写入流，表明已没有数据要被写入可写流</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt; 程序打开一个文件是需要消耗资源的 &lt;/span&gt;，流式写入可以减少打开关闭文件的次数。</p>\n<p>流式写入方式适用于 &lt;span style=&quot;color:red&quot;&gt; 大文件写入或者频繁写入 &lt;/span &gt; 的场景， <code>writeFile</code>  适合于 &lt;span style=&quot;color:red&quot;&gt; 写入频率较低的场景 &lt;/span&gt;</p>\n</blockquote>\n<h3 id=\"写入文件的场景\"><a class=\"anchor\" href=\"#写入文件的场景\">#</a> 写入文件的场景</h3>\n<p><code>文件写入</code>  在计算机中是一个非常常见的操作，下面的场景都用到了文件写入</p>\n<ul>\n<li>\n<p>下载文件</p>\n</li>\n<li>\n<p>安装软件</p>\n</li>\n<li>\n<p>保存程序日志，如 Git</p>\n</li>\n<li>\n<p>编辑器保存文件</p>\n</li>\n<li>\n<p>视频录制</p>\n</li>\n</ul>\n<blockquote>\n<p>当 &lt;span style=&quot;color:red&quot;&gt; 需要持久化保存数据 &lt;/span&gt; 的时候，应该想到  <code>文件写入</code></p>\n</blockquote>\n<h2 id=\"文件读取\"><a class=\"anchor\" href=\"#文件读取\">#</a> 文件读取</h2>\n<blockquote>\n<p>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>readFile</td>\n<td>异步读取</td>\n</tr>\n<tr>\n<td>readFileSync</td>\n<td>同步读取</td>\n</tr>\n<tr>\n<td>createReadStream</td>\n<td>流式读取</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"readfile-异步读取\"><a class=\"anchor\" href=\"#readfile-异步读取\">#</a> readFile 异步读取</h3>\n<p><strong>语法</strong>:  <code>fs.readFile(path[, options], callback)</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>options 选项配置</p>\n</li>\n<li>\n<p>callback 回调函数</p>\n</li>\n</ul>\n<p><strong>返 回 值 ：</strong>  <code>undefined</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"uft-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"readfilesync-同步读取\"><a class=\"anchor\" href=\"#readfilesync-同步读取\">#</a> readFileSync 同步读取</h3>\n<p><strong>语法：</strong> <code>fs.readFileSync(path[, options])</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>options 选项配置</p>\n</li>\n</ul>\n<p><strong>返 回 值 ：</strong> <code>string | Buffer</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"createreadstream-流式读取\"><a class=\"anchor\" href=\"#createreadstream-流式读取\">#</a> createReadStream 流式读取</h3>\n<p><strong>语法：</strong> <code>fs.createReadStream(path[, options])</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>options 选项配置（  <code>可选</code>  ）</p>\n</li>\n</ul>\n<p><strong>返回值：</strong> <code>Object</code></p>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建读取流对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> rs <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./观书有感.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 每次取出 64k 数据后执行一次 data 回调</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 绑定一个 data 事件  chunk 块儿  大块儿</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>re<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 读取完毕后，执行 end 回调 (可选事件)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>re<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取完毕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"读取文件应用场景\"><a class=\"anchor\" href=\"#读取文件应用场景\">#</a> 读取文件应用场景</h3>\n<ul>\n<li>\n<p>电脑开机</p>\n</li>\n<li>\n<p>程序运行</p>\n</li>\n<li>\n<p>编辑器打开文件</p>\n</li>\n<li>\n<p>查看图片</p>\n</li>\n<li>\n<p>播放视频</p>\n</li>\n<li>\n<p>播放音乐</p>\n</li>\n<li>\n<p>Git 查看日志</p>\n</li>\n<li>\n<p>上传文件</p>\n</li>\n<li>\n<p>查看聊天记录</p>\n</li>\n</ul>\n<h2 id=\"文件移动与重命名\"><a class=\"anchor\" href=\"#文件移动与重命名\">#</a> 文件移动与重命名</h2>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>rename</code>  或  <code>renameSync</code>  来移动或重命名  <code>文件或文件夹</code></p>\n</blockquote>\n<p><strong>语法：</strong></p>\n<p><code>fs.rename(oldPath, newPath, callback)</code></p>\n<p><code>fs.renameSync(oldPath, newPath)</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>oldPath 文件当前的路径</p>\n</li>\n<li>\n<p>newPath 文件新的路径</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rename</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./观书有感.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./论语/观书有感.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"移动完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">renameSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./座右铭.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./论语/.我的座右铭.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注</strong>：如果还是移动到当前路径，但是修改了名字，就是重命名了</p>\n<h2 id=\"文件删除\"><a class=\"anchor\" href=\"#文件删除\">#</a> 文件删除</h2>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>unlink</code>  或  <code>unlinkSync</code>  来删除文件</p>\n</blockquote>\n<p><strong>语法:</strong></p>\n<p><code>fs.unlink(path, callback)</code></p>\n<p><code>fs.unlinkSync(path)</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件路径</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">unlinkSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./test2.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 调用 rm 方法  14.4   同步 rmSync</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./论语.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"文件夹操作\"><a class=\"anchor\" href=\"#文件夹操作\">#</a> 文件夹操作</h2>\n<blockquote>\n<p>借助 Node.js 的能力，我们可以对文件夹进行  <code>创建</code>  、 <code>读取</code>  、 <code>删除</code>  等操作</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mkdir / mkdirSync</td>\n<td>创建文件夹</td>\n</tr>\n<tr>\n<td>readdir / readdirSync</td>\n<td>读取文件夹</td>\n</tr>\n<tr>\n<td>rmdir / rmdirSync</td>\n<td>删除文件夹</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"mkdir-创建文件夹\"><a class=\"anchor\" href=\"#mkdir-创建文件夹\">#</a> mkdir 创建文件夹</h3>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>mkdir</code>  或  <code>mkdirSync</code>  来创建文件夹</p>\n</blockquote>\n<p><strong>语法</strong>:</p>\n<p><code>fs.mkdir(path[, options], callback)</code></p>\n<p><code>fs.mkdirSync(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（  <code>可选</code>  ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步创建文件夹  mk  make  制作   dir  directory  文件夹</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./page\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"创建成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 递归异步创建</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1/2/3\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递归创建成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 递归同步创建文件夹</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">mkdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./x/y/z\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"readdir-读取文件夹\"><a class=\"anchor\" href=\"#readdir-读取文件夹\">#</a> readdir 读取文件夹</h3>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>readdir</code>  或  <code>readdirSync</code>  来读取文件夹</p>\n</blockquote>\n<p><strong>语法：</strong></p>\n<p><code>fs.readdir(path[, options], callback)</code></p>\n<p><code>fs.readdirSync(path[, options])</code></p>\n<p><strong>参数说明：</strong></p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（  <code>可选</code>  ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./论语\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 同步读取</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./论语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"rmdir-删除文件夹\"><a class=\"anchor\" href=\"#rmdir-删除文件夹\">#</a> rmdir 删除文件夹</h3>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>rmdir</code>  或  <code>rmdirSync</code>  来删除文件夹</p>\n</blockquote>\n<p><strong>语法</strong>：</p>\n<p><code>fs.rmdir(path[, options], callback)</code></p>\n<p><code>fs.redirSync(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（ 可选 ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步删除文件夹  rm  remove 移除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./page\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 异步递归删除文件夹  不推荐</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//=>DeprecationWarning: In future versions of Node.js, fs.rmdir(path, &#123; recursive: true &#125;) will be removed. Use fs.rm(path, &#123; recursive: true &#125;) instead</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"递归删除\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 同步递归删除文件夹</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rmdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./x\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 建议使用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">rm</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./a\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">recursive</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"查看资源状态\"><a class=\"anchor\" href=\"#查看资源状态\">#</a> 查看资源状态</h2>\n<blockquote>\n<p>在 Node.js 中，我们可以使用  <code>stat</code>  或  <code>statSync</code>  来查看资源的详细信息</p>\n</blockquote>\n<p><strong>语法</strong>：</p>\n<p><code>fs.stat(path[, options], callback)</code></p>\n<p><code>fs.statSync(path[, options])</code></p>\n<p><strong>参数说明</strong>：</p>\n<ul>\n<li>\n<p>path 文件夹路径</p>\n</li>\n<li>\n<p>options 选项配置（ 可选 ）</p>\n</li>\n<li>\n<p>callback 操作后的回调</p>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 异步获取状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//stat  方法  status 缩写 状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">stat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/data.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 同步获取状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"./assets/3d5f0b54415a2949c04dcbc49a0452e7ec91899b.png\" alt=\"image-20230321144242912\" /></p>\n<p><strong>结果值对象结构</strong>：</p>\n<ul>\n<li>\n<p>size 文件体积</p>\n</li>\n<li>\n<p>birthtime 创建时间</p>\n</li>\n<li>\n<p>mtime 最后修改时间</p>\n</li>\n<li>\n<p>isFile 检测是否为文件</p>\n</li>\n<li>\n<p>isDirectory 检测是否为文件夹</p>\n</li>\n<li>\n<p>....</p>\n</li>\n</ul>\n<h2 id=\"相对路径问题\"><a class=\"anchor\" href=\"#相对路径问题\">#</a> 相对路径问题</h2>\n<p>fs 模块对资源进行操作时，路径的写法有两种：</p>\n<ul>\n<li>\n<p>相对路径</p>\n<ul>\n<li><code>./座右铭.txt</code>  当前目录下的 座右铭.txt</li>\n<li><code>座右铭.txt</code>  等效于上面的写法</li>\n<li><code>../座右铭.txt</code>  当前目录的上一级目录中的 座右铭.txt</li>\n</ul>\n</li>\n<li>\n<p>绝对路径</p>\n<ul>\n<li><code>D:/Program Files</code>  windows 系统下的绝对路径</li>\n<li><code>/user/bin</code>  Linux 系统下的绝对路径</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>相对路径中所谓的  <code>当前目录</code>  ，指的是  <code>命名行的工作目录</code>  ，而并非是文件的所在目录</p>\n<p>所以当命名行的工作目录与文件所在目录不一致时，会出现一些 Bug</p>\n</blockquote>\n<h2 id=\"__dirname\"><a class=\"anchor\" href=\"#__dirname\">#</a> __dirname</h2>\n<p><code>__dirname</code>  与  <code>require</code>  类似，都是 Node.js 环境中的 ' 全局 ' 变量</p>\n<p><code>__dirname</code>  保存着 &lt;span style=&quot;color:red&quot;&gt; 当前文件夹所在目录的绝对路径 &lt;/span&gt;，可以使用  <code>__dirname</code>  与文件名拼接成绝对路径</p>\n<p>代码示例:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//=>__dirname + '/data.txt'  === 'D:\\\\Desktop\\\\Node\\\\code\\\\03-fs 模块 /data.txt'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>使用 fs 模块的时候，尽量使用  <code>__dirname</code>  路径转换为绝对路径，这样可以避免相对路径产生的 Bug</p>\n</blockquote>\n<h2 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h2>\n<h3 id=\"编写一个-js-文件实现复制文件的功能\"><a class=\"anchor\" href=\"#编写一个-js-文件实现复制文件的功能\">#</a> 编写一个 JS 文件，实现复制文件的功能</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *  需求:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *    复制  资料文件夹下的  [笑看风云.mp4]</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 方式一  readFile</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 写入文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云2.mp4\"</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 方式二 流式操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 创建读取流对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">const</span> rs <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createReadStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 创建一个写入流对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> ws <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./资料/笑看风云3.mp4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 绑定 data 事件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 理想状态下，读取 64k 就写入 64 k，这样消耗的内存最少，实际上读取的速度大于写入的速度</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>rs<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  ws<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//  绑定 data 事件 ==== rs.pipe (ws)</span></pre></td></tr></table></figure><h3 id=\"文件重命名\"><a class=\"anchor\" href=\"#文件重命名\">#</a> 文件重命名</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 读取 03-fs 模块 文件夹</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readdirSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../03-fs模块\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 遍历数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>files<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    num <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 创建新的文件名</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> newName <span class=\"token operator\">=</span> num <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 重命名</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">renameSync</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../03-fs模块/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>item<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">../03-fs模块/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>newName<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"path-模块\"><a class=\"anchor\" href=\"#path-模块\">#</a> path 模块</h1>\n<blockquote>\n<p><code>path</code>  模块提供了  <code>操作路径</code>  的功能，我们将介绍如下几个较为常用的几个 API (主要用第一个 <code>path.resolve</code> )：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th><strong>API</strong></th>\n<th><strong>说明</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>path.resolve</td>\n<td>拼接规范的绝对路径  <code>常用</code></td>\n</tr>\n<tr>\n<td>path.sep</td>\n<td>获取操作系统的路径分隔符</td>\n</tr>\n<tr>\n<td>path.parse</td>\n<td>解析路径并返回对象</td>\n</tr>\n<tr>\n<td>path.basename</td>\n<td>获取路径的基础名称</td>\n</tr>\n<tr>\n<td>path.dirname</td>\n<td>获取路径的目录名</td>\n</tr>\n<tr>\n<td>path.extname</td>\n<td>获得路径的扩展名</td>\n</tr>\n</tbody>\n</table>\n<p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 fs 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 导入 path 模块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 写入文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// fs.writeFileSync(__dirname + '/index.html', 'love')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\Desktop\\Node\\code\\04-path/index.html</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//resolve 解决问题  拼接绝对路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\Desktop\\Node\\code\\04-path\\index.html</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\Desktop\\Node\\code\\04-path\\index.html</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"./test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>D:\\index.html\\test</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//sep 获取路径分隔符</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> window \\  linux /</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//parse 方法  __filename  ' 全局变量'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>__filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 文件的绝对路径 //=>D:\\Desktop\\Node\\code\\04-path\\01-path.js</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 解析路径</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"D:\\\\Desktop\\\\Node\\\\code\\\\04-path\\\\01-path.js\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 获取路径基础名称</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">basename</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 获取路径的目录名</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">dirname</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 获取路径的拓展名</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">extname</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"http-协议\"><a class=\"anchor\" href=\"#http-协议\">#</a> HTTP 协议</h1>\n<h2 id=\"概念-2\"><a class=\"anchor\" href=\"#概念-2\">#</a> 概念</h2>\n<blockquote>\n<p>HTTP（hypertext transport protocol）协议；中文叫 &lt;span style=&quot;color:red&quot;&gt; 超文本传输协议 &lt;/span&gt;</p>\n</blockquote>\n<p>是一种基于 TCP/IP 的应用层通信协议</p>\n<p>这个协议详细规定了  <code>浏览器</code>  和 万维网  <code>服务器</code>  之间互相通信的规则</p>\n<p>协议中主要规定了两个方面的内容:</p>\n<ul>\n<li>\n<p>客户端：用来向服务器发送数据，可以被称之为 &lt;span style=&quot;color:red&quot;&gt; 请求报文 &lt;/span&gt;</p>\n</li>\n<li>\n<p>服务端：向客户端返回数据，可以被称之为 &lt;span style=&quot;color:red&quot;&gt; 响应报文 &lt;/span&gt;</p>\n</li>\n</ul>\n<blockquote>\n<p>报文：可以简单理解为就是一堆字符串</p>\n</blockquote>\n<h2 id=\"请求报文的组成\"><a class=\"anchor\" href=\"#请求报文的组成\">#</a> 请求报文的组成</h2>\n<ul>\n<li>请求行</li>\n<li>请求头</li>\n<li>空行</li>\n<li>请求体</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/Q$G@\" alt=\"\" />}4DTBP28G0W`)~NCTJ.png)</p>\n<h2 id=\"http-的请求行\"><a class=\"anchor\" href=\"#http-的请求行\">#</a> <strong>HTTP</strong> 的请求行</h2>\n<blockquote>\n<p>请求行由三部分组成：请求方法、URL、HTTP 版本号</p>\n</blockquote>\n<ul>\n<li>\n<p>请求方法（get、post、put、delete 等）</p>\n</li>\n<li>\n<p>请求 URL（统一资源定位器），其本身也是一个字符串，定位服务器中的资源</p>\n<p>例如：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20vaW5kZXguaHRtbD9hPTEwMCZhbXA7Yj0yMDAjbG9nbw==\">http://www.baidu.com/index.html?a=100&amp;b=200#logo</span></p>\n<ul>\n<li>http: 协议 (https、ftp、ssh 等)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span> 域名</li>\n<li>80 端口号</li>\n<li>/index.html 路径</li>\n<li>a=100&amp;b=200 查询字符串</li>\n<li>#logo 哈希 (锚点链接)</li>\n</ul>\n</li>\n<li>\n<p>HTTP 协议版本号</p>\n</li>\n</ul>\n<h2 id=\"http-请求头\"><a class=\"anchor\" href=\"#http-请求头\">#</a> HTTP 请求头</h2>\n<p><code>格式：『头名：头值』</code> <br />\nHTTP 请求头提供了关于请求，响应或者其他的发送实体的信息。HTTP 的头信息包括通用头、请求头、响应头和实体头四个部分。每个头域由一个域名，冒号（:）和域值三部分组成。</p>\n<p>常见的请求头有：</p>\n<table>\n<thead>\n<tr>\n<th>请求头</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Host</td>\n<td>主机名</td>\n</tr>\n<tr>\n<td>Connection</td>\n<td>连接的设置 keep-alive（保持连接）；close（关闭连接）</td>\n</tr>\n<tr>\n<td>Cache-Control</td>\n<td>缓存控制 max-age = 0 （没有缓存）</td>\n</tr>\n<tr>\n<td>Upgrade-Insecure-Requests</td>\n<td>将网页中的 http 请求转化为 https 请求（很少用）老网站升级</td>\n</tr>\n<tr>\n<td>User-Agent</td>\n<td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端 ，一般在 PC 端和手机端的区分</td>\n</tr>\n<tr>\n<td>Accept</td>\n<td>设置浏览器接收的数据类型</td>\n</tr>\n<tr>\n<td>Accept-Encoding</td>\n<td>设置接收的压缩方式</td>\n</tr>\n<tr>\n<td>Accept-Language</td>\n<td>设置接收的语言 q=0.7 为喜好系数，满分为 1</td>\n</tr>\n<tr>\n<td>Cookie</td>\n<td>后面单独讲</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"http-的请求体\"><a class=\"anchor\" href=\"#http-的请求体\">#</a> HTTP 的请求体</h2>\n<p>请求体内容的格式是非常灵活的，</p>\n<p>（可以是空）==&gt; GET 请求，</p>\n<p>（也可以是字符串，还可以是 JSON）===&gt; POST 请求</p>\n<p>例如：</p>\n<ul>\n<li>\n<p>字符串：keywords = 手机 &amp; price=2000</p>\n</li>\n<li keywords:手机,price:2000=\"\">\n<p>JSON：</p>\n</li>\n</ul>\n<h2 id=\"响应报文的组成\"><a class=\"anchor\" href=\"#响应报文的组成\">#</a> 响应报文的组成</h2>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/C~ZJ6K5\" alt=\"\" />F5BXF@AZ@4_$TBW.png)</p>\n<ul>\n<li>\n<p>响应行:  <code>HTTP/1.1 200 OK</code></p>\n<ul>\n<li>\n<p>HTTP/1.1：HTTP 协议版本号</p>\n</li>\n<li>\n<p>200：响应状态码 404 Not Found 500 Internal Server Error</p>\n<p>还有一些状态码，参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</span><br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L0tYfjQoVExFR0xPQ0JTQjdfQTRPNkAwLnBuZyk=\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/KX~4(TLEGLOCBSB7_A4O6@0.png)</span></p>\n</li>\n<li>\n<p>OK：响应状态描述<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/EJ$%7B%7D\" alt=\"\" /> NA$0F~4VOE1] I83YK.png)</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>响应状态码 和 响应字符串 关系是 一一对应 的。</p>\n</blockquote>\n<ul>\n<li>\n<p>响应头</p>\n<ul>\n<li><code>Cache-Control</code> : 缓存控制 private 私有的，只允许客户端缓存数据</li>\n<li><code>Connection</code> : 链接设置</li>\n<li><code>Content-Type:text/html;charset=utf-8</code> : 设置响应体的数据类型以及字符集，响应体为 html，字符集 utf-8</li>\n<li><code>Content-Length</code> : 响应体的长度，单位为字节</li>\n</ul>\n</li>\n<li>\n<p>空行</p>\n</li>\n<li>\n<p>响应体</p>\n<p>响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</p>\n</li>\n</ul>\n<h2 id=\"ip\"><a class=\"anchor\" href=\"#ip\">#</a> IP</h2>\n<ol>\n<li>\n<p>了解 ip</p>\n<blockquote>\n<p>ip 可以理解成地址，其本身是一个数字标识，由 32 位的二进制数字转十进制转化而来。<br />\nip 用来标识网络中的设备，实现设备间通信。任何设备只要接入互联网都会有一个 ip 地址<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/TT%7B2%5D7%7DJU68OI198%5B6~VW%7BB.png\" alt=\"\" /></p>\n</blockquote>\n</li>\n<li>\n<p>ip 的分类</p>\n</li>\n</ol>\n<ul>\n<li>ip 总共只有 32 位，最多能表示 40 多亿个 ip 地址，但全世界有 80 多亿人，每个人又不可能只有一个接入互联网的设备，这就造成了 ip 不够用的情况<br />\n目前解决 ip 不够用的方法：共享 ip（区域共享、家庭共享）<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0UP6%5BDDV7NQV$22SGK%5BW7GM.png\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/_$31T5%256~BE%258MKUJPANRP5.png\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0E%7BI21N~XU@%5DSE6K%5D1K%60CW8.png\" alt=\"\" /><br />\n局域网 ip 是可以被复用的，每个局域网再通过一个公网 ip 就可以实现相互间的通信了<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/32$TAVS5%5D%5D_8K2OE@ZCRWC9.png\" alt=\"\" /></li>\n</ul>\n<hr />\n<ul>\n<li>本地回环 ip 地址： <code>127.0.0.1~127.255.255.254</code> <br />\n 永远访问本机，用什么设备就会访问这个设备本身</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JPXVT5LX_983X%5BW3QAOW8D9.png\" alt=\"\" /></p>\n<h2 id=\"端口\"><a class=\"anchor\" href=\"#端口\">#</a> 端口</h2>\n<p>端口：应用程序的数字标识。<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/\" alt=\"\" />~6SM@{C9](Q3BZ%XL9S_`B.png)</p>\n<blockquote>\n<p>一台现代计算机有 65536 个端口（0~65535）<br />\n一个应用程序可以使用一个或多个端口</p>\n</blockquote>\n<ul>\n<li>端口的主要作用：<br />\n实现不同主机应用程序间的通信</li>\n<li>端口场景说明<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/P2TG7T(WLO2%60G$A2O33E)JT.png\" alt=\"\" /></li>\n</ul>\n<h2 id=\"创建-http-服务\"><a class=\"anchor\" href=\"#创建-http-服务\">#</a> 创建 <strong>HTTP</strong> 服务</h2>\n<p>使用 nodejs 创建 HTTP 服务</p>\n<h3 id=\"操作步骤\"><a class=\"anchor\" href=\"#操作步骤\">#</a> 操作步骤</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2. 创建服务对象 create 创建 server 服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//request 意为请求。是对请求报文的封装对象，通过 request 对象可以 `获得请求报文的数据`</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//response 意为响应。是对响应报文的封装对象，通过 response 对象可以 `设置响应报文`</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 设置响应体并结束响应</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello HTTP server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 返回结果是一个对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//3. 监听端口，启动服务。`listen ()` 方法传入两个参数：端口号（结合上面端口的介绍）、启动成功后执行的函数体</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动, 端口 9000 监听中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>http.createServer</code>  里的回调函数的执行时机： &lt;span style=&quot;color:red&quot;&gt; 当接收到 HTTP 请求的时候，就会执行 &lt;/span&gt;<br />\n 使用浏览器访问该 http 服务 (127.0.0.1:9000)，http 服务就会返回响应报文： <code>Hello HTTP server</code> <br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/X21IDO~IT%254%7DL$\" alt=\"\" />`KS()~%1.png)<br />\n nodejs 应用程序占用了本机的 9000 端口</p>\n</blockquote>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ol>\n<li>\n<p>命令行  <code>ctrl + c</code>  停止服务</p>\n</li>\n<li>\n<p>当服务启动后，更新代码 &lt;span style=&quot;color:red&quot;&gt; 必须重启服务才能生效 &lt;/span&gt;</p>\n</li>\n<li>\n<p>响应内容中文乱码的解决办法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 设置响应头</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>端口号被占用 (非常常见)</p>\n<p><code>Error: listen EADDRINUSE: address already in use :::9000</code></p>\n<p>1）关闭当前正在运行监听端口的服务 （ &lt;span style=&quot;color:red&quot;&gt; 使用较多 &lt;/span&gt; ）</p>\n<p>2）修改其他端口号</p>\n</li>\n<li>\n<p><code>HTTP</code>  协议 &lt;span style=&quot;color:red&quot;&gt; 默认端口 &lt;/span &gt; 是  <code>80</code>  。 <code>HTTPS</code>  协议的 &lt;span style=&quot;color:red&quot;&gt; 默认端口 &lt;/span &gt; 是  <code>443</code> , HTTP 服务开发常用端口有  <code>3000</code> ， <code>8080</code> ， <code>8090</code> ， <code>9000</code>  等</p>\n</li>\n</ol>\n<blockquote>\n<p>如果端口被其他程序占用，可以使用 &lt;span style=&quot;color:red&quot;&gt; 资源监视器 &lt;/span&gt; 找到占用端口的程序 (开始按钮搜索 “资源监视器”，记住占用端口的 PID)，然后使用 &lt;span style=&quot;color:red&quot;&gt; 任务管理器 &lt;/span&gt; 关闭对应的程序（根据前面查到的 PID 找）</p>\n</blockquote>\n<h2 id=\"浏览器查看-http-报文\"><a class=\"anchor\" href=\"#浏览器查看-http-报文\">#</a> 浏览器查看 HTTP 报文</h2>\n<p>点击步骤</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5e43303dea39359bd3514518f3d5517efac21bd2.jpg\" alt=\"\" /></p>\n<h3 id=\"查看请求行与请求头\"><a class=\"anchor\" href=\"#查看请求行与请求头\">#</a> 查看请求行与请求头</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/e5062ab2d8edc132beddd35d7cd40c83a8b81c87.jpg\" alt=\"\" /></p>\n<h3 id=\"查看请求体\"><a class=\"anchor\" href=\"#查看请求体\">#</a> 查看请求体</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/e421f0e1e84c5ec43bcc56f7856c1f7b623b69a5.jpg\" alt=\"\" /></p>\n<h3 id=\"查看-url-查询字符串\"><a class=\"anchor\" href=\"#查看-url-查询字符串\">#</a> 查看 <strong>URL</strong> 查询字符串</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/9373dc9437fa52b90d195ed8d76f10e346c8e9e3.jpg\" alt=\"\" /></p>\n<h3 id=\"查看响应行与响应头\"><a class=\"anchor\" href=\"#查看响应行与响应头\">#</a> 查看响应行与响应头</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/a553bc93e90d1721bfc27fc960edeeea2eb7ea90.jpg\" alt=\"\" /></p>\n<h3 id=\"查看响应体\"><a class=\"anchor\" href=\"#查看响应体\">#</a> 查看响应体</h3>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/a9440ee4a416d06a8f28be8f524c685ccac4c68d.jpg\" alt=\"\" /></p>\n<h2 id=\"获取-http-请求报文\"><a class=\"anchor\" href=\"#获取-http-请求报文\">#</a> 获取 HTTP 请求报文</h2>\n<p>只有通过 <code>请求报文</code> 得到需求，才能根据需求返回正确的 <code>响应报文</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">语法</th>\n<th style=\"text-align:left\">重点掌握</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">请求方法</td>\n<td style=\"text-align:left\"><code>request.method</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求版本</td>\n<td style=\"text-align:left\">request.httpVersion</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求路径</td>\n<td style=\"text-align:left\"><code>request.url</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL 路径</td>\n<td style=\"text-align:left\"><code>require('url').parse(request.url).pathname</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">URL 查询字符串</td>\n<td style=\"text-align:left\"><code>require('url').parse(request.url,  true).query</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求头</td>\n<td style=\"text-align:left\"><code>request.headers</code></td>\n<td style=\"text-align:left\"><strong>*</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">请求体</td>\n<td style=\"text-align:left\">request.on('data', function(chunk){})&lt;br&gt;request.on('end', function(){})</td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>获取 HTTP 请求报文</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取请求的方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>GET</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 获取请求的 url</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 只包含 url 中的 路径 与查询字符串</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 获取 http 协议的版本号</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>httpVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 1.1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 获取 http 的请求头</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 结果是一个对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 设置响应体</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 3. 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意事项：</strong></p>\n<ol>\n<li><code>request.url</code>  只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li>\n<li><code>request.headers</code>  将请求信息转化成一个对象，并将属性名都转化成了『小写』</li>\n<li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为  <code>/</code></li>\n<li>关于  <code>favicon.ico</code> ：这个请求是属于浏览器自动发送的请求</li>\n</ol>\n<ul>\n<li>提取 http 报文的请求体\n<blockquote>\n<p>注意：get 请求的请求体一般是空的，要发送 post 请求<br />\n下面这个方法了解即可，后面会介绍更简单的提取报文请求体的方法</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 1. 声明一个变量，用来接收响应结果</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> body <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 2. 绑定 data 事件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">chunk</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    body <span class=\"token operator\">+=</span> chunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 3. 绑定 end 事件，请求完后打印 body</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  request<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"end\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>'username=111&amp;password=111'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 响应</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 设置响应体</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 3. 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>提取 http 报文中 url 的路径 与 查询字符串（<strong>重要</strong>）</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 导入 url 模块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 2. 解析 request.url</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>/search?keyword=h5</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 使用 parse 解析 request.url 的内容，parse 就是 “解析” 的意思</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">//true 将 query 属性将会设置为一个 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如下图所示，为一个对象</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 获取路径</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> pathname <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 获取查询字符串</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">let</span> keyword <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>keyword<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>keyword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>h5</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3960e1c84da383ba7dda53b627e1dc68384f2e49.png\" alt=\"\" /></p>\n<ul>\n<li>提取 http 报文中 url 的路径 与 查询字符串 [新]（<strong>重要</strong>）</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 实例化 url 对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// let url = new URL('/search?a=100&amp;b=200','http://127.0.0.1:9000')</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 如图所示，为一个对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 输出路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=>/search</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 输出 keyword 查询字符串</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 100</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url new\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/67ddb914c3ae4e0444a8a1fdab0fa2b58d0e3065.png\" alt=\"\" /></p>\n<h3 id=\"练习-2\"><a class=\"anchor\" href=\"#练习-2\">#</a> 练习</h3>\n<p>按照以下要求搭建 HTTP 服务</p>\n<table>\n<thead>\n<tr>\n<th>请求类型 **(<strong>方法</strong>)**</th>\n<th>请求地址</th>\n<th>响应体结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>get</td>\n<td>/login</td>\n<td>登录页面</td>\n</tr>\n<tr>\n<td>get</td>\n<td>/reg</td>\n<td>注册页面</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1、引入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2、建立服务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 对象的解构赋值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 设置响应头信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 解决中文乱码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token string\">\"/register\"</span> <span class=\"token operator\">&amp;&amp;</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注册页面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url <span class=\"token operator\">==</span> <span class=\"token string\">\"/login\"</span> <span class=\"token operator\">&amp;&amp;</span> method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录页面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//3、监听端口</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务启动中....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"设置-http-响应报文\"><a class=\"anchor\" href=\"#设置-http-响应报文\">#</a> 设置 <strong>HTTP</strong> 响应报文</h2>\n<table>\n<thead>\n<tr>\n<th>作用</th>\n<th>语法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设置响应状态码</td>\n<td>response.statusCode</td>\n</tr>\n<tr>\n<td>设置响应状态描述</td>\n<td>response.statusMessage （ 用的非常少 ）</td>\n</tr>\n<tr>\n<td>设置响应头信息</td>\n<td>response.setHeader (' 头名 ', ' 头值 ') ( <code>可以自定义</code> )</td>\n</tr>\n<tr>\n<td>设置响应体</td>\n<td>response.write('xx')&lt;br/&gt;response.end('xxx')</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>设置响应报文</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 设置响应状态码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">203</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 2. 响应状态的描述</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>response<span class=\"token punctuation\">.</span>statusMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"i love you\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 3. 响应头</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 自定义响应头</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myHeader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 设置多个同名的响应头</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>设置响应报文的响应体</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//write 和 end 的两种使用情况：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1. write 和 end 的结合使用 响应体相对分散</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 每一个请求，在处理的时候必须要执行 end 方法的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//2. 单独使用 end 方法 响应体相对集中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"练习-3\"><a class=\"anchor\" href=\"#练习-3\">#</a> 练习</h3>\n<p>搭建 HTTP 服务，响应一个 4 行 3 列的表格，并且要求表格有  <code>隔行换色效果</code>  ，且  <code>点击</code>  单元格能  <code>高亮显示</code></p>\n<p><strong>方法一</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    &lt;!DOCTYPE html></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    &lt;html lang=\"en\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    &lt;head></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      &lt;meta charset=\"UTF-8\"></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      &lt;title>Document&lt;/title></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      &lt;style></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        td &#123;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          padding: 20px 40px;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        table tr:nth-child(odd) &#123;</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          background-color: #aef;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        table tr:nth-child(even) &#123;</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          background-color: #fcb;</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        table,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        td &#123;</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          border-collapse: collapse;</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        &#125;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      &lt;/style></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    &lt;/head></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    &lt;body></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      &lt;table border=\"1\"></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        &lt;tr></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>          &lt;td>&lt;/td></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        &lt;/tr></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      &lt;/table></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      &lt;script></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        const tds = document.querySelectorAll('td')</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        tds.forEach(item => &#123;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>          item.addEventListener('click', function () &#123;</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            this.style.backgroundColor = '#000'</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>          &#125;)</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        &#125;)</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>      &lt;/script></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    &lt;/body></pre></td></tr><tr><td data-num=\"68\"></td><td><pre></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    &lt;/html></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务器</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>方法二</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> html <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/table.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">//end 方法的参数可以是字符串也可以是 Buffer</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"网页资源的基本加载过程重要\"><a class=\"anchor\" href=\"#网页资源的基本加载过程重要\">#</a> 网页资源的基本加载过程（<strong>重要</strong>）</h2>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/929cb3e9fb5f89c7589ee9a7cd93e767ae1a1bc9.jpg\" alt=\"\" /><br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/01b27104af8ecfe88afc6f70450cc04682d95f31.jpg\" alt=\"\" /></p>\n<p>网页资源的加载都是循序渐进的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如 CSS，Javascript，图片等。&lt;span style=&quot;color:red&quot;&gt; 理解了这个内容对于后续的学习与成长有非常大的帮助 &lt;/span&gt;</p>\n<h2 id=\"静态资源服务\"><a class=\"anchor\" href=\"#静态资源服务\">#</a> 静态资源服务</h2>\n<p><code>静态资源</code>  是指 &lt;span style=&quot;color:red&quot;&gt; 内容长时间不发生改变的资源 &lt;/span&gt; ，例如图片，视频，CSS 文件，JS 文件，HTML 文件，字体文件等</p>\n<p><code>动态资源</code>  是指 &lt;span style=&quot;color:red&quot;&gt; 内容经常更新的资源 &lt;/span&gt; ，例如百度首页，网易首页，京东搜索列表页面等</p>\n<h3 id=\"http-响应练习\"><a class=\"anchor\" href=\"#http-响应练习\">#</a> http 响应练习</h3>\n<p>创建一个 http 服务，端口为 9000，满足下列需求<br />\n GET /index.html 响应 page/index.html 文件内容<br />\n GET /css/app.css 响应 page/css/app.css 文件内容<br />\n GET /images/logo.png 响应 page/images/logo.png 文件内容</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 http 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content-type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html;charset=utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 获取请求 url 路径</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> pathname <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token string\">\"http://127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 拼接文件路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">let</span> filePath <span class=\"token operator\">=</span> __dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/page\"</span> <span class=\"token operator\">+</span> pathname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 读取文件 fs 异步 api</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"文件读取失败~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      retuen<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 响应文件内容</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务器</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">9000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已经启动...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"网站根目录或静态资源目录\"><a class=\"anchor\" href=\"#网站根目录或静态资源目录\">#</a> 网站根目录或静态资源目录</h3>\n<p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 &lt;span style=&quot;color:red&quot;&gt; 静态资源目录 &lt;/span&gt; ，也称之为 &lt;span style=&quot;color:red&quot;&gt; 网站根目录 &lt;/span&gt;</p>\n<blockquote>\n<p>思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？</p>\n<ul>\n<li>该文件的所处的文件夹</li>\n</ul>\n</blockquote>\n<h3 id=\"网页中的-url\"><a class=\"anchor\" href=\"#网页中的-url\">#</a> 网页中的 <strong>URL</strong></h3>\n<p>网页中的 URL 主要分为两大类： <code>相对路径</code>  与  <code>绝对路径</code></p>\n<h4 id=\"绝对路径\"><a class=\"anchor\" href=\"#绝对路径\">#</a> 绝对路径</h4>\n<p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p>\n<table>\n<thead>\n<tr>\n<th>形式</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2F0Z3VpZ3UuY29tL3dlYg==\">http://atguigu.com/w eb</span></td>\n<td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td>\n</tr>\n<tr>\n<td><a href=\"//atguigu.com/web\">//atguigu.com/web</a></td>\n<td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td>\n</tr>\n<tr>\n<td>/web</td>\n<td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"相对路径\"><a class=\"anchor\" href=\"#相对路径\">#</a> 相对路径</h4>\n<p>相对路径在发送请求时，需要与当前页面 URL 路径进行  <code>计算</code>  ，得到完整 URL 后，再发送请求，学习阶段用的较多</p>\n<p>例如当前网页 url 为 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9jb3Vyc2UvaDUuaHRtbA==\">http://www.atguigu.com/course/h5.html</span></p>\n<table>\n<thead>\n<tr>\n<th>形式</th>\n<th>最终的 <strong>URL</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>./css/app.css</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9jb3Vyc2UvY3NzL2FwcC5jc3M=\">http://www.atguigu.com/course/css/app.css</span></td>\n</tr>\n<tr>\n<td>js/app.js</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9jb3Vyc2UvanMvYXBwLmpz\">http://www.atguigu.com/course/js/app.js</span></td>\n</tr>\n<tr>\n<td>../img/logo.png</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9pbWcvbG9nby5wbmc=\">http://www.atguigu.com/img/logo.png</span></td>\n</tr>\n<tr>\n<td>../../mp4/show.mp4</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hdGd1aWd1LmNvbS9tcDQvc2hvdy5tcDQ=\">http://www.atguigu.com/mp4/show.mp4</span></td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"网页中使用-url-的场景小结\"><a class=\"anchor\" href=\"#网页中使用-url-的场景小结\">#</a> 网页中使用 <strong>URL</strong> 的场景小结</h4>\n<p>包括但不限于如下场景：</p>\n<ul>\n<li>a 标签 href</li>\n<li>link 标签 href</li>\n<li>script 标签 src</li>\n<li>img 标签 src</li>\n<li>video audio 标签 src</li>\n<li>form 中的 action</li>\n<li>AJAX 请求中的 URL</li>\n</ul>\n<h3 id=\"设置资源类型mime类型\"><a class=\"anchor\" href=\"#设置资源类型mime类型\">#</a> 设置资源类型（<strong>mime</strong> 类型）</h3>\n<p><code>媒体类型</code> （通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、文件或字节流的性质和格式。</p>\n<pre><code>mime 类型结构： [type]/[subType]\n[主类型]/[辅类型]\n例如： text/html text/css image/jpeg image/png application/json\n</code></pre>\n<p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p>\n<p>下面是常见文件对应的 mime 类型</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">html</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/html'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token literal-property property\">css</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/css'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token literal-property property\">js</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/javascript'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token literal-property property\">png</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/png'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token literal-property property\">jpg</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/jpeg'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token literal-property property\">gif</span><span class=\"token operator\">:</span> <span class=\"token string\">'image/gif'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token literal-property property\">mp4</span><span class=\"token operator\">:</span> <span class=\"token string\">'video/mp4'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token literal-property property\">mp3</span><span class=\"token operator\">:</span> <span class=\"token string\">'audio/mpeg'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token literal-property property\">json</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr></table></figure><blockquote>\n<p>对于未知的资源类型，可以选择  <code>application/octet-stream</code>  类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的  <code>下载</code>  效果</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取请求的方法已经路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 判断请求方式以及请求路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> url <span class=\"token operator\">==</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 需要响应文件中的内容</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> url <span class=\"token operator\">==</span> <span class=\"token string\">\"/css/app.css\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 需要响应文件中的内容</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/public/css/app.css\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method <span class=\"token operator\">==</span> <span class=\"token string\">\"GET\"</span> <span class=\"token operator\">&amp;&amp;</span> url <span class=\"token operator\">==</span> <span class=\"token string\">\"/js/app.js\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 需要响应文件中的内容</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/public/js/app.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">//404 响应</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"80端口正在启动中....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>很明显上面的代码，当只要有一个请求路径就需要进行判断，显然这种方式不够完美，那么我们需要封装</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取请求的方法已经路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> url<span class=\"token punctuation\">,</span> method <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> request<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 文件夹路径  根路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> rootDir <span class=\"token operator\">=</span> dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/public\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 拼接文件路径</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> filePath <span class=\"token operator\">=</span> rootDir <span class=\"token operator\">+</span> url<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 读取文件内容</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 如果出现错误，响应 404 状态码</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        response<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 响应文件内容</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"80端口正在启动中....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"get-和-post-请求场景小结\"><a class=\"anchor\" href=\"#get-和-post-请求场景小结\">#</a> GET <strong>和</strong> POST <strong>请求场景小结</strong></h3>\n<p>GET 请求的情况：</p>\n<ul>\n<li>在地址栏直接输入 url 访问</li>\n<li>点击 a 链接</li>\n<li>link 标签引入 css</li>\n<li>script 标签引入 js</li>\n<li>img 标签引入图片</li>\n<li>form 标签中的 method 为 get （不区分大小写）</li>\n<li>ajax 中的 get 请求</li>\n</ul>\n<p>POST 请求的情况：</p>\n<ul>\n<li>\n<p>form 标签中的 method 为 post（不区分大小写）</p>\n</li>\n<li>\n<p>AJAX 的 post 请求</p>\n</li>\n</ul>\n<h2 id=\"get和post请求的区别\"><a class=\"anchor\" href=\"#get和post请求的区别\">#</a> <strong>GET</strong> 和<strong> POST</strong> 请求的区别</h2>\n<p><code>GET</code>  和  <code>POST</code>  是 HTTP 协议请求的两种方式。</p>\n<ul>\n<li><code>GET</code>  主要用来获取数据， <code>POST</code>  主要用来提交数据</li>\n<li><code>GET</code>  带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求， <code>POST</code>  带参数请求是将参数放到请求体中</li>\n<li><code>POST</code>  请求相对  <code>GET</code>  安全一些，因为在浏览器中参数会暴露在地址栏</li>\n<li><code>GET</code>  请求大小有限制，一般为 2K，而 POST 请求则没有</li>\n</ul>\n<h1 id=\"nodejs-模块化\"><a class=\"anchor\" href=\"#nodejs-模块化\">#</a> Node.js 模块化</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<h3 id=\"什么是模块化与模块\"><a class=\"anchor\" href=\"#什么是模块化与模块\">#</a> 什么是模块化与模块？</h3>\n<blockquote>\n<p>将一个复杂的程序文件依据一定规则（规范）拆分成多个文件的过程称之为  <code>模块化</code></p>\n</blockquote>\n<p>其中拆分出的 &lt;span style=&quot;color:red&quot;&gt; 每个文件就是一个模块 &lt;/span&gt;，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p>\n<h3 id=\"什么是模块化项目\"><a class=\"anchor\" href=\"#什么是模块化项目\">#</a> 什么是模块化项目？</h3>\n<blockquote>\n<p>编码时是按照模块一个一个编码的， 整个项目就是一个模块化的项目</p>\n</blockquote>\n<h3 id=\"模块化好处\"><a class=\"anchor\" href=\"#模块化好处\">#</a> 模块化好处</h3>\n<p>下面是模块化的一些好处：</p>\n<ol>\n<li>\n<p>防止命名冲突</p>\n</li>\n<li>\n<p>高复用性</p>\n</li>\n<li>\n<p>高维护性</p>\n</li>\n</ol>\n<h2 id=\"模块暴露数据\"><a class=\"anchor\" href=\"#模块暴露数据\">#</a> 模块暴露数据</h2>\n<h3 id=\"模块初体验\"><a class=\"anchor\" href=\"#模块初体验\">#</a> 模块初体验</h3>\n<p>可以通过下面的操作步骤，快速体验模块化</p>\n<ol>\n<li>\n<p>创建 me.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">tiemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"贴膜....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 暴露数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> tiemo<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建 index.js</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> tiemo <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./me.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tiemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> 贴膜....</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"暴露数据\"><a class=\"anchor\" href=\"#暴露数据\">#</a> 暴露数据</h3>\n<p>模块暴露数据的方式有两种：</p>\n<ol>\n<li>\n<p><code>module.exports</code>  = value</p>\n</li>\n<li>\n<p><code>exports.name</code>  = value</p>\n</li>\n</ol>\n<blockquote>\n<p>使用时有几点注意：</p>\n<ul>\n<li><code>module.exports</code>  可以暴露 &lt;span style=&quot;color:red&quot;&gt; 任意 &lt;/span&gt; 数据</li>\n<li>不能使用  <code>exports = value</code>  的形式暴露数据，模块内部 module 与 exports 的隐式关系<br />\n <code>exports = module.exports = &#123;&#125;</code>  ，require 返回的是目标模块中  <code>module.exports</code>  的值</li>\n</ul>\n</blockquote>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/a40a41f72dee15ee4d3e3cabd91ec9c2df2fa090.jpg\" alt=\"\" /></p>\n<h2 id=\"导入引入模块\"><a class=\"anchor\" href=\"#导入引入模块\">#</a> 导入（引入）模块</h2>\n<p>在模块中使用 require 传入文件路径即可引入文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./me.js\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>require 使用的一些注意事项：</p>\n<ol>\n<li>\n<p>对于自己创建的模块，导入时路径建议写 &lt;span style=&quot;color:red&quot;&gt; 相对路径 &lt;/span&gt;，且不能省略  <code>./</code>  和  <code>../</code></p>\n</li>\n<li>\n<p><code>js</code>  和  <code>json</code>  文件导入时可以不用写后缀，c/c++ 编写的  <code>node</code>  扩展文件也可以不写后缀，但是一般用不到，直接使用 <strong>node</strong> 的  <code>require()</code>  方法即可将 JSON 文件转换成 JS 对象</p>\n</li>\n<li>\n<p>如果导入其他类型的文件，会以  <code>js</code>  文件进行处理</p>\n</li>\n<li>\n<p>如果导入的路径是个文件夹，则会 &lt;span style=&quot;color:red&quot;&gt; 首先 &lt;/span&gt; 检测该文件夹下  <code>package.json</code>  文件中  <code>main</code>  属性对应的文件，</p>\n<p>如果存在则导入，反之如果文件不存在会报错。</p>\n<p>如果 main 属性不存在，或者 package.json 不存在，则会尝试导入文件夹下的  <code>index.js</code>  和<br />\n <code>index.json</code> ，</p>\n<p>如果还是没找到，就会报错</p>\n</li>\n<li>\n<p>导入 node.js 内置模块时，直接 require 模块的名字即可，无需加  <code>./</code>  和  <code>../</code></p>\n</li>\n</ol>\n<h2 id=\"导入模块的基本流程\"><a class=\"anchor\" href=\"#导入模块的基本流程\">#</a> 导入模块的基本流程</h2>\n<p>这里我们介绍一下  <code>require</code>  导入 &lt;span style=&quot;color:red&quot;&gt; 自定义模块 &lt;/span&gt; 的基本流程</p>\n<ol>\n<li>将相对路径转为绝对路径，定位目标文件</li>\n<li>缓存检测</li>\n<li>读取目标文件代码</li>\n<li>包裹为一个函数并执行（自执行函数）。通过  <code>arguments.callee.toString()</code>  查看自执行函数</li>\n<li>缓存模块的值</li>\n<li>返回  <code>module.exports</code>  的值</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 伪代码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">file</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">//1. 将相对路径转为绝对路径，定位目标文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">let</span> absolutePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//2. 缓存检测</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>caches<span class=\"token punctuation\">[</span>absolutePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> caches<span class=\"token punctuation\">[</span>absolutePath<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//3. 读取文件的代码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">let</span> code <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>absolutePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">//4. 包裹为一个函数 然后执行</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> module <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">let</span> exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">exports<span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> __filename<span class=\"token punctuation\">,</span> __dirname</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">const</span> test <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"尚硅谷\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 输出</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">.</span>callee<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>exports<span class=\"token punctuation\">,</span> require<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> __filename<span class=\"token punctuation\">,</span> __dirname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token comment\">//5. 缓存结果</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  caches<span class=\"token punctuation\">[</span>absolutePath<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">//6. 返回 module.exports 的值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token keyword\">return</span> module<span class=\"token punctuation\">.</span>exports<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5b1f2533d8071dd34751737864e20362539418d1.jpg\" alt=\"\" /></p>\n<h2 id=\"commonjs-规范\"><a class=\"anchor\" href=\"#commonjs-规范\">#</a> CommonJS 规范</h2>\n<p><code>module.exports</code>  、 <code>exports</code>  以及  <code>require</code>  这些都是  <code>CommonJS</code>  模块化规范中的内容。</p>\n<p>而 Node.js 是实现了 CommonJS 模块化规范，二者关系有点像 JavaScript 与 ECMAScript</p>\n<h1 id=\"包管理工具\"><a class=\"anchor\" href=\"#包管理工具\">#</a> 包管理工具</h1>\n<h2 id=\"概念介绍\"><a class=\"anchor\" href=\"#概念介绍\">#</a> 概念介绍</h2>\n<h3 id=\"包是什么\"><a class=\"anchor\" href=\"#包是什么\">#</a> 包是什么</h3>\n<blockquote>\n<p>『包』英文单词是  <code>package</code>  ，代表了一组特定功能的源码集合</p>\n</blockquote>\n<h3 id=\"包管理工具-2\"><a class=\"anchor\" href=\"#包管理工具-2\">#</a> 包管理工具</h3>\n<p>管理『包』的应用软件，可以对「包」进行  <code>下载安装</code>  ，  <code>更新</code>  ，  <code>删除</code> ，  <code>上传</code> 等操作</p>\n<p>借助包管理工具，可以快速开发项目，提升开发效率</p>\n<p>包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 &lt;span style=&quot;color:red&quot;&gt; 掌握好包管理工具非常重要 &lt;/span&gt;</p>\n<h3 id=\"常用的包管理工具\"><a class=\"anchor\" href=\"#常用的包管理工具\">#</a> 常用的包管理工具</h3>\n<p>下面列举了前端常用的包管理工具</p>\n<ul>\n<li><code>npm</code></li>\n<li>yarn</li>\n<li>cnpm</li>\n</ul>\n<h2 id=\"npm\"><a class=\"anchor\" href=\"#npm\">#</a> npm</h2>\n<blockquote>\n<p>npm 全称  <code>Node Package Manager</code>  ，翻译为中文意思是『Node 的包管理工具』</p>\n</blockquote>\n<p>npm 是 node.js 官方内置的包管理工具，是 &lt;span style=&quot;color:red&quot;&gt; 必须要掌握住的工具 &lt;/span&gt;</p>\n<h3 id=\"npm-的安装\"><a class=\"anchor\" href=\"#npm-的安装\">#</a> npm 的安装</h3>\n<p>node.js 在安装时会  <code>自动安装 npm</code>  ，所以如果你已经安装了 node.js，可以直接使用 npm</p>\n<p>可以通过  <code>npm -v</code>  查看版本号测试，如果显示版本号说明安装成功，反之安装失败</p>\n<h3 id=\"npm-基本使用\"><a class=\"anchor\" href=\"#npm-基本使用\">#</a> npm 基本使用</h3>\n<h4 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h4>\n<p>创建一个空目录，然后以此目录作为工作目录 &lt;span style=&quot;color:red&quot;&gt; 启动命令行工具 &lt;/span&gt;，执行  <code>npm init</code></p>\n<p><code>npm init</code>  命令的作用是将文件夹初始化为一个『包』，  <code>交互式创建 package.json 文件</code></p>\n<p><code>package.json</code>  是包的配置文件，每个包都必须要有  <code>package.json</code></p>\n<p><code>package.json</code>  内容示例：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"01_npm\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>属性翻译</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1-npm\"</span><span class=\"token punctuation\">,</span> \t\t#包的名字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span> \t#包的版本</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> \t\t#包的描述</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span> \t#包的入口文件</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> \t\t    #脚本配置</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> \t\t\t#作者</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span> \t\t#开源证书</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>初始化的过程中还有一些注意事项：</p>\n<ol>\n<li>package name ( <code>包名</code> ) 不能使用中文、大写，默认值是 <code>文件夹的名称</code> ，所以文件夹名称也不<br />\n能使用中文和大写</li>\n<li>version ( <code>版本号</code> ) 要求  <code>x.x.x</code>  的形式定义， <code>x</code>  必须是数字，默认值是  <code>1.0.0</code></li>\n<li>ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTEvMDUvaG93X3RvX2Nob29zZV9mcmVlX3NvZnR3YXJlX2xpY2Vuc2VzLmh0bWw=\">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</span></li>\n<li><code>package.json</code>  可以手动创建与修改</li>\n<li>使用  <code>npm init -y</code>  或者  <code>npm init --yes</code>  极速创建  <code>package.json</code></li>\n</ol>\n</blockquote>\n<h4 id=\"搜索包\"><a class=\"anchor\" href=\"#搜索包\">#</a> 搜索包</h4>\n<p>搜索包的方式有两种</p>\n<ol>\n<li>\n<p>命令行 『npm s/search 关键字』</p>\n</li>\n<li>\n<p><code>网站搜索</code>  网址是  <code>https://www.npmjs.com/</code></p>\n</li>\n</ol>\n<blockquote>\n<p>经常有同学问，『我怎样才能精准找到我需要的包？』<br />\n这个事儿需要大家在实践中不断的积累，通过看文章，看项目去学习去积累</p>\n</blockquote>\n<h4 id=\"下载安装包\"><a class=\"anchor\" href=\"#下载安装包\">#</a> 下载安装包</h4>\n<p>我们可以通过  <code>npm install</code>  和  <code>npm i</code>  命令安装包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>包名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token operator\">&lt;</span>包名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 示例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token function\">uniq</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token function\">uniq</span></pre></td></tr></table></figure><p>运行之后文件夹下会增加两个资源</p>\n<ul>\n<li><code>node_modules 文件夹</code>  存放下载的包</li>\n<li><code>package-lock.json 包的锁文件</code> ，用来锁定包的版本</li>\n</ul>\n<blockquote>\n<p>安装 uniq 之后， uniq 就是当前这个包的一个  <code>依赖包</code>  ，有时会简称为  <code>依赖</code></p>\n<p>比如我们创建一个包名字为 A，A 中安装了包名字是 B，我们就说 &lt;span style=&quot;color:red&quot;&gt;B 是 A 的一个依赖包 &lt;/span&gt;，也会说 &lt;span style=&quot;color:red&quot;&gt;A 依赖 B&lt;/span&gt;</p>\n</blockquote>\n<h4 id=\"require-导入-npm-包基本流程\"><a class=\"anchor\" href=\"#require-导入-npm-包基本流程\">#</a> require 导入 npm 包基本流程</h4>\n<ol>\n<li>在当前文件夹下 node_modules 中寻找同名的文件夹</li>\n<li>在上级目录中下的 node_modules 中寻找同名的文件夹，直至找到磁盘根目录</li>\n</ol>\n<h3 id=\"生产环境与开发环境\"><a class=\"anchor\" href=\"#生产环境与开发环境\">#</a> 生产环境与开发环境</h3>\n<p><code>开发环境</code>  是程序员 &lt;span style=&quot;color:red&quot;&gt; 专门用来写代码 &lt;/span&gt; 的环境，一般是指程序员的电脑，开发环境的项目一般 &lt;span style=&quot;color:red&quot;&gt; 只能程序员自己访问 &lt;/span&gt;</p>\n<p><code>生产环境</code>  是项目 &lt;span style=&quot;color:red&quot;&gt; 代码正式运行 &lt;/span&gt; 的环境，一般是指正式的服务器电脑，生产环境的项目一般 &lt;span style=&quot;color:red&quot;&gt; 每个客户都可以访问 &lt;/span&gt;</p>\n<h3 id=\"生产依赖与开发依赖\"><a class=\"anchor\" href=\"#生产依赖与开发依赖\">#</a> 生产依赖与开发依赖</h3>\n<p>我们可以在安装时设置选项来区分  <code>依赖的类型</code> ，目前分为两类：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>命令</th>\n<th>补充</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>开发依赖</td>\n<td>npm i -D less&lt;br/&gt;npm i --save-dev less</td>\n<td>-D 等效于 --save-dev&lt;br/&gt; 包信息保存在 package.json 中  <code>devDependencies</code>  属性</td>\n</tr>\n<tr>\n<td>生产依赖</td>\n<td>npm i -S uniq &lt;br/&gt;npm i --save uniq</td>\n<td>-S 等效于 --save， <code>-S 是默认选项</code>  &lt;br/&gt; 包信息保存在 package.json 中  <code>dependencies</code>  属性</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>举个例子方便大家理解，比如说做蛋炒饭需要 <code>大米</code> ， <code>油</code> ， <code>葱</code> ， <code>鸡蛋</code> ， <code>锅</code> ， <code>煤气</code> ， <code>铲子</code> 等</p>\n<p>其中 <code>锅</code> ，  <code>煤气</code> ，  <code>铲子</code> 属于开发依赖，只在制作阶段使用</p>\n<p>而  <code>大米</code> ，  <code>油</code> ，  <code>葱</code> ，  <code>鸡蛋</code> 属于生产依赖，在制作与最终食用都会用到</p>\n<p>所以  <code>开发依赖</code>  是只在开发阶段使用的依赖包，而  <code>生产依赖</code>  是开发阶段和最终上线运行阶段都用到的依赖包</p>\n</blockquote>\n<h3 id=\"全局安装\"><a class=\"anchor\" href=\"#全局安装\">#</a> 全局安装</h3>\n<p>我们可以执行安装选项 -g 进行全局安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> nodemon</pre></td></tr></table></figure><p>全局安装完成之后就可以在命令行的任何位置运行  <code>nodemon</code>  命令</p>\n<p>该命令的作用是  <code>自动重启 node 应用程序</code></p>\n<blockquote>\n<p>说明：</p>\n<ul>\n<li>全局安装的命令不受工作目录位置影响</li>\n<li>可以通过  <code>npm root -g</code>  可以查看全局安装包的位置</li>\n<li>&lt;span style=&quot;color:red&quot;&gt; 不是所有的包都适合全局安装 &lt;/span&gt;，只有全局类的工具才适合，可以通过 &lt; span style=&quot;color:red&quot;&gt; 查看包的官方文档来确定安装方式 &lt;/span&gt;，这里先不必太纠结</li>\n</ul>\n</blockquote>\n<h4 id=\"修改-windows-执行策略\"><a class=\"anchor\" href=\"#修改-windows-执行策略\">#</a> 修改 windows 执行策略</h4>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/753392684c58b41b6df39e59a23c80509136fe84.jpg\" alt=\"\" /></p>\n<p>windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略</p>\n<ol>\n<li>以 <code>管理员身份</code> 打开  <code>powershell</code>  命令行</li>\n</ol>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/88986346dd7ae5c2ef0e784eec6d2b4fe24c53c7.jpg\" alt=\"\" /></p>\n<ol start=\"2\">\n<li>键入命令  <code>set-ExecutionPolicy remoteSigned</code></li>\n</ol>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/9feab516f2f940881eaa23cd367fe244ab7d3036.jpg\" alt=\"\" /></p>\n<ol start=\"3\">\n<li>\n<p>键入 A 然后敲回车 👌</p>\n</li>\n<li>\n<p>如果不生效，可以尝试重启 vscode</p>\n</li>\n</ol>\n<h4 id=\"环境变量-path\"><a class=\"anchor\" href=\"#环境变量-path\">#</a> 环境变量 Path</h4>\n<p>Path 是操作系统的一个环境变量，可以设置一些文件夹的路径，在当前工作目录下找不到可执行文件时，就会在环境变量 Path 的目录中挨个的查找，如果找到则执行，如果没有找到就会报错</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/7d10fa57df7a791566fb7379c9b700ea67178720.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>补充说明：</p>\n<ul>\n<li>如果希望某个程序在任何工作目录下都能正常运行，就应该将该程序的所在目录配置到环境变量 Path 中</li>\n<li>windows 下查找命令的所在位置\n<ul>\n<li><code>cmd 命令行</code>  中执行  <code>where nodemon</code></li>\n<li><code>powershell命令行</code>  执行  <code>get-command nodemon</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"安装包依赖\"><a class=\"anchor\" href=\"#安装包依赖\">#</a> 安装包依赖</h3>\n<p>在项目协作中有一个常用的命令就是  <code>npm i</code> ，通过该命令可以依据  <code>package.json</code>  和  <code>package-lock.json</code>  的依赖声明安装项目依赖</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><blockquote>\n<p>node_modules 文件夹大多数情况都不会存入版本库</p>\n</blockquote>\n<h3 id=\"安装指定版本的包\"><a class=\"anchor\" href=\"#安装指定版本的包\">#</a> 安装指定版本的包</h3>\n<p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token operator\">&lt;</span>包名@版本号<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">## 示例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> i jquery@1.11.2</pre></td></tr></table></figure><h3 id=\"删除依赖\"><a class=\"anchor\" href=\"#删除依赖\">#</a> 删除依赖</h3>\n<p>项目中可能需要删除某些不需要的包，可以使用下面的命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">## 局部删除</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> remove <span class=\"token function\">uniq</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> r <span class=\"token function\">uniq</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">## 全局删除</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">npm</span> remove <span class=\"token parameter variable\">-g</span> nodemon</pre></td></tr></table></figure><h3 id=\"配置命令别名\"><a class=\"anchor\" href=\"#配置命令别名\">#</a> 配置命令别名</h3>\n<p>通过配置命令别名可以更简单的执行命令</p>\n<p>配置 package.json 中的  <code>scripts</code>  属性</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node server.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>配置完成之后，可以使用别名执行命令<br />\n通过 <code>npm run 别名</code> 来执行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> run start</pre></td></tr></table></figure><p>不过  <code>start</code>  别名比较特别，使用时可以省略  <code>run</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> start</pre></td></tr></table></figure><blockquote>\n<p>补充说明：</p>\n<ul>\n<li><code>npm start</code>  是项目中常用的一个命令，一般用来启动项目</li>\n<li><code>npm run</code>  有自动向上级目录查找的特性，跟  <code>require</code>  函数也一样</li>\n<li>对于陌生的项目，我们可以通过查看  <code>scripts</code>  属性来参考项目的一些操作</li>\n</ul>\n</blockquote>\n<h2 id=\"cnpm\"><a class=\"anchor\" href=\"#cnpm\">#</a> cnpm</h2>\n<h3 id=\"介绍-2\"><a class=\"anchor\" href=\"#介绍-2\">#</a> 介绍</h3>\n<p>cnpm 是一个淘宝构建的 <code>npmjs.com</code>  的完整镜像，也称为『淘宝镜像』，网址 https://npmmirror.com/<br />\ncnpm 服务部署在国内 &lt;span style=&quot;color:red&quot;&gt; 阿里云服务器上 &lt;/span&gt;，可以提高包的下载速度</p>\n<p>官方也提供了一个全局工具包  <code>cnpm</code>  ，操作命令与 npm 大体相同</p>\n<h3 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h3>\n<p>我们可以通过 npm 来安装 cnpm 工具</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> cnpm <span class=\"token parameter variable\">--registry</span><span class=\"token operator\">=</span>https://registry.npmmirror.com</pre></td></tr></table></figure><h3 id=\"操作命令\"><a class=\"anchor\" href=\"#操作命令\">#</a> 操作命令</h3>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化</td>\n<td>cnpm init / cnpm init</td>\n</tr>\n<tr>\n<td>安装包</td>\n<td>cnpm i uniq&lt;br/&gt;cnpm i -S uniq&lt;br/&gt;cnpm i -D uniq&lt;br/&gt;cnpm i -g nodemon</td>\n</tr>\n<tr>\n<td>安装项目依赖</td>\n<td>cnpm i</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>cnpm r uniq</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"npm-配置淘宝镜像\"><a class=\"anchor\" href=\"#npm-配置淘宝镜像\">#</a> npm 配置淘宝镜像</h3>\n<p>用 npm 也可以使用淘宝镜像，配置的方式有两种</p>\n<ul>\n<li>直接配置</li>\n<li>工具配置</li>\n</ul>\n<h4 id=\"直接配置\"><a class=\"anchor\" href=\"#直接配置\">#</a> 直接配置</h4>\n<p>执行如下命令即可完成配置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npmmirror.com/</pre></td></tr></table></figure><h4 id=\"工具配置\"><a class=\"anchor\" href=\"#工具配置\">#</a> 工具配置</h4>\n<p>使用  <code>nrm</code>  配置 npm 的镜像地址  <code>npm registry manager</code></p>\n<ol>\n<li>\n<p>安装 nrm</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> nrm</pre></td></tr></table></figure></li>\n<li>\n<p>修改镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nrm use taobao</pre></td></tr></table></figure></li>\n<li>\n<p>检查是否配置成功（选做）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config list</pre></td></tr></table></figure><p>检查 registry 地址是否为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWdpc3RyeS5ucG1taXJyb3IuY29tLw==\">https://registry.npmmirror.com/</span> , 如果  <code>是</code>  则表明成功</p>\n</li>\n</ol>\n<blockquote>\n<p>补充说明：</p>\n<ol>\n<li>&lt;span style=&quot;color:red&quot;&gt; 建议使用第二种方式 &lt;/span &gt; 进行镜像配置，因为后续修改起来会比较方便</li>\n<li>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 &lt;span style=&quot;color:red&quot;&gt;npm 的使用率还是高于 cnpm&lt;/span&gt;</li>\n</ol>\n</blockquote>\n<h2 id=\"yarn\"><a class=\"anchor\" href=\"#yarn\">#</a> yarn</h2>\n<p><img data-src=\"./assets/bcc5f325c00fde7886ea75bad1d66b8c2a9add97.jpg\" alt=\"06_包管理工具\" /></p>\n<h3 id=\"yarn-介绍\"><a class=\"anchor\" href=\"#yarn-介绍\">#</a> yarn 介绍</h3>\n<blockquote>\n<p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly95YXJucGtnLmNvbS8=\">https://yarnpkg.com/</span></p>\n</blockquote>\n<h3 id=\"yarn-特点\"><a class=\"anchor\" href=\"#yarn-特点\">#</a> yarn 特点</h3>\n<p>yarn 官方宣称的一些特点</p>\n<ul>\n<li>速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快</li>\n<li>超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</li>\n<li>超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作</li>\n</ul>\n<h3 id=\"yarn-安装\"><a class=\"anchor\" href=\"#yarn-安装\">#</a> yarn 安装</h3>\n<p>我们可以使用 npm 安装 yarn</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> <span class=\"token function\">yarn</span></pre></td></tr></table></figure><h3 id=\"yarn-常用命令\"><a class=\"anchor\" href=\"#yarn-常用命令\">#</a> yarn 常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化</td>\n<td>yarn init / yarn init -y</td>\n</tr>\n<tr>\n<td>安装包</td>\n<td>yarn add uniq 生产依赖 &lt;br/&gt;yarn add less --dev 开发依赖 &lt; br/&gt;yarn global add nodemon 全局安装</td>\n</tr>\n<tr>\n<td>删除包</td>\n<td>yarn remove uniq 删除项目依赖包 &lt;br&gt;yarn global remove nodemon 全局删除包</td>\n</tr>\n<tr>\n<td>安装项目依赖</td>\n<td>yarn</td>\n</tr>\n<tr>\n<td>运行命令别名</td>\n<td>yarn &lt;别名&gt; # 不需要添加  <code>run</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>思考题：</p>\n<p>这里有个小问题就是 &lt;span style=&quot;color:red&quot;&gt; 全局安装的包不可用 &lt;/span&gt;，yarn 全局安装包的位置可以通过  <code>yarn global bin</code>  来查看，</p>\n<p>那你有没有办法使 yarn 全局安装的包能够正常运行？</p>\n<ul>\n<li>配置 path 环境</li>\n</ul>\n</blockquote>\n<h3 id=\"yarn-配置淘宝镜像\"><a class=\"anchor\" href=\"#yarn-配置淘宝镜像\">#</a> yarn 配置淘宝镜像</h3>\n<p>可以通过如下命令配置淘宝镜像</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">yarn</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npmmirror.com/</pre></td></tr></table></figure><p>可以通过  <code>yarn config list</code>  查看 yarn 的配置项</p>\n<h3 id=\"npm-和-yarn-选择\"><a class=\"anchor\" href=\"#npm-和-yarn-选择\">#</a> npm 和 yarn 选择</h3>\n<p>大家可以根据不同的场景进行选择</p>\n<ol>\n<li>\n<p>个人项目</p>\n<p>如果是个人项目，&lt;span style=&quot;color:red&quot;&gt; 哪个工具都可以 &lt;/span&gt;，可以根据自己的喜好来选择</p>\n</li>\n<li>\n<p>公司项目<br />\n如果是公司要根据项目代码来选择，可以 &lt;span style=&quot;color:red&quot;&gt; 通过锁文件判断 &lt;/span&gt; 项目的包管理工具</p>\n<ul>\n<li>npm 的锁文件为  <code>package-lock.json</code></li>\n<li>yarn 的锁文件为  <code>yarn.lock</code></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>包管理工具 &lt;span style=&quot;color:red&quot;&gt; 不要混着用，切记，切记，切记 &lt;/span&gt;</p>\n</blockquote>\n<h2 id=\"管理发布包\"><a class=\"anchor\" href=\"#管理发布包\">#</a> 管理发布包</h2>\n<h3 id=\"创建与发布\"><a class=\"anchor\" href=\"#创建与发布\">#</a> 创建与发布</h3>\n<p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p>\n<ol>\n<li>\n<p>创建文件夹，并创建文件 index.js， 在文件中声明函数，使用 module.exports 暴露</p>\n</li>\n<li>\n<p>npm 初始化工具包，package.json 填写包的信息 (包的名字是唯一的)</p>\n</li>\n<li>\n<p>注册账号 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3NpZ251cA==\">https://www.npmjs.com/signup</span></p>\n</li>\n<li>\n<p>激活账号 （ &lt;span style=&quot;color:red&quot;&gt; 一定要激活账号 &lt;/span&gt; ）</p>\n</li>\n<li>\n<p>修改为官方的官方镜像 (命令行中运行  <code>nrm use npm</code>  )</p>\n</li>\n<li>\n<p>命令行下  <code>npm login</code>  填写相关用户信息</p>\n</li>\n<li>\n<p>命令行下  <code>npm publish</code>  提交包 👌</p>\n</li>\n</ol>\n<h3 id=\"更新包\"><a class=\"anchor\" href=\"#更新包\">#</a> 更新包</h3>\n<p>后续可以对自己发布的包进行更新，操作步骤如下</p>\n<ol>\n<li>\n<p>更新包中的代码</p>\n</li>\n<li>\n<p>测试代码是否可用</p>\n</li>\n<li>\n<p>修改  <code>package.json</code>  中的版本号</p>\n</li>\n<li>\n<p>发布更新</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> publish</pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"删除包\"><a class=\"anchor\" href=\"#删除包\">#</a> 删除包</h3>\n<p>执行如下命令删除包</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> unpublish <span class=\"token parameter variable\">--force</span></pre></td></tr></table></figure><blockquote>\n<p>删除包需要满足一定的条件， <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9wb2xpY2llcy91bnB1Ymxpc2g=\">https://docs.npmjs.com/policies/unpublish</span></p>\n<ul>\n<li>你是包的作者</li>\n<li>发布小于 24 小时</li>\n<li>大于 24 小时后，没有其他包依赖，并且每周小于 300 下载量，并且只有一个维护者</li>\n</ul>\n</blockquote>\n<h2 id=\"扩展内容\"><a class=\"anchor\" href=\"#扩展内容\">#</a> 扩展内容</h2>\n<p>在很多语言中都有包管理工具，比如：</p>\n<table>\n<thead>\n<tr>\n<th>语言</th>\n<th>包管理工具</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PHP</td>\n<td>composer</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>pip</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>maven</td>\n</tr>\n<tr>\n<td>Go</td>\n<td>go mod</td>\n</tr>\n<tr>\n<td>JavaScript</td>\n<td>npm/yarn/cnpm/other</td>\n</tr>\n<tr>\n<td>Ruby</td>\n<td>rubyGems</td>\n</tr>\n</tbody>\n</table>\n<p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是『 <code>软件包</code> 』</p>\n<table>\n<thead>\n<tr>\n<th>操作系统</th>\n<th>包管理工具</th>\n<th>网址</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Centos</td>\n<td>yum</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy5kZWJpYW4ub3JnL3N0YWJsZS8=\">https://packages.debian.org/stable/</span></td>\n</tr>\n<tr>\n<td>Ubuntu</td>\n<td>apt</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWNrYWdlcy51YnVudHUuY29tLw==\">https://packages.ubuntu.com/</span></td>\n</tr>\n<tr>\n<td>MacOS</td>\n<td>homebrew</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9icmV3LnNoLw==\">https://brew.sh/</span></td>\n</tr>\n<tr>\n<td>Windows</td>\n<td>chocolatey</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaG9jb2xhdGV5Lm9yZy8=\">https://chocolatey.org/</span></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"nvm\"><a class=\"anchor\" href=\"#nvm\">#</a> nvm</h1>\n<h2 id=\"介绍-3\"><a class=\"anchor\" href=\"#介绍-3\">#</a> 介绍</h2>\n<p>nvm 全称  <code>Node Version Manager</code>  顾名思义它是用来管理 node 版本的工具，方便切换不同版本的 Node.js</p>\n<h2 id=\"使用-2\"><a class=\"anchor\" href=\"#使用-2\">#</a> 使用</h2>\n<p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p>\n<h3 id=\"下载安装\"><a class=\"anchor\" href=\"#下载安装\">#</a> 下载安装</h3>\n<p>首先先下载 nvm，下载地址 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz\">https://github.com/coreybutler/nvm-windows/releases</span> ，</p>\n<p>选择  <code>nvm-setup.exe</code>  下载即可（网络异常的小朋友可以在资料文件夹中获取）</p>\n<h3 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h3>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>nvm list available</td>\n<td>显示所有可以下载的 Node.js 版本</td>\n</tr>\n<tr>\n<td>nvm list</td>\n<td>显示已安装的版本</td>\n</tr>\n<tr>\n<td>nvm install 18.12.1</td>\n<td>安装 18.12.1 版本的 Node.js</td>\n</tr>\n<tr>\n<td>nvm install latest</td>\n<td>安装最新版的 Node.js</td>\n</tr>\n<tr>\n<td>nvm uninstall 18.12.1</td>\n<td>删除某个版本的 Node.js</td>\n</tr>\n<tr>\n<td>nvm use 18.12.1</td>\n<td>切换 18.12.1 的 Node.js</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"接口是什么\"><a class=\"anchor\" href=\"#接口是什么\">#</a> 接口是什么</h3>\n<blockquote>\n<p>接口是 &lt;span style=&quot;color:red&quot;&gt; 前后端通信的桥梁 &lt;/span&gt;</p>\n</blockquote>\n<p>简单理解：一个接口就是 &lt;span style=&quot;color:red&quot;&gt; 服务中的一个路由规则 &lt;/span&gt; ，根据请求响应结果</p>\n<p>接口的英文单词是 API (Application Program Interface)，所以有时也称之为  <code>API 接口</code></p>\n<p>这里的接口指的是『数据接口』， &lt;span style=&quot;color:red&quot;&gt; 与编程语言（Java，Go 等）中的接口语法不同 &lt;/span&gt;</p>\n<h3 id=\"接口的作用\"><a class=\"anchor\" href=\"#接口的作用\">#</a> 接口的作用</h3>\n<blockquote>\n<p>实现 &lt;span style=&quot;color:red&quot;&gt; 前后端通信 &lt;/span&gt;</p>\n</blockquote>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/b6836e5dc9b1f33ee5f030de2fd1780db7f2447c.png\" alt=\"\" /></p>\n<h3 id=\"接口的开发与调用\"><a class=\"anchor\" href=\"#接口的开发与调用\">#</a> 接口的开发与调用</h3>\n<p>大多数接口都是由 &lt;span style=&quot;color:red&quot;&gt; 后端工程师 &lt;/span&gt; 开发的， &lt;span style=&quot;color:red&quot;&gt; 开发语言不限 &lt;/span&gt;</p>\n<p>一般情况下接口都是由 &lt;span style=&quot;color:red&quot;&gt; 前端工程师 &lt;/span&gt; 调用的，但有时 &lt;span style=&quot;color:red&quot;&gt; 后端工程师也会调用接口 &lt;/span&gt; ，比如短信接口，支付接口<br />\n等</p>\n<h3 id=\"接口的组成\"><a class=\"anchor\" href=\"#接口的组成\">#</a> 接口的组成</h3>\n<p>一个接口一般由如下几个部分组成</p>\n<ul>\n<li>\n<p>请求方法</p>\n</li>\n<li>\n<p>接口地址（URL）</p>\n</li>\n<li>\n<p>请求参数</p>\n</li>\n<li>\n<p>响应结果</p>\n</li>\n</ul>\n<p>一个接口示例 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZS1hcGkuY29tL2RvYy8zMjU=\">https://www.free-api.com/doc/325</span></p>\n<p>体验一下： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuYXNpbHUuY29tL2lkY2FyZC8/aWQ9MzcxNTIyMTk5MTExMjk5NjY4\">https://api.asilu.com/idcard/?id=371522199111299668</span></p>\n<h2 id=\"restful-api\"><a class=\"anchor\" href=\"#restful-api\">#</a> RESTful API</h2>\n<p>RESTful API 是一种特殊风格的接口，主要特点有如下几个：</p>\n<ul>\n<li>URL 中的路径表示 &lt;span style=&quot;color:red&quot;&gt; 资源 &lt;/span&gt;，路径中不能有  <code>动词</code> ，例如 <code>create</code>  ,  <code>delete</code>  ,  <code>update</code>  等这些都不能有</li>\n<li>操作资源要与  <code>HTTP 请求方法</code>  对应</li>\n<li>操作结果要与  <code>HTTP 响应状态码</code>  对应</li>\n</ul>\n<p>规则示例：</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>请求类型</th>\n<th>URL</th>\n<th>返回</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>新增歌曲</td>\n<td>POST</td>\n<td>/song</td>\n<td>返回新生成的歌曲信息</td>\n</tr>\n<tr>\n<td>删除歌曲</td>\n<td>DELETE</td>\n<td>/song/10</td>\n<td>返回一个空文档</td>\n</tr>\n<tr>\n<td>修改歌曲</td>\n<td>PUT</td>\n<td>/song/10</td>\n<td>返回更新后的歌曲信息</td>\n</tr>\n<tr>\n<td>修改歌曲</td>\n<td>PATCH</td>\n<td>/song/10</td>\n<td>返回更新后的歌曲信息</td>\n</tr>\n<tr>\n<td>获取所有歌曲</td>\n<td>GET</td>\n<td>/song</td>\n<td>返回歌曲列表数组</td>\n</tr>\n<tr>\n<td>获取单个歌曲</td>\n<td>GET</td>\n<td>/song/10</td>\n<td>返回单个歌曲信息</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>扩展阅读： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE0LzA1L3Jlc3RmdWxfYXBpLmh0bWw=\">https://www.ruanyifeng.com/blog/2014/05/restful_api.html</span></p>\n</blockquote>\n<h2 id=\"json-server\"><a class=\"anchor\" href=\"#json-server\">#</a> json-server</h2>\n<p>json-server 本身是一个 JS 编写的工具包，可以快速搭建 RESTful API 服务</p>\n<p>官方地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3R5cGljb2RlL2pzb24tc2VydmVy\">https://github.com/typicode/json-server</span></p>\n<p>操作步骤：</p>\n<ol>\n<li>\n<p>全局安装  <code>json-server</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> json-server</pre></td></tr></table></figure></li>\n<li>\n<p>创建 JSON 文件（db.json），编写基本结构</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"song\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"干杯\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"singer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"五月天\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"当\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"singer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"动力火车\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"不能说的秘密\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"singer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"周杰伦\"</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>以 JSON 文件所在文件夹作为工作目录</code> ，执行如下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>json-server <span class=\"token parameter variable\">--watch</span> db.json</pre></td></tr></table></figure></li>\n</ol>\n<p>默认监听端口为  <code>3000</code></p>\n<h2 id=\"接口测试工具\"><a class=\"anchor\" href=\"#接口测试工具\">#</a> 接口测试工具</h2>\n<p>介绍几个接口测试工具<br />\n apipost <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpcG9zdC5jbi8=\">https://www.apipost.cn/</span> (中文)<br />\napifox <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBpZm94LmNuLw==\">https://www.apifox.cn/</span> (中文)<br />\npostman <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucG9zdG1hbi5jb20v\">https://www.postman.com/</span> (英文)</p>\n<h1 id=\"会话控制\"><a class=\"anchor\" href=\"#会话控制\">#</a> 会话控制</h1>\n<h2 id=\"介绍-4\"><a class=\"anchor\" href=\"#介绍-4\">#</a> 介绍</h2>\n<blockquote>\n<p>所谓会话控制就是 &lt;span style=&quot;color:red&quot;&gt; 对会话进行控制 &lt;/span&gt;</p>\n</blockquote>\n<p>HTTP 是一种无状态的协议，它没有办法区分多次的请求是否来自于同一个客户端，&lt;span style=&quot;color:red&quot;&gt; 无法区分用户 &lt;/span&gt;</p>\n<p>而产品中又大量存在的这样的需求，所以我们需要通过 &lt;span style=&quot;color:red&quot;&gt; 会话控制 &lt;/span&gt; 来解决该问题</p>\n<p>常见的会话控制技术有三种：</p>\n<ul>\n<li>cookie</li>\n<li>session</li>\n<li>token</li>\n</ul>\n<h2 id=\"cookie\"><a class=\"anchor\" href=\"#cookie\">#</a> cookie</h2>\n<h3 id=\"cookie-是什么\"><a class=\"anchor\" href=\"#cookie-是什么\">#</a> cookie 是什么</h3>\n<blockquote>\n<p>cookie 是 HTTP 服务器发送到用户浏览器并保存在本地的一小块数据</p>\n</blockquote>\n<p>&lt;span style=&quot;color:red&quot;&gt;cookie 是保存在浏览器端的一小块数据 &lt;/span&gt;</p>\n<p>&lt;span style=&quot;color:red&quot;&gt;cookie 是按照域名划分保存的 &lt;/span&gt;</p>\n<p>简单示例：</p>\n<table>\n<thead>\n<tr>\n<th>域名</th>\n<th>cookie</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span></td>\n<td>a=100; b=200</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaWxpYmlsaS5jb20=\">www.bilibili.com</span></td>\n<td>xid=1020abce121; hm=112411213</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2pkLmNvbQ==\">jd.com</span></td>\n<td>x=100; ocw=12414cce</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cookie-的特点\"><a class=\"anchor\" href=\"#cookie-的特点\">#</a> cookie 的特点</h3>\n<p>浏览器向服务器发送请求时，会自动将  <code>当前域名下</code>  可用的 cookie 设置在请求头中，然后传递给服务器</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/2432689d3a6913a8952b0e2f7c13b6aa468fe9ce.jpg\" alt=\"\" /></p>\n<p>这个请求头的名字也叫  <code>cookie</code>  ，所以将 &lt;span style=&quot;color:red&quot;&gt;cookie 理解为一个 HTTP 的请求头也是可以的 &lt;/span&gt;</p>\n<h3 id=\"cookie-的运行流程\"><a class=\"anchor\" href=\"#cookie-的运行流程\">#</a> cookie 的运行流程</h3>\n<p>填写账号和密码校验身份，校验通过后下发 cookie</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/f65d061b87c7b44dbddc1e9703146f9e03482aea.png\" alt=\"\" /><br />\n有了 cookie 之后，后续向服务器发送请求时，就会自动携带 cookie</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/82caab8f82650a12b76b9085e3d7b5c44a725ee8.png\" alt=\"\" /></p>\n<h3 id=\"浏览器操作-cookie\"><a class=\"anchor\" href=\"#浏览器操作-cookie\">#</a> 浏览器操作 cookie</h3>\n<p>浏览器操作 cookie 的操作，使用相对较少，大家了解即可</p>\n<ol>\n<li>禁用所有 cookie</li>\n<li>删除 cookie</li>\n<li>查看 cookie</li>\n</ol>\n<h3 id=\"cookie-的代码操作\"><a class=\"anchor\" href=\"#cookie-的代码操作\">#</a> cookie 的代码操作</h3>\n<p>express 中可以使用  <code>cookie-parser</code>  进行处理</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 安装 cookie-parser\t npm i cookie-parser</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 引入 cookieParser 包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> cookieParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//3. 设置 cookieParser 中间件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token function\">cookieParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//4-1 设置 cookie</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/set-cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 不带时效性    会在浏览器关闭的时候，销毁</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 带时效性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">cookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"email\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"23123456@qq.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 响应</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cookie的设置\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//4-2 读取 cookie</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/get-cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 读取 cookie</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>cookies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 响应体</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cookie的读取\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">//4-3 删除 cookie</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/delete-cookie\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">clearCookie</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token comment\">// 响应</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cookie 的清除\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">//4. 启动服务</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>不同浏览器中的 cookie 是相互独立的，不共享</p>\n</blockquote>\n<h2 id=\"session\"><a class=\"anchor\" href=\"#session\">#</a> session</h2>\n<h3 id=\"session-是什么\"><a class=\"anchor\" href=\"#session-是什么\">#</a> session 是什么</h3>\n<p>session 是保存在 &lt;span style=&quot;color:red&quot;&gt; 服务器端的一块儿数据 &lt;/span&gt;，保存当前访问用户的相关信息</p>\n<h3 id=\"session-的作用\"><a class=\"anchor\" href=\"#session-的作用\">#</a> session 的作用</h3>\n<p>实现会话控制，可以识别用户的身份，快速获取当前用户的相关信息</p>\n<h3 id=\"session-运行流程\"><a class=\"anchor\" href=\"#session-运行流程\">#</a> session 运行流程</h3>\n<p>填写账号和密码校验身份，校验通过后创建  <code>session 信息</code> ，然后将  <code>session_id</code>  的值通过响应头 (cookie) 返回给浏览器</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/b85539cfe706e14c1b8e3c951169ef818af4f247.png\" alt=\"\" /></p>\n<p>有了 cookie，下次发送请求时会自动携带 cookie，服务器通过  <code>cookie</code>  中的  <code>session_id</code>  的值确定用<br />\n户的身份</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/58c03619b70c2ecc76ac8684691a30fe977f59c1.png\" alt=\"\" /></p>\n<h3 id=\"session-中间件配置\"><a class=\"anchor\" href=\"#session-中间件配置\">#</a> session 中间件配置</h3>\n<p>express 中可以使用  <code>express-session</code>  对 session 进行操作</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1. 安装包 npm i express-session connect-mongo</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 引入 express-session connect-mongo</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> session <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express-session\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> MongoStore <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"connect-mongo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//3. 设置 session 的中间件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 设置 cookie 的 name，默认值是：connect.sid</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">secret</span><span class=\"token operator\">:</span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 参与加密的字符串（又称签名）  加盐</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">saveUninitialized</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否为每次请求都设置一个 cookie 用来存储 session 的 id</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token literal-property property\">resave</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 是否在每次请求时重新保存 session</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token literal-property property\">store</span><span class=\"token operator\">:</span> MongoStore<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token literal-property property\">mongoUrl</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mongodb://127.0.0.1:27017/project\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 数据库的连接配置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token literal-property property\">cookie</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token literal-property property\">httpOnly</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 开启后前端无法通过 JS 操作</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token literal-property property\">maxAge</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 这一条 是控制 sessionID 的过期时间的！！！</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 创建 session  session 的设置</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token comment\">// 设置 session</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan@qq.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\">// 获取 session</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"session的信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// 检测 session 是否存在用户数据</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">你好 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span>username<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录 注册\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">// 销毁 session</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/logout\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token comment\">// 销毁 session</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token comment\">//res.send (' 设置 session');</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  req<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"成功退出\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动, 端口 \"</span> <span class=\"token operator\">+</span> <span class=\"token number\">3000</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 监听中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"session-和-cookie-的区别\"><a class=\"anchor\" href=\"#session-和-cookie-的区别\">#</a> session 和 cookie 的区别</h2>\n<p>cookie 和 session 的区别主要有如下几点：</p>\n<ol>\n<li>存在的位置</li>\n</ol>\n<ul>\n<li>cookie：浏览器端</li>\n<li>session：服务端</li>\n</ul>\n<ol start=\"2\">\n<li>安全性</li>\n</ol>\n<ul>\n<li>cookie 是以明文的方式存放在客户端的，安全性相对较低</li>\n<li>session 存放于服务器中，所以安全性  <code>相对</code>  较好</li>\n</ul>\n<ol start=\"3\">\n<li>网络传输量</li>\n</ol>\n<ul>\n<li>cookie 设置内容过多会增大报文体积， 会影响传输效率</li>\n<li>session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</li>\n</ul>\n<ol start=\"4\">\n<li>存储限制</li>\n</ol>\n<ul>\n<li>浏览器限制单个 cookie 保存的数据不能超过  <code>4K</code>  ，且单个域名下的存储数量也有限制</li>\n<li>session 数据存储在服务器中，所以没有这些限制</li>\n</ul>\n<h2 id=\"csrf-跨域请求伪造\"><a class=\"anchor\" href=\"#csrf-跨域请求伪造\">#</a> CSRF 跨域请求伪造</h2>\n<p>把 get 请求改成 post 请求</p>\n<h2 id=\"公益-404-页面\"><a class=\"anchor\" href=\"#公益-404-页面\">#</a> 公益 404 页面</h2>\n<h2 id=\"token\"><a class=\"anchor\" href=\"#token\">#</a> token</h2>\n<h3 id=\"token-是什么\"><a class=\"anchor\" href=\"#token-是什么\">#</a> token 是什么</h3>\n<p><code>token</code>  是服务端生成并返回给 HTTP 客户端的一串加密 <code>字符串</code> ，  <code>token</code>  中保存着 <code>用户信息</code> <br />\n (openai 的 token)</p>\n<p>token 不属于 http 标准，完全由前后端协商而定，但 cookie 属于 http 标准</p>\n<h3 id=\"token-的作用\"><a class=\"anchor\" href=\"#token-的作用\">#</a> token 的作用</h3>\n<p>实现会话控制，可以识别用户的身份，主要用于移动端 APP</p>\n<h3 id=\"token-的工作流程\"><a class=\"anchor\" href=\"#token-的工作流程\">#</a> token 的工作流程</h3>\n<p>填写账号和密码校验身份，校验通过后响应 token，token 一般是在响应体中返回给客户端的</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5e03daa442b749955aac291d68ffa22c3506ba86.png\" alt=\"\" /><br />\n后续发送请求时，需要 <code>手动</code> 将 token 添加在请求报文中 (&lt;span style=&quot;color:red&quot;&gt;cookie 是自动携带的 &lt;/span&gt;)，一般是放在请求头中<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/7e7369958050ccff563122b9618f09c28dae956b.png\" alt=\"\" /></p>\n<h3 id=\"token-的特点\"><a class=\"anchor\" href=\"#token-的特点\">#</a> token 的特点</h3>\n<ul>\n<li>\n<p>服务端压力更小</p>\n<ul>\n<li>数据存储在客户端</li>\n</ul>\n</li>\n<li>\n<p>相对更安全</p>\n<ul>\n<li>数据加密</li>\n<li>可以避免 CSRF（跨站请求伪造）</li>\n</ul>\n</li>\n<li>\n<p>扩展性更强</p>\n<ul>\n<li>服务间可以共享</li>\n<li>增加服务节点更简单</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jwt\"><a class=\"anchor\" href=\"#jwt\">#</a> JWT</h3>\n<p>JWT（JSON Web Token ）是目前最流行的跨域认证解决方案，可用于基于  <code>token</code>  的身份验证</p>\n<p>JWT 使 token 的生成与校验更规范</p>\n<p>我们可以使用  <code>jsonwebtoken 包</code>  来操作 token</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 jsonwebtokan</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jsonwebtoken\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建 token</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//jwt.sign (数据，加密字符串，配置对象)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">expiresIn</span><span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 单位是 秒</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 解析 token</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//jwt.verify (token, 加密字符串，回调函数)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">,</span> <span class=\"token string\">\"atguigu\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"校验失败~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123;username: ' 张三 ', iat: (创建时间), exp:(过期时间)&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>扩展阅读： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE4LzA3L2pzb25fd2ViX3Rva2VuLXR1dG9yaWFsLmh0bWw=\">https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</span></p>\n</blockquote>\n<h2 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h2>\n<h3 id=\"本地域名\"><a class=\"anchor\" href=\"#本地域名\">#</a> 本地域名</h3>\n<p>所谓本地域名就是 &lt;span style=&quot;color:red&quot;&gt; 只能在本机使用的域名 &lt;/span&gt;，一般在开发阶段使用</p>\n<h4 id=\"操作流程\"><a class=\"anchor\" href=\"#操作流程\">#</a> 操作流程</h4>\n<p>编辑文件  <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code></p>\n<pre><code>127.0.0.1   www.baidu.com\n</code></pre>\n<p>如果修改失败，&lt;span style=&quot;color:red&quot;&gt; 可以修改该文件的权限 &lt;/span&gt;</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/bfe2b3b80fe871577ca342891eef6201f352b682.jpg\" alt=\"\" /></p>\n<h4 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h4>\n<p>在地址栏输入  <code>域名</code>  之后，浏览器会先进行 DNS（Domain Name System）查询，获取该域名对应的 IP 地<br />\n址<br />\n请求会发送到 DNS 服务器，可以  <code>根据域名返回 IP 地址</code></p>\n<p>可以通过  <code>ipconfig /all</code>  查看本机的 DNS 服务器</p>\n<p><code>hosts</code>  文件也可以设置域名与 IP 的映射关系，在发送请求前，可以通过该文件获取域名的 IP 地址</p>\n",
            "tags": [
                "nodejs"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/TS%E7%99%BE%E7%BB%83%E9%A3%9E%E5%8D%87/",
            "url": "https://eucli.top/2023/09/29/TS%E7%99%BE%E7%BB%83%E9%A3%9E%E5%8D%87/",
            "title": "TS百炼飞升",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h2 id=\"什么时候用-ts-写法\"><a class=\"anchor\" href=\"#什么时候用-ts-写法\">#</a> 什么时候用 ts 写法？</h2>\n<p>类型能推导出来的时候不用写 ts，推导不出来的时候再写</p>\n<ul>\n<li>类型断言<br />\n通过类型断言这种方式可以告诉编译器：“相信我，我知道自己在干什么”。类型断言好比其他语言里的类型转换，但是不进行特殊的数据检查和解构。它没有运行时的影响。TypeScript 会假设你已经进行了必须的检查。<br />\n断言类型有两种形式。其一是 '' 尖括号 '' 语法：</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span><span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is a string'</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span>someValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length；</pre></td></tr></table></figure><p>另一个为 as 语法：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> someValue<span class=\"token operator\">:</span><span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token string\">'this is a string'</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> strLength<span class=\"token operator\">:</span><span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>someValue <span class=\"token keyword\">as</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length；</pre></td></tr></table></figure><p>两种形式是等价的。至于使用哪个大多数情况是凭个人爱好；然而，当你在 TypeScript 里使用 JSX 时，只有 as 语法断言是被允许的。</p>\n<h1 id=\"认识-typescript\"><a class=\"anchor\" href=\"#认识-typescript\">#</a> 认识 TypeScript</h1>\n<ul>\n<li>\n<p>JavaScript 的痛点：<br />\nJavaScript 在类型检测上依然是毫无进展，而，编程开发中我们有一个共识：错误出现的越早越好。能在写代码的时候发现错误，就不要在代码编译时再发现；能在代码编译期间发现错误，就不要在代码运行期间再发现（类型检测就可以很好的帮助我们做到这一点）；能在开发阶段发现错误，就不要在测试期间发现错误，能在测试期间发现错误，就不要在上线后发现错误</p>\n</li>\n<li>\n<p>认识 TypeScript<br />\nTypeScript 是拥有类型的 JavaScript 超集。JavaScript 所拥有的特性，TypeScript 全部都是支持的，并且它紧随 ECMAScript 的标准，所以 ES6、ES7、ES8 等新语法标准，它都是支持的。<br />\n并且在语言层面上，不仅仅增加了类型约束，而且包括一些语法的扩展，比如枚举类型（Enum）、元组类型（Tuple）等<br />\n并且 TypeScript 最终会被编译成 JavaScript 代码，所以你并不需要担心它的兼容性问题，在编译时也不需要借助于 Babel 这样的工具</p>\n</li>\n</ul>\n<h1 id=\"类型\"><a class=\"anchor\" href=\"#类型\">#</a> 类型</h1>\n<h2 id=\"变量的声明\"><a class=\"anchor\" href=\"#变量的声明\">#</a> 变量的声明</h2>\n<p>在 TypeScript 中定义变量需要指定 <strong>标识符 (变量)</strong> 的类型，声明的类型可以称之为 <code>类型注解</code> <br />\n<strong> <code>var/let/const 标识符: 数据类型 = 赋值</code> </strong><br />\n比如我们声明一个 message，完整的写法如下:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> string <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果给 message 赋值其他类型的值，那么就会报错。<br />\n(注意：这里的 <code>string</code>  是小写的，和 <code>String</code>  是有区别的。 <code>string</code>  是 TypeScript 中定义的字符串类型， <code>String</code>  是 ECMAScript 中定义的一个类)</p>\n<h2 id=\"声明变量的关键字\"><a class=\"anchor\" href=\"#声明变量的关键字\">#</a> 声明变量的关键字</h2>\n<p>可以使用 <code>var</code> 、 <code>let</code> 、 <code>const</code> , 但不推荐使用 <code>var</code>  来声明变量，主要原因和 ES6 升级后 <code>let</code>  和 <code>var</code>  的区别是一样的， <code>var</code>  是没有块级作用域的，会引起很多的问题。</p>\n<h2 id=\"变量的类型推导推断\"><a class=\"anchor\" href=\"#变量的类型推导推断\">#</a> 变量的类型推导（推断）</h2>\n<p>在开发中，有时候为了方便起见我们并不会在声明每一个变量时都写上对应的数据类型，我们更希望可以通过 TypeScript 本身的特性帮助我们推断出对应的变量类型：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果这个时候再给 message 赋值 <code>123</code> , 就会报错，这是因为在一个变量第一次赋值时，会根据后面的赋值内容的类型，来推断出变量的类型。上面的 message 就是因为后面赋值的是一个 <code>string</code>  类型，所以 <code>message</code>  虽然没有明确的说明，但是依然是一个 <code>string</code>  类型。</p>\n<h3 id=\"javascript-和-typescript-类型\"><a class=\"anchor\" href=\"#javascript-和-typescript-类型\">#</a> JavaScript 和 TypeScript 类型</h3>\n<h4 id=\"javascript-类型-number类型\"><a class=\"anchor\" href=\"#javascript-类型-number类型\">#</a> JavaScript 类型 –  <code>number</code>  类型</h4>\n<p>数字类型是我们开发中经常使用的类型，TypeScript 和 JavaScript 一样，不区分整数类型（int）和浮点型（double），统一为 <code>number</code>  类型。</p>\n<h4 id=\"javascript-类型-boolean类型\"><a class=\"anchor\" href=\"#javascript-类型-boolean类型\">#</a> JavaScript 类型 –  <code>boolean</code>  类型</h4>\n<p><code>boolean</code>  类型只有两个取值：true 和 false，非常简单</p>\n<h4 id=\"javascript-类型-string类型\"><a class=\"anchor\" href=\"#javascript-类型-string类型\">#</a> JavaScript 类型 –  <code>string</code>  类型</h4>\n<p><code>string</code>  类型是字符串类型，可以使用单引号或者双引号表示。<br />\n同时也支持 ES6 的模板字符串 `` 来拼接变量和字符串</p>\n<h4 id=\"javascript-类型-array类型\"><a class=\"anchor\" href=\"#javascript-类型-array类型\">#</a> JavaScript 类型 –  <code>Array</code>  类型</h4>\n<p>数组类型的定义有两种方式：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> names<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cab\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 方式一，推荐</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> names2<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nab\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 方式二，开发中不推荐使用，jsx 有冲突，&lt;div>&lt;/div></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>names2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第二种方式中的 <code>&lt;string&gt;</code>  是泛型， <code>const names2: Array&lt;string&gt; = [&quot;abc&quot;, &quot;cba&quot;, &quot;nab&quot;]</code> ; 其中：</p>\n<ul>\n<li><code>Array</code>  ==&gt; 是一个 interface</li>\n<li><code>&lt;string&gt;</code>  ==&gt; 具体的某种类型：字符串类型</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"javascript-类型-object类型\"><a class=\"anchor\" href=\"#javascript-类型-object类型\">#</a> JavaScript 类型 –  <code>Object</code>  类型</h4>\n<p><strong>(写对象类型不要写类型注解，让其类型推导即可)</strong></p>\n<h4 id=\"javascript-类型-symbol-类型\"><a class=\"anchor\" href=\"#javascript-类型-symbol-类型\">#</a> JavaScript 类型 – Symbol 类型</h4>\n<p>在 ES5 中，如果我们是不可以在对象中添加相同的属性名称的，比如下面的做法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">identity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">identity</span><span class=\"token operator\">:</span> <span class=\"token string\">\"老师\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通常我们的做法是定义两个不同的属性名字：比如 identity1 和 identity2<br />\n 但是我们也可以通过 <code>symbol</code>  来定义相同的名称，因为 <code>Symbol</code>  函数返回的是不同的值：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> s1<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> s2<span class=\"token operator\">:</span> <span class=\"token builtin\">symbol</span> <span class=\"token operator\">=</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">[</span>s1<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"程序员\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span>s2<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token string\">\"老师\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"javascript-类型-null和undefined类型\"><a class=\"anchor\" href=\"#javascript-类型-null和undefined类型\">#</a> JavaScript 类型 –  <code>null</code>  和 <code>undefined</code>  类型</h4>\n<h4 id=\"typescript-类型-any类型\"><a class=\"anchor\" href=\"#typescript-类型-any类型\">#</a> TypeScript 类型 -  <code>any</code>  类型</h4>\n<p>在某些情况下，我们确实无法确定一个变量的类型，并且可能它会发生一些变化，这个时候我们可以使用 <code>any</code>  类型<br />\n <code>any</code>  类型有点像一种讨巧的 TypeScript 手段：我们可以对 <code>any</code>  类型的变量进行任何的操作，包括获取不存在的属性、方法<br />\n如果对于某些情况的处理过于繁琐不希望添加规定的类型注解，或者在引入一些第三方库时，缺失了类型注解，这个时候我们可以使用 <code>any</code></p>\n<h4 id=\"typescript-类型-unknown类型\"><a class=\"anchor\" href=\"#typescript-类型-unknown类型\">#</a> TypeScript 类型 -  <code>unknown</code>  类型</h4>\n<p><code>unknown</code>  是 TypeScript 中比较特殊的一种类型，它用于描述类型不确定的变量 (防止在别的地方乱用，区别于 <code>any</code> )<br />\n 什么意思呢？我们来看下面的场景：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> result<span class=\"token operator\">:</span> <span class=\"token builtin\">unknown</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"typescript-类型-void类型\"><a class=\"anchor\" href=\"#typescript-类型-void类型\">#</a> TypeScript 类型 -  <code>void</code>  类型</h4>\n<p><code>void</code>  通常用来指定一个函数是没有返回值的，那么它的返回值就是 <code>void</code>  类型：<br />\n我们可以将 <code>null</code>  和 <code>undefined</code>  赋值给 <code>void</code>  类型，也就是函数可以返回 <code>null</code>  或者 <code>undefined</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个函数我们没有写任何类型，那么它默认返回值类型就是 <code>void</code> ，我们也可以显示的来指定返回值是 <code>void</code> :</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在开发中一般是不写的</p>\n<h4 id=\"typescript-类型-never类型\"><a class=\"anchor\" href=\"#typescript-类型-never类型\">#</a> TypeScript 类型 -  <code>never</code>  类型</h4>\n<p><code>never</code>  表示永远不会发生值的类型，比如一个函数：如果一个函数中是一个死循环或者抛出一个异常，那么这个函数会返回东西吗？不会，那么写 <code>void</code>  类型或者其他类型作为返回值类型都不合适，我们就可以使用 <code>never</code>  类型</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">loopFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">loopErr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>never</code>  有什么样的应用场景呢？这里我们举一个例子，但是它用到了联合类型，后面我们会讲到：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">handleMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> strintg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"string\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"number\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">const</span> check<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"typescript-类型-tuple类型\"><a class=\"anchor\" href=\"#typescript-类型-tuple类型\">#</a> TypeScript 类型 -  <code>tuple</code>  类型</h4>\n<p><code>tuple</code>  是元组类型，很多语言中也有这种数据类型，比如 Python、Swift 等。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> tInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//tuple 的书写方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> item1<span class=\"token operator\">:</span> tInfo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//why 并且知道类型是 string 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> item1<span class=\"token operator\">:</span> tInfo<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//18 并且知道类型是 number 类型</span></pre></td></tr></table></figure><p>那么 <code>tuple</code>  和数组有什么区别呢？</p>\n<ol>\n<li>首先，数组中通常建议存放相同类型的元素，不同类型的元素是不推荐放在数组中。（可以放在对象或者元组中）</li>\n<li>其次，元组中每个元素都有自己特性的类型，根据索引值获取到的值可以确定对应的类型</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> info<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组书写方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> item1 <span class=\"token operator\">=</span> info<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不能确定类型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> tInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//tuple 的书写方式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> item2<span class=\"token operator\">:</span> tInfo<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 一定是 string 类型</span></pre></td></tr></table></figure><p>Tuples 的应用场景：tuple 通常可以作为返回的值，在使用的时候会非常的方便</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>newState<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> currentState <span class=\"token operator\">=</span> state</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">changeState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>newState<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    currentState <span class=\"token operator\">=</span> newState</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>currentState<span class=\"token punctuation\">,</span>changeState<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>counter<span class=\"token punctuation\">,</span>setCounter<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"函数的参数类型与返回值类型\"><a class=\"anchor\" href=\"#函数的参数类型与返回值类型\">#</a> 函数的参数类型与返回值类型</h4>\n<p>函数是 JavaScript 非常重要的组成部分，TypeScript 允许我们<strong>指定函数的参数和返回值的类型</strong>。</p>\n<ul>\n<li>\n<p>参数的类型注解：声明函数时，可以在每个参数后添加类型注解，以声明函数接受的参数类型<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/9\" alt=\"\" /> K4X1D1YO5 (SR] 5LBLCF%6.png)</p>\n</li>\n<li>\n<p>返回值的类型注解，这个注解出现在函数列表的后面：</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>和变量的类型注解一样，我们通常情况下不需要返回类型注解，因为 TypeScript 会根据 return 返回值推断函数的返回类型<br />\n某些第三方库处于方便理解，会明确指定返回类型，但是这个看个人喜好</p>\n<h3 id=\"匿名函数的参数\"><a class=\"anchor\" href=\"#匿名函数的参数\">#</a> 匿名函数的参数</h3>\n<p>匿名函数与函数声明会有一些不同：当一个函数出现在 TypeScript 可以确定该函数会被如何调用的地方时，该函数的参数会自动指定类型。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"nba\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>names<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们并没有指定 <code>item</code>  的类型，但是 <code>item</code>  是一个 string 类型：这是因为 TypeScript 会根据 <code>forEach</code>  函数的类型以及数组的类型推断出 <code>item</code>  的类型。这个过程称之为<strong>上下文类型（contextual typing）</strong>，因为函数执行的上下文可以帮助确定参数和返回值的类型</p>\n<h3 id=\"对象类型\"><a class=\"anchor\" href=\"#对象类型\">#</a> 对象类型</h3>\n<p>如果我们希望限定一个函数接受的参数是一个对象，我们可以使用对象类型:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printCoordinate</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x坐标\"</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y坐标\"</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printCoordinate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其中 <code>point</code>  是形参，而 <code>&#123; x: number; y: number &#125;</code>  是它的类型注解<br />\n我们使用了一个对象来作为类型，在对象我们可以添加属性，并且告知 TypeScript 该属性需要是什么类型；每个属性的类型部分也是可选的，如果不指定，那么就是 any 类型</p>\n<h3 id=\"可选类型\"><a class=\"anchor\" href=\"#可选类型\">#</a> 可选类型</h3>\n<p>对象类型也可以指定哪些属性是可选的，可以在属性的后面添加一个 <code>?：</code></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printCoordinate</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> z<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x坐标\"</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y坐标\"</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z坐标\"</span><span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printCoordinate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printCoordinate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">:</span> <span class=\"token number\">40</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>这个时候 x 和 y 依然是有类型的，它们的类型是： <code>number | undefined</code></li>\n<li>可选类型需要在必传参数的后面</li>\n</ul>\n<h3 id=\"联合类型\"><a class=\"anchor\" href=\"#联合类型\">#</a> 联合类型</h3>\n<p>TypeScript 的类型系统允许我们使用多种运算符，从现有类型中构建新类型<br />\n第一种组合类型的方法：<strong>联合类型（Union Type）</strong></p>\n<ul>\n<li>联合类型是由两个或者多个其他类型组成的类型</li>\n<li>表示可以是这些类型中的任何一个值</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的id是\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">printId</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">printId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"使用联合类型\"><a class=\"anchor\" href=\"#使用联合类型\">#</a> 使用联合类型</h4>\n<p>传入给一个联合类型的值是非常简单的，只要保证是联合类型中的某一个类型的值即可<br />\n但是我们拿到这个值之后，我们应该如何使用它呢？因为它可能是任何一种类型，比如我们拿到的值可能是 string 或者 number，我们就不能对其调用 string 上的一些方法</p>\n<ul>\n<li>我们需要使用<strong>缩小（narrow）联合</strong>，TypeScript 可以根据我们缩小的代码结构，推断出更加具体的类型；</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> id <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的id是\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你的id是\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型别名\"><a class=\"anchor\" href=\"#类型别名\">#</a> 类型别名</h3>\n<p>在前面，我们通过在类型注解中编写 对象类型 和 联合类型，但是当我们想要多次在其他地方使用时，就要编写多次，这时候可以给对象类型起一个别名</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printPoint</span><span class=\"token punctuation\">(</span>point<span class=\"token operator\">:</span> Point<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">printCoordinate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">ID</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"您的id：\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类型断言as\"><a class=\"anchor\" href=\"#类型断言as\">#</a> 类型断言 <code>as</code></h3>\n<p>有时候 TypeScript 无法获取具体的类型信息，这个我们需要使用<strong>类型断言（Type Assertions）</strong></p>\n<ul>\n<li>我们通过  <code>document.getElementById</code>  去获得一个 dom，TypeScript 只知道该函数会返回 HTMLElement ，但并不知道它<br />\n具体的类型，这是就可以使用类型断言</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> myEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"my_img\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLImageElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>myEl<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"图片地址\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>注意：TypeScript 只允许类型断言转换为 更具体 或者 不太具体 的类型版本，此规则可防止不可能的强制转换：</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"coderwhy\"</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"coderwhy\"</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">unknown</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这样就可以</span></pre></td></tr></table></figure><h3 id=\"非空类型断言\"><a class=\"anchor\" href=\"#非空类型断言\">#</a> 非空类型断言  <code>!</code></h3>\n<p>当我们编写下面的代码时，在执行 ts 的编译阶段会报错，这是因为传入的 <code>message</code>  有可能是为 <code>undefined</code>  的，这个时候是不能执行方法的</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//error</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是，我们确定传入的参数是有值的，这个时候我们可以使用非空类型断言 <code>!</code> ，表示可以<strong>确定某个标识符是有值的</strong>，跳过 ts 在编译阶段对它的检测</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printMessage</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token operator\">!</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"可选链\"><a class=\"anchor\" href=\"#可选链\">#</a> 可选链 <code>?.</code></h3>\n<p>可选链事实上并不是 TypeScript 独有的特性，它是 ES11（ES2020）中增加的特性</p>\n<ul>\n<li>可选链使用可选链操作符  <code>?.</code></li>\n<li>它的作用是当对象的属性不存在时，会短路，直接返回 undefined，如果存在，那么才会继续执行</li>\n</ul>\n<h2 id=\"和的作用\"><a class=\"anchor\" href=\"#和的作用\">#</a>  <code>??</code>  和 <code>!!</code>  的作用</h2>\n<ul>\n<li><code>!!</code>  操作符：<br />\n将一个其他类型转换成 <code>boolean</code>  类型，类似于 <code>Boolean(变量)</code>  的方式</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> flag1 <span class=\"token operator\">=</span> <span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> flag2 <span class=\"token operator\">=</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>message<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>??</code>  操作符：<br />\n<strong>空值合并操作符</strong>（ <code>??</code> ）是一个逻辑操作符，当操作符的左侧是 null 或者 undefined 时，返回其右侧操作数，否则返回左侧操作数。（类似于三目运算符）</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"321\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> message <span class=\"token operator\">??</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般结合可选链 <code>?.</code>  来使用:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span>children<span class=\"token operator\">?.</span>length <span class=\"token operator\">??</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//&#123;&#125;</span></pre></td></tr></table></figure><h3 id=\"字面量类型\"><a class=\"anchor\" href=\"#字面量类型\">#</a> 字面量类型</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> message<span class=\"token operator\">:</span> <span class=\"token string\">\"hello\"</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>message <span class=\"token operator\">=</span> <span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>默认情况下这么做是没有太大的意义的，但是我们可以将多个类型联合在一起:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Alignment</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"left\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"right\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">changeAlign</span><span class=\"token punctuation\">(</span>align<span class=\"token operator\">:</span> Alignment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改方向：\"</span><span class=\"token punctuation\">,</span> align<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">changeAlign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"类型缩小\"><a class=\"anchor\" href=\"#类型缩小\">#</a> 类型缩小</h3>\n<ul>\n<li>什么是类型缩小：<br />\n可以通过类似于  <code>typeof padding === &quot;number&quot;</code>  的判断语句，来改变 TypeScript 的执行路径，在给定的执行路径中，缩小比声明时更小的类型，这个过程称之为 类型缩小，而我们编写的  <code>typeof padding === &quot;number&quot;</code>  可以称之为 <strong>类型保护（type guards）</strong></li>\n<li>常见的类型保护有如下几种：</li>\n</ul>\n<ol>\n<li>typeof</li>\n<li>平等缩小（比如 ===、!==）</li>\n<li>instanceof</li>\n<li>in</li>\n</ol>\n<h4 id=\"typeof\"><a class=\"anchor\" href=\"#typeof\">#</a>  <code>typeof</code></h4>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">ID</span></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printId</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> id <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"平等缩小\"><a class=\"anchor\" href=\"#平等缩小\">#</a> 平等缩小</h4>\n<p>我们可以使用 Switch 或者相等的一些运算符来表达相等性（比如 <code>===</code> ,  <code>!==</code> ,  <code>==</code> ,  <code>!=</code> ）：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Direction</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"left\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"right\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">turnDirection</span><span class=\"token punctuation\">(</span>direction<span class=\"token operator\">:</span> Direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"left\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用left方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"right\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用right方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"center\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用center方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用默认方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"instanceof\"><a class=\"anchor\" href=\"#instanceof\">#</a>  <code>instanceof</code></h4>\n<p>JavaScript 有一个运算符来检查一个值是否是另一个值的 “实例”：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printValue</span><span class=\"token punctuation\">(</span>date<span class=\"token operator\">:</span> Date <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>date <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"in\"><a class=\"anchor\" href=\"#in\">#</a>  <code>in</code></h4>\n<p>Javascript 有一个运算符，用于确定对象是否具有带名称的属性： <code>in</code>  运算符。如果指定的属性在指定的对象或其原型链中，则 <code>in</code>  运算符返回 true；</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Fish</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function-variable function\">swim</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Dog</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function-variable function\">run</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>animal<span class=\"token operator\">:</span> Fish <span class=\"token operator\">|</span> Dog<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"swim\"</span> <span class=\"token keyword\">in</span> animal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    animal<span class=\"token punctuation\">.</span><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    animal<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"typescript-函数类型\"><a class=\"anchor\" href=\"#typescript-函数类型\">#</a> TypeScript 函数类型</h3>\n<p>在 JavaScript 开发中，函数是重要的组成部分，并且函数可以作为一等公民（可以作为参数，也可以作为返回值进<br />\n行传递）。<br />\nTS 在使用函数的过程中，函数也可以有自己的类型</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">CalcFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>fn<span class=\"token operator\">:</span> CalcFunc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"typescript-函数类型解析\"><a class=\"anchor\" href=\"#typescript-函数类型解析\">#</a> TypeScript 函数类型解析</h4>\n<p>在上面的语法中  <code>(num1: number, num2: number) =&gt; void</code> ，代表的就是一个函数类型：</p>\n<ul>\n<li>接收两个参数的函数：num1 和 num2，并且都是 number 类型；</li>\n<li>并且这个函数是没有返回值的，所以是 void<br />\n 在某些语言中，可能参数名称 num1 和 num2 是可以省略，但是 TypeScript 是不可以的。</li>\n</ul>\n<h4 id=\"默认参数\"><a class=\"anchor\" href=\"#默认参数\">#</a> 默认参数</h4>\n<p>从 ES6 开始，JavaScript 是支持默认参数的，TypeScript 也是支持默认参数的：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个时候 y 的类型其实是 undefined 和 number 类型的联合。</p>\n<h4 id=\"剩余参数\"><a class=\"anchor\" href=\"#剩余参数\">#</a> 剩余参数</h4>\n<p>从 ES6 开始，JavaScript 也支持剩余参数，剩余参数语法允许我们将一个不定数量的参数放到一个数组中</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>nums<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> num <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    total <span class=\"token operator\">+=</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"typescript-枚举类型\"><a class=\"anchor\" href=\"#typescript-枚举类型\">#</a> TypeScript 枚举类型</h3>\n<p>枚举类型是为数不多的 TypeScript 特性有的特性之一：</p>\n<ul>\n<li>枚举其实就是将一组可能出现的值，一个个列举出来，定义在一个类型中，这个类型就是枚举类型</li>\n<li>枚举允许开发者定义一组命名常量，常量可以是数字、字符串类型</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token constant\">LEFT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token constant\">RIGHT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token constant\">TOP</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token constant\">BOTTOM</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">turnDirection</span><span class=\"token punctuation\">(</span>direction<span class=\"token operator\">:</span> Direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">case</span> Direction<span class=\"token punctuation\">.</span><span class=\"token constant\">LEFT</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转向左边~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">case</span> Direction<span class=\"token punctuation\">.</span><span class=\"token constant\">RIGHT</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转向右边~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">case</span> Direction<span class=\"token punctuation\">.</span><span class=\"token constant\">TOP</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转向上边~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">case</span> Direction<span class=\"token punctuation\">.</span><span class=\"token constant\">BOTTOM</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"转向下边~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">const</span> myDirection<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span> <span class=\"token operator\">=</span> direction<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"枚举类型的值\"><a class=\"anchor\" href=\"#枚举类型的值\">#</a> 枚举类型的值</h4>\n<p>枚举类型默认是有值的，比如上面的枚举，默认值是这样的：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token constant\">LEFT</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token constant\">RIGHT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token constant\">TOP</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token constant\">BOTTOM</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，我们也可以给枚举其他值，这个时候会从 100 进行递增：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token constant\">LEFT</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token constant\">RIGHT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token constant\">TOP</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token constant\">BOTTOM</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们也可以给他们赋值其他的类型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token constant\">LEFT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token constant\">RIGHT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token constant\">TOP</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"TOP\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token constant\">BOTTOM</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"BOTTOM\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"ts-中的-this\"><a class=\"anchor\" href=\"#ts-中的-this\">#</a> TS 中的 this</h3>\n<h4 id=\"可推导的-this-类型\"><a class=\"anchor\" href=\"#可推导的-this-类型\">#</a> 可推导的 this 类型</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvaFltMEpnQkkyNWdyTkdfMnNDUmxUQQ==\">https://mp.weixin.qq.com/s/hYm0JgBI25grNG_2sCRlTA</span></p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>info<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的代码是可以正常运行的，TypeScript 认为函数 sayHello 有一个对应的 this 的外部对象 info，所以在使用时，就会把 this 当做该对象</p>\n<h4 id=\"不确定的-this-类型\"><a class=\"anchor\" href=\"#不确定的-this-类型\">#</a> 不确定的 this 类型</h4>\n<p>但是对于某些情况来说，我们并不知道 this 到底是什么:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> info <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  sayHello<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>info<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这段代码运行会报错的：这里对于 sayHello 的调用来说，我们虽然将其放到了 info 中，通过 info 去调用，this 依然是指向 info 对象的；但是对于 TypeScript 编译器来说，这个代码是非常不安全的，因为我们也有可能直接调用函数，或者通过别的对象来调用函数</p>\n<h4 id=\"指定-this-的类型\"><a class=\"anchor\" href=\"#指定-this-的类型\">#</a> 指定 this 的类型</h4>\n<p>这个时候，通常 TypeScript 会要求我们明确的指定 this 的类型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NameType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">:</span> NameType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"函数的重载\"><a class=\"anchor\" href=\"#函数的重载\">#</a> 函数的重载</h1>\n<p>在 TypeScript 中，如果我们编写了一个 add 函数，希望可以对字符串和数字类型进行相加，应该如何编写呢？<br />\n我们可能会这样来编写，但是其实是错误的：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 TypeScript 中，我们可以去编写不同的重载签名（overload signatures）来表示函数可以以不同的方式进行调用<br />\n一般是编写两个或者以上的重载签名，再去编写一个通用的函数以及实现</p>\n<h2 id=\"sum-函数的重载\"><a class=\"anchor\" href=\"#sum-函数的重载\">#</a> sum 函数的重载</h2>\n<p>我们对 add 函数进行重构，在我们调用 add 的时候，它会根据我们传入的参数类型来决定执行函数体时，到底执行哪一个函数的重载签名</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> a2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> a2<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> a2<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"联合类型和重载\"><a class=\"anchor\" href=\"#联合类型和重载\">#</a> 联合类型和重载</h2>\n<p>我们现在有一个需求：定义一个函数，可以传入字符串或者数组，获取它们的长度<br />\n这里有两种实现方案：</p>\n<ol>\n<li>使用联合类型来实现</li>\n<li>实现函数重载来实现</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在开发中一般使用联合类型</p>\n<h1 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h1>\n<h2 id=\"类的定义\"><a class=\"anchor\" href=\"#类的定义\">#</a> 类的定义</h2>\n<p>定义一个<strong> Person</strong> 类：</p>\n<ul>\n<li>如果类型没有声明，那么它们默认是 any 的</li>\n<li>也可以给属性设置初始化值</li>\n<li>类可以有自己的构造函数 constructor，当我们通过 new 关键字创建一个实例时，构造函数会被调用</li>\n<li>构造函数不需要返回任何值，默认返回当前创建出来的实例</li>\n<li>如果我们在 strictPropertyInitialization 模式下确实不希望给属性初始化，可以使用  <code>name!: string</code>  语法</li>\n<li>类中可以有自己的函数，定义的函数称之为方法</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">!</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">eating</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"eating\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"类的继承\"><a class=\"anchor\" href=\"#类的继承\">#</a> 类的继承</h2>\n<p>面向对象的其中一大特性就是继承，继承不仅仅可以减少我们的代码量，也是多态的使用前提。<br />\n我们使用 extends 关键字来实现继承，子类中使用 super 来访问父类<br />\n在构造函数中，我们可以通过 super 来调用父类的构造方法，对父类中的属性进行初始化</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sno<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> sno<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">studying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"studying\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"类的成员修饰符\"><a class=\"anchor\" href=\"#类的成员修饰符\">#</a> 类的成员修饰符</h2>\n<p>在 TypeScript 中，类的属性和方法支持三种修饰符：  <code>public</code> 、 <code>private</code> 、 <code>protected</code></p>\n<ul>\n<li><code>public</code> : 修饰的是在任何地方可见、公有的属性或方法，默认编写的属性就是 public 的</li>\n<li><code>private</code> : 修饰的是仅在同一类中可见、私有的属性或方法</li>\n<li><code>protected</code> : 修饰的是仅在类自身及子类中可见、受保护的属性或方法</li>\n</ul>\n<p><code>public</code>  是默认的修饰符，也是可以直接访问的，我们这里来演示一下 <code>protected</code>  和 <code>private</code> :</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">protected</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"只读属性-readonly\"><a class=\"anchor\" href=\"#只读属性-readonly\">#</a> 只读属性 readonly</h2>\n<p>如果有一个属性我们不希望外界可以任意的修改，只希望确定值后直接使用，那么可以使用 <code>readonly</code> ：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"getterssetters\"><a class=\"anchor\" href=\"#getterssetters\">#</a> getters/setters</h2>\n<p>在前面一些私有属性我们是不能直接访问的，或者某些属性我们想要监听它的 ** 获取 (getter)<strong> 和</strong>设置 (setter)** 的过程，这个时候我们可以使用存取器。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">private</span> _name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name <span class=\"token operator\">=</span> newName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>newName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"coderwhy\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"静态成员\"><a class=\"anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<p>前面我们在类中定义的成员和方法都属于对象级别的，在开发中，我们有时候也需要定义类级别的成员和方法：通过关键字 <code>static</code>  来定义:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">static</span> time<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"20:00\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">static</span> <span class=\"token function\">attendClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"去上课\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Student<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Student<span class=\"token punctuation\">.</span><span class=\"token function\">attendClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"抽象类-abstract\"><a class=\"anchor\" href=\"#抽象类-abstract\">#</a> 抽象类 abstract</h2>\n<p>众<sub>所</sub>周<sub>知</sub>，继承是多态使用的前提：</p>\n<ul>\n<li>所以在定义很多通用的调用接口时，我们通常会让调用者传入父类，通过多态来实现更加灵活的调用方式。</li>\n<li>但是，父类本身可能并不需要对某些方法进行具体的实现，所以父类中定义的方法，，我们可以定义为抽象方法。<br />\n什么是抽象方法？在 TypeScript 中没有具体实现的方法 (没有方法体)，就是抽象方法。</li>\n<li>抽象方法，必须存在于抽象类中</li>\n<li>抽象类是使用 abstract 声明的类</li>\n</ul>\n<p>抽象类有如下的特点：</p>\n<ul>\n<li>抽象类是不能被实例的话（也就是不能通过 new 创建）</li>\n<li>抽象方法必须被子类实现，否则该类必须是一个抽象类</li>\n</ul>\n<h3 id=\"抽象类演练\"><a class=\"anchor\" href=\"#抽象类演练\">#</a> 抽象类演练</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">abstract</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> r<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">private</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">private</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">const</span> circle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Circle</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">const</span> rectangle <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">calcArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span><span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token function\">calcArea</span><span class=\"token punctuation\">(</span>circle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token function\">calcArea</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"类的类型\"><a class=\"anchor\" href=\"#类的类型\">#</a> 类的类型</h2>\n<p>类本身也是可以作为一种数据类型的：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> p1<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"why\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> p2<span class=\"token operator\">:</span> Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"kobe\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function-variable function\">running</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"接口的声明\"><a class=\"anchor\" href=\"#接口的声明\">#</a> 接口的声明</h1>\n<p>在前面我们通过 type 可以用来声明一个对象类型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对象的另外一种声明方式就是通过接口来声明：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Point</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  y<span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"接口的可选属性\"><a class=\"anchor\" href=\"#接口的可选属性\">#</a> 接口的可选属性</h2>\n<p>接口中我们也可以定义可选属性：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  friend<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> person<span class=\"token operator\">:</span>Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  name<span class=\"token operator\">:</span><span class=\"token string\">\"why\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  age<span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  friend<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"kobe\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>friend<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"接口的只读属性\"><a class=\"anchor\" href=\"#接口的只读属性\">#</a> 接口的只读属性</h2>\n<p>接口中也可以定义只读属性，这样就意味着我们再初始化之后，这个值是不可以被修改的:</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">readonly</span> name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">readonly</span> friend<span class=\"token operator\">?</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> person<span class=\"token operator\">:</span>Person <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  name<span class=\"token operator\">:</span><span class=\"token string\">\"why\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  age<span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  friend<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"kobe\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"coderwhy\"</span>  <span class=\"token comment\">// 不可以设置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>person<span class=\"token punctuation\">.</span>friend <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">// 不可以设置</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 下面的代码是可以执行的</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  person<span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> ‘<span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"接口的索引类型\"><a class=\"anchor\" href=\"#接口的索引类型\">#</a> 接口的索引类型</h2>\n<p>前面我们使用 interface 来定义对象类型，这个时候其中的属性名、类型、方法都是确定的，但是有时候我们会遇到类似下面的对象：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">FrontLanguage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>index<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> frontend<span class=\"token operator\">:</span>FrontLanguage <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token string\">\"HTML\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token string\">\"CSS\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">3</span><span class=\"token operator\">:</span><span class=\"token string\">\"JavaScript\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">LanguageBirth</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Java<span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> lanuage<span class=\"token operator\">:</span>LanguageBirth <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token string-property property\">\"Java\"</span><span class=\"token operator\">:</span><span class=\"token number\">1995</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token string-property property\">\"JavaScript\"</span><span class=\"token operator\">:</span><span class=\"token number\">1996</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token string-property property\">\"C\"</span><span class=\"token operator\">:</span><span class=\"token number\">1972</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"接口的函数类型\"><a class=\"anchor\" href=\"#接口的函数类型\">#</a> 接口的函数类型</h2>\n<p>前面我们都是通过 interface 来定义对象中普通的属性和方法的，实际上它也可以用来定义函数类型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CalcFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span>num2<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> add<span class=\"token operator\">:</span><span class=\"token function-variable function\">CalcFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> sub<span class=\"token operator\">:</span><span class=\"token function-variable function\">CalcFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">-</span> num2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，除非特别的情况，还是推荐大家使用类型别名来定义函数：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">CalcFunc</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"接口继承\"><a class=\"anchor\" href=\"#接口继承\">#</a> 接口继承</h2>\n<p>接口和类一样是可以进行继承的，也是使用 extends 关键字，并且接口是支持多继承的（类不支持多继承）</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">eating</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Animal</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function-variable function\">running</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">,</span> Animal <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  sno<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> stu<span class=\"token operator\">:</span> Student <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  sno<span class=\"token operator\">:</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">\"why\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function-variable function\">eating</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function-variable function\">running</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"接口的实现\"><a class=\"anchor\" href=\"#接口的实现\">#</a> 接口的实现</h2>\n<p>接口定义后，也是可以被类实现的：<br />\n如果被一个类实现，那么在之后需要传入接口的地方，都可以将这个类传入，这就是面向接口开发</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ISwim</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">swimming</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRun</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function-variable function\">running</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ISwim</span><span class=\"token punctuation\">,</span> IRun <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"swimming\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">running</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">swim</span><span class=\"token punctuation\">(</span>swimmer<span class=\"token operator\">:</span> ISwim<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  swimmer<span class=\"token punctuation\">.</span><span class=\"token function\">swimming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">swim</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"交叉类型\"><a class=\"anchor\" href=\"#交叉类型\">#</a> 交叉类型</h2>\n<p>前面我们学习了联合类型，表示多个类型中的一个即可：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Alignment</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"left\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"right\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"center\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还有一种类型合并，称之为<strong>交叉类型</strong></p>\n<ul>\n<li>交叉类型表示需要满足多个条件</li>\n<li>交叉类型使用 <code>&amp;</code>  符号<br />\n我们看下面的例子：</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">MyType</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">&amp;</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这表示的含义是是 number 和 string 要同时满足，但其实并没有一个值同时满足是一个 number 又是一个 string，所以 MyType 其实是一个 never 类型</p>\n<h3 id=\"交叉类型的应用\"><a class=\"anchor\" href=\"#交叉类型的应用\">#</a> 交叉类型的应用</h3>\n<p>在开发中，我们进行交叉时，通常是对对象类型进行交叉的：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Colorful</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IRun</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function-variable function\">running</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">NewType</span> <span class=\"token operator\">=</span> Colorful <span class=\"token operator\">&amp;</span> IRun<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> obj<span class=\"token operator\">:</span> NewType <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  color<span class=\"token operator\">:</span> <span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function-variable function\">running</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"type和interface\"><a class=\"anchor\" href=\"#type和interface\">#</a>  <code>type</code>  和 <code>interface</code></h1>\n<ul>\n<li>共同点：</li>\n</ul>\n<ol>\n<li>都可以定义一个对象或函数</li>\n<li>都允许继承（extends）</li>\n</ol>\n<ul>\n<li>不同点：</li>\n</ul>\n<ol>\n<li>type 可以声明基本类型、联合类型、交叉类型、元组，interface 不行</li>\n<li>interface 可以合并重复声明，type 不行</li>\n</ol>\n<ul>\n<li>\n<p>小结<br />\n interface 是接口，用于描述一个对象。<br />\ntype 是类型别名，用于给各种类型定义别名，让 TS 写起来更简洁、清晰。</p>\n</li>\n<li>\n<p>平时开发中，如果要定义一个非对象类型，或者需要使用组合或者交叉类型的时候，用 type；如果要定义一个对象类型，或者要用类的 extends 或 implements 时，用 interface。<br />\n前端给后端返回数据，后端给前端返回的数据时，一般用 interface 对数据类型进行约束</p>\n</li>\n</ul>\n<h3 id=\"字面量赋值\"><a class=\"anchor\" href=\"#字面量赋值\">#</a> 字面量赋值</h3>\n<p>我们来看下面的代码：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">eating</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> p<span class=\"token operator\">:</span>IPerson <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  name<span class=\"token operator\">:</span><span class=\"token string\">\"why\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  age<span class=\"token operator\">:</span><span class=\"token number\">18</span> <span class=\"token comment\">// 报错：'age' does not exist</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-variable function\">eating</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是因为 TypeScript 在字面量直接赋值的过程中，为了进行类型推导会进行严格的类型限制。<br />\n但是之后如果我们是将一个 变量标识符 赋值给其他的变量时，会进行 freshness 擦除操作：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPerson</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">eating</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  name<span class=\"token operator\">:</span><span class=\"token string\">\"why\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  age<span class=\"token operator\">:</span><span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-variable function\">eating</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> p<span class=\"token operator\">:</span>IPerson <span class=\"token operator\">=</span> obj</pre></td></tr></table></figure><h1 id=\"泛型\"><a class=\"anchor\" href=\"#泛型\">#</a> 泛型</h1>\n<p>泛型 ==&gt; 形参</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数泛型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">fun</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">fun</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">fun</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这块代码中，可以将 <code>T</code>  看做形参， <code>string</code>  和 <code>number</code>  看做实参</p>\n<hr />\n<p>软件工程的主要目的是构建不仅仅明确和一致的 API，还要让你的代码具有很强的可重用性：比如我们可以通过函数来封装一些 API，通过传入不同的函数参数，让函数帮助我们完成不同的操作；但是对于参数的类型是否也可以参数化呢？</p>\n<p>什么是类型的参数化？</p>\n<ul>\n<li>我们来提一个需求：封装一个函数，传入一个参数，并且返回这个参数</li>\n<li>如果我们是 TypeScript 的思维方式，要考虑这个参数和返回值的类型需要一致：</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>上面的代码虽然实现了，但是不适用于其他类型，比如 string、boolean、Person 等类型：</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>泛型就是类型变量，在 ts 中可以用来定义一些通用的类型，比如数组、函数、类等。泛型可以让你写出更灵活和可复用的代码，而不用担心类型错误<br />\n泛型适合一些需要根据不同的输入类型返回不同的输出类型的应用场景，在这些场景中，如果不用泛型，就需要为每种可能的输入类型写一个重载或者断言，这样会增加代码的复杂度和冗余。而用了泛型，就可以用一个类型参数来表示输入类型，并根据它推断出输出类型，这样就可以写出更简洁和通用的代码。</p>\n<h2 id=\"泛型实现类型参数化\"><a class=\"anchor\" href=\"#泛型实现类型参数化\">#</a> 泛型实现类型参数化</h2>\n<p>对于刚才的问题，虽然 any 是可以的，但是定义为 any 的时候，我们其实已经丢失了类型信息：</p>\n<ul>\n<li>比如我们传入的是一个 number，那么我们希望返回的可不是 any 类型，而是 number 类型；</li>\n<li>所以，我们需要在函数中可以捕获到参数的类型是 number，并且同时使用它来作为返回值的类型；<br />\n我们需要在这里使用一种特性的变量 ——<strong> 类型变量（type variable）</strong>，它作用于类型，而不是值：</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">foo</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Type<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> Type<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Type <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里我们可以使用两种方式来调用它：</p>\n<ol>\n<li>通过 <code>&lt;类型&gt;</code>  的方式将类型传递给函数；</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">foo</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token generic-function\"><span class=\"token function\">foo</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>通过类型推到，自动推到出我们传入变量的类型：在这里会推导出它们是 字面量类型的，因为字面量类型对于我们的函数也是适用的</li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"泛型的基本补充\"><a class=\"anchor\" href=\"#泛型的基本补充\">#</a> 泛型的基本补充</h2>\n<p>当然我们也可以传入多个类型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">foo</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span>，<span class=\"token constant\">E</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>a1<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>a2<span class=\"token operator\">:</span><span class=\"token constant\">E</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Tyepe <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>平时在开发中我们可能会看到一些常用的名称：</p>\n<ul>\n<li><code>T</code> ：Type 的缩写，类型</li>\n<li><code>K</code> 、 <code>V</code> ：key 和 value 的缩写，键值对</li>\n<li><code>E</code> ：Element 的缩写，元素</li>\n<li><code>O</code> ：Object 的缩写，对象</li>\n</ul>\n<p>这些名称都是标识符，可以写成任何的东西</p>\n<h2 id=\"泛型接口\"><a class=\"anchor\" href=\"#泛型接口\">#</a> 泛型接口</h2>\n<p>在定义接口的时候我们也可以使用泛型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> IFoo<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  initialValue<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  valueList<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">handleValue</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> foo<span class=\"token operator\">:</span>IFoo<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  initialValue<span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  valueList<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function-variable function\">handleValue</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"泛型类\"><a class=\"anchor\" href=\"#泛型类\">#</a> 泛型类</h2>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  x<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  y<span class=\"token operator\">:</span><span class=\"token constant\">T</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>y<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> p3<span class=\"token operator\">:</span>Point<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"泛型约束\"><a class=\"anchor\" href=\"#泛型约束\">#</a> 泛型约束</h2>\n<p>有时候我们希望传入的类型有某些共性，但是这些共性可能不是在同一种类型中：<br />\n比如 string 和 array 都是有 length 的，或者某些对象也是会有 length 属性的，那么只要是拥有 length 的属性都可以作为我们的参数类型，那么应该如何操作呢？</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">ILength</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getLength</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> ILength<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cba\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> length<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"why\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"泛型-2\"><a class=\"anchor\" href=\"#泛型-2\">#</a> 泛型 2</h1>\n<ul>\n<li>泛型：可以理解为 【不确定】的【类型】</li>\n<li>使用场景：复用性</li>\n<li>好处：</li>\n</ul>\n<p>先看下面两段代码，分别是求数组和字符串的最小值：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getMinArray</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      min <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMinArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getMinString</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      min <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMinArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddddd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>以上两段代码都有一个共通的特性：内容相同，唯一不同的是参数类型。这时候就可以用</p>\n<h2 id=\"泛型函数语法格式\"><a class=\"anchor\" href=\"#泛型函数语法格式\">#</a> 泛型函数语法格式：</h2>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">名称</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>参数<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">名称</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 使用泛型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">getMin</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      min <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cccc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ddddd\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"泛型函数的类型和非泛型函数的类型有什么不同\"><a class=\"anchor\" href=\"#泛型函数的类型和非泛型函数的类型有什么不同\">#</a> 泛型函数的 “类型” 和非泛型函数的类型有什么不同？</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 非泛型函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> Fn1 <span class=\"token operator\">=</span> fn1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// let Fn1:(arg:any) => any</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 泛型函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">fn2</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> Fn2 <span class=\"token operator\">=</span> fn2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//// let Fn2:&lt;T>(arg:T) => T</span></pre></td></tr></table></figure><p>泛型函数类型前面有一个类型参数 (T)</p>\n<h2 id=\"泛型接口-2\"><a class=\"anchor\" href=\"#泛型接口-2\">#</a> 泛型接口</h2>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">fnInter<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"泛型类-2\"><a class=\"anchor\" href=\"#泛型类-2\">#</a> 泛型类</h2>\n<p>语法格式：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">名称<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">名称<span class=\"token operator\">&lt;</span>类型<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>示例：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">GetMin<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  arr<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>el<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">&lt;</span> min<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        min <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> min<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GetMin<span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"泛型约束-2\"><a class=\"anchor\" href=\"#泛型约束-2\">#</a> 泛型约束</h2>\n<ul>\n<li>泛型约束可以通过  <code>接口+extends</code>  来实现约束<br />\n为什么要有类型约束呢？我们先看下面一段代码：</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">fn</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> Fn <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个代码会报错，按理说传入的 <code>&quot;abcd&quot;</code>  是字符串，应该是具有 <code>length</code>  属性的，为什么还会报错呢？<br />\n这是因为这个函数不仅可以传入字符串，还能传入其他东西，如 <code>number</code> , <code>undefined</code>  等，这些是没有 <code>length</code>  属性的。<br />\n这时候我们就可以加入类型约束：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Len</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  length<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">fn</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> Len<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>arg<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> Fn <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面多出的代码就是对 <code>T</code>  类型做了一个约束，即必须有 <code>length</code>  属性才可以</p>\n<h1 id=\"作用域控制\"><a class=\"anchor\" href=\"#作用域控制\">#</a> 作用域控制</h1>\n<p>TypeScript 支持两种方式来控制我们的作用域：</p>\n<ol>\n<li>模块化：每个文件可以是一个独立的模块，支持 ES Module，也支持 CommonJS；</li>\n<li>命名空间：通过 <code>namespace</code>  来声明一个命名空间</li>\n</ol>\n<h2 id=\"模块化开发\"><a class=\"anchor\" href=\"#模块化开发\">#</a> 模块化开发</h2>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">+</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span>num1<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> num2<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">return</span> num1 <span class=\"token operator\">-</span> num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"命名空间-namespace\"><a class=\"anchor\" href=\"#命名空间-namespace\">#</a> 命名空间 namespace</h2>\n<p>命名空间在 TypeScript 早期时，称之为内部模块，主要目的是将一个模块内部再进行作用域的划分，防止一些命名冲突的问题。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> Time <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>time<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"2022-02-22\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> Price <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>price<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"222.22\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"类型的查找\"><a class=\"anchor\" href=\"#类型的查找\">#</a> 类型的查找</h1>\n<p>之前我们所有的 typescript 中的类型，几乎都是我们自己编写的，但是我们也有用到一些其他的类型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> imageEl <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> HTMLImageElement<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>大家是否会奇怪，我们的 HTMLImageElement 类型来自哪里呢？甚至是 document 为什么可以有 getElementById 的方法呢？其实这里就涉及到 typescript 对类型的管理和查找规则了。</p>\n<ul>\n<li>\n<p>这里先介绍另外的一种 typescript 文件： <code>.d.ts</code>  文件<br />\n之前编写的 typescript 文件都是 .ts 文件，这些文件最终会输出 .js 文件，还有另外一种文件  <code>.d.ts</code>  文件，它是用来做类型的声明 ( <code>declare</code> )。 它仅仅用来做类型检测，告知 typescript 我们有哪些类型</p>\n</li>\n<li>\n<p>那么 typescript 会在哪里查找我们的类型声明呢？</p>\n</li>\n</ul>\n<ol>\n<li>内置类型声明</li>\n<li>外部定义类型声明</li>\n<li>自己定义类型声明</li>\n</ol>\n<h2 id=\"内置类型声明\"><a class=\"anchor\" href=\"#内置类型声明\">#</a> 内置类型声明</h2>\n<p>内置类型声明是 typescript 自带的、帮助我们内置了 JavaScript 运行时的一些标准化 API 的声明文件，包括比如 Math、Date 等内置类型，也包括 DOM API，比如 Window、Document 等。内置类型声明通常在我们安装 typescript 的环境中会带有的</p>\n<h2 id=\"外部定义类型声明\"><a class=\"anchor\" href=\"#外部定义类型声明\">#</a> 外部定义类型声明</h2>\n<p>外部类型声明通常是我们使用一些库（比如第三方库）时，需要的一些类型声明。这些库通常有两种类型声明方式：</p>\n<ol>\n<li>在自己库中进行类型声明（编写.d.ts 文件），比如 axios</li>\n<li>通过社区的一个公有库 DefinitelyTyped 存放类型声明文件</li>\n</ol>\n<h2 id=\"自己定义类型声明\"><a class=\"anchor\" href=\"#自己定义类型声明\">#</a> 自己定义类型声明</h2>\n<p>什么情况下需要自己来定义声明文件呢？</p>\n<ol>\n<li>情况一：我们使用的第三方库是一个纯的 JavaScript 库，没有对应的声明文件；比如 lodash</li>\n<li>情况二：我们给自己的代码中声明一些类型，方便在其他地方直接进行使用；</li>\n</ol>\n<h3 id=\"声明变量-函数-类\"><a class=\"anchor\" href=\"#声明变量-函数-类\">#</a> 声明变量 - 函数 - 类</h3>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> wName <span class=\"token operator\">=</span> <span class=\"token string\">\"coderwhy\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> wAge <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> wHeight <span class=\"token operator\">=</span> <span class=\"token number\">1.88</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">wFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wFoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">wBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wBar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> wName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> wAge<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">let</span> wHeight<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wFoo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wBar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"声明模块\"><a class=\"anchor\" href=\"#声明模块\">#</a> 声明模块</h3>\n<p>我们也可以声明模块，比如 lodash 模块默认不能使用的情况，可以自己来声明这个模块：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"lodash\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>args<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>声明模块的语法:  <code>declare module '模块名' &#123;&#125;</code> <br />\n 在声明模块的内部，我们可以通过 export 导出对应库的类、函数等</li>\n</ul>\n<h3 id=\"declare-文件\"><a class=\"anchor\" href=\"#declare-文件\">#</a> declare 文件</h3>\n<p>在某些情况下，我们也可以声明文件：</p>\n<ul>\n<li>比如在开发 vue 的过程中，默认是不识别我们的.vue 文件的，那么我们就需要对其进行文件的声明</li>\n<li>比如在开发中我们使用了 jpg 这类图片文件，默认 typescript 也是不支持的，也需要对其进行声明</li>\n</ul>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">declare</span> modele <span class=\"token string\">'*.vue'</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>DefineComponent<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> component<span class=\"token operator\">:</span>DefineComponent</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> component</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">declare</span> modele <span class=\"token string\">'*.jpg'</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> src<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> src</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"declare-命名空间\"><a class=\"anchor\" href=\"#declare-命名空间\">#</a> declare 命名空间</h3>\n<p>比如我们在 index.html 中直接引入了 jQuery, 我们可以进行命名空间的声明：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">declare</span> <span class=\"token keyword\">namespace</span> $ <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span>settings<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 main.ts 中就可以使用了：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  url<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">success</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"装饰器\"><a class=\"anchor\" href=\"#装饰器\">#</a> 装饰器</h1>\n<ul>\n<li>如果要使用装饰器，必须在 tsconfig.json 中进行配置： <code>&quot;experimentalDecorators&quot;:true</code></li>\n</ul>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span>target<span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>userName <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">fun1</span></span>  <span class=\"token comment\">// 等同于 fun1 (Person1)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>clsaa <span class=\"token operator\">=</span> Person1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>userName<span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "TS"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/express/",
            "url": "https://eucli.top/2023/09/29/express/",
            "title": "express",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h2 id=\"express-介绍\"><a class=\"anchor\" href=\"#express-介绍\">#</a> express 介绍</h2>\n<blockquote>\n<p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXhwcmVzc2pzLmNvbS5jbi8=\">https://www.expressjs.com.cn/</span></p>\n</blockquote>\n<p>简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用 (HTTP 服务)</p>\n<h2 id=\"express-使用\"><a class=\"anchor\" href=\"#express-使用\">#</a> express 使用</h2>\n<h3 id=\"express-下载\"><a class=\"anchor\" href=\"#express-下载\">#</a> express 下载</h3>\n<p>express 本身是一个 npm 包，所以可以通过 npm 安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> i express</pre></td></tr></table></figure><h3 id=\"express-初体验\"><a class=\"anchor\" href=\"#express-初体验\">#</a> express 初体验</h3>\n<p>大家可以按照这个步骤进行操作：</p>\n<ol>\n<li>创建 JS 文件，键入如下代码</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 导入 express</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 创建应用对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//3. 创建路由规则</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello express server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//4. 监听端口 启动服务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动, 端口监听为 3000...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>命令行下执行该脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>. <span class=\"token function\">node</span> <span class=\"token operator\">&lt;</span>文件名<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>nodemon <span class=\"token operator\">&lt;</span>文件名<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>然后在浏览器就可以访问 <span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMTozMDAwL2hvbWU=\">http://127.0.0.1:3000/home</span> 👌</p>\n</li>\n</ol>\n<h2 id=\"express-路由\"><a class=\"anchor\" href=\"#express-路由\">#</a> express 路由</h2>\n<h3 id=\"什么是路由\"><a class=\"anchor\" href=\"#什么是路由\">#</a> 什么是路由</h3>\n<blockquote>\n<p>官方定义： &lt;span style=&quot;color:red&quot;&gt; 路由确定了应用程序如何响应客户端对 <code>特定端点</code> 的请求 &lt;/span&gt;</p>\n</blockquote>\n<h3 id=\"路由的使用\"><a class=\"anchor\" href=\"#路由的使用\">#</a> 路由的使用</h3>\n<p>一个路由的组成有  <code>请求方法</code> ，  <code>路径</code>  和  <code>回调函数</code>  组成</p>\n<p>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>method<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path，callback<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>代码示例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 express</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建应用对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建 get 路由</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"网站首页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 首页路由</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我才是真正的首页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 创建 post 路由</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"登录成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 匹配所有的请求方法</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/search\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1 秒钟为您找到相关结果约 100,000,000 个\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 自定义 404 路由</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 监听端口 启动服务</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务已经启动, 端口监听为 3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"获取请求参数\"><a class=\"anchor\" href=\"#获取请求参数\">#</a> 获取请求参数</h3>\n<p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 express</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 创建应用对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 获取请求的路由规则</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/request\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>httpVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 2. express 独有的获取报文的方式</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 获取路径</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">// 获取查询字符串</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 『相对重要』对象形式返回所有的查询字符串</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 获取 ip</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>ip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 获取指定的请求头</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"host\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请求报文的获取\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 启动服务</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"启动成功....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"获取路由参数\"><a class=\"anchor\" href=\"#获取路由参数\">#</a> 获取路由参数</h3>\n<p>路由参数指的是 &lt;span style=&quot;color:red&quot;&gt;URL 路径中的参数（数据）&lt;/span&gt;<br />\n 前端根据路由参数不同显示不同的商品</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/:id.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//`:id` 为占位符，起什么名字都可以</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"商品详情, 商品 id 为\"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 与占位符名称保持一致</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"express-响应设置\"><a class=\"anchor\" href=\"#express-响应设置\">#</a> express 响应设置</h2>\n<p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取请求的路由规则</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/response\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  res<span class=\"token punctuation\">.</span>statusCode <span class=\"token operator\">=</span> <span class=\"token number\">404</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  res<span class=\"token punctuation\">.</span>statusMessage <span class=\"token operator\">=</span> <span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"响应体\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">//2. express 的响应方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置响应状态码</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置响应头</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"中文响应不乱码\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置响应体</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 连贯操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"yyy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好朋友\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">//3. 其他响应</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://atguigu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">download</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./package.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下载响应</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 响应 JSON</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">sendFile</span><span class=\"token punctuation\">(</span>__dirname <span class=\"token operator\">+</span> <span class=\"token string\">\"/home.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 响应文件内容</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"express-中间件\"><a class=\"anchor\" href=\"#express-中间件\">#</a> express 中间件</h2>\n<h3 id=\"什么是中间件\"><a class=\"anchor\" href=\"#什么是中间件\">#</a> 什么是中间件</h3>\n<p><code>中间件（Middleware）本质是一个回调函数</code></p>\n<p><code>中间件函数</code>  可以像路由回调一样访问  <code>请求对象（request）</code>  ，  <code>响应对象（response）</code></p>\n<h3 id=\"中间件的作用\"><a class=\"anchor\" href=\"#中间件的作用\">#</a> 中间件的作用</h3>\n<p><code>中间件的作用</code>  就是  <code>使用函数封装公共操作，简化代码</code></p>\n<h3 id=\"中间件的类型\"><a class=\"anchor\" href=\"#中间件的类型\">#</a> 中间件的类型</h3>\n<p>全局中间件<br />\n路由中间件</p>\n<h4 id=\"定义全局中间件\"><a class=\"anchor\" href=\"#定义全局中间件\">#</a> 定义全局中间件</h4>\n<p><code>每一个请求</code>  到达服务端之后  <code>都会执行全局中间件函数</code></p>\n<p>声明中间件函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">recordMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 实现功能代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//.....</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 执行 next 函数 (当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用 next)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/34b8a3daffba5b366afb6495e4808b12de732403.jpg\" alt=\"\" /></p>\n<p>应用中间件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>recordMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>声明时可以直接将匿名函数传递给  <code>use</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"定义第一个中间件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"多个全局中间件\"><a class=\"anchor\" href=\"#多个全局中间件\">#</a> 多个全局中间件</h4>\n<p>express 允许使用 app.use () 定义多个全局中间件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"定义第一个中间件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"定义第二个中间件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"定义路由中间件\"><a class=\"anchor\" href=\"#定义路由中间件\">#</a> 定义路由中间件</h4>\n<p>如果 &lt;span style=&quot;color:red&quot;&gt; 只需要对某一些路由进行功能封装 &lt;/span&gt;，则就需要路由中间件</p>\n<p>调用格式如下：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">中间件函数</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/路径\"</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">中间件函数1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">中间件函数2</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"静态资源中间件\"><a class=\"anchor\" href=\"#静态资源中间件\">#</a> 静态资源中间件</h3>\n<p>express 内置处理静态资源的中间件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 express 框架</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 静态资源中间件的设置，将当前文件夹下的 public 目录作为网站的根目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当然这个目录中都是一些静态资源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 如果访问的内容经常变化，还是需要设置路由</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 但是，在这里有一个问题，如果 public 目录下有 index.html 文件，单独也有 index.html 的路由</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 则谁书写在前，优先执行谁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/index.html\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  respsonse<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 监听端口</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3000 端口启动....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>注意事项:</p>\n<ol>\n<li>index.html 文件为默认打开的资源</li>\n<li>如果静态资源与路由规则同时匹配，谁先匹配谁就响应</li>\n<li>路由响应动态资源，静态资源中间件响应静态资源</li>\n</ol>\n</blockquote>\n<h3 id=\"获取请求体数据-body-parser\"><a class=\"anchor\" href=\"#获取请求体数据-body-parser\">#</a> 获取请求体数据 body-parser</h3>\n<p>express 可以使用  <code>body-parser</code>  包处理请求体</p>\n<p>第一步：安装</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i body-parser</pre></td></tr></table></figure><p>第二步：导入 body-parser 包</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> bodyParser <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"body-parser\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第三步：获取中间件函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 处理 querystring 格式的请求体</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> urlParser <span class=\"token operator\">=</span> bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">extended</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 处理 JSON 格式的请求体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> jsonParser <span class=\"token operator\">=</span> bodyParser<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>第四步：设置路由中间件，然后使用  <code>request.body</code>  来获取请求体数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/login\"</span><span class=\"token punctuation\">,</span> urlParser<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 获取请求体数据</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//console.log(request.body);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 用户名</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 密码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>userpass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取请求体数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取到的请求体数据：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>Object<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> prototype<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">userpass</span><span class=\"token operator\">:</span> <span class=\"token string\">'123456'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>注意:</strong> 现在你已经可以抛弃 body-parser 模块，因为 Express 自从 4.16.0 版本开始，内置了 body 解析</p>\n<p><strong>使用方法:</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 解析 JSON 格式的请求体的中间件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 解析 querystring 格式请求体的中间件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">urlencoded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">extended</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"防盗链\"><a class=\"anchor\" href=\"#防盗链\">#</a> 防盗链</h2>\n<p>只能用规定的域名请求资源，不然会响应 404</p>\n<h3 id=\"防盗链实践\"><a class=\"anchor\" href=\"#防盗链实践\">#</a> 防盗链实践</h3>\n<p>只允许 127.0.0.1 的域名获取图片资源</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 express 框架</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建服务对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 声明中间件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 检测请求头中的 refer 是否为 127.0.1.1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>refer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 获取 refer</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> refer <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"refer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 实例化</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">let</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">URL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 获取 hostname</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> hostname <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 判断</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hostname <span class=\"token operator\">!==</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 响应 404</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">404</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>404 Not Found&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 资源中间件设置</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./public\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 监听端口</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3000 端口启动....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"router\"><a class=\"anchor\" href=\"#router\">#</a> Router</h2>\n<h3 id=\"什么是-router\"><a class=\"anchor\" href=\"#什么是-router\">#</a> 什么是 Router</h3>\n<p>express 中的 Router 是一个完整的中间件和路由系统，可以看做是一个小型的 app 对象。</p>\n<h3 id=\"router-作用\"><a class=\"anchor\" href=\"#router-作用\">#</a> Router 作用</h3>\n<p>对路由进行模块化，更好的管理路由</p>\n<h3 id=\"router-使用\"><a class=\"anchor\" href=\"#router-使用\">#</a> Router 使用</h3>\n<p>创建独立的 JS 文件（homeRouter.js）</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 导入 express</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2. 创建路由器对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">Router</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//3. 在 router 对象身上添加路由</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/cart\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"购物车\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//4. 暴露</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>主文件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//5. 引入子路由文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> homeRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./routes/homeRouter\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//6. 设置和使用中间件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>homeRouter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3000 端口启动....\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"ejs-模板引擎\"><a class=\"anchor\" href=\"#ejs-模板引擎\">#</a> EJS 模板引擎</h2>\n<h3 id=\"什么是模板引擎\"><a class=\"anchor\" href=\"#什么是模板引擎\">#</a> 什么是模板引擎</h3>\n<p>模板引擎是分离 &lt;span style=&quot;color:red&quot;&gt; 用户界面 (html) 和业务数据 (js)&lt;/span&gt; 的一种技术。如 ejs、pug 等</p>\n<h3 id=\"什么是-ejs\"><a class=\"anchor\" href=\"#什么是-ejs\">#</a> 什么是 EJS</h3>\n<p>EJS 是一个高效的 Javascript 的模板引擎<br />\n官网: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lanMuY28v\">https://ejs.co/</span><br />\n 中文站： <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lanMuYm9vdGNzcy5jb20v\">https://ejs.bootcss.com/</span></p>\n<h3 id=\"ejs-初体验\"><a class=\"anchor\" href=\"#ejs-初体验\">#</a> EJS 初体验</h3>\n<p>下载安装 EJS</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i ejs <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><p>代码示例</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 引入 ejs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> ejs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//2. 定义数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> person <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'李四'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'王二麻子'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//3.ejs 解析模板返回结构</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//&lt;%= %> 是 ejs 解析内容的标记，作用是输出当前表达式的执行结构</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//\"&lt;%= %>\" 可以直接输出变量或表达式的值，变量或表达式的值将作为一个字符串在浏览器中输出。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> html <span class=\"token operator\">=</span> ejs<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>‘<span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">></span>’<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">person</span><span class=\"token operator\">:</span>person<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//4. 输出结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>命令行下运行</p>\n<h3 id=\"ejs-常用语法\"><a class=\"anchor\" href=\"#ejs-常用语法\">#</a> EJS 常用语法</h3>\n<p>执行 JS 代码</p>\n<figure class=\"highlight ejs\"><figcaption data-lang=\"EJS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%</span><span class=\"token language-javascript\"> code </span><span class=\"token delimiter punctuation\">%></span></span></pre></td></tr></table></figure><p>输出转义的数据到模板上</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">%=</span> code <span class=\"token operator\">%</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>输出非转义的数据到模板上</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">%</span><span class=\"token operator\">-</span> code <span class=\"token operator\">%</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"在-express-中使用-ejs\"><a class=\"anchor\" href=\"#在-express-中使用-ejs\">#</a> 在 express 中使用 ejs</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入 express</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"express\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建应用对象</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 1. 设置模板引擎</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"view engine\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ejs\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pug  twing</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2. 设置模板文件的存放位置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 模板文件：具有模板语法内容的文件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"views\"</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"./views\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 创建路由</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/home\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// 3. render 响应</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//res.render (' 模板的文件名 ',' 数据 ')</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">let</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"尚硅谷 - 让天下没有难学的技术\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"home\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> title <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 4. 创建模板文件</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 如下面文件 views/home.ejs</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 监听端口，启动服务</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器已启动~~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>views/home.ejs</code></p>\n<figure class=\"highlight ejs\"><figcaption data-lang=\"EJS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Document<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token ejs language-ejs\"><span class=\"token delimiter punctuation\">&lt;%=</span><span class=\"token language-javascript\">title </span><span class=\"token delimiter punctuation\">%></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"express-generator\"><a class=\"anchor\" href=\"#express-generator\">#</a> express-generator</h2>\n<p>使用应用程序生成器工具 ， 快速创建应用程序框架。express-generator<br />\n 对于早期的 Node 版本，请将应用程序生成器安装为全局 npm 包，然后启动它：</p>\n<pre><code>$ npm install -g express-generator\n$ express\n</code></pre>\n<p>显示带有以下选项的命令选项：-h</p>\n<pre><code>$ express -h\n\n  Usage: express [options] [dir]\n\n  Options:\n\n    -h, --help          output usage information\n        --version       output the version number\n    -e, --ejs           add ejs engine support\n        --hbs           add handlebars engine support\n        --pug           add pug engine support\n    -H, --hogan         add hogan.js engine support\n        --no-view       generate without view engine\n    -v, --view &lt;engine&gt; add view &lt;engine&gt; support (ejs|hbs|hjs|jade|pug|twig|vash) (defaults to jade)\n    -c, --css &lt;engine&gt;  add stylesheet &lt;engine&gt; support (less|stylus|compass|sass) (defaults to plain css)\n        --git           add .gitignore\n    -f, --force         force on non-empty directory\n</code></pre>\n<p>例如，下面创建一个名为 myapp 的快速应用。应用将在当前工作目录中名为 myapp 的文件夹中创建，视图引擎将设置为 Pug：</p>\n<pre><code>$ express --view=pug myapp\n\n   create : myapp\n   create : myapp/package.json\n   create : myapp/app.js\n   create : myapp/public\n   create : myapp/public/javascripts\n   create : myapp/public/images\n   create : myapp/routes\n   create : myapp/routes/index.js\n   create : myapp/routes/users.js\n   create : myapp/public/stylesheets\n   create : myapp/public/stylesheets/style.css\n   create : myapp/views\n   create : myapp/views/index.pug\n   create : myapp/views/layout.pug\n   create : myapp/views/error.pug\n   create : myapp/bin\n   create : myapp/bin/www\n</code></pre>\n<h2 id=\"查看文件上传报文\"><a class=\"anchor\" href=\"#查看文件上传报文\">#</a> 查看文件上传报文</h2>\n<h2 id=\"案例实践-记账本\"><a class=\"anchor\" href=\"#案例实践-记账本\">#</a> 案例实践 - 记账本</h2>\n",
            "tags": [
                "express"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/mongoDB/",
            "url": "https://eucli.top/2023/09/29/mongoDB/",
            "title": "MongoDB",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h1 id=\"mongodb\"><a class=\"anchor\" href=\"#mongodb\">#</a> MongoDB</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<h3 id=\"mongodb-是什么\"><a class=\"anchor\" href=\"#mongodb-是什么\">#</a> Mongodb 是什么</h3>\n<blockquote>\n<p>MongoDB 是一个基于分布式文件存储的数据库，官方地址 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20v\">https://www.mongodb.com/</span></p>\n</blockquote>\n<h3 id=\"数据库是什么\"><a class=\"anchor\" href=\"#数据库是什么\">#</a> 数据库是什么</h3>\n<p>数据库（DataBase）是按照数据结构来组织、存储和管理数据的  <code>应用程序</code></p>\n<h3 id=\"数据库的作用\"><a class=\"anchor\" href=\"#数据库的作用\">#</a> 数据库的作用</h3>\n<p>数据库的主要作用就是  <code>管理数据</code> ，对数据进行  <code>增（c）、删（d）、改（u）、查（r）</code></p>\n<h3 id=\"数据库管理数据的特点\"><a class=\"anchor\" href=\"#数据库管理数据的特点\">#</a> 数据库管理数据的特点</h3>\n<p>相比于纯文件管理数据，数据库管理数据有如下特点：</p>\n<ol>\n<li>速度更快</li>\n<li>扩展性更强</li>\n<li>安全性更强</li>\n</ol>\n<h3 id=\"为什么选择-mongodb\"><a class=\"anchor\" href=\"#为什么选择-mongodb\">#</a> 为什么选择 Mongodb</h3>\n<p>操作语法与 JavaScript 类似，容易上手，学习成本低</p>\n<h2 id=\"核心概念\"><a class=\"anchor\" href=\"#核心概念\">#</a> 核心概念</h2>\n<p>Mongodb 中有三个重要概念需要掌握</p>\n<ul>\n<li>\n<p>数据库（database） 数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合</p>\n</li>\n<li>\n<p>集合（collection） 集合类似于 JS 中的数组，在集合中可以存放很多文档</p>\n</li>\n<li>\n<p>文档（document） 文档是数据库中的最小单位，类似于 JS 中的对象</p>\n</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/f9e871ef89956cc15ef0e89aa7ac8e7839da10d6.jpg\" alt=\"\" /></p>\n<p>JSON 文件示例：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"accounts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3-YLju5f3\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"买电脑\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2023-02-08\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"account\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5500\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"remarks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"为了上网课\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"3-YLju5f4\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"请女朋友吃饭\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2023-02-08\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"-1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token property\">\"account\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"214\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token property\">\"remarks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"情人节聚餐\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mRQiD4s3K\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"发工资\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token property\">\"time\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2023-02-19\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token property\">\"account\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"4396\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token property\">\"remarks\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"终于发工资啦!~~\"</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lisi\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"wangwu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>大家可以通过 JSON 文件来理解 Mongodb 中的概念</p>\n<ul>\n<li>\n<p>一个  <code>JSON 文件</code>  好比是一个  <code>数据库</code> ，一个 Mongodb 服务下可以有 N 个数据库</p>\n</li>\n<li>\n<p>JSON 文件中的  <code>一级属性的数组值</code>  好比是  <code>集合</code></p>\n</li>\n<li>\n<p>数组中的对象好比是  <code>文档</code></p>\n</li>\n<li>\n<p>对象中的属性有时也称之为  <code>字段</code></p>\n</li>\n</ul>\n<blockquote>\n<p>一般情况下</p>\n<ul>\n<li>一个项目使用一个数据库</li>\n<li>一个集合会存储同一种类型的数据</li>\n</ul>\n</blockquote>\n<h2 id=\"下载安装与启动\"><a class=\"anchor\" href=\"#下载安装与启动\">#</a> 下载安装与启动</h2>\n<p>下载地址： <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9uZ29kYi5jb20vdHJ5L2Rvd25sb2FkL2NvbW11bml0eQ==\">https://www.mongodb.com/try/download/community</span></p>\n<p>建议选择  <code>zip</code>  类型， 通用性更强</p>\n<p>配置步骤如下:</p>\n<p>​ 1&gt; 将压缩包移动到  <code>C:\\Program Files</code>  下，然后解压</p>\n<p>​ 2&gt; 创建  <code>C:\\data\\db</code>  目录，mongodb 会将数据默认保存在这个文件夹</p>\n<p>​ 3&gt; 以 mongodb 中 bin 目录作为工作目录，启动命令行</p>\n<p>​ 4&gt; 运行命令  <code>mongod</code></p>\n<p>看到最后的  <code>waiting for connections</code>  则表明服务  <code>已经启动成功</code></p>\n<p>然后可以使用  <code>mongo</code>  命令连接本机的 mongodb 服务</p>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li>为了方便后续方便使用 mongod 命令，可以将 bin 目录配置到环境变量 Path 中</li>\n<li><code>千万不要选中服务端窗口的内容</code> ，选中会停止服务，可以  <code>敲回车</code>  取消选中</li>\n</ul>\n</blockquote>\n<p>配置 windows 服务: <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2h1emhpZHVvLmNvbS9BL0UzNXBBRTZZZHYv\">https://www.shuzhiduo.com/A/E35pAE6Ydv/</span></p>\n<p>修改 <code>mongodb</code>  数据库位置</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/image-20230327010148369.png\" alt=\"\" /></p>\n<h2 id=\"命令行交互\"><a class=\"anchor\" href=\"#命令行交互\">#</a> 命令行交互</h2>\n<p>命令行交互一般是学习数据库的第一步，不过这些命令在后续用的比较少，所以大家了解即可</p>\n<h3 id=\"数据库命令\"><a class=\"anchor\" href=\"#数据库命令\">#</a> 数据库命令</h3>\n<ol>\n<li>\n<p>显示所有的数据库</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> dbs</pre></td></tr></table></figure></li>\n<li>\n<p>切换到指定的数据库，如果数据库不存在会自动创建数据库</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">use</span> 数据库名</pre></td></tr></table></figure></li>\n<li>\n<p>显示当前所在的数据库</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db</pre></td></tr></table></figure></li>\n<li>\n<p>删除当前数据库</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">use</span> 库名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db<span class=\"token punctuation\">.</span>dropDatabase<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"集合命令\"><a class=\"anchor\" href=\"#集合命令\">#</a> 集合命令</h3>\n<ol>\n<li>\n<p>创建集合</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>createCollection<span class=\"token punctuation\">(</span><span class=\"token string\">'集合名称'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>显示当前数据库中的所有集合</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">show</span> collections</pre></td></tr></table></figure></li>\n<li>\n<p>删除某个集合</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>集合名<span class=\"token punctuation\">.</span><span class=\"token keyword\">drop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>重命名集合</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>集合名<span class=\"token punctuation\">.</span>renameCollection<span class=\"token punctuation\">(</span><span class=\"token string\">'newName'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"文档命令\"><a class=\"anchor\" href=\"#文档命令\">#</a> 文档命令</h3>\n<ol>\n<li>\n<p>插入文档</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>集合名<span class=\"token punctuation\">.</span><span class=\"token keyword\">insert</span><span class=\"token punctuation\">(</span>文档对象<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>查询文档</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>集合名<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>查询条件<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;span style=&quot;color:red&quot;&gt;_id 是 mongodb 自动生成的唯一编号，用来唯一标识文档 &lt;/span&gt;</p>\n</li>\n<li>\n<p>更新文档</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>集合名<span class=\"token punctuation\">.</span><span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span>查询条件<span class=\"token punctuation\">,</span>新的文档<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>db<span class=\"token punctuation\">.</span>集合名<span class=\"token punctuation\">.</span><span class=\"token keyword\">update</span><span class=\"token punctuation\">(</span>&#123;name:<span class=\"token string\">'张三'</span>&#125;<span class=\"token punctuation\">,</span>&#123;$<span class=\"token keyword\">set</span>:&#123;age:<span class=\"token number\">19</span>&#125;&#125;<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除文档</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>集合名<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>查询条件<span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h3>\n<h4 id=\"新增\"><a class=\"anchor\" href=\"#新增\">#</a> 新增</h4>\n<ul>\n<li>用户注册</li>\n<li>发布视频</li>\n<li>发布商品</li>\n<li>发朋友圈</li>\n<li>发评论</li>\n<li>发微博</li>\n<li>发弹幕</li>\n<li>.......</li>\n</ul>\n<h4 id=\"删除\"><a class=\"anchor\" href=\"#删除\">#</a> 删除</h4>\n<ul>\n<li>\n<p>删除评论</p>\n</li>\n<li>\n<p>删除商品</p>\n</li>\n<li>\n<p>删除文章</p>\n</li>\n<li>\n<p>删除视频</p>\n</li>\n<li>\n<p>删除微博</p>\n</li>\n<li>\n<p>......</p>\n</li>\n</ul>\n<h4 id=\"更新\"><a class=\"anchor\" href=\"#更新\">#</a> 更新</h4>\n<ul>\n<li>更新个人信息</li>\n<li>修改商品价格</li>\n<li>修改文章内容</li>\n<li>......</li>\n</ul>\n<h4 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h4>\n<ul>\n<li>商品列表</li>\n<li>视频列表</li>\n<li>朋友圈列表</li>\n<li>微博列表</li>\n<li>搜索功能</li>\n<li>......</li>\n</ul>\n<h2 id=\"mongoose\"><a class=\"anchor\" href=\"#mongoose\">#</a> Mongoose</h2>\n<h3 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h3>\n<p>Mongoose 是一个对象文档模型库，官网 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tb25nb29zZWpzLm5ldC8=\">http://www.mongoosejs.net/</span></p>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h3>\n<p>方便使用代码操作 mongodb 数据库</p>\n<h3 id=\"使用流程\"><a class=\"anchor\" href=\"#使用流程\">#</a> 使用流程</h3>\n<blockquote>\n<p>注意，最新的 mongoose 已经用 promise 了</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 安装 mongoose :npm i mongoose</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\">//2. 导入 mongoose</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token comment\">//3. 连接数据库   ' 协议名称://ip 地址 / 端口号 (默认端口 27017)/ 数据库名称 ' 如果这个数据库不存在到时候会自动创建数据库</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongodb://127.0.0.1:27017/bilibili'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token comment\">//4. 设置连接回调</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token comment\">// 连接成功   on 可以替换为 once： 一次，事件回调函数只执行一次</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'open'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接成功'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> \t<span class=\"token comment\">//5. 创建文档结构对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 设置集合中 文档的属性以及属性值得类型</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> \t<span class=\"token keyword\">let</span> BookSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> \t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> \t  <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 设置必填项，该属性必须不为空</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> \t\t<span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> \t\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> Number，</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token literal-property property\">is_hot</span><span class=\"token operator\">:</span>Boolean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span>Array<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">pub_time</span><span class=\"token operator\">:</span>Date</pre></td></tr><tr><td data-num=\"24\"></td><td><pre> \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> \t<span class=\"token comment\">//6. 创建文档模型对象  对文档操作的封装对象  mongoose 会使用集合名称的复数，创建集合</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> \t<span class=\"token keyword\">let</span> BookModel <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'book'</span><span class=\"token punctuation\">,</span> BookSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 括号里面 book 是集合，BookModel 是结构</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     <span class=\"token comment\">//7. 插入文档</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> \tBookModel<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> \t\t<span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'西游记'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> \t\t<span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">'吴承恩'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">19.9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token literal-property property\">is_hot</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'神魔'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'黑暗'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'社会'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token literal-property property\">pub_time</span><span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 新版本返回的是一个 promise，不能在里面用回调了</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 判断是否有错误</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> \t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 输出 data 对象  如果没有出错，则输出插入后的文档对象</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> \t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> \t\t<span class=\"token comment\">//8. 断开连接  关闭数据链接 (项目运行过程中，不会添加该代码)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> \t\tmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 连接出错</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接出错~~'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\">// 连接关闭</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'close'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'连接关闭'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"字段类型\"><a class=\"anchor\" href=\"#字段类型\">#</a> 字段类型</h3>\n<p>文档结构可选的常用字段类型列表</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>String</td>\n<td>字符串</td>\n</tr>\n<tr>\n<td>Number</td>\n<td>数字</td>\n</tr>\n<tr>\n<td>Boolean</td>\n<td>布尔值</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>数组，也可以使用  <code>[]</code>  来标识</td>\n</tr>\n<tr>\n<td>Date</td>\n<td>日期</td>\n</tr>\n<tr>\n<td>Buffer</td>\n<td>Buffer 对象</td>\n</tr>\n<tr>\n<td>Mixed</td>\n<td>任意类型，需要使用  <code>mongoose.Schema.Types.Mixed</code>  指定</td>\n</tr>\n<tr>\n<td>ObjectId</td>\n<td>对象 ID，需要使用  <code>mongoose.Schema.Types.ObjectId</code>  指定</td>\n</tr>\n<tr>\n<td>Decimal128</td>\n<td>高精度数字，需要使用  <code>mongoose.Schema.Types.Decimal128</code>  指定</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"字段值验证\"><a class=\"anchor\" href=\"#字段值验证\">#</a> 字段值验证</h3>\n<p>对文档属性的值进行校验，检查通过存入数据库，检查不通过则报错禁止插入数据库<br />\n Mongoose 有一些内建验证器，可以对字段值进行验证</p>\n<h4 id=\"必填项\"><a class=\"anchor\" href=\"#必填项\">#</a> 必填项</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t<span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 设置必填项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"默认值\"><a class=\"anchor\" href=\"#默认值\">#</a> 默认值</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> \t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'佚名'</span> <span class=\"token comment\">// 默认值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"枚举值\"><a class=\"anchor\" href=\"#枚举值\">#</a> 枚举值</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">gender</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">enum</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'女'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 设置的值必须是数组中的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"唯一值\"><a class=\"anchor\" href=\"#唯一值\">#</a> 唯一值</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">username</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t<span class=\"token literal-property property\">unique</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><blockquote>\n<p>unique 需要  <code>重建集合</code>  才能有效果</p>\n<p>永远不要相信用户的输入</p>\n</blockquote>\n<h3 id=\"curd\"><a class=\"anchor\" href=\"#curd\">#</a> CURD</h3>\n<p>数据库的基本操作包括四个，增加（create），删除（delete），修改（update），查（read）</p>\n<h4 id=\"增加\"><a class=\"anchor\" href=\"#增加\">#</a> 增加</h4>\n<p>插入一条</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">\"给我一首歌的时间\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jay\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 插入后的数据对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>批量插入</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//1. 引入 mongoose</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongoose\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//2. 链接 mongodb 数据库 connect 连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mongodb://127.0.0.1:27017/project\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//3. 设置连接的回调</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">//4. 声明文档结构</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">const</span> PhoneSchema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">//6. 创建模型对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">const</span> PhoneModel <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">,</span> PhoneSchema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  PhoneModel<span class=\"token punctuation\">.</span><span class=\"token function\">insertMany</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">\"华为\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"灰色\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">2399</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"电量大\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"屏幕大\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"信号好\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">\"小米\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token string\">\"白色\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">2099</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"电量大\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"屏幕大\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"信号好\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>      mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"删除-2\"><a class=\"anchor\" href=\"#删除-2\">#</a> 删除</h4>\n<p>删除一条数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//deleteOne () 函数第一个参数是删除条件，第二个参数是回调函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">deleteOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5dd65f32be6401035cb5b1ed\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span>；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>批量删除</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">deleteMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Jay\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"更新-2\"><a class=\"anchor\" href=\"#更新-2\">#</a> 更新</h4>\n<p>更新一条数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//updateOne () 函数第一个参数是更新条件，第二个参数是更新的内容，第三个参数是回调函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">updateOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"JJ Lin\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"林俊杰\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>批量更新数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">updateMany</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> 余华 <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">is_hot</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"查询-2\"><a class=\"anchor\" href=\"#查询-2\">#</a> 查询</h4>\n<p>查询一条数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"王力宏\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 根据 id 查询数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5dd662b5381fc316b44ce167\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>批量查询数据</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不加条件查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 加条件查询</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"王力宏\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"条件控制\"><a class=\"anchor\" href=\"#条件控制\">#</a> 条件控制</h3>\n<blockquote>\n<p>场景：查询的时候进行条件筛选</p>\n</blockquote>\n<h4 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h4>\n<p>在 mongodb 不能 &gt; &lt; &gt;= &lt;= !== 等运算符，需要使用替代符号</p>\n<ul>\n<li><code>&gt;</code>  使用  <code>$gt</code></li>\n<li><code>&lt;</code>  使用  <code>$lt</code></li>\n<li><code>=</code>  使用  <code>$gte</code></li>\n<li><code>&lt;=</code>  使用  <code>$lte</code></li>\n<li><code>!==</code>  使用  <code>$ne</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$gt</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id号比<span class=\"token number\">3</span>大的所有的记录<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 价格小于 20 的图书</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>BookModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$lt</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取失败~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"逻辑运算\"><a class=\"anchor\" href=\"#逻辑运算\">#</a> 逻辑运算</h4>\n<p><code>$or</code>  逻辑或的情况<br />\n // <code>$or:[]</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$or</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 曹雪芹 或者 余华的书</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BookModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$or</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"曹雪芹\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">author</span><span class=\"token operator\">:</span> <span class=\"token string\">\"余华\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取失败~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>$and</code>  逻辑与的情况</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$and</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$lt</span><span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$gt</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 价格大于 30 且 小于 70</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BookModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$and</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$gt</span><span class=\"token operator\">:</span> <span class=\"token number\">30</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">$lt</span><span class=\"token operator\">:</span> <span class=\"token number\">70</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取失败~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"正则匹配\"><a class=\"anchor\" href=\"#正则匹配\">#</a> 正则匹配</h4>\n<p>条件中可以直接使用 JS 的正则语法，通过正则可以进行模糊查询</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>db<span class=\"token punctuation\">.</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">imissyou</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>正则表达式，搜索书籍名称中带有 <span class=\"token string\">'三'</span> 的图书</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>BookModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">三</span><span class=\"token regex-delimiter\">/</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取失败~~~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      \t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>BookModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'三'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'读取失败~~~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      \t<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"个性化读取\"><a class=\"anchor\" href=\"#个性化读取\">#</a> 个性化读取</h3>\n<h4 id=\"字段筛选\"><a class=\"anchor\" href=\"#字段筛选\">#</a> 字段筛选</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//0: 不要的字段</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//1: 要的字段</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">_id</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"数据排序\"><a class=\"anchor\" href=\"#数据排序\">#</a> 数据排序</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//sort 排序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1: 升序</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//-1: 倒序</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">hot</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"数据截取\"><a class=\"anchor\" href=\"#数据截取\">#</a> 数据截取</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//skip 跳过   limit 限定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SongModel<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    mongoose<span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"mongoose-代码模块化\"><a class=\"anchor\" href=\"#mongoose-代码模块化\">#</a> mongoose 代码模块化</h2>\n<h2 id=\"图形化管理工具\"><a class=\"anchor\" href=\"#图形化管理工具\">#</a> 图形化管理工具</h2>\n<p>我们可以使用图形化的管理工具来对 Mongodb 进行交互，这里演示两个图形化工具</p>\n<ul>\n<li>\n<p>Robo 3T 免费 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1N0dWRpbzNUL3JvYm9tb25nby9yZWxlYXNlcw==\">https://github.com/Studio3T/robomongo/releases</span></p>\n</li>\n<li>\n<p>Navicat 收费 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWNhdC5jb20uY24v\">https://www.navicat.com.cn/</span></p>\n</li>\n</ul>\n",
            "tags": [
                "数据库"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/oj%E5%88%A4%E9%A2%98%E7%B3%BB%E7%BB%9F%E7%AE%80%E5%8E%86/",
            "url": "https://eucli.top/2023/09/29/oj%E5%88%A4%E9%A2%98%E7%B3%BB%E7%BB%9F%E7%AE%80%E5%8E%86/",
            "title": "oj判题系统简历",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h1 id=\"在线判题项目简历写法\"><a class=\"anchor\" href=\"#在线判题项目简历写法\">#</a> 在线判题项目简历写法</h1>\n<p>建议</p>\n<p>注意，以下简历写法仅供参考，根据你自己的简历丰富度、以及对于项目的理解情况有选择地去写。如果你自己还没有实现项目或者不理解，建议赶紧跟着鱼皮的教程把它弄懂，再写到简历上！</p>\n<p>此外，本项目系统设计的思路，设计模式、异步化、应用解耦的编程思想、Docker 和单体项目改造微服务的实践，其实是可以运用到你做的其他项目中的，可以把该项目的部分亮点和你之前的项目进行整合。</p>\n<p>专业技能</p>\n<p>●熟悉前端 Vue 3 开发，能够自定义通用的前端开发模板，包括 Vuex 状态管理、权限管理、布局切换、菜单生成等功能。</p>\n<p>●熟悉前端代码规范，并能够使用 ESLint + Prettier + TypeScript 等技术保证前端项目质量。</p>\n<p>●熟悉 Arco Design、ByteMD、 Monaco Editor 等组件的使用</p>\n<p>●能够使用 Vue-CLI 脚手架、openapi-typescript-codegen 代码生成器、VS Code、WebStorm IDE 等开发工具快速开发前端项目</p>\n<p>项目经历</p>\n<p>项目名称：XX OJ 在线判题系统</p>\n<p>建议自己想个有区分度的名字，其他名称参考：</p>\n<p>●XX 在线评测系统</p>\n<p>●XX 题目测评系统</p>\n<p>●XX 代码练习平台</p>\n<p>●XX 编程学习系统</p>\n<p>●XX OJ</p>\n<p>在线访问：xxx（建议自己部署一下，提供可访问的、简短的线上地址）</p>\n<p>GitHub：xxx（建议把项目放到代码仓库中，并且在主页文档里补充项目架构图等信息）</p>\n<p>项目介绍</p>\n<p>以下文字，括号里的内容表示可选项、或者鱼皮的备注，比如不熟悉前端的同学就不要写 Vue 等和前端相关的内容了</p>\n<p>精简版</p>\n<p>适合简历内容丰富的同学</p>\n<p>基于 Spring Cloud 微服务 + MQ + Docker（+ Vue 3 + Arco Design）的编程题目评测系统。系统能够根据管理员预设的题目用例对用户提交的代码进行执行和评测；系统中 自主实现的代码沙箱 可作为独立服务供其他开发者调用。</p>\n<p>详细版</p>\n<p>适合简历内容不多的同学</p>\n<p>基于 Spring Boot + Spring Cloud 微服务 + Docker（+ Vue 3 + Arco Design）的编程题目在线评测系统。</p>\n<p>在系统前台，管理员可以创建、管理题目；用户可以自由搜索题目、阅读题目、编写并提交代码。</p>\n<p>在系统后端，能够根据管理员设定的题目测试用例在 自主实现的代码沙箱 中对代码进行编译、运行、判断输出是否正确。</p>\n<p>其中，代码沙箱可以作为独立服务，提供给其他开发者使用。</p>\n<p>主要工作</p>\n<p>根据自己的方向选 6 个左右去写并适当调整文案，灵活一点。 强烈建议结合下面的扩展思路多完善下项目，增加一些区分度！</p>\n<p>前端</p>\n<p>1 基于 Vue3 + Arco Design 组件库，自主实现了在线做题、题目检索和管理、提交列表、用户登录等页面。</p>\n<p>2 使用 Vue-CLI 脚手架初始化项目，并自行开发了全局页面布局和通用前端项目模板，便于后续复用。</p>\n<p>3 使用 TypeScript + ESLint + Prettier + Husky 保证项目编码和提交规范，提高项目的质量。（虽然是由脚手架自动帮你整合了，但你要知道这些技术各自的作用）</p>\n<p>4 全局导航生成：基于 Vue Router 的路由配置文件自动生成导航菜单，并通过给路由的 meta 属性增加 hidden 字段实现集中控制页面的显隐。</p>\n<p>5 全局权限管理：通过给 Vue Router 路由的 meta 属性增加 access 字段来定义页面权限，然后通过 beforeEach 全局路由守卫集中校验用户进入页面的权限，并进一步将权限管理相关代码统一封装为 access.ts 模块，简化用户使用。</p>\n<p>6 全局状态管理：基于 Vuex 定义 User Module 实现了对登录用户的状态存储，并通过组合式 API（useStore）在页面中访问用户信息。</p>\n<p>7 前后端联调：使用 openapi-typescript-codegen 工具根据后端 Swagger 接口文档自动生成请求后端的代码，大幅提高开发效率。</p>\n<p>8 为提高前端开发效率，使用 IDEA 的 Live Templates 功能自定义了一套基础前端代码模板，能够通过快捷键高效生成代码。</p>\n<p>9 选用 ByteMD 开源 Markdown 文本编辑器组件，引入 gfm 插件（支持表格语法）并进一步自行封装了可复用的 Editor 和 Viewer，实现了题目内容及答案的编辑功能。</p>\n<p>10 基于 Webpack 整合了 Monaco Editor 开源代码编辑器组件，并进一步基于 ref 自行封装了可复用的 Editor 和 Viewer，实现了用户编写代码功能，支持多种语言的高亮。</p>\n<p>11 使用 Arco Design 的 Table 组件实现了题目检索页面，并通过自定义插槽将后端返回的 JSON 数据解析为美观的格式。</p>\n<p>后端</p>\n<p>1 系统架构：根据功能职责，将系统划分为负责核心业务的后端模块、负责校验结果的判题模块、负责编译执行代码的可复用代码沙箱。各模块相互独立，并通过 API 接口和分包的方式实现协作。</p>\n<p>2 库表设计：根据业务流程自主设计用户表、题目表、题目提交表，并通过给题目表添加 userId 索引提升检索性能。（感兴趣的同学可以自己测试一下性能的提高比例）</p>\n<p>3 自主设计判题机模块的架构，定义了代码沙箱的抽象调用接口和多种实现类（比如远程 / 第三方代码沙箱），并通过 静态工厂模式 + Spring 配置化 的方式实现了对多种代码沙箱的灵活调用。</p>\n<p>4 使用 代理模式 对代码沙箱接口进行能力增强，统一实现了对代码沙箱调用前后的日志记录，减少重复代码。</p>\n<p>5 由于判题逻辑复杂、且不同题目的判题算法可能不同（比如 Java 题目额外增加空间限制），选用 策略模式 代替 if else 独立封装了不同语言的判题算法，提高系统的可维护性。</p>\n<p>6 使用 Java Runtime 对象的 exec 方法实现了对 Java 程序的编译和执行，并通过 Process 类 的输入流获取执行结果，实现了 Java 原生代码沙箱。</p>\n<p>7 通过编写 Java 脚本自测代码沙箱，模拟了多种程序异常情况并针对性解决，如使用守护线程 + Thread.sleep 等待机制实现了对进程的超时中断、使用 JVM -Xmx 参数限制用户程序占用的最大堆内存、使用 黑白名单 + 字典树 的方式实现了对敏感操作的限制。（选 1 - 2 种即可）</p>\n<p>8 使用 Java 安全管理器和自定义的 Security Manager 对用户提交的代码进行权限控制，比如关闭写文件、执行文件权限，进一步提升了代码沙箱的安全性。</p>\n<p>9 为保证沙箱宿主机的稳定性，选用 Docker 隔离用户代码，使用 Docker Java 库创建容器隔离执行代码，并通过 tty 和 Docker 进行传参交互，从而实现了更安全的代码沙箱。</p>\n<p>10 使用 VMware Workstation 虚拟机软件搭建 Ubuntu Linux + Docker 环境，并通过 JetBrains Client 连接虚拟机进行实时 远程开发 ，提高了开发效率。</p>\n<p>11 为提高 Docker 代码沙箱的安全性，通过 HostConfig 限制了容器的内存限制和网络隔离，并通过设置容器执行超时时间解决资源未及时释放的问题。</p>\n<p>12 由于 Java 原生和 Docker 代码沙箱的实现流程完全一致（编译、执行、获取输出、清理），选用模板方法模式定义了一套标准的流程并允许子类自行扩展部分流程，提高代码一致性并大幅简化冗余代码。</p>\n<p>13 为防止用户恶意请求代码沙箱服务，（采用 API 签名认证的方式，）给调用方分配签名密钥，并通过校验请求头中的密钥保证了 API 调用安全。</p>\n<p>14 为保证项目各模块的稳定性，选用 Spring Cloud Alibaba 重构单体项目，（使用 Redis 分布式 Session 存储登录用户信息，并将项目）划分为用户服务、题目服务、判题服务、公共模块。</p>\n<p>15 使用阿里云原生脚手架初始化微服务项目，并结合 Maven 子父模块的配置，保证了微服务各模块依赖的版本一致性，避免依赖冲突。</p>\n<p>16 通过工具（JetBrains 的 Find Usage 功能 + 表格整理）梳理微服务间的调用关系，并通过 Nacos + OpenFeign 实现了各模块之间的相互调用，如判题服务调用题目服务来获取题目信息。</p>\n<p>17 使用 Spring Cloud Gateway 对各服务接口进行聚合和路由，保护服务的同时简化了客户端的调用（前端不用根据业务请求不同端口的服务），并通过自定义 CorsWebFilter Bean 全局解决了跨域问题。</p>\n<p>18 使用 Knife4j Gateway 在网关层实现了对各服务 Swagger 接口文档的统一聚合，无需通过切换地址查看各服务的文档。</p>\n<p>19 为保护内部服务接口，给接口路径统一设置 inner 前缀，并通过在网关自定义 GlobalFilter（全局请求拦截器）实现对内部请求的检测和拦截，集中解决了权限校验问题。</p>\n<p>20 为防止判题操作执行时间较长，系统选用异步的方式，在题目服务中将用户提交 id 发送给 RabbitMQ 消息队列，并通过 Direct 交换机转发给判题队列，由判题服务进行消费，异步更新提交状态。相比于同步，响应时长由 xx 秒减少至 xx 秒，且系统 qps 提升了 xx%（需要自己使用 JMeter 等工具进行测试）。</p>\n<p>21 基于自己二次开发的 Spring Boot 初始化模板 + MyBatis X 插件，快速生成图表、用户数据的增删改查。</p>\n<p>通用</p>\n<p>1 在系统设计阶段，通过绘制时序图、功能模块图、流程图、分层架构图来帮助自己梳理业务流程。</p>\n<p>扩展思路</p>\n<p>需要大家自行实现</p>\n<p>前端</p>\n<p>1 增强前端通用模板的能力，支持在路由文件中配置多套布局</p>\n<p>2 增强前端通用模板的能力，支持自动生成包含嵌套路由的多级导航栏</p>\n<p>3 优化题目管理页面，将 json 配置分为多列更美观地展示</p>\n<p>4 题目提交列表页面增加一个刷新、定时自动刷新的按钮，保证获取到题目提交的最新状态（前端轮询）</p>\n<p>5 增加对用户个人提交题目的管理页面</p>\n<p>6 增加对题目提交情况的统计分析页面，给管理员使用</p>\n<p>7 使用 Monaco Editor 的 diff editor 功能来对比用户代码和标准答案代码的区别</p>\n<p>后端</p>\n<p>1</p>\n<p>把微服务项目部署上线，参考教程：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9iY2RoLnl1cXVlLmNvbS9zdGFmZi13cHhmaWYvcmVzb3VyY2Uvd3owbHpxaGZ2NzRuZ2NmZg==\">如何快速部署微服务项目？保姆级教程</span></p>\n<p>2 增加题目的通过数、提交数统计，计算通过率</p>\n<p>3 限制代码沙箱中最多允许同时启动的 Docker 容器数，防止系统过载（甚至还可以用池化技术复用 Docker 容器）</p>\n<p>4 更多类型的代码沙箱实现，比如使用 AI 进行判题？使用第三方服务（judge0 api）进行判题？</p>\n<p>5 反向压力：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80MDQ5OTM3NTMlRUYlQkMlOEMlRTklODAlOUElRTglQkYlODclRTglQjAlODMlRTclOTQlQTglRTclOUElODQlRTYlOUMlOEQlRTUlOEElQTElRTclOEElQjYlRTYlODAlODElRTYlOUQlQTUlRTklODAlODklRTYlOEIlQTklRTUlQkQlOTMlRTUlODklOEQlRTclQjMlQkIlRTclQkIlOUYlRTclOUElODQlRTclQUQlOTYlRTclOTUlQTUlRUYlQkMlODglRTYlQUYlOTQlRTUlQTYlODIlRTYlQTAlQjklRTYlOEQlQUUlRTUlQkQlOTMlRTUlODklOEQlRTYlOEYlOTAlRTQlQkElQTQlRTQlQkIlQkIlRTUlOEElQTElRTklOTglOUYlRTUlODglOTclRTYlOTUlQjAlRTYlOUQlQTUlRTYlOEUlQTclRTUlODglQjYlRTUlQkQlOTMlRTUlODklOEQlRTUlODUlODElRTglQUUlQjglRTclOTQlQTglRTYlODglQjclRTclOUElODQlRTYlOUMlODAlRTUlQTQlQTclRTYlOEYlOTAlRTQlQkElQTQlRTYlOTUlQjAlRUYlQkMlODklRUYlQkMlOEMlRTQlQkIlOEUlRTglODAlOEMlRTYlOUMlODAlRTUlQTQlQTclRTUlOEMlOTYlRTUlODglQTklRTclOTQlQTglRTclQjMlQkIlRTclQkIlOUYlRTglQjUlODQlRTYlQkElOTAlRTMlODAlODI=\">https://zhuanlan.zhihu.com/p/404993753，通过调用的服务状态来选择当前系统的策略（比如根据当前提交任务队列数来控制当前允许用户的最大提交数），从而最大化利用系统资源。</span></p>\n<p>6 限制单个用户的同时最大提交数，合理分配资源。</p>\n<p>7 限制单个用户的提交频率，可以通过 Redisson 或者 Sentinel 网关层限流实现。</p>\n<p>8 实现 ACM 模式（通过代码进行输入输出）的代码沙箱</p>\n<p>9 用同样的思路或者 Linux 的 cgroup 语法实现一种其他编程语言的代码沙箱</p>\n<p>10 实现 Special Judge 特判程序的逻辑</p>\n<p>11 给判题过程中的每个测试用例增加一个独立的内存、时间占用的统计</p>\n<p>12 可以使用 JWT Token 实现用户登录，在网关层面通过 token 获取登录信息，实现鉴权</p>\n<p>13 处理消息队列的消息重试，避免消息积压（可以选用死信队列）</p>\n<p>个人评价</p>\n<p>1 有较强的文档阅读能力，曾阅读 Spring Cloud Alibaba 等官方文档自主学习，并能够运用到项目中。</p>\n<p>2 有较强的问题解决能力，能够利用 GitHub Issues 区、AI 工具、搜索引擎、Stack Overflow 等自主解决问题</p>\n<p>前端</p>\n<p>部分面试题可以参考伙伴匹配系统或聚合搜索平台的前端面试题，都是 Vue 项目</p>\n<p>项目中使用了 Vue-CLI 脚手架来初始化项目，请解释一下脚手架的作用？</p>\n<p>背诵类题目，可以加主观回答</p>\n<p>Vue CLI 是一个用于快速搭建 Vue.js 项目的脚手架工具，可以通过交互式命令行的方式快速创建项目初始代码，并且有选择地整合前端常用工具和类库，能够快速启动和打包项目。</p>\n<p>本项目就是使用了 Vue CLI 工具进行初始化的，脚手架自动整合了版本相互兼容的 ESLint、TypeScript、Prettier、Webpack 等工具和类库，并且提供了本地调试（dev）和打包（build）命令，我可以更加专注于业务页面的开发。</p>\n<p>可以通过阅读官方文档进一步了解 Vue CLI：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2d1aWRlLw==\">https://cli.vuejs.org/zh/guide/</span></p>\n<p>在项目中使用了 TypeScript、ESLint、Prettier 和 Husky 来保证项目的编码规范，解释一下它们各自的作用？</p>\n<p>主观回答</p>\n<p>我通过一系列的工具和技术保证项目编码规范，包括 TypeScript、ESLint、Prettier 和 Husky。</p>\n<p>各技术的作用如下：</p>\n<p>●TypeScript：支持静态类型检查功能，用于增强代码的类型安全性，减少类型相关的错误。</p>\n<p>●ESLint：代码检查工具，用于检测 JavaScript 的代码质量、风格等问题，强制开发者遵守编码规范。</p>\n<p>●Prettier：代码格式化工具，能够根据配置自动格式化代码，确保代码的可读性和一致性。</p>\n<p>●Husky：用于管理 Git 钩子的工具，在 Git 提交操作前自动运行代码检查脚本，确保提交的代码质量和规范。</p>\n<p>如果是团队协作开发的项目，还可以使用代码审查机制，让其他人帮忙审查代码，减少潜在的 Bug 和编码不规范问题。</p>\n<p>请介绍一下你自定义的前端项目模板的主要功能？</p>\n<p>主观回答</p>\n<p>首先我使用 Vue-CLI 脚手架创建初始化项目，自动整合了 TypeScript、ESLint、Prettier、Husky 代码质量保证相关工具类库，并且支持使用 Webpack 完成打包。</p>\n<p>在此基础上，我自主开发了以下通用功能：</p>\n<p>1 全局页面布局：复用导航栏、底部 Footer 栏，并且支持根据路由切换多套布局</p>\n<p>2 全局权限管理：通过路由配置指定各页面的权限，当页面跳转时自动拦截并鉴权</p>\n<p>3 全局状态管理：实现用户自动登录逻辑，并在 Vuex 中存储用户登录态</p>\n<p>4 导航菜单生成：根据路由配置自动生成导航菜单，支持控制菜单的显隐</p>\n<p>5 用户登录注册：简洁的用户登录和注册页面</p>\n<p>6 常用组件引入：引入 ByteMD 文本编辑器、Monaco Editor 代码编辑器、Moment 日期处理库等</p>\n<p>后续开发新项目时，我可以直接基于此模板进行开发，无需重复编写业务无关代码，大幅提高开发效率。</p>\n<p>项目中使用了 Vue Router 来进行全局导航生成，请详细解释一下如何根据路由配置文件自动生成导航菜单？</p>\n<p>主观回答</p>\n<p>关键步骤如下：</p>\n<p>1 新建全局导航组件</p>\n<p>2 组件内加载 routes 路由配置文件，获取所有的路由信息，通过 v-for 遍历路由生成菜单</p>\n<p>3 给菜单绑定跳转事件，点击后触发 router.push 进行页面跳转</p>\n<p>4 根据当前 url 修改菜单的 active 状态，高亮当前页面对应的菜单项</p>\n<p>5 通过在 routes 路由配置的 meta 属性中添加 hideInMenu 字段来控制菜单的显隐（权限控制同理）</p>\n<p>项目中使用了全局权限管理，请详细描述如何通过 Vue Router 的路由守卫来实现全局权限控制？</p>\n<p>主观回答</p>\n<p>关键步骤如下：</p>\n<p>1 在 routes 路由配置文件中，通过 meta 属性中添加 access 字段来定义某个路由的访问权限</p>\n<p>2 在全局权限管理文件 access.ts 中，使用 Vue Router 的全局前置路由守卫对页面的跳转进行监听和拦截，并且在项目入口文件 main.ts 中引入 access.ts 开启全局权限管理。</p>\n<p>3 每次访问页面时，根据页面对应路由的 access 字段、结合当前用户的登录信息，判断用户是否有对应的访问权限。</p>\n<p>4 如果满足权限，跳转到目标页面；如果不满足权限，重定向页面到 403 或者登录页。</p>\n<p>项目中使用 Vuex 来进行全局状态管理，请解释为什么在项目中需要全局状态管理以及如何使用 Vuex？</p>\n<p>主观回答</p>\n<p>项目中使用 Vuex 来存储各页面或组件可能都需要获取的全局信息，比如当前登录用户信息，便于各个页面和组件之间共享这些信息，不必通过复杂的父子组件来传递数据，从而简化了项目的代码。</p>\n<p>我参考 Vuex 的官方文档将其运用到项目中，大概步骤如下：</p>\n<p>1 使用 store 目录独立存储所有的状态文件</p>\n<p>2 使用 Vuex 的 modules 特性，定义用户模块，用于存储用户相关的状态</p>\n<p>3 在用户模块中，编写存放登录用户信息的 state、更改用户信息的 mutations 和远程获取用户信息的 actions</p>\n<p>4 在项目的其他组件或页面中，可以通过 store.state.user 访问用户信息、通过 store.dispatch 加载登录用户信息。</p>\n<p>项目中使用了 Arco Design 的 Table 组件，请介绍下你是如何使用 Table 组件的、使用了其哪些功能？</p>\n<p>主观回答</p>\n<p>我参考官方文档提供的示例代码在项目中引入 Table 组件，通过 Table 组件的 columns 数组属性定义表格的列，通过 data 属性传递表格的数据。</p>\n<p>对于后端返回的复杂 JSON 字符串，我使用 Table 组件的自定义渲染功能，通过插槽的语法，自定义了从 JSON 字符串中取值并格式化展示的逻辑，让表格的展示效果更精美。</p>\n<p>项目中使用了 Monaco Editor 开源代码编辑器组件，请解释一下它的特点和在项目中的应用？</p>\n<p>主观回答</p>\n<p>Monaco Editor 是由微软开源的代码编辑器组件，也是知名开发工具 VS Code 内置的编辑器组件，不仅轻量，而且功能十分强大。</p>\n<p>比如支持多种编程语言、语法高亮、代码补全、各种编辑功能、自定义主题、代码 Diff 等。</p>\n<p>在项目中，我引入 Monaco Editor 作为在线做题页面的代码编辑器，给用户良好的代码编辑体验。</p>\n<p>项目中使用了 ByteMD 文本编辑器组件，请解释下你是如何封装了可复用的 Editor 和 Viewer 组件？</p>\n<p>主观回答</p>\n<p>ByteMD 是由字节跳动开源的 Markdown 文本编辑组件，为了在项目中更方便地使用它，我在其基础上封装了 Editor（文本编辑器）和 Viewer（文本浏览器）组件。</p>\n<p>以 Editor 组件为例，我在组件内初始化了 ByteMD 的 editor 并且引入了 gfm、highlight 插件，还给组件提供了 value、handleChange、mode 属性，便于父组件获取文本编辑器当前的内容、根据需求改变文本编辑器的模式，降低使用成本。</p>\n<p>你是如何使用 JetBrains 的 Live Templates 功能来自定义代码模板的？</p>\n<p>主观回答</p>\n<p>在项目开发过程中，经常有一些相似的代码需要重复编写，为了提高效率，我使用 JetBrains 开发工具自带的 Live Templates 功能，自己定义了一套代码模板，具体过程如下：</p>\n<p>1 创建自定义模板分组</p>\n<p>2 创建具体的代码模板，比如新的 Vue 前端页面模板，可以通过自定义表达式变量动态生成内容、或者使用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mi>N</mi><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">END</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> 内置变量指定生成代码后光标的位置。</p>\n<p>3 为该模板配置缩写（通过哪些关键字快捷使用模板）和上下文（在哪些编程语言或文件触发）</p>\n<p>示例模板代码：</p>\n<p>什么是前端的组件？组件之间如何传递属性和事件？</p>\n<p>背诵类题目</p>\n<p>前端的组件是指可复用的、独立的 UI 元素，组件通常封装了特定功能或视图，可以在项目中被多次使用。组件化也是一种重要的开发模式，适当地封装和复用组件，有助于提高代码的可维护性、可扩展性和重用性。</p>\n<p>在 Vue 框架中，组件之间可以通过以下几种方式传递属性和事件：</p>\n<p>1Props（父传子）：通过 props 属性，父组件可以向子组件传递数据。子组件通过 props 接收父组件传递的数据。</p>\n<p>2 自定义事件（子传父）：子组件可以通过 $emit 方法触发自定义事件，然后父组件通过在子组件上使用 @或 v-on 指令监听这些事件，以接收子组件的消息。</p>\n<p>3 事件总线（兄弟组件）：通过创建一个事件总线实例，不同组件可以通过事件总线来进行通信。这是一种适用于兄弟组件之间的通信方式。</p>\n<p>4Vuex（状态管理）：Vuex 是 Vue.js 的官方状态管理库，用于管理全局状态。不同组件可以通过 Vuex 来共享和管理应用程序的状态。</p>\n<p>5$refs（父子组件）：父组件可以通过 ref 属性引用子组件，并直接访问子组件的属性和方法。这种方式主要用于父组件控制子组件的行为。</p>\n<p>6 插槽（分发内容）：插槽允许父组件将内容分发到子组件的特定位置，以实现更灵活的组件复用和布局控制。</p>\n<p>什么是 openapi-typescript-codegen 工具？它是如何生成接口调用代码的？</p>\n<p>主观回答</p>\n<p>openapi-typescript-codegen 是一个能够根据 OpenAPI 文档自动生成 JavaScript 和 TypeScript 客户端调用代码的工具。</p>\n<p>使用这个工具，前端开发者无需人工阅读接口文档并编写对应的请求代码，大幅提高开发效率。</p>\n<p>用法很简单，用 npm 安装完工具后，通过 openapi 命令指定接口文档地址、输出目录以及使用的请求客户端（比如 Axios）即可。</p>\n<p>项目中使用了 Webpack 整合 Monaco Editor，请解释一下 Webpack 的作用，以及如何整合 Monaco Editor？</p>\n<p>主观回答</p>\n<p>Webpack 是一个 JavaScript 应用程序打包工具，它的主要作用是将多个 JavaScript 文件及其依赖打包成一个或多个静态资源文件，以减少网络请求，提高应用性能，并且支持处理各种前端资源，如样式、图片、字体等。</p>\n<p>在本项目中，由于使用了 Vue-CLI 脚手架初始化项目，需要在 vue.config.js 文件中定义 Webpack 的资源整合配置。这里参考了 monaco-editor-webpack-plugin 的官方文档，通过引入 MonacoWebpackPlugin 来引入 Monaco Editor，示例代码如下：</p>\n<p>请介绍一下 Vue 3 的新特性和与 Vue 2 相比有哪些变化？</p>\n<p>背诵类题目，也可以有主观回答</p>\n<p>详细参考官方文档：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92My1taWdyYXRpb24udnVlanMub3JnL3poLyMlRTUlODAlQkMlRTUlQkUlOTclRTYlQjMlQTglRTYlODQlOEYlRTclOUElODQlRTYlOTYlQjAlRTclODklQjklRTYlODAlQTc=\">Vue 3 迁移指南 | Vue 3 迁移指南</span></p>\n<p>1）更快的渲染性能：Vue 3 引入了新的响应式系统（Proxy-based），相比 Vue 2 的 Object.defineProperty，提供了更高效的数据监听和更新机制，从而提高了渲染性能。</p>\n<p>2）Composition API：Composition API 是 Vue 3 的核心特性之一，它允许开发者更灵活地组织和重用组件逻辑。它将组件的逻辑拆分为可复用的函数式组合，并提供了 setup () 函数来配置组件。</p>\n<p>3）Teleport：Vue 3 引入了 Teleport 组件，可以轻松将内容渲染到 DOM 中的不同位置，这在处理模态框、对话框等场景时非常有用。</p>\n<p>4）Fragments：Vue 3 支持 Fragments，允许组件返回多个根节点，而无需包裹额外的 HTML 元素。</p>\n<p>需要注意的是，虽然 Vue 3 引入了许多新特性，但它仍然保持了 Vue 2 的核心理念和语法，因此 Vue 2 的开发者可以相对容易地迁移到 Vue 3，并逐步采用新的特性和优化。</p>\n<p>什么是 Vue 中的响应式变量？</p>\n<p>背诵类题目，但可以加主观回答</p>\n<p>响应式变量是一种特殊的 JavaScript 变量，它与 Vue 的数据绑定系统紧密关联。Vue 会自动监视响应式变量，当响应式变量的值发生变化时，相关的 Vue 组件会自动更新视图以反映这些变化。</p>\n<p>在项目开发中，我们通常会把后端接口返回的数据存到响应式变量中，从而更方便地驱动页面视图的更新，展示返回的数据。</p>\n<p>Vue 2 项目中，通常把响应式变量定义在 Data 属性中；Vue 3 项目中，可以使用 ref 或者 reactive 定义响应式变量。</p>\n<p>项目是否有上线？你是如何实现前端页面部署的？</p>\n<p>主观回答</p>\n<p>项目有实际上线。我是通过本地打包 + Nginx 实现了前端页面部署。</p>\n<p>具体过程如下：</p>\n<p>1 购买云服务器</p>\n<p>2 安装和初始化宝塔 Linux 面板，会自动安装 Nginx 服务器</p>\n<p>3 在宝塔上创建一个网站</p>\n<p>4 本地使用 npm run build 命令打包项目，得到 dist 网站静态文件目录</p>\n<p>5 上传本地打包好的 dist 目录到服务器，然后配置 Nginx 指向文件目录路径，即可访问前端静态文件</p>\n<p>还有其他的部署方式，比如使用 Vercel 等 Serverless 服务一键部署到第三方托管服务器，但由于本人有服务器、并且想实践下 Nginx 配置，所以没有选择这种方式。</p>\n<p>通用</p>\n<p>请介绍一下本项目的完整业务流程？</p>\n<p>管理员创建题目、添加题目的测试用例 =&gt; 用户自由搜索题目 =&gt; 用户阅读题目、编写并提交代码 =&gt; 系统后端调用 代码沙箱，对代码进行编译、运行 =&gt; 判题服务根据管理员设定的题目测试用例判断用户提交是否正确 =&gt; 用户可以查看提交记录和判题结果。</p>\n<p>其中，代码沙箱可以作为独立服务，提供给其他开发者使用。</p>\n<p>有调研过 OJ 系统的实现方案么？</p>\n<p>有的，我在开发 OJ 系统前，调研了非常多的开源项目，比如 HOJ、hustoj 等，总结了 5 种常见的实现方案。</p>\n<p>1 自部署现成的开源 OJ 系统</p>\n<p>2 使用现成的执行代码接口</p>\n<p>3 自主开发 OJ 系统和代码沙箱</p>\n<p>4 利用 AI 实现判题</p>\n<p>5 通过类似爬虫的方式调用其他网站的判题接口</p>\n<p>详情可以阅读：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJMU5EY3pOVEF3TUE9PSZhbXA7bWlkPTIyNDc1NDg2MjkmYW1wO2lkeD0xJmFtcDtzbj1lYzI2MjA5OWNhOTQ1ZjRmZGVhODgzNzE3OGFjOGY4NyZhbXA7Y2hrc209ZTljMmQ5MjJkZWI1NTAzNDRiOWFhNzgwN2JhNzA5MmQzMjIwOWJiZGMyM2ZhNzc5MTRmOWZjMjQ0ZGY5ZjhmZDI3MzY5MmVmYjU0NiZhbXA7dG9rZW49NTkzOTIwODE2JmFtcDtsYW5nPXpoX0NOI3Jk\">OJ 系统的主流实现方案</span></p>\n<p>请介绍一下判题的具体流程和方法？</p>\n<p>判题步骤如下：</p>\n<p>1 首先根据用户的提交 id 获取到用户的代码、选择的编程语言、题目测试用例、题目执行限制等信息。</p>\n<p>2 判题服务调用代码沙箱服务执行用户代码，获取到每组测试用例对应的输出结果、代码执行信息（比如内存、时间占用等）。</p>\n<p>3 对比用户的输出结果和正确的输出结果，并判断代码的执行信息是否符合题目执行限制，得出判题结果，并修改数据库内对应的提交信息。</p>\n<p>请介绍一下代码沙箱的作用？代码沙箱和判题服务有什么关系？</p>\n<p>代码沙箱的作用：在隔离的环境中编译并执行代码，得到运行结果。可以作为独立的项目或服务，提供给其他的需要执行代码的项目去使用。</p>\n<p>代码沙箱和判题服务的关系：</p>\n<p>●代码沙箱：只负责接受代码和输入，返回编译运行的结果，不负责判题</p>\n<p>●判题模块：调用代码沙箱，把代码和输入用例交给代码沙箱去执行</p>\n<p>具体交互过程如下图：</p>\n<p>(一组程序输出，执行信息，执行状态，执行环境信息)</p>\n<p>根据规则来判题 (比如对比输入输出是否一致</p>\n<p>1, 发送题目的代码，题目的输入用例</p>\n<p>二者通过 AP 交互，实现解帮</p>\n<p>得到一组运行结果</p>\n<p>3, 返回执行结果</p>\n<p>, 编译执行代码</p>\n<p>编程语言等</p>\n<p>判题模块</p>\n<p>代码沙箱</p>\n<p><img data-src=\"https://cdn.nlark.com/yuque/0/2023/png/398476/1693981253621-34aabb1f-e39f-420b-bbbd-9702cbf7721e.png\" alt=\"image.png\" /></p>\n<p>在开发过程中，你遇到过比较复杂的技术问题或挑战吗？如果有，请谈谈你是如何解决这些问题的？</p>\n<p>可以从以上任意一道主观的面试题出发去讲，比如你在开发多种代码沙箱的实现方式（Java 原生和 Docker）发现有大量的重复代码，不利于修改和维护，想到使用模板方法来解决；或者改造项目为微服务后发现无法在题目服务中获取到用户信息，想到把项目登录方式由本地 Session 改造为基于 Redis 的分布式 Session 等。</p>\n",
            "tags": []
        },
        {
            "id": "https://eucli.top/2023/09/29/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "url": "https://eucli.top/2023/09/29/%E3%80%90%E6%A1%88%E4%BE%8B%E3%80%91%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93/",
            "title": "【案例】泛型封装数据库",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<p>功能：定义一个操作数据库的库，支持 mysql、mongoDB<br />\n 要求：mysql、mongoDB 功能是一样的，都有增删改查（insert delete update select）方法<br />\n注意：约束统一的规范、代码复用<br />\n规范：interface<br />\n 复用：泛型</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 增删改查（insert delete update select）方法 ==> 规范：interface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Db<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sql<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Db<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 类实现接口用 implements，接口实现接口用 extends</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token class-name\">insert</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">:</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>id<span class=\"token operator\">:</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  userName<span class=\"token operator\">:</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  userPwd<span class=\"token operator\">:</span><span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">let</span> mySql <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sql<span class=\"token operator\">&lt;</span>User<span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>mySql<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  userName<span class=\"token operator\">:</span><span class=\"token string\">'admin'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  userPwd<span class=\"token operator\">:</span><span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "TS",
                "实战"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E4%BC%98%E9%9B%85JS/",
            "url": "https://eucli.top/2023/09/29/%E4%BC%98%E9%9B%85JS/",
            "title": "优雅JS",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h2 id=\"多条件-if-语句\"><a class=\"anchor\" href=\"#多条件-if-语句\">#</a> 多条件 if 语句</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">===</span> <span class=\"token string\">\"abc\"</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"def\"</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"ghi\"</span> <span class=\"token operator\">||</span> x <span class=\"token operator\">===</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//logic</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 简化写法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"def\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ghi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jkl\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//logic</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"移除数组假值\"><a class=\"anchor\" href=\"#移除数组假值\">#</a> <strong>移除数组假值</strong></h2>\n<blockquote>\n<p>假值指的是在条件判断中被视为  <code>false</code>  的值，例如 <code>null</code> 、 <code>undefined</code> 、 <code>空字符串</code> （&quot;&quot; 或 ''）、 <code>0</code> 、 <code>NaN</code>  和  <code>false</code> 。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"xyz\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> filterArray <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [12, 'xyz', -25, 0.5]</span></pre></td></tr></table></figure><p>Boolean 是 JavaScript 的内置构造函数，通过传递一个值给它，可以将该值转换为布尔值。在这种情况下，Boolean 构造函数作为回调函数传递给 filter () 方法，因此会将每个数组元素转换为布尔值。只有转换结果为真值的元素才会保留在新数组中。</p>\n<blockquote>\n<p>注意：这种方式会将 0 也过滤掉，如果不需要过滤 0，需要进行额外的判断。</p>\n</blockquote>\n<h2 id=\"空值合并运算符\"><a class=\"anchor\" href=\"#空值合并运算符\">#</a> <strong>空值合并运算符</strong></h2>\n<blockquote>\n<p>空值合并运算符（??）用于为  <code>null</code>  或  <code>undefined</code>  的变量提供默认值</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> data <span class=\"token operator\">??</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>空位合并赋值运算符（ <code>??=</code> ）</strong>\n<blockquote>\n<p>用于在变量为空（null 或 undefined）时进行赋值操作<br />\n <code>??=</code>  的写法更加简洁和易读。它首先检查变量  <code>variable1</code>  是否为  <code>null</code>  或  <code>undefined</code> ，如果是，则将它赋值为  <code>variable2</code>  的值。如果  <code>variable1</code>  已经有一个非空的值，那么赋值操作就不会发生</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> variable1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> variable2 <span class=\"token operator\">=</span> <span class=\"token string\">\"前端充电宝\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>variable1 <span class=\"token operator\">??=</span> variable2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"逻辑或赋值运算符\"><a class=\"anchor\" href=\"#逻辑或赋值运算符\">#</a> <strong>逻辑或赋值运算符（ <code>||=</code> ）</strong></h2>\n<blockquote>\n<p>用于为变量分配默认值</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count <span class=\"token operator\">||=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当  <code>count</code>  为假值（例如  <code>undefined</code> 、 <code>null</code> 、 <code>false</code> 、 <code>0</code> 、 <code>NaN</code>  或 <code>空字符串</code> ）时，逻辑或赋值运算符将  <code>count</code>  赋值为 0。否则，它会保留 <code> count</code>  的原始值。</p>\n<h2 id=\"多值匹配\"><a class=\"anchor\" href=\"#多值匹配\">#</a> <strong>多值匹配</strong></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"短路求值\"><a class=\"anchor\" href=\"#短路求值\">#</a> <strong>短路求值</strong></h2>\n<blockquote>\n<p>当将一个变量的值赋给另一个变量时，可能希望确保源变量不为 null、undefined 或空。可以编写一个包含多个条件的长 if 语句，或者使用短路求值来简化。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>variable1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> variable1 <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span> variable1 <span class=\"token operator\">!==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> variable2 <span class=\"token operator\">=</span> variable1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 简化写法：</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> variable2 <span class=\"token operator\">=</span> variable1 <span class=\"token operator\">||</span> <span class=\"token string\">\"new\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"对于逻辑或操作符以下值被视为假\"><a class=\"anchor\" href=\"#对于逻辑或操作符以下值被视为假\">#</a> 对于逻辑或（||）操作符，以下值被视为假：</h4>\n<ul>\n<li>false</li>\n<li>0</li>\n<li>空字符串（&quot;&quot; 或 ''）</li>\n<li>null</li>\n<li>undefined</li>\n<li>NaN<br />\n 所以，如果本身的值可能就是这些中的一个，就不适合使用短路求值</li>\n</ul>\n<h2 id=\"双位运算符\"><a class=\"anchor\" href=\"#双位运算符\">#</a> <strong>双位运算符</strong></h2>\n<p>可以用它来替代 Math.floor () 函数，它在执行相同的操作时速度更快。</p>\n<blockquote>\n<p>Math.floor () 函数总是返回小于等于一个给定数字的最大整数</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">4.9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 简化写法：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token number\">4.9</span> <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr></table></figure><h2 id=\"指数幂运算es7-语法\"><a class=\"anchor\" href=\"#指数幂运算es7-语法\">#</a> <strong>指数幂运算</strong>（ES7 语法）</h2>\n<blockquote>\n<p>指数幂运算可以使用  <code>**</code>  来简化。</p>\n</blockquote>\n<pre><code class=\"language-JS\">//传统写法：\nMath.pow(2,3); // 8\nMath.pow(2,2); // 4\nMath.pow(4,3); // 64\n\n//简化写法：\n2**3 // 8\n2**4 // 4\n4**3 // 64\n</code></pre>\n<h2 id=\"双重逻辑非操作符将任何值转换为布尔值\"><a class=\"anchor\" href=\"#双重逻辑非操作符将任何值转换为布尔值\">#</a> <strong> <code>双重逻辑非</code> 操作符将任何值转换为布尔值。</strong></h2>\n<blockquote>\n<p>单一的逻辑非操作符已经可以将值转换为布尔类型并对其进行取反，所以第二个逻辑非操作符会再次对其进行取反，从而将其恢复为原始含义，并保持为布尔类型</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">23</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TRUE</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FALSE</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FALSE</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TRUE</span></pre></td></tr></table></figure><h2 id=\"变量交换\"><a class=\"anchor\" href=\"#变量交换\">#</a> <strong>变量交换</strong></h2>\n<blockquote>\n<p>可以使用数组解构来轻松实现变量交换。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传统写法（使用临时变量完成两个变量的交换）：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> temp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 简化写法（使用数组解构赋值完成两个变量交换）：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里创建了一个包含两个元素的数组 [b, a]，然后使用数组解构赋值将其中的值分别赋给变量 a 和 b。由于左侧的数组和右侧的数组结构相同，所以两个值会进行交换。</p>\n<h2 id=\"for-循环\"><a class=\"anchor\" href=\"#for-循环\">#</a> <strong>For 循环</strong></h2>\n<blockquote>\n<p>传统的 for 循环语法使用数组的长度作为迭代器来遍历数组。还有很多 for 循环的快捷方式提供了 <code>在数组中迭代对象</code> 的不同方法，例如：</p>\n</blockquote>\n<ul>\n<li>\n<p><code>for...of</code> ：用于遍历内置字符串、数组、类数组对象、NodeList。</p>\n</li>\n<li>\n<p><code>for...in</code> ：用于访问数组的索引和对对象字面量进行遍历，并记录属性名称和值的字符串。</p>\n</li>\n<li>\n<p><code>Array.forEach</code> ：使用回调函数对数组元素及其索引执行操作。</p>\n</li>\n</ul>\n<p>传统写法:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item: \"</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>简化写法</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//for...of</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> str <span class=\"token keyword\">of</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item: \"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//for...in</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> index <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//Array.forEach</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"item: \"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>对于对象字面量，也可以使用  <code>for...in</code>  来遍历</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"数组扁平化\"><a class=\"anchor\" href=\"#数组扁平化\">#</a> <strong>数组扁平化</strong></h2>\n<p>一个部门 JSON 数据中，属性名是部门 id，属性值是个部门成员 id 数组集合，现在要把有部门的成员 id 都提取到一个数组集合中。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> deps <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">采购部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">人事部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">行政部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">运输部</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> member <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>deps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flat</span><span class=\"token punctuation\">(</span><span class=\"token number\">Infinity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p><code>Object.values()</code> : 获取对象的全部属性值； <code>flat</code>  方法：数组扁平化</p>\n</blockquote>\n<h2 id=\"set-数组去重\"><a class=\"anchor\" href=\"#set-数组去重\">#</a> <strong>Set 数组去重</strong></h2>\n<blockquote>\n<p>Set 是 es6 新增的数据结构，似于数组，但它的一大特性就是所有元素都是唯一的，没有重复的值，我们一般称为集合</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"前端\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"js\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"css\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"html\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">uniqueArr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[' 前端 ','js','html','css']</span></pre></td></tr></table></figure><h2 id=\"set-合并数组并去重\"><a class=\"anchor\" href=\"#set-合并数组并去重\">#</a> <strong>Set 合并数组（并去重）</strong></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//[1,2,3,5,6]</span></pre></td></tr></table></figure><h2 id=\"从-url-获取参数并转为对象\"><a class=\"anchor\" href=\"#从-url-获取参数并转为对象\">#</a> <strong>从 url 获取参数并转为对象</strong></h2>\n<p>网页路径经常是： <code>www.baidu.com?search=js&amp;xxx=kkk</code>  这种形式的，我们是经常需要取参数的，可以使用第三方的 qs 包实现，如果你只是要实现去参数，这一句代码就可以实现，不用再引入 qs 了。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getParameters</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">URL</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&#123;\"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">decodeURL</span><span class=\"token punctuation\">(</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\"</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">&amp;</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\",\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">=</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\":\"'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\"&#125;</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">getParameters</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.google.com.hk/search?q=js+md&amp;newwinodw=1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// &#123;q: 'js+md', newwinodw: '1'&#125;</span></pre></td></tr></table></figure><h2 id=\"检查对象是否为空\"><a class=\"anchor\" href=\"#检查对象是否为空\">#</a> <strong>检查对象是否为空</strong></h2>\n<p>检查对象是否为空，实际上并不那么简单，即使对象为空，每次检查对象是否等于 {} 也会返回 false。<br />\n幸运的是，下面的单行代码正是我们想要的。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isEmpty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Reflect<span class=\"token punctuation\">.</span><span class=\"token function\">ownKeys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> obj<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token string\">\"not empty\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><h2 id=\"反转字符串\"><a class=\"anchor\" href=\"#反转字符串\">#</a> <strong>反转字符串</strong></h2>\n<p>反转字符串可以使用 <code>split</code>  结合 <code>reverse</code>  和 <code>join</code>  方法轻松实现。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reverse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is reverse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// esrever si siht</span></pre></td></tr></table></figure><h2 id=\"生成随机十六进制\"><a class=\"anchor\" href=\"#生成随机十六进制\">#</a> <strong>生成随机十六进制</strong></h2>\n<p>生成随机数相信你能信手拈来，那随机生成十六进制，例如生成十六进制颜色值。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">randomHexColor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">#</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0xffffff</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">padEnd</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">randomHexColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// #a2ce5b</span></pre></td></tr></table></figure><h2 id=\"检查当前选项卡是否在后台\"><a class=\"anchor\" href=\"#检查当前选项卡是否在后台\">#</a> <strong>检查当前选项卡是否在后台</strong></h2>\n<p>浏览器使用选项卡式浏览，任何网页都有可能在后台，此时对用户来说是没有在浏览的，知道怎么快速检测到，你的网页对用户是隐藏还是可见吗？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isTabActive</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>document<span class=\"token punctuation\">.</span>hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isTabActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// true|false</span></pre></td></tr></table></figure><h2 id=\"检测元素是否处于焦点\"><a class=\"anchor\" href=\"#检测元素是否处于焦点\">#</a> <strong>检测元素是否处于焦点</strong></h2>\n<p><code>activeElement</code>  属性返回文档中当前获得焦点的元素</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">elementIsInFocus</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el <span class=\"token operator\">===</span> document<span class=\"token punctuation\">.</span>activeElement<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">elementIsInFocus</span><span class=\"token punctuation\">(</span>anyElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 元素处于焦点返回 true，反之返回 false</span></pre></td></tr></table></figure><h2 id=\"检查设备类型\"><a class=\"anchor\" href=\"#检查设备类型\">#</a> <strong>检查设备类型</strong></h2>\n<p>使用 <code>navigator.userAgent</code>  判断是移动设备还是电脑设备：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">judgeDeviceType</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|OperaMini</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"Mobile\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"PC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">judgeDeviceType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// PC | Mobile</span></pre></td></tr></table></figure><h2 id=\"文字复制到剪贴板\"><a class=\"anchor\" href=\"#文字复制到剪贴板\">#</a> <strong>文字复制到剪贴板</strong></h2>\n<p><code>Clipboard API </code> 它的所有操作都是异步的，返回  <code>Promise </code> 对象，不会造成页面卡顿。而且，它可以将任意内容（比如图片）放入剪贴板。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">copyText</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">text</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">await</span> navigator<span class=\"token punctuation\">.</span>clipboard<span class=\"token punctuation\">.</span><span class=\"token function\">writeText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">copyText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"单行代码 前端世界\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"获取选定的文本\"><a class=\"anchor\" href=\"#获取选定的文本\">#</a> <strong>获取选定的文本</strong></h2>\n<p>使用内置的  <code>getSelection </code> 获取用户选择的文本:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSelectedText</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">getSelectedText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 返回选中的内容</span></pre></td></tr></table></figure><h2 id=\"查询某天是否为工作日\"><a class=\"anchor\" href=\"#查询某天是否为工作日\">#</a> <strong>查询某天是否为工作日</strong></h2>\n<p>我们自己写日历组件时经常会用到，判断某个日期是否为工作日；周一至周五为工作日:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isWeekday</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">6</span> <span class=\"token operator\">!==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isWeekday</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// true</span></pre></td></tr></table></figure><h2 id=\"转换华氏摄氏\"><a class=\"anchor\" href=\"#转换华氏摄氏\">#</a> <strong>转换华氏 / 摄氏</strong></h2>\n<p>处理温度有时会晕头转向。这两个函数则能帮助大家将华氏温度转换为摄氏温度，以及将摄氏温度转换为华氏温度。</p>\n<ul>\n<li>将华氏温度转换为摄氏温度</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fahrenheitToCelsius</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">fahrenheit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fahrenheit <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">fahrenheitToCelsius</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 10</span></pre></td></tr></table></figure><ul>\n<li>将摄氏温度转华氏温度</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">celsiusToFahrenheit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">celsius</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>celsius <span class=\"token operator\">*</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">celsiusToFahrenheit</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 212</span></pre></td></tr></table></figure><h2 id=\"两日期之间相差的天数\"><a class=\"anchor\" href=\"#两日期之间相差的天数\">#</a> <strong>两日期之间相差的天数</strong></h2>\n<p>日常开发中经常遇到需要显示剩余天数， 一般我们就需要计算两日期之间相差天数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">dayDiff</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">date1<span class=\"token punctuation\">,</span> date2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>date1<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> date2<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">86400000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">dayDiff</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2021-10-21\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2022-02-12\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Result: 114</span></pre></td></tr></table></figure><h2 id=\"将-rgb-转换为十六进制\"><a class=\"anchor\" href=\"#将-rgb-转换为十六进制\">#</a> <strong>将 RGB 转换为十六进制</strong></h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rgbToHex</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">rgbToHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//  #ffffff</span></pre></td></tr></table></figure><h2 id=\"计算数组平均值\"><a class=\"anchor\" href=\"#计算数组平均值\">#</a> <strong>计算数组平均值</strong></h2>\n<p>计算平均值的方式很多，计算的逻辑都是一样的， 但是实现方式各不相同，一行代码简单实现：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">average</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">36</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//16</span></pre></td></tr></table></figure>",
            "tags": [
                "JS"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "url": "https://eucli.top/2023/09/29/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/",
            "title": "前端自动化",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h1 id=\"自动化插件\"><a class=\"anchor\" href=\"#自动化插件\">#</a> 自动化插件</h1>\n<h2 id=\"unplugin-auto-import\"><a class=\"anchor\" href=\"#unplugin-auto-import\">#</a>  <code>unplugin-auto-import</code></h2>\n<p>自动导入 Api, 支持 Vite, Webpack, Rollup and esbuild。<br />\n适用于 &quot;vue&quot;, &quot;vue-router&quot;, &quot;axios&quot; 等库的 api。</p>\n<ol>\n<li>下载</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> unplugin-auto-import <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改配置文件 <code>vite.config.ts</code></li>\n</ol>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @name AutoImportDeps</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @description auto-import lib</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> AutoImport <span class=\"token keyword\">from</span> <span class=\"token string\">\"unplugin-auto-import/vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AutoImportDeps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">AutoImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"vue-router\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@vueuse/core\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@pureadmin/utils\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    include<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.[tj]sx?$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.vue$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.vue\\?vue</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.md$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//eslint 报错解决</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    eslintrc<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      enabled<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Default `false`</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      filepath<span class=\"token operator\">:</span> <span class=\"token string\">\"./.eslintrc-auto-import.json\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Default `./.eslintrc-auto-import.json`</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      globalsPropValue<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Default `true`, (true | false | 'readonly' | 'readable' | 'writable' | 'writeable')</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    dts<span class=\"token operator\">:</span> <span class=\"token string\">\"src/auto-imports.d.ts\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"unplugin-vue-components\"><a class=\"anchor\" href=\"#unplugin-vue-components\">#</a>  <code>unplugin-vue-components</code></h2>\n<p>为 Vue 自动按需导入组件，既不需要导入也不需要声明<br />\n支持： Vite, Webpack, Vue CLI, Rollup, esbuild 等</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> unplugin-vue-components <span class=\"token parameter variable\">-D</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>修改配置文件 <code>vite.config.js</code></li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> Components <span class=\"token keyword\">from</span> <span class=\"token string\">\"unplugin-vue-components/vite\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 要搜索组件的目录的相对路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token literal-property property\">dirs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/components\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 组件的有效文件扩展名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token literal-property property\">extensions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 配置文件生成位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 也接受自定义文件名的路径</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token literal-property property\">dts</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src/components.d.ts\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其实也能自动导入 ui 库，但 bug 比较多，所以放弃</p>\n",
            "tags": [
                "自动化"
            ]
        },
        {
            "id": "https://eucli.top/2023/09/29/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "url": "https://eucli.top/2023/09/29/%E5%B0%9A%E5%93%81%E6%B1%87%E5%89%8D%E5%8F%B0%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/",
            "title": "尚品汇前台项目实战",
            "date_published": "2023-09-29T13:45:48.000Z",
            "content_html": "<h1 id=\"vue-cli-脚手架初始化项目-vue-create-app\"><a class=\"anchor\" href=\"#vue-cli-脚手架初始化项目-vue-create-app\">#</a> vue-cli 脚手架初始化项目 vue create app</h1>\n<h1 id=\"npm-常用的安装命令\"><a class=\"anchor\" href=\"#npm-常用的安装命令\">#</a> npm 常用的安装命令</h1>\n<ul>\n<li>npm i 就是 npm install 简写</li>\n<li>npm i xxx -D 就是 npm i xxx --save-dev</li>\n<li>npm i xxx -S 就是 npm i xxx --save</li>\n<li>npm i xxx -g 就是 全局安装</li>\n<li>npm i xxx 就是 npm i xxx --save</li>\n</ul>\n<h1 id=\"初始项目中文件夹的作用\"><a class=\"anchor\" href=\"#初始项目中文件夹的作用\">#</a> 初始项目中文件夹的作用</h1>\n<ul>\n<li>\n<p>node_modules 项目依赖文件夹</p>\n</li>\n<li>\n<p>public 一般放置一些静态资源 (图片)，需要注意放在 public 文件夹中的资源 webpack 打包的时候会原封不动打包到 dist 文件夹中</p>\n</li>\n<li>\n<p>src (程序员源代码文件夹):</p>\n<ul>\n<li>\n<p>assets 文件夹：一般也是放置一些静态资源 (一般放置多个组件共用的静态资源)，需要注意，放置在 assets 文件夹里的静态资源在 webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</p>\n</li>\n<li>\n<p>components 文件夹：一般放置的是非路由组件或者一些常用的全局组件</p>\n</li>\n<li>\n<p>pages|views 文件夹：放置路由组件</p>\n</li>\n<li>\n<p>router 文件夹：配置路由的地方</p>\n</li>\n<li>\n<p>APP.vue: 整个项目中唯一的根组件</p>\n</li>\n<li>\n<p>main.js: 程序入口文件，也是整个程序当中最先执行的文件</p>\n</li>\n</ul>\n</li>\n<li>\n<p>babel.config.js: 配置文件 (babel 相关)</p>\n</li>\n<li>\n<p>package.json: 记录项目的信息</p>\n</li>\n<li>\n<p>package-lock.json: 缓存性文件</p>\n</li>\n</ul>\n<h1 id=\"一些问题\"><a class=\"anchor\" href=\"#一些问题\">#</a> 一些问题</h1>\n<ul>\n<li>\n<p>vue 创建项目，报错 No Babel config file detected for..<br />\n 解决办法：在 package.json 文件中增加 &quot;requireConfigureFile&quot;: false</p>\n</li>\n<li>\n<p>【vue 报错】The template root requires exactly one element<br />\n 解决：因为 vue2 的模版中只有能一个根节点，所以在 template 中插入第二个元素就会报错</p>\n</li>\n</ul>\n<h1 id=\"一些配置\"><a class=\"anchor\" href=\"#一些配置\">#</a> 一些配置：</h1>\n<ol>\n<li>\n<p>项目运行起来的时候，让浏览器可以自动打开<br />\n办法：在 package.json 中：</p>\n<pre><code>&quot;scripts&quot;: &#123;\n&quot;serve&quot;: &quot;vue-cli-service serve --open&quot;,\n&#125;\n</code></pre>\n</li>\n<li>\n<p>eslint 校验功能关闭<br />\n在 vue.config.js 中写 <code>lintOnSave: false</code></p>\n</li>\n<li>\n<p>src 文件夹简写方式，配置别名 @代表 src 文件夹<br />\n jscpnfig.json 文件中：(省略)</p>\n</li>\n</ol>\n<h1 id=\"项目的路由分析-vue-router\"><a class=\"anchor\" href=\"#项目的路由分析-vue-router\">#</a> 项目的路由分析 vue-router</h1>\n<ul>\n<li>\n<p>前端所谓路由：KV 键值对</p>\n<ul>\n<li>key:URL (浏览器地址栏中的路径 path)</li>\n<li>value: 相应的路由组件 (component，注意后面没有 s)</li>\n<li>注意：项目的上中下结构</li>\n</ul>\n</li>\n<li>\n<p>路由组件：</p>\n<ul>\n<li>Home 首页路由组件、Search 路由组件、login 登录路由组件、Refister 注册路由组件</li>\n</ul>\n</li>\n<li>\n<p>非路由组件：Header、Footer (在首页，搜索页)，但是在 登录 | 注册 页没有</p>\n</li>\n</ul>\n<h1 id=\"在开发项目的时候\"><a class=\"anchor\" href=\"#在开发项目的时候\">#</a> 在开发项目的时候：</h1>\n<ol>\n<li>书写静态页面 (HTML+CSS)</li>\n<li>拆分组件</li>\n<li>获取服务器的数据动态展示</li>\n<li>完成相应的动态业务逻辑</li>\n</ol>\n<ul>\n<li>注意：\n<ol>\n<li>创建组件的时候，组件结构 + 组件的样式 + 图片资源</li>\n<li>咱们的项目采用 less 样式，但浏览器不识别 less 样式，需要通过 less、less-loader 进行处理<br />\n <code>npm i less less-loader@7</code>  安装 5 版本会报错<br />\n别忘了 style 标签中写 <code>&lt;style scoped lang=&quot;less&quot;&gt;</code></li>\n<li>header 样式太高记得把 App.vue 里面的样式清除</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"使用组件的步骤非路由组件\"><a class=\"anchor\" href=\"#使用组件的步骤非路由组件\">#</a> 使用组件的步骤 (非路由组件)</h1>\n<ol>\n<li>创建或定义组件</li>\n<li>引入：import 组件名 from ' 组件地址 ' 在需要使用这个组件的地方引入</li>\n<li>注册 (vue3 使用 setup 语法糖不用注册)：components 中注册引入的组件名 (简写形式，KV 一致省略 V)</li>\n<li>使用：以标签形式在 APP.vue 中使用</li>\n</ol>\n<h1 id=\"引入的-css-错乱记得引入默认的样式\"><a class=\"anchor\" href=\"#引入的-css-错乱记得引入默认的样式\">#</a> 引入的 css 错乱，记得引入默认的样式</h1>\n<p>public 文件夹中，创建一个清除默认样式的 css 文件，再在 public 下的 index.html 中引入这个 css 用 link</p>\n<h1 id=\"路由的搭建-vue-router\"><a class=\"anchor\" href=\"#路由的搭建-vue-router\">#</a> 路由的搭建 vue-router</h1>\n<p>(ps. 创建项目的时候直接把路由选上就不用搭建了 doge)</p>\n<p>安装：  <code>npm i vue-router@3</code>  因为 vue2 不用 3 版本会报错</p>\n<p>在上面的分析中，路由组件应该有四个： Home、Search、Login、Refister<br />\ncomponents 文件夹：经常放非路由组件或共用全局组件<br />\n pages|views 文件夹：经常放置路由组件</p>\n<h1 id=\"配置路由\"><a class=\"anchor\" href=\"#配置路由\">#</a> 配置路由</h1>\n<p>项目当中配置的路由一般都放在 router 文件夹中</p>\n<pre><code class=\"language-配置路由\">  //配置路由的地方\n  import Vue from &quot;vue&quot;;\n  import VueRouter from &quot;vue-router&quot;;\n\n  //使用插件\n  Vue.use(VueRouter)\n\n  //引入路由组件\n  import Home from '@/pages/Home'\n\n  //配置路由\n  export default new VueRouter(&#123;\n  routes: [\n      &#123;\n      path:&quot;/&quot;,            //默认展示只写 /\n      component:Home       //注意是 component 一定不要加 s\n      &#125;\n  ]\n  &#125;)\n</code></pre>\n<p>除此之外，还需要在 main.js 中引入路由</p>\n<pre><code>  //引入路由\n  import router from '@/router'\n\n  new Vue(&#123;\n  //注册路由\n  router\n  &#125;).$mount('#app')\n</code></pre>\n<p>还有一件事，路由组件还需要出口 在需要展示路由组件的地方写  <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n<p>ps. 配置路由的时候，可以给路由添加路由元信息 meta，路由需要配置对象，它的 key 不能瞎写</p>\n<h1 id=\"路由组件与非路由组件的异同\"><a class=\"anchor\" href=\"#路由组件与非路由组件的异同\">#</a> 路由组件与非路由组件的异同：</h1>\n<ol>\n<li>路由组件一般放置在 pages|views 文件夹中，非路由组件一般放置在 components 文件夹中</li>\n<li>路由组件一般需要在 router 文件夹注册 (使用即为组件的名字，非路由组件在使用的时候还要占位)，非路由组件一般都是以标签的形式使用</li>\n<li>注册完路由，不管是路由组件还是非路由组件身上都有<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</li>\n</ol>\n<h1 id=\"route和router-属性\"><a class=\"anchor\" href=\"#route和router-属性\">#</a> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mi>o</mi><mi>u</mi><mi>t</mi><mi>e</mi><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">route和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">和</span></span></span></span> router 属性</h1>\n<ul>\n<li><code>$route</code> ：一般获取路由信息 (路径、query、params 等等)</li>\n<li><code>$router</code> ：一般进行编程式导航进行路由跳转 (push|replace)</li>\n</ul>\n<h1 id=\"路由的跳转\"><a class=\"anchor\" href=\"#路由的跳转\">#</a> 路由的跳转</h1>\n<p>路由的跳转有两种形式：</p>\n<ul>\n<li>声明式导航 router-link 注意要有 to 属性</li>\n<li>编程式导航 push|replace：声明式导航能做的，编程式导航都能做。而且编程式导航除了可以进行路由跳转，还可以做一些其他的业务逻辑</li>\n</ul>\n<h1 id=\"footer-组件的显示与隐藏\"><a class=\"anchor\" href=\"#footer-组件的显示与隐藏\">#</a> Footer 组件的显示与隐藏</h1>\n<p>Footer 组件：在 Home、Search 显示，在 Login、Register 时隐藏</p>\n<h1 id=\"路由传参\"><a class=\"anchor\" href=\"#路由传参\">#</a> 路由传参</h1>\n<ol>\n<li>路由的跳转有几种方式？<br />\n比如：A-&gt;B</li>\n</ol>\n<ul>\n<li>声明式导航：route-link, 务必要有 to 属性</li>\n<li>编程式导航：利用的是组件实例的 $router.push|replace 方法 可以写自己的业务</li>\n</ul>\n<ol start=\"2\">\n<li>路由传参，参数有几种写法？</li>\n</ol>\n<ul>\n<li>params 参数：属于路径当中的一部分，需要注意，在配置路由的时候，需要占位</li>\n<li>query 参数：不属于路径当中的一部分，类似于 ajax 中的 queryString/home?k=v&amp;kv=, 不需要占位</li>\n<li>三种方式：</li>\n</ul>\n<pre><code>  //第一种：字符串形式\n  this.$router.push(&quot;/search/&quot; + this.keyword + &quot;?k=&quot; + this.keyword.toUpperCase());\n  //第二种：模板字符串\n  this.$router.push(`/search/$&#123;this.keyword&#125;?k=$&#123;this.keyword.toUpperCase()&#125;`);\n  //第三种：对象写法   这种写法需要给路由起名字name   ☆最常用\n  this.$router.push(&#123;\n  name:&quot;search&quot;,\n  params:&#123;keyword:this.keyword&#125;,\n  query:&#123;k:this.keyword.toUpperCase()&#125;\n  &#125;)\n</code></pre>\n<h1 id=\"路由传参相关面试题\"><a class=\"anchor\" href=\"#路由传参相关面试题\">#</a> 路由传参相关面试题</h1>\n<ol>\n<li>\n<p>路由传递参数 (对象写法) path 是否可以结合 params 参数一起使用？<br />\n不可以。<br />\n路由跳转传参的时候，对象写法可以是 name，path 形式，但 path 写法不能与 params 使用</p>\n</li>\n<li>\n<p>如何指定 params 参数可传可不传？<br />\n比如：配置路由的时候，params 参数占位了，但是路由跳转的时候没有传递 params，那么路径会出现问题  <code>http://localhost:8080/#/?k=1123</code>  没有 search<br />\n 解决：params 参数后面加？ <code>path:&quot;/search/:keyword?&quot;</code></p>\n</li>\n<li>\n<p>params 参数可以传递也可以不传递，但如果传递的是空串如何解决？<br />\n// 答：用 undefined 解决  <code>params:&#123;keyword:''||undefined&#125;</code></p>\n</li>\n<li>\n<p>路由组件能不能传递 props 数据？<br />\n可以，有三种方式 (但是实际开发中并不怎么用)</p>\n</li>\n</ol>\n<ul>\n<li>方式一：布尔值写法，只能传递 params 参数<br />\n <code>props:true</code></li>\n<li>方式二：对象写法 额外给路由组件传递一些 props<br />\n <code>props:&#123;a:1,b:2&#125;</code></li>\n<li>方式三 (最常用)：函数写法，可以把 params、query 参数，通过 props 传递给路由组件</li>\n</ul>\n<pre><code>  props:($route) =&gt; &#123;\n    return &#123;\n      keyword: $route.params.keyword,\n      k: $route.query,k\n    &#125;\n  &#125;\n</code></pre>\n<ol start=\"5\">\n<li>编程式导航跳转到当前路由 (参数不变)，多次执行会抛出错误警告？</li>\n</ol>\n<ul>\n<li>声明式导航没有这类问题，因为 vue-router 底层已经处理好了</li>\n<li>怎么解决：通过给 push 方法传递相应的成功、失败的回调，可以捕获到当前的错误，可以解决，只是治标不治本，将来在别的组件组件中使用 push|replace 还会有类似错误</li>\n</ul>\n<p>this：当前组件实例 (search)<br />\n this.$router 属性：属性值 vueRouter 类的一个实例<br />\n push：vueRouter 类的一个实例</p>\n<h1 id=\"call-与-apply-区别\"><a class=\"anchor\" href=\"#call-与-apply-区别\">#</a> call 与 apply 区别</h1>\n<ul>\n<li>相同点：都可以调用函数一次，都可以修改函数的上下文一次</li>\n<li>不同点：call 传递参数用逗号隔开，apply 方法执行传递数组</li>\n</ul>\n<h1 id=\"home-模块的组件拆分\"><a class=\"anchor\" href=\"#home-模块的组件拆分\">#</a> Home 模块的组件拆分</h1>\n<ol>\n<li>先把静态页面完成</li>\n<li>拆分出静态组件</li>\n<li>获取服务器的数据展示</li>\n<li>动态业务</li>\n</ol>\n<h1 id=\"三级联动组件完成\"><a class=\"anchor\" href=\"#三级联动组件完成\">#</a> 三级联动组件完成</h1>\n<p>由于三级联动组件在 Home、Search、Detail 模块中都使用了，所有注册为一个全局组件 (在 main.js 注册):<br />\n// 先引入。三级联动的组件 -- 全局组件<br />\n <code>import TypeNav from '@/pages/Home/TypeNav'</code> <br />\n// 再注册。第一个参数：全局组件的名字 第二个参数：哪一个组件<br />\n <code>Vue.component(TypeNav.name,TypeNav)</code></p>\n<ul>\n<li>好处：只需要注册一次，就可以在项目任意的地方使用，且使用的时候不需要引入</li>\n</ul>\n<h1 id=\"完成其余静态组件\"><a class=\"anchor\" href=\"#完成其余静态组件\">#</a> 完成其余静态组件</h1>\n<p>HTML + CSS + 图片资源</p>\n<h1 id=\"postman-测试接口\"><a class=\"anchor\" href=\"#postman-测试接口\">#</a> POSTMAN 测试接口</h1>\n<ul>\n<li>刚刚经过 postman 工具测试，接口是没有问题的</li>\n<li>如果服务器返回的数据 code 字段为 200，代表服务器返回数据成功</li>\n<li>整个项目，接口前缀都有 /api 字样</li>\n</ul>\n<h1 id=\"axios-二次封装\"><a class=\"anchor\" href=\"#axios-二次封装\">#</a> axios 二次封装</h1>\n<p>(发请求的几种方式：XMLHttpRequest、fetch、JQ、axios)</p>\n<ol>\n<li>为什么需要进行二次封装 axios<br />\n 为了使用请求拦截器、响应拦截器：</li>\n</ol>\n<ul>\n<li>请求拦截器：可以在发请求之前可以处理一些业务</li>\n<li>响应拦截器：当服务器数据返回以后，可以处理一些事情</li>\n</ul>\n<ol start=\"2\">\n<li>在项目中创建 api 文件夹关于 axios (在 src 文件夹目录下建立)</li>\n</ol>\n<ul>\n<li>接口当中：路径都带有 /api</li>\n<li>baseURL:&quot;/api&quot; 基础路径，发请求的时候，路径当中会出现 api，不用自己手写了</li>\n</ul>\n<ol start=\"3\">\n<li>如果 axios 基础不好，可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXhpb3MtaHR0cC5jbi9kb2NzL2ludHJv\">axios 中文文档</span></li>\n</ol>\n<h1 id=\"接口统一管理\"><a class=\"anchor\" href=\"#接口统一管理\">#</a> 接口统一管理</h1>\n<ul>\n<li>\n<p>项目很小：完全可以在组件的生命周期函数中发请求</p>\n</li>\n<li>\n<p>项目大：axios.get ('xxx')</p>\n<ol>\n<li>跨域问题<br />\n什么是跨域：协议、域名、端口号不同请求，称之为跨域<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo4MDgwLyMvaG9tZQ==\"> http://localhost:8080/#/home</span> 前端项目本地服务器<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2dtYWxsLWg1LWFwaS5hdGd1aWd1LmNu\"> http://gmall-h5-api.atguigu.cn</span> 后台服务器</li>\n</ol>\n<ul>\n<li>\n<p>解决跨域的几个方法：<br />\nJSONP、CROS、代理</p>\n</li>\n<li>\n<p>webpack 代理配置</p>\n</li>\n</ul>\n<pre><code>  devServer: &#123;\n  proxy: &#123;\n    '/api': &#123;\n      target: 'http://gmall-h5-api.atguigu.cn',\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n</li>\n</ul>\n<h1 id=\"nprogress-进度条的使用\"><a class=\"anchor\" href=\"#nprogress-进度条的使用\">#</a> nprogress 进度条的使用</h1>\n<p>可以在 reques.js 文件中使用</p>\n<ol>\n<li>\n<p>先引入：<br />\n// 引入进度条<br />\n <code>import nprogress from &quot;nprogress&quot;;</code> <br />\n// 引入进度条样式<br />\n <code>import &quot;nprogress/nprogress.css&quot;</code></p>\n</li>\n<li>\n<p>start：进度条开始 done：进度条结束<br />\n在请求拦截器中用 <code>1nprogress.start()</code> ，在响应拦截器中用 <code>nprogress.done()</code></p>\n</li>\n</ol>\n<h1 id=\"vuex-状态管理库\"><a class=\"anchor\" href=\"#vuex-状态管理库\">#</a> vuex 状态管理库</h1>\n<ol>\n<li>vuex 是什么？<br />\n官方提供的一个插件，是一个状态管理库，集中式管理项目中组件共用的数据。</li>\n</ol>\n<ul>\n<li>\n<p>state：仓库存储数据的地方</p>\n</li>\n<li>\n<p>mutations：修改 state 的唯一手段</p>\n</li>\n<li>\n<p>actions：处理 action，可以书写自己的业务逻辑，也可以处理异步。不能修改 state<br />\n <code>actions是服务员，mutations是厨师，只有mutations能做菜(修改state)</code></p>\n<p>getters：理解为计算属性，用于简化仓库数据，让组件获取仓库的数据更加方便<br />\n modules</p>\n<p>vue2 要安装 vuex@3</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>\n<p>vuex 基本使用<br />\n因为 vuex 是 Vue 框架中的一个插件，要使用插件需要引入 vue 与 vuex 并 <code>Vue.use()</code>  一下，<br />\n然后暴露出去一个  <code>export default new Vuex.Store(&#123;&#125;)</code> <br />\n 别忘了在 main.js 入口文件里引入、注册一下仓库</p>\n</li>\n<li>\n<p>vuex 模块式开发</p>\n</li>\n</ol>\n<ul>\n<li>如果项目过大，组件过多，接口也很多，数据也很多，可以让 vuex 实现模块式开发</li>\n<li>每个模块都有自己的一个小仓库，到时候引入到 store 的入口文件中，然后在 export default 中用 modules 对小仓库进行管理</li>\n</ul>\n<h1 id=\"vue-模块开发总结\"><a class=\"anchor\" href=\"#vue-模块开发总结\">#</a> vue 模块开发总结！！！！！！！</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>写请求。【api 文件夹的 <code>index.js</code>  中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】<br />\n(Actions,Mutations,State) 参考 vuex 工作流程图</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取仓库数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"一-写静态页面-静态组件拆分\"><a class=\"anchor\" href=\"#一-写静态页面-静态组件拆分\">#</a> 一、写静态页面 + 静态组件拆分</h2>\n<h2 id=\"二-写请求\"><a class=\"anchor\" href=\"#二-写请求\">#</a> 二、写请求。</h2>\n<p>在 api 文件夹的 <code>index.js</code>  中</p>\n<pre><code>export const reqGetSearchInfo = (params) =&gt; requests(&#123;\n  url:'/list',\n  method:'post',\n  data:params\n&#125;)\n</code></pre>\n<h2 id=\"三-发请求api\"><a class=\"anchor\" href=\"#三-发请求api\">#</a> 三、发请求 (API)</h2>\n<p>在组件的 <code>mounted()</code>  中发请求。即组件挂载完毕，通知 Vuex 向服务器发请求。</p>\n<ul>\n<li>dispatch：dispatch 是分发的意思，是 store 身上的一个 API，它包含两个参数，第一个是动作也可以说是一个操作，你通过这个操作调用 actions 里面的一个函数。第二个就是你要传递的参数 (也可以不传。但如果传递，到时候至少要传一个空对象，不然会报错)</li>\n</ul>\n<pre><code>mounted() &#123;\n//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中\nthis.$store.dispatch('getGoodInfo',this.$route.params.skuid\n&#125;\n\n</code></pre>\n<ul>\n<li>要发请求，需要在对应的小仓库中先引入之前封装好的 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<h2 id=\"四-vuex三连环\"><a class=\"anchor\" href=\"#四-vuex三连环\">#</a> 四、vuex (三连环)</h2>\n<ol>\n<li>第一环：Actions。<br />\n因为你使用了 dispatch，而其中的 <code>getGoodInfo</code>  未定义，因此要在 store 仓库中对应小仓库的 actions 中定义 getGoodInfo。通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据。<br />\n即 actions 中必须要有一个 getGoodInfo 方法来与之对应。其中参数 <code>&#123;commit&#125;</code>  是对 commit 的解构。commit 也是一个函数，有两个操作，第一个也是一个动作，第二个就是参数，通过 commit 将这次请求交给 mutations。<br />\n这第二个参数是在用户派发 actions 的时候，第二个参数传递过来的，至少要传一个空对象</li>\n</ol>\n<pre><code>\nconst actions = &#123;\nasync getGoodInfo(&#123;commit&#125;,skuId)&#123;\nlet result =await reqGoodsInfo(skuId)\nif(result.code==200)&#123;\ncommit('GetGOODINFO',result.data)\n&#125;\n&#125;\n&#125;\n\n</code></pre>\n<ol start=\"2\">\n<li>第二环：Mutations</li>\n</ol>\n<ul>\n<li>修改处理数据的唯一地方</li>\n<li>在 mutations 中真正的处理数据并且渲染数据</li>\n</ul>\n<pre><code>\nconst mutations = &#123;\nGetGOODINFO(state, categoryList) &#123;\nstate.categoryList = categoryList;\n&#125;\n\n</code></pre>\n<ul>\n<li>getters:<br />\n 就是相当于计算属性，对 state 中的数据进行简化操作，就比如当你的数据很复杂时你需要简单的拿到数据。举个例子你的数据是：AAA.BBB.CCC.DDD.data, 那么你就可以使用计算属性将其变为 data.</li>\n</ul>\n<pre><code>skuInfo(state) &#123;\n  return state.goodInfo.skuInfo || &#123;&#125;\n&#125;\n\n</code></pre>\n<ul>\n<li>使用 getters，在组件中获取仓库数据时用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code>  不用 <code>&#123; mapState &#125;</code>  了</li>\n</ul>\n<ol start=\"3\">\n<li>第三环：State<br />\nstate 中数据默认初始值别瞎写，服务器返回对象，起始值是对象；服务器返回数组，起始值是数组。根据接口的返回值去初始化</li>\n</ol>\n<pre><code>\nconst state = &#123;\n  categoryList: []\n&#125;\n\n</code></pre>\n<h2 id=\"五-组件获取仓库数据\"><a class=\"anchor\" href=\"#五-组件获取仓库数据\">#</a> 五、组件获取仓库数据</h2>\n<p>回到实例 (组件) 中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br />\n 并把数据映射为组件实例身上的一个属性：</p>\n<pre><code>\ncomputed: &#123;\n...mapState(&#123;\ncategoryList: (state) =&gt; categoryList\n&#125;)\n&#125;\n\n</code></pre>\n<p>如果用了 getters，辅助函数要用 <code>import &#123; mapGetters &#125; from &quot;vuex&quot;;</code></p>\n<pre><code>computed: &#123;\n  //mapGetters里面的写法：传递的数组，因为getters计算没有划分模块\n...mapGetters(['skuInfo'])\n&#125;\n\n</code></pre>\n<h2 id=\"六-动态展示数据\"><a class=\"anchor\" href=\"#六-动态展示数据\">#</a> 六、动态展示数据</h2>\n<p>根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成</p>\n<p>————————————————————————————————————————————————</p>\n<p>栗子：</p>\n<h1 id=\"完成-typenav-三级联动展示数据业务\"><a class=\"anchor\" href=\"#完成-typenav-三级联动展示数据业务\">#</a> 完成 TypeNav 三级联动展示数据业务</h1>\n<p>把全局组件放到 components 文件夹中<br />\n axios 二次封装、vuex 准备工作。。。</p>\n<ol>\n<li>在三级联动组件中写 <code>mounted()</code> ，组件挂载完毕，通知 Vuex 向服务器发请求：</li>\n</ol>\n<pre><code>\nmounted() &#123;\n//派发 actions，通知 Vuex 发请求，获取数据存储于仓库之中\nthis.$store.dispatch(&quot;categoryList&quot;);\n&#125;\n\n</code></pre>\n<ol start=\"2\">\n<li>因为 &quot;categoryList&quot; 未定义，去 store 仓库中的 home 模块的小仓库中，在 actions 中定义 categoryList。<br />\n通过 API 里面的接口函数调用，向服务器发请求，获取服务器的数据<br />\n要发请求，需要引入之前封装 api： <code> import &#123; reqCategoryList &#125; from &quot;@/api&quot;;</code></li>\n</ol>\n<pre><code>\nconst actions = &#123;\n  //通过API里面的接口函数调用，向服务器发请求，获取服务器的数据\n  async categoryList(&#123; commit &#125;) &#123;\n    //解构commit，提交mutations\n    let result = await reqCategoryList();\n    if (result.code == 200) &#123;\n      //第一个参数是起名，第二个参数是提交的数据\n      commit(&quot;GETCATEGORYLIST&quot;, result.data);\n    &#125;\n  &#125;,\n\n</code></pre>\n<ol start=\"3\">\n<li>请求成功，commit 提交给 mutations 修改 state。在此之前 state 需要写一个初始值。</li>\n</ol>\n<pre><code>\nconst state = &#123;\ncategoryList: [],\n&#125;\nconst mutations = &#123;\nCATEGORYLIST(state, categoryList) &#123;\nstate.categoryList = categoryList;\n&#125;,\n&#125;;\n\n</code></pre>\n<ol start=\"4\">\n<li>Home 组件中已经有了相应的数组，需要在三级联动 TypeNav 组件中拿到相应的数据进行展示<br />\n回到 TypeNav 组件中使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code> <br />\n 并把数据映射为组件实例身上的一个属性：</li>\n</ol>\n<pre><code>\ncomputed: &#123;\n...mapState(&#123;\ncategoryList: (state) =&gt; state.home.categoryList,\n&#125;),\n&#125;\n\n</code></pre>\n<ol start=\"5\">\n<li>展示数据。<br />\n先看数据的结构，发现一层套一层有三层，是一个三级菜单<br />\n在 template 把多余的结构去掉，只留一个，用 v-for 生成： <code>v-for=&quot;(c1, index) in categoryList&quot; :key=&quot;c1.categoryId&quot;</code> <br />\n 并把之前写死的数据替换： <code>c1.categoryName</code></li>\n</ol>\n<h1 id=\"完成一级分类动态添加背景颜色\"><a class=\"anchor\" href=\"#完成一级分类动态添加背景颜色\">#</a> 完成一级分类动态添加背景颜色</h1>\n<ul>\n<li>方法一：采用样式完成 (可以的)</li>\n<li>方法二：通过 JS 完成</li>\n</ul>\n<h1 id=\"通过-js-控制二三级商品分类的显示与隐藏\"><a class=\"anchor\" href=\"#通过-js-控制二三级商品分类的显示与隐藏\">#</a> 通过 JS 控制二三级商品分类的显示与隐藏</h1>\n<p>最开始的时候，是通过 CSS 样式的 display：block|none 显示与隐藏二三级商品分类</p>\n<h1 id=\"函数的防抖与节流\"><a class=\"anchor\" href=\"#函数的防抖与节流\">#</a> 函数的防抖与节流</h1>\n<p>演示卡顿现象：事件触发非常频繁，而且每一次触发，回调函数都要去执行，如果事件很短，而且回调函数有计算，那么很可能出现浏览器卡顿</p>\n<ul>\n<li>\n<p>节流：在规定的间隔时间范围内不会重复触发回调，只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</p>\n</li>\n<li>\n<p>防抖：前面的所有的触发都被取消，最后一次执行在规定的时间后才会触发，也就是说如果连续快速的触发，只会执行一次</p>\n</li>\n</ul>\n<h1 id=\"完成三级联动节流操作\"><a class=\"anchor\" href=\"#完成三级联动节流操作\">#</a> 完成三级联动节流操作</h1>\n<p>node_modules 里面已经有 lodash 了</p>\n<ol>\n<li>引入 lodash： <code>import * from 'lodash' </code></li>\n<li>使用节流函数：</li>\n</ol>\n<pre><code>\nchangeIndex: \\_.throttle(function(index) &#123;\n//index:鼠标移上某一个一级分类的索引值\nthis.currentIndex = index\n&#125;,50)\n\n</code></pre>\n<h1 id=\"三级联动组件的路由跳转与传递参数\"><a class=\"anchor\" href=\"#三级联动组件的路由跳转与传递参数\">#</a> 三级联动组件的路由跳转与传递参数</h1>\n<p>三级联动用户可以点击的：一级分类、二级分类、三级分类，当你点击的时候 Home 模块跳转到 Search 模块，一级会把用户选中的产品 (产品的名字、产品的 ID) 在路由跳转的时候，进行传递</p>\n<ul>\n<li>注意：如果使用声明式导航 router-link，可以实现路由的跳转与传递参数。但是会出现卡顿现象</li>\n<li>原因：router-link 会创建很多组件，很耗内存。</li>\n</ul>\n<p>因此我们选择编程式导航，但是为了优化性能，不建议在每一个 a 标签上写，最好给它们的父节点上写声明式导航，然后利用事件的委派</p>\n<ul>\n<li>\n<p>利用事件的委派存在一些问题：</p>\n<ol>\n<li>\n<p>事件委派父节点下的子节点有很多，怎么知道一定是 a 标签<br />\n解决：给 a 标签添加自定义属性，以自定义属性为条件判断其是不是 a 标签</p>\n</li>\n<li>\n<p>如何获取参数<br />\n解决：仍然给 a 标签添加自定义属性</p>\n</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"search-模块中的-typenav-商品分类菜单\"><a class=\"anchor\" href=\"#search-模块中的-typenav-商品分类菜单\">#</a> Search 模块中的 TypeNav 商品分类菜单</h1>\n<p>显示与隐藏</p>\n<p>过渡动画效果：前提 组件 | 元素 必须有 <code>v-if|v-show</code>  指令才可以进行过渡动画<br />\n要用 transition 标签把需要添加过渡的元素包裹起来 可以加 name，不加 name 的话就是 <code> v-enter，v-leave</code></p>\n<h1 id=\"优化商品分类三级列表\"><a class=\"anchor\" href=\"#优化商品分类三级列表\">#</a> 优化商品分类三级列表</h1>\n<p>把  <code>this.$store.dispatch(&quot;categoryList&quot;)</code>  从 TypeNav 组件放到 App 组件中<br />\n在 App 根组件中发请求，因为根组件 mounted 只会执行一次</p>\n<h1 id=\"合并-params-与-query-参数\"><a class=\"anchor\" href=\"#合并-params-与-query-参数\">#</a> 合并 params 与 query 参数</h1>\n<h1 id=\"开发-home-首页当中的-listcontainer-组件与-floor-组件\"><a class=\"anchor\" href=\"#开发-home-首页当中的-listcontainer-组件与-floor-组件\">#</a> 开发 Home 首页当中的 ListContainer 组件与 Floor 组件</h1>\n<ul>\n<li>\n<p>注意：服务器返回的数据 (接口) 只有商品分类菜单分类数据，对于 ListContainer 组件与 Floor 组件数据服务器没有提供<br />\n解决方法：mock 数据 (模拟)：如果你想 mock 数据，需要用到插件 mockjs<br />\n 前端 mock 的数据不会和服务器进行任何通信</p>\n</li>\n<li>\n<p>mockjs 使用步骤：</p>\n<ol>\n<li>在项目当中 src 文件夹中创建 mock 文件夹，并创建相应的 JSON 文件</li>\n<li>准备 JSON 数据 (一定要格式化一下，不能留有空格，不然跑不起来)</li>\n<li>把 mock 数据需要的图片放置到 public 文件夹中【public 文件夹在打包的时候原封不动打包到 dist 文件夹中】</li>\n<li>开始 mock 虚拟数据，通过 mockjs 实现：在 mock 文件夹下创建 mockServe.js 文件</li>\n<li>mockServe.js 文件下：</li>\n</ol>\n</li>\n</ul>\n<pre><code>\n    //先引入 mockjs 模块\n    import Mock from &quot;mockjs&quot;;\n    //把 JSON 数据格式引入进来(JSON 数据格式没有对外暴露，但是可以引入)\n    //webpack 默认对外暴露的：图片、JSON 数据格式\n    import banner from './banner.json'\n    import floor from './floor.json'\n    //mock 数据：第一个参数请求地址 第二个参数请求数据\n    Mock.mock(&quot;/mock/banner&quot;,&#123;code:200,data:banner&#125;)\n    Mock.mock(&quot;/mock/floor&quot;,&#123;code:200,data:floor&#125;) 6.把 mockServe.js 文件在 main.js 中引入一下\n\n</code></pre>\n<h1 id=\"swiper-基本使用\"><a class=\"anchor\" href=\"#swiper-基本使用\">#</a> swiper 基本使用</h1>\n<p>swiper 主要用来做轮播图<br />\n在 new Swiper 实例之前，页面的结构必须得先有</p>\n<ul>\n<li>第一步：引包 (相应 js|css)</li>\n<li>第二步：页面中结构务必要有</li>\n<li>第三步：new Swiper 实例【轮播图添加动态效果】</li>\n</ul>\n<pre><code>\n  &lt;script&gt;\n  var mySwiper = new Swiper ('.swiper', &#123;\n\n    loop: true, // 循环模式选项\n\n        // 如果需要分页器\n        pagination: &#123;\n          el: '.swiper-pagination',\n          clickable:true\n        &#125;,\n\n        // 如果需要前进后退按钮\n        navigation: &#123;\n          nextEl: '.swiper-button-next',\n          prevEl: '.swiper-button-prev',\n        &#125;,\n      &#125;)\n\n  &lt;/script&gt;\n\n</code></pre>\n<h1 id=\"listcontainer-组件开发重点\"><a class=\"anchor\" href=\"#listcontainer-组件开发重点\">#</a> ListContainer 组件开发重点</h1>\n<ol>\n<li>安装 Swiper 插件：安装 5 版本  <code>npm i swiper@5 </code></li>\n<li>引包： <code>import Swiper from 'swiper</code></li>\n<li>写轮播图：</li>\n</ol>\n<pre><code>\n&lt;div class=&quot;swiper-wrapper&quot;&gt;\n&lt;div class=&quot;swiper-slide&quot; v-for=&quot;(carousel,index) in bannerList&quot; :key=&quot;carousel.id&quot;&gt;\n&lt;img :src=&quot;carousel.imgUrl&quot; /&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n<ol start=\"3\">\n<li>在 main.js 中引入样式，因为网站有好几个地方都使用了轮播图，这样引入一遍就可以了。<br />\n引入样式直接 import 引入就行，不用对外暴露，不用写 from： <code>import &quot;swiper/css/swiper.css&quot;</code></li>\n<li>new Swiper 实例，注意不要在 mounted 中，因为 dispatch 涉及异步语句，导致 v-for 遍历的时候结构还没有完全，因此不行</li>\n</ol>\n<ul>\n<li>\n<p>watch 数据监听：监听已有数据的变化 (watch 有两种写法，一种是对象写法，一种是函数写法)</p>\n</li>\n<li>\n<p>最完美的解决方案： watch + nextTick</p>\n</li>\n</ul>\n<p>nextTick：在下次 DOM 更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>\n<pre><code>   watch: &#123;\n  //监听bannerList数据的变化：因为这条数据发生过变化，由空数组变为数组中有四个元素\n  //handler:可以监听到新的值和旧的值\n  bannerList: &#123;\n    handler(newValue, oldValue) &#123;\n      //如果执行handler方法，代表组件实例身上这个属性的数据已经有了。但只能保证有数据，不知道v-for有没有执行完\n      //nextTick：在下次DOM更新循环之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM\n      this.$nextTick(() =&gt; &#123;\n        //当执行这个回调的时候，保证服务器数据回来了，v-for执行完毕\n        var mySwiper = new Swiper(this.$refs.mySwiper, &#123;\n          loop: true, // 循环模式选项\n\n          // 如果需要分页器\n          pagination: &#123;\n            el: &quot;.swiper-pagination&quot;,\n            clickable: true,\n          &#125;,\n\n          // 如果需要前进后退按钮\n          navigation: &#123;\n            nextEl: &quot;.swiper-button-next&quot;,\n            prevEl: &quot;.swiper-button-prev&quot;,\n          &#125;,\n        &#125;);\n      &#125;);\n    &#125;,\n  &#125;,\n&#125;,\n</code></pre>\n<h1 id=\"开发-floor-组件\"><a class=\"anchor\" href=\"#开发-floor-组件\">#</a> 开发 floor 组件</h1>\n<ol>\n<li>写 API<br />\n 在 api 文件夹下的 index.js 中写：  <code>export const reqFloorList = () =&gt; mockRequests.get('/floor') </code></li>\n<li>写 vuex 三连环 在 store 文件夹下写</li>\n</ol>\n<ul>\n<li>引入请求： <code>import &#123; reqFloorList &#125; from &quot;@/api&quot;;</code></li>\n</ul>\n<pre><code class=\"language-actions中：\">  async getFloorList(&#123; commit &#125;) &#123;\n  //获取发送请求的结果\n  let result = await reqGetBannerList();\n  if (result.code == 200) &#123;\n  //提交 mutation\n  commit(&quot;GETFLOORLIST&quot;, result.data);\n    &#125;\n  &#125;\n  ```\n\n```mutations中：\n  GETFLOORLIST(state, floorList) &#123;\n  state.floorList = floorList;\n  &#125;\n</code></pre>\n<pre><code class=\"language-state中：\">floorList: []\n</code></pre>\n<ul>\n<li>注意： <code>getFloorList</code>  这个 action 在哪里触发？需要在 Home 路由组件中发。如果在 floor 组件内部触发没有办法 v-for 出来两个 floor。因为用了两个 floor</li>\n</ul>\n<ol start=\"3\">\n<li>\n<p>组件获取数据</p>\n<ul>\n<li>让组件拿到相应数据，使用辅助函数 mapState 去获取： <code>import &#123; mapState &#125; from &quot;vuex&quot;;</code></li>\n<li>并把数据映射为组件实例身上的一个属性：<pre><code>computed: &#123;\n  ...mapState(&#123;\n    floorList: (state) =&gt; state.home.floorList\n  &#125;)\n&#125;\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>展示数据<br />\n根据数据结构，在 template 把多余的结构去掉，只留一个，用 v-for 生成。(v-for 也可以在自定义标签中使用)</p>\n<ul>\n<li>\n<p>因为 Floor 的数据在 Home 那里，而 Home 组件与 Floor 组件是父子关系，所以涉及到了父子间的组件通信</p>\n</li>\n<li>\n<p>组件通信的方式有哪些？(面试频率极高)</p>\n<ul>\n<li>props：用于父子间组件通信</li>\n<li>自定义事件 (@on @emit)：可以实现子给父通信</li>\n<li>全局事件总线 ($bus)：全能</li>\n<li>插槽</li>\n<li>vuex</li>\n</ul>\n</li>\n</ul>\n<p>父传：<br />\n <code>&lt;Floor v-for=&quot;(floor, index) in floorList&quot; :key=&quot;floor.id&quot; :list=&quot;floor&quot;/&gt;</code></p>\n<p>子收：<br />\n <code> props: ['list']</code></p>\n<ul>\n<li>动态展示数据<br />\n根据数据的格式和内容，将之前写的死数据替换成动态数据，把复用的删掉，该遍历的遍历<br />\n <code>&#123;&#123;list.name&#125;&#125;,list.navList,&#123;&#123;nav.text&#125;&#125;</code>  等</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"search-模块开发\"><a class=\"anchor\" href=\"#search-模块开发\">#</a> search 模块开发</h1>\n<ol>\n<li>先写静态页面 + 静态组件拆分出来。【组件中】</li>\n<li>发请求 (API)。【组件的 <code>mounted()&#123;&#125;</code>  中】</li>\n<li>vuex 三连环。【store 文件夹的对应小仓库中】</li>\n<li>组件获取数据。【组件的 <code>computed: &#123;&#125;</code>  中】</li>\n<li>动态展示数据。【组件 html 结构上】</li>\n</ol>\n<h2 id=\"写请求-在-api-文件夹下的indexjs中\"><a class=\"anchor\" href=\"#写请求-在-api-文件夹下的indexjs中\">#</a> 写请求 在 api 文件夹下的 <code>index.js</code>  中</h2>\n<pre><code>//当前这个接口，给服务器传递一个默认的参数params，至少是一个空对象，不然会报错\nexport const reqGetSearchInfo = (params) =&gt; requests(&#123;\n  url:'/list',\n  method:'post',\n  data:params\n&#125;)\n\n</code></pre>\n<h2 id=\"search-模块根据不同的参数获取数据展示\"><a class=\"anchor\" href=\"#search-模块根据不同的参数获取数据展示\">#</a> Search 模块根据不同的参数获取数据展示</h2>\n<p>因为 mounted 只会调用一次，所以将 <code>this.$store.dispatch(&quot;getSearchList&quot;, &#123;&#125;)</code>  封装成一个函数，写在 methods 中，需要的时候调用即可</p>\n<pre><code>  data() &#123;\n    return &#123;\n      searchParams: &#123;\n        //一级分类的id\n        category1Id: &quot;&quot;,\n        //二级分类的id\n        category2Id: &quot;&quot;,\n        //三级分类的id\n        category3Id: &quot;&quot;,\n        //分类的名字\n        categoryName: &quot;&quot;,\n        //关键字\n        keyword: &quot;&quot;,\n        //排序\n        order: &quot;&quot;,\n        //分页器\n        pageNo: 1,\n        //代表每一页展示数据的个数\n        pageSize: 10,\n        //平台售卖属性操作带的参数\n        props: [],\n        //品牌\n        trademark: &quot;&quot;,\n      &#125;,\n    &#125;;\n  &#125;,\n  beforeMount() &#123;\n    //使用Object.assign:ES6 新增的语法，合并对象 整理参数\n    Object.assign(this.searchParams, this.$route.query, this.$route.params);\n  &#125;,\n  mounted() &#123;\n    //在发请求之前带给服务器参数【searchParams参数发生变化有数值带给服务器】\n    this.getData();\n  &#125;,\n  methods: &#123;\n    //向服务器发请求获取search数据(根据参数不同返回不同的数据进行展示)\n    getData() &#123;\n      this.$store.dispatch(&quot;getSearchList&quot;, this.searchParams);\n    &#125;,\n  &#125;\n</code></pre>\n<h2 id=\"监听路由的变化再次发请求获取数据\"><a class=\"anchor\" href=\"#监听路由的变化再次发请求获取数据\">#</a> 监听路由的变化再次发请求获取数据</h2>\n<pre><code>  watch: &#123;\n    $route(newValue,oldValue) &#123;\n      //再次发请求之前还需要整理带给服务器的参数\n      Object.assign(this.searchParams, this.$route.query, this.$route.params);\n      //再次发起ajax请求\n      this.getData()\n      //每次一请求完毕，应该把相应的一二三级分类的id置空，让他接收下一次的相应的id\n      this.searchParams.category1Id = ''\n      this.searchParams.category2Id = ''\n      this.searchParams.category3Id = ''\n    &#125;\n  &#125;\n</code></pre>\n<h2 id=\"面包屑分类处理\"><a class=\"anchor\" href=\"#面包屑分类处理\">#</a> 面包屑分类处理</h2>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl sui-tag<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>with-x<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>searchParams.categoryName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>removeCategoryName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>x<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code class=\"language-script中的methods\">    //删除分类的名字\n    removeCategoryName() &#123;\n      //一点击“x”，就把categoryName置空(恢复默认页面)，还需要向服务器发请求\n      //也可以不置空，而是写成undefined，这样这个字段就不会带给服务器，提高性能\n      this.searchParams.categoryName = undefined\n      this.searchParams.category1Id = undefined\n      this.searchParams.category2Id = undefined\n      this.searchParams.category3Id = undefined\n      this.getData()\n      //地址栏也需要修改：进行路由的修改,自己跳自己\n      //严谨：本意是删除query，如果路径中出现params不应该删除，路由跳转的时候应该带着\n      if(this.$route.params) &#123;\n        this.$router.push(&#123;\n          name:&quot;search&quot;,\n          params:this.$route.params\n        &#125;)\n      &#125;\n\n    &#125;\n</code></pre>\n<h2 id=\"平台售卖属性操作\"><a class=\"anchor\" href=\"#平台售卖属性操作\">#</a> 平台售卖属性操作</h2>\n<ul>\n<li>给售卖属性绑定点击事件</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type-wrap<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(attr,index) in attrList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attr.attrId<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 平台售卖属性：比如说颜色 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl key<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fl value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>type-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">&lt;!-- 平台相应的属性值：粉色，蓝色，黑色。。。--></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(attrValue,index) in attr.attrValueList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attrValue<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>attrInfo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token comment\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><pre><code class=\"language-js,SeachSelectr组件中，methods方法中:\">\n//平台售卖属性值的点击事件\nattrInfo(attr,attrVal) &#123;\n//[&quot;属性ID：属性值：属性名&quot;]\n  this.$emit(&quot;attrInfo&quot;,attr,attrValue)\n&#125;\n</code></pre>\n<pre><code class=\"language-js,Search组件中，methods方法中:\">attrInfo(attr,attrValue) &#123;\n  //[&quot;属性ID：属性值：属性名&quot;]\n  //参数格式整理好\n  let props = `$&#123;attr.attrID&#125;:$&#123;attrValue&#125;:$&#123;attr.attrName&#125;`\n  this.searchParams.props(props)\n  //再次发请求\n  this.getData()\n&#125;\n</code></pre>\n<h2 id=\"数组去重\"><a class=\"anchor\" href=\"#数组去重\">#</a> 数组去重</h2>\n<pre><code>if(this.array.x.indexOf(x)==-1) &#123;\n  this.array.x.push(x)\n&#125;\n</code></pre>\n<h2 id=\"排序操作\"><a class=\"anchor\" href=\"#排序操作\">#</a> 排序操作</h2>\n<p>api 接口给出的 order 排序参数：<br />\n1：综合<br />\n 2：价格<br />\n asc：升序<br />\n desc：降序<br />\n一共有四种情况</p>\n<ol>\n<li>判断 active 动态类名在谁身上？</li>\n</ol>\n<ul>\n<li>通过 order 属性值中包含 1 (综合)| 包含 2 (价格)</li>\n</ul>\n<pre><code>&lt;ul class=&quot;sui-nav&quot;&gt;\n  &lt;li :class=&quot;&#123;active:searchParams.order.indexOf('1'!=-1)&#125;&quot;&gt;\n    &lt;a&gt;综合&lt;/a&gt;\n  &lt;/li&gt;\n  &lt;li :class=&quot;&#123;active:searchParams.order.indexOf('2'!=-1)&#125;&quot;&gt;\n    &lt;a&gt;价格&lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<ol start=\"2\">\n<li>判断箭头</li>\n</ol>\n<pre><code>//太长了可以写在计算属性里\n&lt;li :class=&quot;&#123;active:isOne&#125;&quot;&gt;\n  &lt;a&gt;综合&lt;span v-show=&quot;isOne&quot; class=&quot;iconfont&quot; :class=&quot;&#123;'icon-UP':isAsc,'icon-DOWN':isDesc&#125;&quot;&gt;&lt;/span&gt;&lt;/a&gt;\n&lt;/li&gt;\n</code></pre>\n<ol start=\"3\">\n<li>点击事件</li>\n</ol>\n<pre><code class=\"language-methods\">changeOrder(flag) &#123;\n  //flag形参：它是一个标记，代表用户点击的是综合(1)还是价格(2)  用户点击的时候传递进来的\n  let originOrder = this.searchParams.order\n  //这里获取到的是最开始的状态\n  let originFlag = this.searchParams.order.split(&quot;:&quot;)[0]\n  let originSort = this.searchParams.order.split(&quot;:&quot;)[1]\n  //准备一个新的order的属性值\n  let newOrder = ''\n  //确定点击的一定是“综合”\n  if(flag == originFlag) &#123;\n    newOrder = `$&#123;originFlag&#125;:$&#123;originSort==&quot;desc&quot;?&quot;asc&quot;:&quot;desc&quot;&#125;`\n  &#125;else &#123;\n  //确定点击的一定是“价格”\n  newOrder = `$&#123;flag&#125;:$&#123;&quot;desc&quot;&#125;`\n  &#125;\n  //将newOrder赋予searchParams\n  this.searchParams.order = newOrder\n  //再次发请求\n  this.getData()\n&#125;\n</code></pre>\n<h1 id=\"分页器\"><a class=\"anchor\" href=\"#分页器\">#</a> 分页器</h1>\n<ul>\n<li>为什么很多项目采用分页功能，因为有的平台同时展示的数据有很多</li>\n<li>对于分页器而言，自定义数据需要知道四个前提条件\n<ol>\n<li>pageNo：当前第几页</li>\n<li>pageSize：代表每一页展示多少条数据</li>\n<li>total：代表整个分页一共要展示多少条数据</li>\n<li>continues：代表分页连续页码个数</li>\n</ol>\n</li>\n<li>自定义分页器，在开发的时候先自己传递假的数据进行测试，调试成功后在用服务器数据</li>\n<li>对于分页器而言，很重要的一个地方即为【算出：连续页面起始数字和结束数字】</li>\n</ul>\n<pre><code>export default &#123;\n  name: &quot;Pagination&quot;,\n  props: [&quot;pageNo&quot;, &quot;pageSize&quot;, &quot;total&quot;, &quot;continues&quot;],\n  computed: &#123;\n    //总共多少页\n    totalPage() &#123;\n      //向上取整\n      return Math.ceil(this.total / this.pageSize);\n    &#125;,\n    //计算出连续页码的起始数字与结束数字[连续的页码数字，至少是5]\n    startNumAndEndNum() &#123;\n      //解构\n      const &#123; continues, pageNo, totalPage &#125; = this;\n      //先定义两个变量存储起始数字与结束数字\n      let start = 0,\n        end = 0;\n      //连续页码数字5【就是至少5页】，如果出现不正常现象(就是不够五页)\n      //不正常现象：总页数没有连续页码多\n      if (continues &gt; totalPage) &#123;\n        start = 1;\n        end = totalPage;\n      &#125; else &#123;\n        //正常现象\n        //起始数字\n        start = pageNo - parseInt(continues / 2);\n        //结束数字\n        end = pageNo + parseInt(continues / 2);\n        //把出现的不正常现象(start数字出现0或负数)纠正\n        if (start &lt; 1) &#123;\n          start = 1;\n          end = continues;\n        &#125;\n        //把出现的不正常现象(end数字大于总页码)纠正\n        if (end &gt; totalPage) &#123;\n          end = totalPage;\n          start = totalPage - continues + 1;\n        &#125;\n      &#125;\n      return &#123; start, end &#125;;\n    &#125;,\n  &#125;,\n&#125;;\n</code></pre>\n<h2 id=\"分页器动态展示\"><a class=\"anchor\" href=\"#分页器动态展示\">#</a> 分页器动态展示</h2>\n<pre><code class=\"language-html\">\n</code></pre>\n<p>——————————Search 模块结束，再开发 “详情” 模块</p>\n<h1 id=\"开发某一个商品的详情页面\"><a class=\"anchor\" href=\"#开发某一个商品的详情页面\">#</a> 开发某一个商品的详情页面</h1>\n<ol>\n<li>搭静态组件\n<ul>\n<li>详情页的组件还没有注册路由组件 (router 文件夹中)：</li>\n</ul>\n</li>\n</ol>\n<pre><code>import Detail from from '@/pages/Detail'\n\nroutes: [\n  &#123;\n    //点击商品跳到其详情页，需要进行路由跳转并带参(产品的id给详情页面)，所以还要占位/:skuid\n      path:&quot;/detail/:skuid&quot;,\n      component:Detail,\n      meta: &#123;show:true&#125;\n    &#125;,\n]\n</code></pre>\n<ul>\n<li>同时还要让商品图片可点击（跳转详情页）【search 模块中】</li>\n</ul>\n<pre><code>//在路由跳转的时候别忘记带id（params）参数\n&lt;router-link :to=&quot;`/detail/$&#123;good.id&#125;`&quot;&gt;\n  &lt;img :src=&quot;good.defaultImg&quot;&gt;\n&lt;/router-link&gt;\n</code></pre>\n<ul>\n<li>在跳转后还需要让滚轮回到顶上。vuerouter 滚动行为【router 文件夹中】</li>\n</ul>\n<pre><code>const router = new VueRouter(&#123;\n  routes:[...],\n  scrollBehavior(to,savedPosition) &#123;\n    //return 期望滚动到哪个的位置\n    return &#123;y:0&#125;\n  &#125;\n&#125;)\n</code></pre>\n<ol start=\"2\">\n<li>发请求【api 文件夹中】</li>\n</ol>\n<ul>\n<li>获取商品详情数据<br />\n // 获取商品详细信息的接口 URL：/api/item/{skuId} 请求方式：get<br />\nexport const reqGoodsInfo = (skuId) =&gt;<br />\nrequests({<br />\nurl:  <code>/item/$&#123;skuId&#125;</code> ,<br />\nmethod: &quot;get&quot;,<br />\n});</li>\n</ul>\n<ol start=\"3\">\n<li>vuex--- 获取商品详情信息</li>\n</ol>\n<ul>\n<li>vuex 中（store 文件夹中）还需要新增一个模块 detail.</li>\n</ul>\n<pre><code>const state= &#123;&#125;\nconst mutations = &#123;&#125;\nconst actions = &#123;&#125;\nconst getters = &#123;&#125;\n\nexport default &#123;\n   state,\n   actions,\n   mutations,\n   getters\n&#125;\n</code></pre>\n<ul>\n<li>搞完之后还需要回到大仓库中进行合并【store 文件夹中 index.js 中】</li>\n</ul>\n<pre><code>import detail from &quot;./detail&quot;;\n//对外暴露Store类的一个实例\nexport default new Vuex.Store(&#123;\n  //实现Vuex仓库模块式开发存储数据\n  modules:&#123;\n    detail\n  &#125;\n</code></pre>\n<ul>\n<li>派发 action，发请求捞数据【detail 模块 index.vue 中】</li>\n</ul>\n<pre><code>\n</code></pre>\n<ol start=\"4\">\n<li>动态展示组件</li>\n</ol>\n<h1 id=\"面试分页器封装原理\"><a class=\"anchor\" href=\"#面试分页器封装原理\">#</a> 面试：分页器封装原理</h1>\n<p>封装一个分页器组件 pagination</p>\n<ol>\n<li>知道当前是第几页：pageNo</li>\n<li>知道分页器一共需要展示多少条数据：total</li>\n<li>知道每一页需要展示数据的个数：pageSize，根据 2,3 能算出一共有多少页：totalPage</li>\n<li>知道连续的页码数：continues</li>\n</ol>\n<h1 id=\"zoom-放大镜展示数据\"><a class=\"anchor\" href=\"#zoom-放大镜展示数据\">#</a> zoom 放大镜展示数据</h1>\n<ul>\n<li>\n<p>遮罩层随鼠标移动<br />\n let left = event.offsetX-mask.offsetWidth/2<br />\nlet top = event.offsetY-mask.offsetHeight/2</p>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HWT%5D5JAIEXRTU@0%25%7D9C()19.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/5ZHB%7D4YUP1GE%F4YJ8BLR$4.png\" alt=\"\" /></p>\n<h1 id=\"商品售卖属性-排他操作点击高亮\"><a class=\"anchor\" href=\"#商品售卖属性-排他操作点击高亮\">#</a> 商品售卖属性 排他操作，点击高亮</h1>\n<h1 id=\"购买产品个数的操作\"><a class=\"anchor\" href=\"#购买产品个数的操作\">#</a> 购买产品个数的操作</h1>\n<h1 id=\"加入购物车重要\"><a class=\"anchor\" href=\"#加入购物车重要\">#</a> 加入购物车（重要）</h1>\n<ul>\n<li>\n<p>以前的路由跳转，就是从 A 路由跳到 B 路由，这里加入购物车、路由跳转之前，还要发请求。把你购买的产品的信息通过请求的形式通知服务器，服务器进行相应的存储</p>\n</li>\n<li>\n<p>加入购物车（发请求）以后，前台将参数带给服务器，服务器写入数据成功，并没有返回其他的数据，只返回了 code=200，代表这次操作成功。所以不用 vue 三连环存仓库了</p>\n</li>\n<li>\n<p>派发 action 操作实际上就是调用仓库中的 addOrUpdateShopCart，它是 async 函数，返回的结果是 Promise，只有成功和失败两种情况，为了判断购物车是否成功加入，store 仓库的 detail.js 中的 addOrUpdateShopCart 函数要进行判断，如果 code=200 则返回成功的回调，否则返回失败的回调。<br />\n写 try catch<br />\n![]( <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L1pGUA==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/ZFP</span>}3KBYS7(OJ(2D{$(_M~D.png)</p>\n<ul>\n<li>浏览器存储功能：HTML5 中新增的，本地存储和会话存储。一般存储的是字符串，不能存对象。要先把对象转化为字符串才能进行存储，JSON.stringify ()。捞到之后再转化回对象：JSON.parse ()</li>\n</ul>\n<p><img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3%7D\" alt=\"\" />%ZR}ERURV(R3V$]Z9MP8.png)</p>\n<h1 id=\"购物车模块\"><a class=\"anchor\" href=\"#购物车模块\">#</a> 购物车模块</h1>\n<ol>\n<li>购物车静态组件</li>\n<li>向服务器发起 ajax 请求，获取服务车数据，操作 vuex 三连环、组件获取数据展示数据</li>\n</ol>\n<ul>\n<li>问题：发请求的时候，获取不到你购物车里面的数据，因为服务器不知道你是谁</li>\n</ul>\n<ol start=\"3\">\n<li>UUID 临时游客身份</li>\n</ol>\n<ul>\n<li>生成 uuid，localStorage 存储</li>\n</ul>\n<p>detail.js 中</p>\n<pre><code>const state = &#123;\n//游客的临时身份\nuuid_token: getUUID()\n&#125;;\n</code></pre>\n<p>新建一个 utils 文件夹放 uuid_token.js</p>\n<pre><code>import &#123; v4 as uuidv4 &#125; from 'uuid';\n//要随机生成一个字符串，且每次执行不能发生变化，游客身份持久存储\nexport const getUUID = () =&gt; &#123;\n//先从本地存储获取uuid（看本地存储是否有）\nlet uuid_token = localStorage.getItem('UUIDTOKEN')\n//如果没有我则生成\nif(!uuid_token) &#123;\n  uuid_token = uuidv4()\n  //本地存储一次\n  localStorage.setItem('UUIDTOKEN',uuid_token)\n&#125;\n //切记有返回值，没有返回值undefined\nreturn uuid_token\n&#125;\n</code></pre>\n<p>api 文件夹中 request.js</p>\n<pre><code>//在当前模块中引入store\nimport store from &quot;@/store&quot;;\n\n//请求拦截器\nrequests.interceptors.request.use((config) =&gt; &#123;\n  if(store.state.detail.uuid_token) &#123;\n  //给请求头添加一个字段(userTempId)：和后台老师商量好\n  config.headers.userTempId = store.state.detail.uuid_token\n</code></pre>\n</li>\n</ul>\n<p>})</p>\n<ol start=\"4\">\n<li>动态展示购物车</li>\n</ol>\n<ul>\n<li>\n<p>数据格式有点不完美</p>\n</li>\n<li>\n<p>全选效果：用数组的 every 方法</p>\n</li>\n<li>\n<p>处理购物车数量（+，-，输入的数值）<br />\n三个地方触发一个回调<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/HTZ8$@2$UO%60LRH5%5DY%7DJ%60RI8.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>购物车删除操作<br />\n用户删除的太快，可能会出现负的情况（即使已经做了限制） 解决：节流</p>\n</li>\n<li>\n<p>删除选中的所有商品操作<br />\n没有一次删除很多产品的接口，但是有通过 ID 删除产品的接口（一次删一个）<br />\n传入参数 context 再调用 deleteCartListBySkuId</p>\n</li>\n</ul>\n<p>Promise.all () 只有所有的 promise 都成功才能调用<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/4MTF\" alt=\"\" /> 9W3%6Z8AK9) 840DLOD.png)<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L1NVRzlONjhJUVolMjVYKDBHSEsyJTVCTTNDQi5wbmcp\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/SUG9N68IQZ%X(0GHK2[M3CB.png)</span></p>\n<p>删完之后 await,async, 再次调用 getData<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/V%7D3%7DR17~XO0CS42CS02EL~8.png\" alt=\"\" /></p>\n<h1 id=\"登录与注册非常重要\"><a class=\"anchor\" href=\"#登录与注册非常重要\">#</a> 登录与注册（非常重要）</h1>\n<ol>\n<li>登录与注册的静态组件</li>\n</ol>\n<ul>\n<li>assets 文件夹：放置全部组件共用静态资源， webpack 打包的时候会把静态资源当成一个模块，打包到 JS 文 里面</li>\n<li>在 css 中写相对路径也可以用 @（@表示 src），但在 css 中要在 @前加个～。</li>\n</ul>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.list-item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>~@/assets/images/icons.png<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>注册业务</li>\n</ol>\n<ul>\n<li>获取验证码的接口</li>\n</ul>\n<ol start=\"3\">\n<li>登录业务</li>\n</ol>\n<ul>\n<li>\n<p>注册：通过数据库存储用户信息（账号，密码）</p>\n</li>\n<li>\n<p>登录：登录成功的时候，后台为了区分你这个用户是谁，服务器下方 token【令牌：唯一标识符】</p>\n</li>\n<li>\n<p>将来经常通过带 token 找服务器要用户信息进行展示</p>\n</li>\n<li>\n<p>注意：vuex 仓库存储数据 —— 不是持久化</p>\n</li>\n<li>\n<p>当用户注册完成，用户登录【用户名 + 密码】向服务器发请求（组件派发 action：userLogin），登陆成功获取 token，存储于仓库当中（非持久化的）。</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 登录业务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>commit<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">reqUserLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 服务器下发 token，用户唯一标识符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将来经常通过带 token 找服务器要用用户信息进行展示</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USERLOGIN\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faile\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>随后路由跳转到 home 首页，因此在首页当中（mounted）派发 action（getUserInfo）获取用户信息，以及动态展示 header 组件的内容。<br />\n问题：一刷新 home 首页，会获取不到用户信息（token：vuex 非持久化存储）</p>\n<ul>\n<li>持久化存储</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">token</span><span class=\"token operator\">:</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 登录业务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">userLogin</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span>commit<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">reqUserLogin</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 服务器下发 token，用户唯一标识符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将来经常通过带 token 找服务器要用用户信息进行展示</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"USERLOGIN\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 持久化存储 token</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TOKEN\"</span><span class=\"token punctuation\">,</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">\"ok\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"faile\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"存在的问题\"><a class=\"anchor\" href=\"#存在的问题\">#</a> 存在的问题</h2>\n<ol>\n<li>多个组件展示用户信息需要在每一个组件的 mounted 中触发 <code>this.$store.dispatch('getUserInfo')</code></li>\n<li>用户已经登陆了，就不应该再回登录页</li>\n</ol>\n<ul>\n<li></li>\n</ul>\n<ol>\n<li>有接口，现在 api 里 export 接口，写明接口地址和请求方式</li>\n<li>然后在 store 里引入请求，写 vue 三连环，</li>\n<li>在相应的位置派发 action</li>\n</ol>\n<ul>\n<li>\n<p>路由跳转不是你想跳就能跳的</p>\n</li>\n<li>\n<p>tips：空对象隐式转换为布尔值为真，所以空对象作为条件一定为真</p>\n</li>\n</ul>\n<h2 id=\"导航守卫\"><a class=\"anchor\" href=\"#导航守卫\">#</a> 导航守卫</h2>\n<p>导航：表示进行路由跳转<br />\n守卫：看门的，</p>\n<ul>\n<li>\n<p>全局守卫：全部都要排查。<br />\neg. 皇宫（皇帝，妃子，大臣）大门守卫，全部排查</p>\n</li>\n<li>\n<p>路由独享守卫：是相应的（皇帝，妃子，大臣）毕竟之路上的守卫</p>\n</li>\n<li>\n<p>组件内守卫：已经进去了，但还是要接受排查</p>\n</li>\n</ul>\n<h3 id=\"全局前置守卫routerbeforeeach在路由跳转之前进行判断\"><a class=\"anchor\" href=\"#全局前置守卫routerbeforeeach在路由跳转之前进行判断\">#</a> 全局前置守卫：router.beforeEach（在路由跳转之前进行判断）</h3>\n<p>在 router 中进行全局前置守卫配置:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//to: 可以获取到你要跳转到的那个路由的信息（去哪里）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">//from: 可以获取到你从哪个路由而来的信息（从哪来）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//next: 放行函数，  next () 全部放行 next (path) 放行到指定路径  nextfalse)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 用户登录了才会有 token，未登录一定不会有 token</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 用户信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 用户已经登陆了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 用户已经登陆了还想去 login：不能去，停留在首页</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token operator\">==</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 登录，去得不是 login：home/search/detail/shopcart</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 如果用户名已有</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 没有用户信息，派发 action 让仓库存储用户信息再跳转</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">// 获取用户信息成功</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">await</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserInfo'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token comment\">//token 失效了</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token comment\">// 清除 token</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 没有用户信息</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"trade交易页面组件\"><a class=\"anchor\" href=\"#trade交易页面组件\">#</a> trade（交易）页面组件</h1>\n<ul>\n<li>\n<p>排他：被选中的那个展示样式<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/WPKZDCBG%25HS8L%25WC7NEH$BG.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>import *as 命名 from URL 地址 统一引入<br />\n不需要一个个引入了，所有请求的接口统一接收，并且挂载到 vue.prototype 原型对象身上。到时候组件直接用就行，不用一个个引了</p>\n</li>\n</ul>\n<p>在 main.js 中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 统一接口 api 文件夹里面全部请求函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">API</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/api\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 全局事件总线</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$<span class=\"token constant\">API</span> <span class=\"token operator\">=</span> <span class=\"token constant\">API</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>不用 vuex 怎么获取支付信息？</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">// 订单号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token literal-property property\">order</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 提交订单</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">submitOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 交易编码</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> tradeNo <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderInfo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$<span class=\"token constant\">API</span><span class=\"token punctuation\">.</span><span class=\"token function\">reqSubmitOrder</span><span class=\"token punctuation\">(</span>tradeNo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 提交订单成功</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderId <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 路由跳转 + 路由传参</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/pay?orderId=\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 提交订单失败</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>注意：不要在生命周期函数中使用 async</li>\n</ul>\n<h1 id=\"elementui-使用按需引入\"><a class=\"anchor\" href=\"#elementui-使用按需引入\">#</a> elementUI 使用 + 按需引入</h1>\n<ul>\n<li>已经学习过的组件库<br />\n react:antd [PC]、antd-mobile [移动端]<br />\n Vue:ElementUIp [PC]、vant [移动端]</li>\n</ul>\n<ol>\n<li>安装</li>\n</ol>\n<pre><code># 选择一个你喜欢的包管理器\n\n# NPM\n$ npm install element-plus --save\n\n# Yarn\n$ yarn add element-plus\n\n# pnpm\n$ pnpm install element-plus\n</code></pre>\n<ol start=\"2\">\n<li>引入 elementUI</li>\n</ol>\n<ul>\n<li>完全引入</li>\n</ul>\n<pre><code>// main.ts\nimport &#123; createApp &#125; from 'vue'\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport App from './App.vue'\n\nconst app = createApp(App)\n\napp.use(ElementPlus)\napp.mount('#app')\n</code></pre>\n<ul>\n<li>按需导入</li>\n</ul>\n<pre><code># 自动导入，首先安装unplugin-vue-components 和 unplugin-auto-import这两款插件\nnpm install -D unplugin-vue-components unplugin-auto-import\n</code></pre>\n<p>然后把下列代码插入到你的 Vite 或 Webpack 的配置文件中</p>\n<p>Webpack：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// webpack.config.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> AutoImport <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-auto-import/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> Components <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/webpack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> ElementPlusResolver <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unplugin-vue-components/resolvers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">plugins</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">AutoImport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">Components</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token literal-property property\">resolvers</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token function\">ElementPlusResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>el-config-provider</span> <span class=\"token attr-name\">:size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>size<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:z-index</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zIndex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>app</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>el-config-provider</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ElConfigProvider <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"element-plus\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      ElConfigProvider<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">zIndex</span><span class=\"token operator\">:</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">size</span><span class=\"token operator\">:</span> <span class=\"token string\">\"small\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>ElementUI 注册组件的时候，还有一种写法，挂在原型上。</li>\n</ul>\n<h1 id=\"支付\"><a class=\"anchor\" href=\"#支付\">#</a> 支付</h1>\n<ul>\n<li>生成二维码</li>\n</ul>\n<pre><code>npm i qrcode --save\n</code></pre>\n<p>注意：${url} 和 / 之间要有一个空格，不然图片不显示<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/DG%5DS224H69@C0NQ%5DI%5B%7BMQBD.png\" alt=\"\" /></p>\n<ul>\n<li>弹出二维码后，需要知道支付成功 | 失败<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/3QAX\" alt=\"\" /> 5 [NXJTG9`ES@6~MA] 4.png)</li>\n</ul>\n<h1 id=\"二级路由\"><a class=\"anchor\" href=\"#二级路由\">#</a> 二级路由</h1>\n<ol>\n<li>拆分<br />\n将不变的内容留下，将会根据点击发生页面变化的内容拆分到子组件中</li>\n</ol>\n<ul>\n<li>注意拆分后路径会有不对的地方，记得改</li>\n<li>样式，把父组件中样式的 scoped 去掉</li>\n</ul>\n<ol start=\"2\">\n<li>在 router.js 中引入二级路由</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入二级路由组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> MyOrder <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/views/Center/myOrder\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> GroupOrder <span class=\"token keyword\">from</span> <span class=\"token string\">\"@/views/Center/groupOrder\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 配置路由</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Center<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">isShow</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 二级路由组件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> MyOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"groupOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> GroupOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>\n<p>把点击会发生路由变化的地方换成 <code>&lt;router-linl to=&quot;/center/myorder&quot;&gt;我的订单&lt;/router-linl&gt;</code>  包裹，并设置二级路由组件的出口位置，让组件显示： <code>&lt;router-view&gt;&lt;/router-view&gt;</code></p>\n</li>\n<li>\n<p>重定向。设置默认显示的路由（不能让用户一切换过来看一个半边空白的页面，还得点击才能显示）<br />\nrouter.js 中：</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> Center<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">isShow</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 二级路由组件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> MyOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"groupOrder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token literal-property property\">component</span><span class=\"token operator\">:</span> GroupOrder<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">// 重定向</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token literal-property property\">redirect</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/center/myorder\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>面试的时候问是否封装过组件：分页器，日历</p>\n</li>\n<li>\n<p>完善路由守卫</p>\n</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局前置守卫</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//to: 可以获取到你要跳转到的那个路由的信息（去哪里）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">//from: 可以获取到你从哪个路由而来的信息（从哪来）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//next: 放行函数，  next () 全部放行 next (path) 放行到指定路径  nextfalse)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 用户登录了才会有 token，未登录一定不会有 token</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> token <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 用户信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 用户已经登陆了</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 用户已经登陆了还想去 login：不能去，停留在首页</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token operator\">==</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 登录，去得不是 login：home/search/detail/shopcart</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 如果用户名已有</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 没有用户信息，派发 action 让仓库存储用户信息再跳转</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          <span class=\"token comment\">// 获取用户信息成功</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">await</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getUserInfo'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token comment\">//token 失效了</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>          <span class=\"token comment\">// 清除 token</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 未登录：不能去交易相关、不能去支付相关【pay、paysuccess】、不能去个人中心</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">// 未登录想去上面这些路由 --- 跳转到登录页</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">let</span> toPath <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>toPath<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/trade'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>toPath<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/pay'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>toPath<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/center'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token comment\">// 把未登录的时候想去而没有去成的信息，存储于地址栏中【路由】</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login?redirect='</span><span class=\"token operator\">+</span>toPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token comment\">// 去的不是上面这些路由（home、search、shopCard）--- 放行</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>登录后不是回首页，而是到你之前点击却被提示登录的那个页面<br />\n<img data-src=\"https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0FT%7DO~%7BM41H%7D%250OJXEEEOU1.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>路由独享守卫<br />\n！[](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LyhKNTYlMjUxQEFETyUyNVZWQkpSJFclNjBPJTdCVUUucG5nKQ==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/(J56%1@ADO%VVBJR$W`O{UE.png)</span></p>\n</li>\n<li>\n<p>组件内守卫</p>\n</li>\n</ul>\n<h1 id=\"图片懒加载-vue-lazyload\"><a class=\"anchor\" href=\"#图片懒加载-vue-lazyload\">#</a> 图片懒加载 vue-lazyload</h1>\n<ul>\n<li>\n<p>使用插件 <code>Vue.use(VueLazyload)</code> ,vuex，vuerouter 也是插件</p>\n</li>\n<li>\n<p>图片、json 可以直接引用，它们是默认对外暴露的</p>\n</li>\n</ul>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L0pZJTYwJCRA\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/JY`$$@</span>](M45T3}YVVE9{VN6.png)</p>\n<h1 id=\"封装自定义插件\"><a class=\"anchor\" href=\"#封装自定义插件\">#</a> 封装自定义插件</h1>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0L1lYVFcoWjY5JTVCXzhTTjVQRTNNOFRaRE4ucG5nKQ==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/YXTW(Z69[_8SN5PE3M8TZDN.png)</span></p>\n<h1 id=\"vee-validate-表单验证-了解\"><a class=\"anchor\" href=\"#vee-validate-表单验证-了解\">#</a> vee-validate 表单验证 （了解）</h1>\n<ol>\n<li>安装</li>\n<li>引入</li>\n<li>使用</li>\n</ol>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0Lw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</span>[_`IH(QLVOZKL0HD33}2ZU7.png)</p>\n<p>![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0Lw==\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/</span>]98(9U9F(9L_8)E[{IO~~J6.png)</p>\n<h1 id=\"路由懒加载\"><a class=\"anchor\" href=\"#路由懒加载\">#</a> 路由懒加载</h1>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效。</p>\n<h1 id=\"打包上线\"><a class=\"anchor\" href=\"#打包上线\">#</a> 打包上线</h1>\n<ol>\n<li>打包 <code>npm run build</code></li>\n</ol>\n<ul>\n<li>map<br />\n 项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。<br />\n有了 map 就可以像未加密的代码一样，准确输出是哪一行有错。<br />\n没有，该文件如果项目不需要是可以去掉的<br />\n vue.config.js 配置：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">productionSourceMap</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>\n<p>购买服务器</p>\n</li>\n<li>\n<p>设置安全组</p>\n</li>\n<li>\n<p>利用 Xshell 工具登录服务器</p>\n</li>\n<li>\n<p>利用 Xftp 把本地文件上传到云服务器</p>\n</li>\n</ol>\n<ul>\n<li>\n<p>问题 1：刚刚在服务器上：/root/www/shangpinhui/dist<br />\n 如何保证一访问 ip 地址就展示 dist 内容而不是展示其他文件夹内容？<br />\n解决：配置一些东西</p>\n</li>\n<li>\n<p>问题 2：项目数据来自于本地服务器，如何让用户在访问买的 ip 地址时捞到本地服务器的数据？<br />\n解决：nginx 反向代理</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li>\n<p>nginx 反向代理<br />\n配置：</p>\n</li>\n<li>\n<p>Xshell 进入  <code>/</code>  根目录下有一个 <code>etc</code>  目录，其下又有一个 <code>nginx</code>  目录。安装 nginx， <code>yum install nginx</code></p>\n</li>\n<li>\n<p>安装完 nginx 服务器以后，nginx 目录下会多一个 ngxinx.conf 文件，在这个文件中进行配置。<br />\n通过 <code>vim nginx.conf</code>  指令进行编辑，主要添加如下两项：<br />\n![](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ldWNsaS0xMzE0MzU5MTYwLmNvcy5hcC1iZWlqaW5nLm15cWNsb3VkLmNvbS90ZXN0LzB+Mkow\">https://eucli-1314359160.cos.ap-beijing.myqcloud.com/test/0~2J0</span> <code>BXN%A6($%G2O8AS]8.png) 按 INSERT 编辑，编辑完 ESC 退出编辑，输入</code> :wq` 保存</p>\n</li>\n<li>\n<p><code>serve nginx start</code></p>\n</li>\n</ol>\n<ul>\n<li>Linux<br />\n <code>/</code>  是 linux 系统的根目录</li>\n</ul>\n<p>常见 linux 命令</p>\n<ul>\n<li><code>ls</code> ：列出你想要的目录的内容（默认情况下为当前目录）</li>\n<li><code>alias</code> ：允许你在 shell 会话中定义临时别名</li>\n<li><code>unalias</code> ：从已定义的别名中删除 alias</li>\n<li><code>pwd</code> ：输出你所在目录的绝对路径</li>\n<li><code>cd</code> ：更改目录<br />\n <code>cd</code> ： 进入 home 文件夹<br />\n <code>cd ..</code> ：向上移动一个级别<br />\n <code>cd -</code> ：返回上一个目录</li>\n<li><code>cp</code> ：复制文件和文件夹。要使用 cp 命令，只需将其与源文件和目标文件一起键入即可： <code>cp file_to_copy.txt new_file.txt</code></li>\n<li><code>rm</code> ：删除文件和目录</li>\n<li><code>mv</code> ：在文件系统中移动（或重命名）文件和目录</li>\n<li><code>mkdir</code> ：在 shell 中创建文件夹</li>\n<li><code>man</code> ：显示任何其他命令的手册页面（只要有）。</li>\n<li><code>chmod</code> ：快速更改文件的模式（权限)，文件的基本权限包括：r (只读)、w (写入)、x (执行)</li>\n<li><code>sudo</code> ：此命令代表 “超级用户 do”，它允许您在运行特定命令时充当超级用户或根用户。这就是 Linux 如何保护自己，防止用户意外修改机器的文件系统或安装不合适的软件包。</li>\n<li><code>vim</code> ：编辑文件</li>\n</ul>\n",
            "tags": [
                "实战"
            ]
        }
    ]
}